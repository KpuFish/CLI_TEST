
CLI_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .tag          00000018  08010000  08010000  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .text         00007c24  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a70  08007dc8  08007dc8  00017dc8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  08008838  08008838  00030018  2**0
                  CONTENTS
  5 .ARM          00000008  08008838  08008838  00018838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  08008840  08008840  00030018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  08008840  08008840  00018840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  08008844  08008844  00018844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000001dc  20000000  08008848  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000174  200001dc  08008a24  000201dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000c00  20000350  08008a24  00020350  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030018  2**0
                  CONTENTS, READONLY
 13 .debug_info   000129ae  00000000  00000000  00030048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003157  00000000  00000000  000429f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fe8  00000000  00000000  00045b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e90  00000000  00000000  00046b38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018d5f  00000000  00000000  000479c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001428a  00000000  00000000  00060727  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000907f8  00000000  00000000  000749b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001051a9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005348  00000000  00000000  001051fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007dac 	.word	0x08007dac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08007dac 	.word	0x08007dac

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bec:	f000 b974 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	4604      	mov	r4, r0
 8000c10:	468e      	mov	lr, r1
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d14d      	bne.n	8000cb2 <__udivmoddi4+0xaa>
 8000c16:	428a      	cmp	r2, r1
 8000c18:	4694      	mov	ip, r2
 8000c1a:	d969      	bls.n	8000cf0 <__udivmoddi4+0xe8>
 8000c1c:	fab2 f282 	clz	r2, r2
 8000c20:	b152      	cbz	r2, 8000c38 <__udivmoddi4+0x30>
 8000c22:	fa01 f302 	lsl.w	r3, r1, r2
 8000c26:	f1c2 0120 	rsb	r1, r2, #32
 8000c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c32:	ea41 0e03 	orr.w	lr, r1, r3
 8000c36:	4094      	lsls	r4, r2
 8000c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c3c:	0c21      	lsrs	r1, r4, #16
 8000c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c42:	fa1f f78c 	uxth.w	r7, ip
 8000c46:	fb08 e316 	mls	r3, r8, r6, lr
 8000c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c4e:	fb06 f107 	mul.w	r1, r6, r7
 8000c52:	4299      	cmp	r1, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x64>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c5e:	f080 811f 	bcs.w	8000ea0 <__udivmoddi4+0x298>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 811c 	bls.w	8000ea0 <__udivmoddi4+0x298>
 8000c68:	3e02      	subs	r6, #2
 8000c6a:	4463      	add	r3, ip
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c74:	fb08 3310 	mls	r3, r8, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 f707 	mul.w	r7, r0, r7
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	d90a      	bls.n	8000c9a <__udivmoddi4+0x92>
 8000c84:	eb1c 0404 	adds.w	r4, ip, r4
 8000c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8c:	f080 810a 	bcs.w	8000ea4 <__udivmoddi4+0x29c>
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	f240 8107 	bls.w	8000ea4 <__udivmoddi4+0x29c>
 8000c96:	4464      	add	r4, ip
 8000c98:	3802      	subs	r0, #2
 8000c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c9e:	1be4      	subs	r4, r4, r7
 8000ca0:	2600      	movs	r6, #0
 8000ca2:	b11d      	cbz	r5, 8000cac <__udivmoddi4+0xa4>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cac:	4631      	mov	r1, r6
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xc2>
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	f000 80ef 	beq.w	8000e9a <__udivmoddi4+0x292>
 8000cbc:	2600      	movs	r6, #0
 8000cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc2:	4630      	mov	r0, r6
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f683 	clz	r6, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d14a      	bne.n	8000d68 <__udivmoddi4+0x160>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd4>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80f9 	bhi.w	8000ece <__udivmoddi4+0x2c6>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	469e      	mov	lr, r3
 8000ce6:	2d00      	cmp	r5, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa4>
 8000cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa4>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xec>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 8092 	bne.w	8000e22 <__udivmoddi4+0x21a>
 8000cfe:	eba1 010c 	sub.w	r1, r1, ip
 8000d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d06:	fa1f fe8c 	uxth.w	lr, ip
 8000d0a:	2601      	movs	r6, #1
 8000d0c:	0c20      	lsrs	r0, r4, #16
 8000d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d12:	fb07 1113 	mls	r1, r7, r3, r1
 8000d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d1a:	fb0e f003 	mul.w	r0, lr, r3
 8000d1e:	4288      	cmp	r0, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0x12c>
 8000d22:	eb1c 0101 	adds.w	r1, ip, r1
 8000d26:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x12a>
 8000d2c:	4288      	cmp	r0, r1
 8000d2e:	f200 80cb 	bhi.w	8000ec8 <__udivmoddi4+0x2c0>
 8000d32:	4643      	mov	r3, r8
 8000d34:	1a09      	subs	r1, r1, r0
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d44:	fb0e fe00 	mul.w	lr, lr, r0
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d908      	bls.n	8000d5e <__udivmoddi4+0x156>
 8000d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d54:	d202      	bcs.n	8000d5c <__udivmoddi4+0x154>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f200 80bb 	bhi.w	8000ed2 <__udivmoddi4+0x2ca>
 8000d5c:	4608      	mov	r0, r1
 8000d5e:	eba4 040e 	sub.w	r4, r4, lr
 8000d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d66:	e79c      	b.n	8000ca2 <__udivmoddi4+0x9a>
 8000d68:	f1c6 0720 	rsb	r7, r6, #32
 8000d6c:	40b3      	lsls	r3, r6
 8000d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d76:	fa20 f407 	lsr.w	r4, r0, r7
 8000d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d7e:	431c      	orrs	r4, r3
 8000d80:	40f9      	lsrs	r1, r7
 8000d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d86:	fa00 f306 	lsl.w	r3, r0, r6
 8000d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d8e:	0c20      	lsrs	r0, r4, #16
 8000d90:	fa1f fe8c 	uxth.w	lr, ip
 8000d94:	fb09 1118 	mls	r1, r9, r8, r1
 8000d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000da0:	4288      	cmp	r0, r1
 8000da2:	fa02 f206 	lsl.w	r2, r2, r6
 8000da6:	d90b      	bls.n	8000dc0 <__udivmoddi4+0x1b8>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f108 3aff 	add.w	sl, r8, #4294967295
 8000db0:	f080 8088 	bcs.w	8000ec4 <__udivmoddi4+0x2bc>
 8000db4:	4288      	cmp	r0, r1
 8000db6:	f240 8085 	bls.w	8000ec4 <__udivmoddi4+0x2bc>
 8000dba:	f1a8 0802 	sub.w	r8, r8, #2
 8000dbe:	4461      	add	r1, ip
 8000dc0:	1a09      	subs	r1, r1, r0
 8000dc2:	b2a4      	uxth	r4, r4
 8000dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd4:	458e      	cmp	lr, r1
 8000dd6:	d908      	bls.n	8000dea <__udivmoddi4+0x1e2>
 8000dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8000ddc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000de0:	d26c      	bcs.n	8000ebc <__udivmoddi4+0x2b4>
 8000de2:	458e      	cmp	lr, r1
 8000de4:	d96a      	bls.n	8000ebc <__udivmoddi4+0x2b4>
 8000de6:	3802      	subs	r0, #2
 8000de8:	4461      	add	r1, ip
 8000dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dee:	fba0 9402 	umull	r9, r4, r0, r2
 8000df2:	eba1 010e 	sub.w	r1, r1, lr
 8000df6:	42a1      	cmp	r1, r4
 8000df8:	46c8      	mov	r8, r9
 8000dfa:	46a6      	mov	lr, r4
 8000dfc:	d356      	bcc.n	8000eac <__udivmoddi4+0x2a4>
 8000dfe:	d053      	beq.n	8000ea8 <__udivmoddi4+0x2a0>
 8000e00:	b15d      	cbz	r5, 8000e1a <__udivmoddi4+0x212>
 8000e02:	ebb3 0208 	subs.w	r2, r3, r8
 8000e06:	eb61 010e 	sbc.w	r1, r1, lr
 8000e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e12:	40f1      	lsrs	r1, r6
 8000e14:	431f      	orrs	r7, r3
 8000e16:	e9c5 7100 	strd	r7, r1, [r5]
 8000e1a:	2600      	movs	r6, #0
 8000e1c:	4631      	mov	r1, r6
 8000e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e22:	f1c2 0320 	rsb	r3, r2, #32
 8000e26:	40d8      	lsrs	r0, r3
 8000e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e30:	4091      	lsls	r1, r2
 8000e32:	4301      	orrs	r1, r0
 8000e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e38:	fa1f fe8c 	uxth.w	lr, ip
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3610 	mls	r6, r7, r0, r3
 8000e44:	0c0b      	lsrs	r3, r1, #16
 8000e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	fa04 f402 	lsl.w	r4, r4, r2
 8000e54:	d908      	bls.n	8000e68 <__udivmoddi4+0x260>
 8000e56:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e5e:	d22f      	bcs.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e60:	429e      	cmp	r6, r3
 8000e62:	d92d      	bls.n	8000ec0 <__udivmoddi4+0x2b8>
 8000e64:	3802      	subs	r0, #2
 8000e66:	4463      	add	r3, ip
 8000e68:	1b9b      	subs	r3, r3, r6
 8000e6a:	b289      	uxth	r1, r1
 8000e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e70:	fb07 3316 	mls	r3, r7, r6, r3
 8000e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e78:	fb06 f30e 	mul.w	r3, r6, lr
 8000e7c:	428b      	cmp	r3, r1
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x28a>
 8000e80:	eb1c 0101 	adds.w	r1, ip, r1
 8000e84:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e88:	d216      	bcs.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8a:	428b      	cmp	r3, r1
 8000e8c:	d914      	bls.n	8000eb8 <__udivmoddi4+0x2b0>
 8000e8e:	3e02      	subs	r6, #2
 8000e90:	4461      	add	r1, ip
 8000e92:	1ac9      	subs	r1, r1, r3
 8000e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e98:	e738      	b.n	8000d0c <__udivmoddi4+0x104>
 8000e9a:	462e      	mov	r6, r5
 8000e9c:	4628      	mov	r0, r5
 8000e9e:	e705      	b.n	8000cac <__udivmoddi4+0xa4>
 8000ea0:	4606      	mov	r6, r0
 8000ea2:	e6e3      	b.n	8000c6c <__udivmoddi4+0x64>
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	e6f8      	b.n	8000c9a <__udivmoddi4+0x92>
 8000ea8:	454b      	cmp	r3, r9
 8000eaa:	d2a9      	bcs.n	8000e00 <__udivmoddi4+0x1f8>
 8000eac:	ebb9 0802 	subs.w	r8, r9, r2
 8000eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000eb4:	3801      	subs	r0, #1
 8000eb6:	e7a3      	b.n	8000e00 <__udivmoddi4+0x1f8>
 8000eb8:	4646      	mov	r6, r8
 8000eba:	e7ea      	b.n	8000e92 <__udivmoddi4+0x28a>
 8000ebc:	4620      	mov	r0, r4
 8000ebe:	e794      	b.n	8000dea <__udivmoddi4+0x1e2>
 8000ec0:	4640      	mov	r0, r8
 8000ec2:	e7d1      	b.n	8000e68 <__udivmoddi4+0x260>
 8000ec4:	46d0      	mov	r8, sl
 8000ec6:	e77b      	b.n	8000dc0 <__udivmoddi4+0x1b8>
 8000ec8:	3b02      	subs	r3, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	e732      	b.n	8000d34 <__udivmoddi4+0x12c>
 8000ece:	4630      	mov	r0, r6
 8000ed0:	e709      	b.n	8000ce6 <__udivmoddi4+0xde>
 8000ed2:	4464      	add	r4, ip
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	e742      	b.n	8000d5e <__udivmoddi4+0x156>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <__io_putchar>:
}
#endif

#if 1
int __io_putchar(int ch)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
    #if USE_TX_DMA
	HAL_UART_Transmit_DMA( &huart2, (uint8_t *)&ch, 1);
    #else
    HAL_UART_Transmit( &huart2, (uint8_t *)&ch, 1, 100);
 8000ee4:	1d39      	adds	r1, r7, #4
 8000ee6:	2364      	movs	r3, #100	; 0x64
 8000ee8:	2201      	movs	r2, #1
 8000eea:	4804      	ldr	r0, [pc, #16]	; (8000efc <__io_putchar+0x20>)
 8000eec:	f002 fcd5 	bl	800389a <HAL_UART_Transmit>
    #endif
	return ch;
 8000ef0:	687b      	ldr	r3, [r7, #4]
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	200002cc 	.word	0x200002cc

08000f00 <Convert_Char>:
//----------------------------------------
// CLI UART CALLBACK for stm32f
//----------------------------------------
/* USER CODE BEGIN 1 */
void Convert_Char(uint8_t *byte)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
    #if 1 // LOW to UP
    if ((*byte >= LOWER_A) && (*byte <= LOWER_Z)) {
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2b60      	cmp	r3, #96	; 0x60
 8000f0e:	d909      	bls.n	8000f24 <Convert_Char+0x24>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	2b7a      	cmp	r3, #122	; 0x7a
 8000f16:	d805      	bhi.n	8000f24 <Convert_Char+0x24>
        *byte -= CONVERT_CHAR_OFFSET;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	3b20      	subs	r3, #32
 8000f1e:	b2da      	uxtb	r2, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	701a      	strb	r2, [r3, #0]
    #else
    if ((*byte >= UPPER_A) && (*byte <= UPPER_Z)) {
        *byte += CONVERT_CHAR_OFFSET;
    }
    #endif
}
 8000f24:	bf00      	nop
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART2)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a29      	ldr	r2, [pc, #164]	; (8000fe4 <HAL_UART_RxCpltCallback+0xb4>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d14c      	bne.n	8000fdc <HAL_UART_RxCpltCallback+0xac>
  {
        // echo back test
        //HAL_UART_Transmit(&huart2, &uart_rx_byte, UART_BYTE, UART_TIME_OUT);
        if (uart_rx_byte == ASCII_LF || uart_rx_byte == ASCII_CR) {
 8000f42:	4b29      	ldr	r3, [pc, #164]	; (8000fe8 <HAL_UART_RxCpltCallback+0xb8>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	2b0a      	cmp	r3, #10
 8000f48:	d003      	beq.n	8000f52 <HAL_UART_RxCpltCallback+0x22>
 8000f4a:	4b27      	ldr	r3, [pc, #156]	; (8000fe8 <HAL_UART_RxCpltCallback+0xb8>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	2b0d      	cmp	r3, #13
 8000f50:	d104      	bne.n	8000f5c <HAL_UART_RxCpltCallback+0x2c>
            cli.rx_done  = CLI_READY;
 8000f52:	4b26      	ldr	r3, [pc, #152]	; (8000fec <HAL_UART_RxCpltCallback+0xbc>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
 8000f5a:	e03a      	b.n	8000fd2 <HAL_UART_RxCpltCallback+0xa2>
        }
         else if (uart_rx_byte == ASCII_BACKSPACE) {
 8000f5c:	4b22      	ldr	r3, [pc, #136]	; (8000fe8 <HAL_UART_RxCpltCallback+0xb8>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2b08      	cmp	r3, #8
 8000f62:	d11c      	bne.n	8000f9e <HAL_UART_RxCpltCallback+0x6e>
            if (cli.rx_index > 0) {
 8000f64:	4b21      	ldr	r3, [pc, #132]	; (8000fec <HAL_UART_RxCpltCallback+0xbc>)
 8000f66:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d013      	beq.n	8000f96 <HAL_UART_RxCpltCallback+0x66>
                cli.buffer[--cli.rx_index] = 0;
 8000f6e:	4b1f      	ldr	r3, [pc, #124]	; (8000fec <HAL_UART_RxCpltCallback+0xbc>)
 8000f70:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8000f74:	3b01      	subs	r3, #1
 8000f76:	b2da      	uxtb	r2, r3
 8000f78:	4b1c      	ldr	r3, [pc, #112]	; (8000fec <HAL_UART_RxCpltCallback+0xbc>)
 8000f7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8000f7e:	4b1b      	ldr	r3, [pc, #108]	; (8000fec <HAL_UART_RxCpltCallback+0xbc>)
 8000f80:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8000f84:	461a      	mov	r2, r3
 8000f86:	4b19      	ldr	r3, [pc, #100]	; (8000fec <HAL_UART_RxCpltCallback+0xbc>)
 8000f88:	2100      	movs	r1, #0
 8000f8a:	5499      	strb	r1, [r3, r2]
                printf(" %c",  ASCII_BACKSPACE);
 8000f8c:	2108      	movs	r1, #8
 8000f8e:	4818      	ldr	r0, [pc, #96]	; (8000ff0 <HAL_UART_RxCpltCallback+0xc0>)
 8000f90:	f004 fbbe 	bl	8005710 <iprintf>
 8000f94:	e01d      	b.n	8000fd2 <HAL_UART_RxCpltCallback+0xa2>
            } else {
                printf(" ");
 8000f96:	2020      	movs	r0, #32
 8000f98:	f004 fbd2 	bl	8005740 <putchar>
 8000f9c:	e019      	b.n	8000fd2 <HAL_UART_RxCpltCallback+0xa2>
            }
        }
         else {
            Convert_Char(&uart_rx_byte);
 8000f9e:	4812      	ldr	r0, [pc, #72]	; (8000fe8 <HAL_UART_RxCpltCallback+0xb8>)
 8000fa0:	f7ff ffae 	bl	8000f00 <Convert_Char>
            cli.buffer[cli.rx_index] = uart_rx_byte;
 8000fa4:	4b11      	ldr	r3, [pc, #68]	; (8000fec <HAL_UART_RxCpltCallback+0xbc>)
 8000fa6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8000faa:	461a      	mov	r2, r3
 8000fac:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <HAL_UART_RxCpltCallback+0xb8>)
 8000fae:	7819      	ldrb	r1, [r3, #0]
 8000fb0:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <HAL_UART_RxCpltCallback+0xbc>)
 8000fb2:	5499      	strb	r1, [r3, r2]
            cli.rx_index = (cli.rx_index + 1) % UART_BUF_MAX;
 8000fb4:	4b0d      	ldr	r3, [pc, #52]	; (8000fec <HAL_UART_RxCpltCallback+0xbc>)
 8000fb6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8000fba:	3301      	adds	r3, #1
 8000fbc:	425a      	negs	r2, r3
 8000fbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000fc2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000fc6:	bf58      	it	pl
 8000fc8:	4253      	negpl	r3, r2
 8000fca:	b2da      	uxtb	r2, r3
 8000fcc:	4b07      	ldr	r3, [pc, #28]	; (8000fec <HAL_UART_RxCpltCallback+0xbc>)
 8000fce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
        }
        // uart rxne pending clear
        HAL_UART_Receive_IT(&huart2, &uart_rx_byte, UART_BYTE);
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	4904      	ldr	r1, [pc, #16]	; (8000fe8 <HAL_UART_RxCpltCallback+0xb8>)
 8000fd6:	4807      	ldr	r0, [pc, #28]	; (8000ff4 <HAL_UART_RxCpltCallback+0xc4>)
 8000fd8:	f002 fcf1 	bl	80039be <HAL_UART_Receive_IT>
  }
}
 8000fdc:	bf00      	nop
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	40004400 	.word	0x40004400
 8000fe8:	200001f8 	.word	0x200001f8
 8000fec:	200001fc 	.word	0x200001fc
 8000ff0:	08007e0c 	.word	0x08007e0c
 8000ff4:	200002cc 	.word	0x200002cc

08000ff8 <parser>:
//----------------------------------------


/* CLI PARSER */
int parser(char *cmd)
{
 8000ff8:	b590      	push	{r4, r7, lr}
 8000ffa:	b099      	sub	sp, #100	; 0x64
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
    int    argc = 0;
 8001000:	2300      	movs	r3, #0
 8001002:	65fb      	str	r3, [r7, #92]	; 0x5c
    
#if USE_LAST_CMD
    static char *last_cmd;
#endif

    if (cmd == NULL) {
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d102      	bne.n	8001010 <parser+0x18>
        printf("CMD Error\r\n");
 800100a:	482b      	ldr	r0, [pc, #172]	; (80010b8 <parser+0xc0>)
 800100c:	f004 fc1c 	bl	8005848 <puts>
    }
    
	//----------------------------------------
    // SPLIT THE UART RX STRING
    //----------------------------------------
    argv[argc++] = strtok(cmd, D_DELIMITER);
 8001010:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8001012:	1c63      	adds	r3, r4, #1
 8001014:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001016:	4929      	ldr	r1, [pc, #164]	; (80010bc <parser+0xc4>)
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f004 fceb 	bl	80059f4 <strtok>
 800101e:	4602      	mov	r2, r0
 8001020:	00a3      	lsls	r3, r4, #2
 8001022:	3360      	adds	r3, #96	; 0x60
 8001024:	443b      	add	r3, r7
 8001026:	f843 2c58 	str.w	r2, [r3, #-88]

    while (1) {
        argv[argc] = strtok(NULL, D_DELIMITER);
 800102a:	4924      	ldr	r1, [pc, #144]	; (80010bc <parser+0xc4>)
 800102c:	2000      	movs	r0, #0
 800102e:	f004 fce1 	bl	80059f4 <strtok>
 8001032:	4602      	mov	r2, r0
 8001034:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001036:	009b      	lsls	r3, r3, #2
 8001038:	3360      	adds	r3, #96	; 0x60
 800103a:	443b      	add	r3, r7
 800103c:	f843 2c58 	str.w	r2, [r3, #-88]
        
        if (argv[argc] == NULL) {
 8001040:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	3360      	adds	r3, #96	; 0x60
 8001046:	443b      	add	r3, r7
 8001048:	f853 3c58 	ldr.w	r3, [r3, #-88]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d003      	beq.n	8001058 <parser+0x60>
            break;
        }
        argc++;
 8001050:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001052:	3301      	adds	r3, #1
 8001054:	65fb      	str	r3, [r7, #92]	; 0x5c
        argv[argc] = strtok(NULL, D_DELIMITER);
 8001056:	e7e8      	b.n	800102a <parser+0x32>
            break;
 8001058:	bf00      	nop
#endif

    //----------------------------------------
    // FIND THE MATCHED STRING
    //----------------------------------------
    for (int cnt = 0; cmd_list[cnt].name != NULL; cnt++) {
 800105a:	2300      	movs	r3, #0
 800105c:	65bb      	str	r3, [r7, #88]	; 0x58
 800105e:	e018      	b.n	8001092 <parser+0x9a>
        if (strcmp(cmd_list[cnt].name, argv[0]) == CLI_MATCH) {
 8001060:	4a17      	ldr	r2, [pc, #92]	; (80010c0 <parser+0xc8>)
 8001062:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001064:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001068:	68ba      	ldr	r2, [r7, #8]
 800106a:	4611      	mov	r1, r2
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff f8b7 	bl	80001e0 <strcmp>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d109      	bne.n	800108c <parser+0x94>
            cmd_list[cnt].func(argc, argv);
 8001078:	4a11      	ldr	r2, [pc, #68]	; (80010c0 <parser+0xc8>)
 800107a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800107c:	00db      	lsls	r3, r3, #3
 800107e:	4413      	add	r3, r2
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f107 0208 	add.w	r2, r7, #8
 8001086:	4611      	mov	r1, r2
 8001088:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800108a:	4798      	blx	r3
    for (int cnt = 0; cmd_list[cnt].name != NULL; cnt++) {
 800108c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800108e:	3301      	adds	r3, #1
 8001090:	65bb      	str	r3, [r7, #88]	; 0x58
 8001092:	4a0b      	ldr	r2, [pc, #44]	; (80010c0 <parser+0xc8>)
 8001094:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001096:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d1e0      	bne.n	8001060 <parser+0x68>
#if USE_LAST_CMD
    // Last Commad Copy
    strcpy(last_cmd, argv[0]);
#endif

    memset(&cli, 0x0, sizeof(CLI_t));
 800109e:	2282      	movs	r2, #130	; 0x82
 80010a0:	2100      	movs	r1, #0
 80010a2:	4808      	ldr	r0, [pc, #32]	; (80010c4 <parser+0xcc>)
 80010a4:	f003 fec2 	bl	8004e2c <memset>
    printf(" $Fish >> ");
 80010a8:	4807      	ldr	r0, [pc, #28]	; (80010c8 <parser+0xd0>)
 80010aa:	f004 fb31 	bl	8005710 <iprintf>
    if (strcmp(last_command, LAST_CMD) == CLI_MATCH) {
        printf("%s", last_command);
    }
#endif

    return LIST_NOT_FOUND;
 80010ae:	2301      	movs	r3, #1
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3764      	adds	r7, #100	; 0x64
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd90      	pop	{r4, r7, pc}
 80010b8:	08007e10 	.word	0x08007e10
 80010bc:	08007e1c 	.word	0x08007e1c
 80010c0:	08008190 	.word	0x08008190
 80010c4:	200001fc 	.word	0x200001fc
 80010c8:	08007e20 	.word	0x08007e20

080010cc <cbf_boot_logo>:

//----------------------------------------
// CALL BACK FUNCTION
//----------------------------------------
int cbf_boot_logo(int argc, char *argv[])
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
 80010d4:	6039      	str	r1, [r7, #0]
    CONSOLE_SPLIT;
 80010d6:	4813      	ldr	r0, [pc, #76]	; (8001124 <cbf_boot_logo+0x58>)
 80010d8:	f004 fbb6 	bl	8005848 <puts>
    #if 1 // TYPE 1
    printf("╭━━━╮///╭╮/////\r\n");
 80010dc:	4812      	ldr	r0, [pc, #72]	; (8001128 <cbf_boot_logo+0x5c>)
 80010de:	f004 fbb3 	bl	8005848 <puts>
    printf("┃╭━━╯///┃┃/////\r\n");
 80010e2:	4812      	ldr	r0, [pc, #72]	; (800112c <cbf_boot_logo+0x60>)
 80010e4:	f004 fbb0 	bl	8005848 <puts>
    printf("┃╰━━┳┳━━┫╰━╮///\r\n");
 80010e8:	4811      	ldr	r0, [pc, #68]	; (8001130 <cbf_boot_logo+0x64>)
 80010ea:	f004 fbad 	bl	8005848 <puts>
    printf("┃╭━━╋┫━━┫╭╮┃///*%s\r\n", tag.fw_name);
 80010ee:	4b11      	ldr	r3, [pc, #68]	; (8001134 <cbf_boot_logo+0x68>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4619      	mov	r1, r3
 80010f4:	4810      	ldr	r0, [pc, #64]	; (8001138 <cbf_boot_logo+0x6c>)
 80010f6:	f004 fb0b 	bl	8005710 <iprintf>
    printf("┃┃//┃┣━━┃┃┃┃///*%s\r\n", tag.fw_date);
 80010fa:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <cbf_boot_logo+0x68>)
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	4619      	mov	r1, r3
 8001100:	480e      	ldr	r0, [pc, #56]	; (800113c <cbf_boot_logo+0x70>)
 8001102:	f004 fb05 	bl	8005710 <iprintf>
    printf("╰╯//╰┻━━┻╯╰╯\r\n");
 8001106:	480e      	ldr	r0, [pc, #56]	; (8001140 <cbf_boot_logo+0x74>)
 8001108:	f004 fb9e 	bl	8005848 <puts>

    #else // TYPE 2
    printf("  *%s\r\n", tag.fw_name);
    printf("  *%s\r\n", tag.fw_date);
    #endif
    CONSOLE_SPLIT;
 800110c:	4805      	ldr	r0, [pc, #20]	; (8001124 <cbf_boot_logo+0x58>)
 800110e:	f004 fb9b 	bl	8005848 <puts>
    printf(" $Fish >> ");
 8001112:	480c      	ldr	r0, [pc, #48]	; (8001144 <cbf_boot_logo+0x78>)
 8001114:	f004 fafc 	bl	8005710 <iprintf>
    return 0;
 8001118:	2300      	movs	r3, #0
}
 800111a:	4618      	mov	r0, r3
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	08007e2c 	.word	0x08007e2c
 8001128:	08007e74 	.word	0x08007e74
 800112c:	08007e94 	.word	0x08007e94
 8001130:	08007eb4 	.word	0x08007eb4
 8001134:	08010000 	.word	0x08010000
 8001138:	08007ee0 	.word	0x08007ee0
 800113c:	08007f10 	.word	0x08007f10
 8001140:	08007f3c 	.word	0x08007f3c
 8001144:	08007e20 	.word	0x08007e20

08001148 <cbf_sn>:

int cbf_sn(int argc, char *argv[])
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
    printf("SN : %06d\r\n", tag.fw_sn);
 8001152:	4b05      	ldr	r3, [pc, #20]	; (8001168 <cbf_sn+0x20>)
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	4619      	mov	r1, r3
 8001158:	4804      	ldr	r0, [pc, #16]	; (800116c <cbf_sn+0x24>)
 800115a:	f004 fad9 	bl	8005710 <iprintf>
    return 0;
 800115e:	2300      	movs	r3, #0
}
 8001160:	4618      	mov	r0, r3
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	08010000 	.word	0x08010000
 800116c:	08007f60 	.word	0x08007f60

08001170 <cbf_help>:

int cbf_help(int argc, char *argv[])
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
    CONSOLE_SPLIT;
 800117a:	4811      	ldr	r0, [pc, #68]	; (80011c0 <cbf_help+0x50>)
 800117c:	f004 fb64 	bl	8005848 <puts>
    printf("Command List \r\n");
 8001180:	4810      	ldr	r0, [pc, #64]	; (80011c4 <cbf_help+0x54>)
 8001182:	f004 fb61 	bl	8005848 <puts>
    CONSOLE_SPLIT;
 8001186:	480e      	ldr	r0, [pc, #56]	; (80011c0 <cbf_help+0x50>)
 8001188:	f004 fb5e 	bl	8005848 <puts>
    for (int cnt = 0; cmd_list[cnt].name != NULL; cnt++) {
 800118c:	2300      	movs	r3, #0
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	e00a      	b.n	80011a8 <cbf_help+0x38>
        printf("%s \r\n", cmd_list[cnt].name);
 8001192:	4a0d      	ldr	r2, [pc, #52]	; (80011c8 <cbf_help+0x58>)
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800119a:	4619      	mov	r1, r3
 800119c:	480b      	ldr	r0, [pc, #44]	; (80011cc <cbf_help+0x5c>)
 800119e:	f004 fab7 	bl	8005710 <iprintf>
    for (int cnt = 0; cmd_list[cnt].name != NULL; cnt++) {
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	3301      	adds	r3, #1
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	4a07      	ldr	r2, [pc, #28]	; (80011c8 <cbf_help+0x58>)
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d1ee      	bne.n	8001192 <cbf_help+0x22>
    }
    return 0;
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	08007e2c 	.word	0x08007e2c
 80011c4:	08007f6c 	.word	0x08007f6c
 80011c8:	08008190 	.word	0x08008190
 80011cc:	08007f7c 	.word	0x08007f7c

080011d0 <cbf_reset>:

int cbf_reset(int argc, char *argv[])
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
    // software reset
    HAL_NVIC_SystemReset();
 80011da:	f000 fe90 	bl	8001efe <HAL_NVIC_SystemReset>
    return 0;
 80011de:	2300      	movs	r3, #0
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <cbf_test>:

int cbf_test(int argc, char *argv[])
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
	printf("argv : %s \r\n", argv[0]);
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4619      	mov	r1, r3
 80011f8:	4805      	ldr	r0, [pc, #20]	; (8001210 <cbf_test+0x28>)
 80011fa:	f004 fa89 	bl	8005710 <iprintf>
	//printf("argc : %d , argv : %s \r\n", argc, argv[1]);
	printf("TEST \r\n");
 80011fe:	4805      	ldr	r0, [pc, #20]	; (8001214 <cbf_test+0x2c>)
 8001200:	f004 fb22 	bl	8005848 <puts>
	return 0;
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	08007f84 	.word	0x08007f84
 8001214:	08007f94 	.word	0x08007f94

08001218 <cbf_xmodem>:


int cbf_xmodem(int argc, char *argv[])
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	6039      	str	r1, [r7, #0]
    uint32_t x_modem_size = 0;
 8001222:	2300      	movs	r3, #0
 8001224:	60bb      	str	r3, [r7, #8]
    // f/w update using uart polling
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8001226:	2026      	movs	r0, #38	; 0x26
 8001228:	f000 fe5b 	bl	8001ee2 <HAL_NVIC_DisableIRQ>
        return 0;
    }

    FLASH_If_Init();
    #else
    FLASH_If_Erase(FLASH_BASE_MAIN_APP);
 800122c:	4817      	ldr	r0, [pc, #92]	; (800128c <cbf_xmodem+0x74>)
 800122e:	f003 fb87 	bl	8004940 <FLASH_If_Erase>
    #endif

    // entering x-modem ...
    uint8_t ret = XMODEM_Rx((uint32_t*)&x_modem_size, (uint32_t *)FLASH_BASE_MAIN_APP);
 8001232:	f107 0308 	add.w	r3, r7, #8
 8001236:	4915      	ldr	r1, [pc, #84]	; (800128c <cbf_xmodem+0x74>)
 8001238:	4618      	mov	r0, r3
 800123a:	f003 fd0b 	bl	8004c54 <XMODEM_Rx>
 800123e:	4603      	mov	r3, r0
 8001240:	73fb      	strb	r3, [r7, #15]
    
    HAL_FLASH_Lock();
 8001242:	f000 ff69 	bl	8002118 <HAL_FLASH_Lock>

    printf("\r\n");
 8001246:	4812      	ldr	r0, [pc, #72]	; (8001290 <cbf_xmodem+0x78>)
 8001248:	f004 fafe 	bl	8005848 <puts>
    CONSOLE_SPLIT;
 800124c:	4811      	ldr	r0, [pc, #68]	; (8001294 <cbf_xmodem+0x7c>)
 800124e:	f004 fafb 	bl	8005848 <puts>
    if (ret == FALSE) {
 8001252:	7bfb      	ldrb	r3, [r7, #15]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d103      	bne.n	8001260 <cbf_xmodem+0x48>
        printf("X-Modem Failed\r\n");
 8001258:	480f      	ldr	r0, [pc, #60]	; (8001298 <cbf_xmodem+0x80>)
 800125a:	f004 faf5 	bl	8005848 <puts>
 800125e:	e004      	b.n	800126a <cbf_xmodem+0x52>

    } else {
        printf("X-Modem Completed size : %d byte\r\n", (int)x_modem_size);
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	4619      	mov	r1, r3
 8001264:	480d      	ldr	r0, [pc, #52]	; (800129c <cbf_xmodem+0x84>)
 8001266:	f004 fa53 	bl	8005710 <iprintf>
    }
    CONSOLE_SPLIT;
 800126a:	480a      	ldr	r0, [pc, #40]	; (8001294 <cbf_xmodem+0x7c>)
 800126c:	f004 faec 	bl	8005848 <puts>

    // resetting uart isr
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001270:	2200      	movs	r2, #0
 8001272:	2100      	movs	r1, #0
 8001274:	2026      	movs	r0, #38	; 0x26
 8001276:	f000 fe0a 	bl	8001e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800127a:	2026      	movs	r0, #38	; 0x26
 800127c:	f000 fe23 	bl	8001ec6 <HAL_NVIC_EnableIRQ>
    return 0;
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3710      	adds	r7, #16
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	08020000 	.word	0x08020000
 8001290:	08007f9c 	.word	0x08007f9c
 8001294:	08007e2c 	.word	0x08007e2c
 8001298:	08007fa0 	.word	0x08007fa0
 800129c:	08007fb0 	.word	0x08007fb0

080012a0 <cbf_dump>:
#define CHAR_SPACE          ' '
#define CHAR_z              'z'
#define CHAR_dot            '.'
#define ASCII_CHAR_DUMP     0
int cbf_dump(int argc, char *argv[])
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
    uint32_t size  = atoi(argv[2]);
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	3308      	adds	r3, #8
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4618      	mov	r0, r3
 80012b2:	f003 fd8d 	bl	8004dd0 <atoi>
 80012b6:	4603      	mov	r3, r0
 80012b8:	60fb      	str	r3, [r7, #12]
    volatile uint32_t *addr = (volatile uint32_t *) strtol(argv[1], NULL, 16);
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	3304      	adds	r3, #4
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2210      	movs	r2, #16
 80012c2:	2100      	movs	r1, #0
 80012c4:	4618      	mov	r0, r3
 80012c6:	f004 fc73 	bl	8005bb0 <strtol>
 80012ca:	4603      	mov	r3, r0
 80012cc:	617b      	str	r3, [r7, #20]

    #if ASCII_CHAR_DUMP
    uint8_t buffer[LINE] = { 0, };
    #endif

    if (addr < (uint32_t*)FLASH_RANGE_START || addr > (uint32_t*)FLASH_RANGE_END) {
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80012d4:	d303      	bcc.n	80012de <cbf_dump+0x3e>
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	4a1f      	ldr	r2, [pc, #124]	; (8001358 <cbf_dump+0xb8>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d907      	bls.n	80012ee <cbf_dump+0x4e>
        printf("Flash Range is 0x%08x ~ 0x%08x\r\n", FLASH_RANGE_START, FLASH_RANGE_END);
 80012de:	4a1e      	ldr	r2, [pc, #120]	; (8001358 <cbf_dump+0xb8>)
 80012e0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80012e4:	481d      	ldr	r0, [pc, #116]	; (800135c <cbf_dump+0xbc>)
 80012e6:	f004 fa13 	bl	8005710 <iprintf>
        return 0;
 80012ea:	2300      	movs	r3, #0
 80012ec:	e02f      	b.n	800134e <cbf_dump+0xae>
    }

    CONSOLE_SPLIT;
 80012ee:	481c      	ldr	r0, [pc, #112]	; (8001360 <cbf_dump+0xc0>)
 80012f0:	f004 faaa 	bl	8005848 <puts>
    printf("Base Addrr // dump data ... \n");
 80012f4:	481b      	ldr	r0, [pc, #108]	; (8001364 <cbf_dump+0xc4>)
 80012f6:	f004 faa7 	bl	8005848 <puts>
    CONSOLE_SPLIT;
 80012fa:	4819      	ldr	r0, [pc, #100]	; (8001360 <cbf_dump+0xc0>)
 80012fc:	f004 faa4 	bl	8005848 <puts>
    printf("0x%08x : ", (uint32_t *)addr);
 8001300:	6979      	ldr	r1, [r7, #20]
 8001302:	4819      	ldr	r0, [pc, #100]	; (8001368 <cbf_dump+0xc8>)
 8001304:	f004 fa04 	bl	8005710 <iprintf>
    
    for (uint16_t range = 1; range <= size; range++) {
 8001308:	2301      	movs	r3, #1
 800130a:	827b      	strh	r3, [r7, #18]
 800130c:	e017      	b.n	800133e <cbf_dump+0x9e>
        } else { 
            buffer[range - 1] = CHAR_dot;
        }
        #endif

        printf("%04x\t",  *(uint32_t *)addr++);
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	1d1a      	adds	r2, r3, #4
 8001312:	617a      	str	r2, [r7, #20]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4619      	mov	r1, r3
 8001318:	4814      	ldr	r0, [pc, #80]	; (800136c <cbf_dump+0xcc>)
 800131a:	f004 f9f9 	bl	8005710 <iprintf>
        if (range % LINE == 0) {
 800131e:	8a7b      	ldrh	r3, [r7, #18]
 8001320:	f003 0303 	and.w	r3, r3, #3
 8001324:	b29b      	uxth	r3, r3
 8001326:	2b00      	cmp	r3, #0
 8001328:	d106      	bne.n	8001338 <cbf_dump+0x98>
            #if ASCII_CHAR_DUMP
            printf("\t: %s", buffer);
            #endif
            printf("\r\n");
 800132a:	4811      	ldr	r0, [pc, #68]	; (8001370 <cbf_dump+0xd0>)
 800132c:	f004 fa8c 	bl	8005848 <puts>
            printf("0x%08x : ", (uint32_t *)addr);
 8001330:	6979      	ldr	r1, [r7, #20]
 8001332:	480d      	ldr	r0, [pc, #52]	; (8001368 <cbf_dump+0xc8>)
 8001334:	f004 f9ec 	bl	8005710 <iprintf>
    for (uint16_t range = 1; range <= size; range++) {
 8001338:	8a7b      	ldrh	r3, [r7, #18]
 800133a:	3301      	adds	r3, #1
 800133c:	827b      	strh	r3, [r7, #18]
 800133e:	8a7b      	ldrh	r3, [r7, #18]
 8001340:	68fa      	ldr	r2, [r7, #12]
 8001342:	429a      	cmp	r2, r3
 8001344:	d2e3      	bcs.n	800130e <cbf_dump+0x6e>
        }
    }
    printf("\r\n");
 8001346:	480a      	ldr	r0, [pc, #40]	; (8001370 <cbf_dump+0xd0>)
 8001348:	f004 fa7e 	bl	8005848 <puts>
    return 0;
 800134c:	2300      	movs	r3, #0
}
 800134e:	4618      	mov	r0, r3
 8001350:	3718      	adds	r7, #24
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	080f0000 	.word	0x080f0000
 800135c:	08007fd4 	.word	0x08007fd4
 8001360:	08007e2c 	.word	0x08007e2c
 8001364:	08007ff8 	.word	0x08007ff8
 8001368:	08008018 	.word	0x08008018
 800136c:	08008024 	.word	0x08008024
 8001370:	08007f9c 	.word	0x08007f9c

08001374 <cbf_flash_test>:

int cbf_flash_test(int argc, char *argv[])
{
 8001374:	b5b0      	push	{r4, r5, r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]
    volatile uint32_t *flash_addr = (volatile uint32_t *) strtol(argv[1], NULL, 16);
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	3304      	adds	r3, #4
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2210      	movs	r2, #16
 8001386:	2100      	movs	r1, #0
 8001388:	4618      	mov	r0, r3
 800138a:	f004 fc11 	bl	8005bb0 <strtol>
 800138e:	4603      	mov	r3, r0
 8001390:	617b      	str	r3, [r7, #20]
    uint32_t addr = flash_addr;
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	613b      	str	r3, [r7, #16]
    uint32_t data = atoi(argv[2]);
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	3308      	adds	r3, #8
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4618      	mov	r0, r3
 800139e:	f003 fd17 	bl	8004dd0 <atoi>
 80013a2:	4603      	mov	r3, r0
 80013a4:	60fb      	str	r3, [r7, #12]
        return 0;
    }

    FLASH_If_Init();
    #else
    FLASH_If_Erase(addr);
 80013a6:	6938      	ldr	r0, [r7, #16]
 80013a8:	f003 faca 	bl	8004940 <FLASH_If_Erase>
    #endif

    #if 1
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flash_addr, data);
 80013ac:	6979      	ldr	r1, [r7, #20]
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	2200      	movs	r2, #0
 80013b2:	461c      	mov	r4, r3
 80013b4:	4615      	mov	r5, r2
 80013b6:	4622      	mov	r2, r4
 80013b8:	462b      	mov	r3, r5
 80013ba:	2002      	movs	r0, #2
 80013bc:	f000 fe36 	bl	800202c <HAL_FLASH_Program>
    #else
    *flash_addr = data;
    #endif

    HAL_FLASH_Lock();
 80013c0:	f000 feaa 	bl	8002118 <HAL_FLASH_Lock>
    
    printf("0x%08x - 0x%08x\r\n", flash_addr, *flash_addr);
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	461a      	mov	r2, r3
 80013ca:	6979      	ldr	r1, [r7, #20]
 80013cc:	4803      	ldr	r0, [pc, #12]	; (80013dc <cbf_flash_test+0x68>)
 80013ce:	f004 f99f 	bl	8005710 <iprintf>
    return 0;
 80013d2:	2300      	movs	r3, #0
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3718      	adds	r7, #24
 80013d8:	46bd      	mov	sp, r7
 80013da:	bdb0      	pop	{r4, r5, r7, pc}
 80013dc:	0800802c 	.word	0x0800802c

080013e0 <cbf_app_fw_jump>:

#define VCCTOR_TABLE_OFFSET     4
int cbf_app_fw_jump(int argc, char *argv[])
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]
    printf("Start...\r\n");
 80013ea:	480b      	ldr	r0, [pc, #44]	; (8001418 <cbf_app_fw_jump+0x38>)
 80013ec:	f004 fa2c 	bl	8005848 <puts>
    pFunction Jump_To_Application;

    volatile uint32_t JumpAddress = *(__IO uint32_t*) (FLASH_BASE_MAIN_APP + VCCTOR_TABLE_OFFSET);
 80013f0:	4b0a      	ldr	r3, [pc, #40]	; (800141c <cbf_app_fw_jump+0x3c>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	60fb      	str	r3, [r7, #12]
    /* Jump to user application */
    Jump_To_Application = (pFunction) JumpAddress;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	617b      	str	r3, [r7, #20]
    /* Initialize user application's Stack Pointer */
    __set_MSP(*(__IO uint32_t*) FLASH_BASE_MAIN_APP);
 80013fa:	4b09      	ldr	r3, [pc, #36]	; (8001420 <cbf_app_fw_jump+0x40>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	f383 8808 	msr	MSP, r3
}
 8001406:	bf00      	nop
    Jump_To_Application(); 
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	4798      	blx	r3
    return 0;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3718      	adds	r7, #24
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	08008040 	.word	0x08008040
 800141c:	08020004 	.word	0x08020004
 8001420:	08020000 	.word	0x08020000

08001424 <cbf_tag>:

int cbf_tag(int argc, char *argv[])
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]
    CONSOLE_SPLIT;
 800142e:	4817      	ldr	r0, [pc, #92]	; (800148c <cbf_tag+0x68>)
 8001430:	f004 fa0a 	bl	8005848 <puts>
    printf("FW Info\t\t\t%s\r\n", tag.fw_name);
 8001434:	4b16      	ldr	r3, [pc, #88]	; (8001490 <cbf_tag+0x6c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4619      	mov	r1, r3
 800143a:	4816      	ldr	r0, [pc, #88]	; (8001494 <cbf_tag+0x70>)
 800143c:	f004 f968 	bl	8005710 <iprintf>
    printf("FW Date\t\t\t%s\r\n", tag.fw_date);
 8001440:	4b13      	ldr	r3, [pc, #76]	; (8001490 <cbf_tag+0x6c>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	4619      	mov	r1, r3
 8001446:	4814      	ldr	r0, [pc, #80]	; (8001498 <cbf_tag+0x74>)
 8001448:	f004 f962 	bl	8005710 <iprintf>
    printf("FW SN\t\t\t%s\r\n", tag.fw_sn );
 800144c:	4b10      	ldr	r3, [pc, #64]	; (8001490 <cbf_tag+0x6c>)
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	4619      	mov	r1, r3
 8001452:	4812      	ldr	r0, [pc, #72]	; (800149c <cbf_tag+0x78>)
 8001454:	f004 f95c 	bl	8005710 <iprintf>
    printf("FW Version\t\t%s\r\n", tag.fw_version );
 8001458:	4b0d      	ldr	r3, [pc, #52]	; (8001490 <cbf_tag+0x6c>)
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	4619      	mov	r1, r3
 800145e:	4810      	ldr	r0, [pc, #64]	; (80014a0 <cbf_tag+0x7c>)
 8001460:	f004 f956 	bl	8005710 <iprintf>
    printf("FW Compiled date\t%s\r\n", tag.fw_compile_data);
 8001464:	4b0a      	ldr	r3, [pc, #40]	; (8001490 <cbf_tag+0x6c>)
 8001466:	691b      	ldr	r3, [r3, #16]
 8001468:	4619      	mov	r1, r3
 800146a:	480e      	ldr	r0, [pc, #56]	; (80014a4 <cbf_tag+0x80>)
 800146c:	f004 f950 	bl	8005710 <iprintf>
    printf("FW Compiled time\t%s\r\n", tag.fw_compile_time);
 8001470:	4b07      	ldr	r3, [pc, #28]	; (8001490 <cbf_tag+0x6c>)
 8001472:	695b      	ldr	r3, [r3, #20]
 8001474:	4619      	mov	r1, r3
 8001476:	480c      	ldr	r0, [pc, #48]	; (80014a8 <cbf_tag+0x84>)
 8001478:	f004 f94a 	bl	8005710 <iprintf>
    CONSOLE_SPLIT;
 800147c:	4803      	ldr	r0, [pc, #12]	; (800148c <cbf_tag+0x68>)
 800147e:	f004 f9e3 	bl	8005848 <puts>
}
 8001482:	bf00      	nop
 8001484:	4618      	mov	r0, r3
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	08007e2c 	.word	0x08007e2c
 8001490:	08010000 	.word	0x08010000
 8001494:	0800804c 	.word	0x0800804c
 8001498:	0800805c 	.word	0x0800805c
 800149c:	0800806c 	.word	0x0800806c
 80014a0:	0800807c 	.word	0x0800807c
 80014a4:	08008090 	.word	0x08008090
 80014a8:	080080a8 	.word	0x080080a8

080014ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08a      	sub	sp, #40	; 0x28
 80014b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b2:	f107 0314 	add.w	r3, r7, #20
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	605a      	str	r2, [r3, #4]
 80014bc:	609a      	str	r2, [r3, #8]
 80014be:	60da      	str	r2, [r3, #12]
 80014c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	613b      	str	r3, [r7, #16]
 80014c6:	4b2d      	ldr	r3, [pc, #180]	; (800157c <MX_GPIO_Init+0xd0>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	4a2c      	ldr	r2, [pc, #176]	; (800157c <MX_GPIO_Init+0xd0>)
 80014cc:	f043 0304 	orr.w	r3, r3, #4
 80014d0:	6313      	str	r3, [r2, #48]	; 0x30
 80014d2:	4b2a      	ldr	r3, [pc, #168]	; (800157c <MX_GPIO_Init+0xd0>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	f003 0304 	and.w	r3, r3, #4
 80014da:	613b      	str	r3, [r7, #16]
 80014dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	4b26      	ldr	r3, [pc, #152]	; (800157c <MX_GPIO_Init+0xd0>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	4a25      	ldr	r2, [pc, #148]	; (800157c <MX_GPIO_Init+0xd0>)
 80014e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014ec:	6313      	str	r3, [r2, #48]	; 0x30
 80014ee:	4b23      	ldr	r3, [pc, #140]	; (800157c <MX_GPIO_Init+0xd0>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014f6:	60fb      	str	r3, [r7, #12]
 80014f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	60bb      	str	r3, [r7, #8]
 80014fe:	4b1f      	ldr	r3, [pc, #124]	; (800157c <MX_GPIO_Init+0xd0>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	4a1e      	ldr	r2, [pc, #120]	; (800157c <MX_GPIO_Init+0xd0>)
 8001504:	f043 0301 	orr.w	r3, r3, #1
 8001508:	6313      	str	r3, [r2, #48]	; 0x30
 800150a:	4b1c      	ldr	r3, [pc, #112]	; (800157c <MX_GPIO_Init+0xd0>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	60bb      	str	r3, [r7, #8]
 8001514:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	607b      	str	r3, [r7, #4]
 800151a:	4b18      	ldr	r3, [pc, #96]	; (800157c <MX_GPIO_Init+0xd0>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	4a17      	ldr	r2, [pc, #92]	; (800157c <MX_GPIO_Init+0xd0>)
 8001520:	f043 0302 	orr.w	r3, r3, #2
 8001524:	6313      	str	r3, [r2, #48]	; 0x30
 8001526:	4b15      	ldr	r3, [pc, #84]	; (800157c <MX_GPIO_Init+0xd0>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	607b      	str	r3, [r7, #4]
 8001530:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001532:	2200      	movs	r2, #0
 8001534:	2120      	movs	r1, #32
 8001536:	4812      	ldr	r0, [pc, #72]	; (8001580 <MX_GPIO_Init+0xd4>)
 8001538:	f001 f9e4 	bl	8002904 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800153c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001540:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001542:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001546:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800154c:	f107 0314 	add.w	r3, r7, #20
 8001550:	4619      	mov	r1, r3
 8001552:	480c      	ldr	r0, [pc, #48]	; (8001584 <MX_GPIO_Init+0xd8>)
 8001554:	f001 f852 	bl	80025fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001558:	2320      	movs	r3, #32
 800155a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155c:	2301      	movs	r3, #1
 800155e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001564:	2300      	movs	r3, #0
 8001566:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001568:	f107 0314 	add.w	r3, r7, #20
 800156c:	4619      	mov	r1, r3
 800156e:	4804      	ldr	r0, [pc, #16]	; (8001580 <MX_GPIO_Init+0xd4>)
 8001570:	f001 f844 	bl	80025fc <HAL_GPIO_Init>

}
 8001574:	bf00      	nop
 8001576:	3728      	adds	r7, #40	; 0x28
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40023800 	.word	0x40023800
 8001580:	40020000 	.word	0x40020000
 8001584:	40020800 	.word	0x40020800

08001588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800158e:	f000 fb49 	bl	8001c24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001592:	f000 fa0d 	bl	80019b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001596:	f7ff ff89 	bl	80014ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800159a:	f000 fa9f 	bl	8001adc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, (uint8_t*) &uart_rx_byte, UART_BYTE);
 800159e:	2201      	movs	r2, #1
 80015a0:	492b      	ldr	r1, [pc, #172]	; (8001650 <main+0xc8>)
 80015a2:	482c      	ldr	r0, [pc, #176]	; (8001654 <main+0xcc>)
 80015a4:	f002 fa0b 	bl	80039be <HAL_UART_Receive_IT>
  
  setbuf(stdin, NULL);
 80015a8:	4b2b      	ldr	r3, [pc, #172]	; (8001658 <main+0xd0>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	2100      	movs	r1, #0
 80015b0:	4618      	mov	r0, r3
 80015b2:	f004 f951 	bl	8005858 <setbuf>
  setbuf(stdout,NULL); 
 80015b6:	4b28      	ldr	r3, [pc, #160]	; (8001658 <main+0xd0>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	2100      	movs	r1, #0
 80015be:	4618      	mov	r0, r3
 80015c0:	f004 f94a 	bl	8005858 <setbuf>

  cbf_boot_logo(0, NULL);
 80015c4:	2100      	movs	r1, #0
 80015c6:	2000      	movs	r0, #0
 80015c8:	f7ff fd80 	bl	80010cc <cbf_boot_logo>

  CONSOLE_SPLIT;
 80015cc:	4823      	ldr	r0, [pc, #140]	; (800165c <main+0xd4>)
 80015ce:	f004 f93b 	bl	8005848 <puts>
  printf("if you don't want this, press any key\r\n");
 80015d2:	4823      	ldr	r0, [pc, #140]	; (8001660 <main+0xd8>)
 80015d4:	f004 f938 	bl	8005848 <puts>
  printf("entering main fw... \r\n");
 80015d8:	4822      	ldr	r0, [pc, #136]	; (8001664 <main+0xdc>)
 80015da:	f004 f935 	bl	8005848 <puts>
  CONSOLE_SPLIT;
 80015de:	481f      	ldr	r0, [pc, #124]	; (800165c <main+0xd4>)
 80015e0:	f004 f932 	bl	8005848 <puts>

  uint16_t sec = 3, time = 0;
 80015e4:	2303      	movs	r3, #3
 80015e6:	80fb      	strh	r3, [r7, #6]
 80015e8:	2300      	movs	r3, #0
 80015ea:	80bb      	strh	r3, [r7, #4]
  time = HAL_GetTick();
 80015ec:	f000 fb50 	bl	8001c90 <HAL_GetTick>
 80015f0:	4603      	mov	r3, r0
 80015f2:	80bb      	strh	r3, [r7, #4]
  do {
    // key detection
    if (cli.rx_done == CLI_READY) {
 80015f4:	4b1c      	ldr	r3, [pc, #112]	; (8001668 <main+0xe0>)
 80015f6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d100      	bne.n	8001600 <main+0x78>
      break;
 80015fe:	e01a      	b.n	8001636 <main+0xae>
    }

    // Check Time sec
    if (HAL_GetTick() - time >= 1000) {
 8001600:	f000 fb46 	bl	8001c90 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	88bb      	ldrh	r3, [r7, #4]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800160e:	d3f1      	bcc.n	80015f4 <main+0x6c>
      time = HAL_GetTick();
 8001610:	f000 fb3e 	bl	8001c90 <HAL_GetTick>
 8001614:	4603      	mov	r3, r0
 8001616:	80bb      	strh	r3, [r7, #4]
      printf("%d\r\n", sec--);
 8001618:	88fb      	ldrh	r3, [r7, #6]
 800161a:	1e5a      	subs	r2, r3, #1
 800161c:	80fa      	strh	r2, [r7, #6]
 800161e:	4619      	mov	r1, r3
 8001620:	4812      	ldr	r0, [pc, #72]	; (800166c <main+0xe4>)
 8001622:	f004 f875 	bl	8005710 <iprintf>

      // time over & jump main app
      if (sec <= 0) {
 8001626:	88fb      	ldrh	r3, [r7, #6]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d1e3      	bne.n	80015f4 <main+0x6c>
        cbf_app_fw_jump(0, NULL);
 800162c:	2100      	movs	r1, #0
 800162e:	2000      	movs	r0, #0
 8001630:	f7ff fed6 	bl	80013e0 <cbf_app_fw_jump>
    if (cli.rx_done == CLI_READY) {
 8001634:	e7de      	b.n	80015f4 <main+0x6c>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
      if (cli.rx_done == CLI_READY) {
 8001636:	4b0c      	ldr	r3, [pc, #48]	; (8001668 <main+0xe0>)
 8001638:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800163c:	2b01      	cmp	r3, #1
 800163e:	d1fa      	bne.n	8001636 <main+0xae>
          cli.rx_done = CLI_CLEAR;
 8001640:	4b09      	ldr	r3, [pc, #36]	; (8001668 <main+0xe0>)
 8001642:	2200      	movs	r2, #0
 8001644:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          parser((char *) &cli.buffer[0]);
 8001648:	4807      	ldr	r0, [pc, #28]	; (8001668 <main+0xe0>)
 800164a:	f7ff fcd5 	bl	8000ff8 <parser>
      if (cli.rx_done == CLI_READY) {
 800164e:	e7f2      	b.n	8001636 <main+0xae>
 8001650:	200001f8 	.word	0x200001f8
 8001654:	200002cc 	.word	0x200002cc
 8001658:	2000000c 	.word	0x2000000c
 800165c:	080080c0 	.word	0x080080c0
 8001660:	08008108 	.word	0x08008108
 8001664:	08008130 	.word	0x08008130
 8001668:	200001fc 	.word	0x200001fc
 800166c:	08008148 	.word	0x08008148

08001670 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	607b      	str	r3, [r7, #4]
 800167a:	4b10      	ldr	r3, [pc, #64]	; (80016bc <HAL_MspInit+0x4c>)
 800167c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167e:	4a0f      	ldr	r2, [pc, #60]	; (80016bc <HAL_MspInit+0x4c>)
 8001680:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001684:	6453      	str	r3, [r2, #68]	; 0x44
 8001686:	4b0d      	ldr	r3, [pc, #52]	; (80016bc <HAL_MspInit+0x4c>)
 8001688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800168e:	607b      	str	r3, [r7, #4]
 8001690:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	603b      	str	r3, [r7, #0]
 8001696:	4b09      	ldr	r3, [pc, #36]	; (80016bc <HAL_MspInit+0x4c>)
 8001698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169a:	4a08      	ldr	r2, [pc, #32]	; (80016bc <HAL_MspInit+0x4c>)
 800169c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a0:	6413      	str	r3, [r2, #64]	; 0x40
 80016a2:	4b06      	ldr	r3, [pc, #24]	; (80016bc <HAL_MspInit+0x4c>)
 80016a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016aa:	603b      	str	r3, [r7, #0]
 80016ac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016ae:	2007      	movs	r0, #7
 80016b0:	f000 fbe2 	bl	8001e78 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016b4:	bf00      	nop
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40023800 	.word	0x40023800

080016c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b08c      	sub	sp, #48	; 0x30
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80016c8:	2300      	movs	r3, #0
 80016ca:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80016cc:	2300      	movs	r3, #0
 80016ce:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80016d0:	2300      	movs	r3, #0
 80016d2:	60bb      	str	r3, [r7, #8]
 80016d4:	4b2e      	ldr	r3, [pc, #184]	; (8001790 <HAL_InitTick+0xd0>)
 80016d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d8:	4a2d      	ldr	r2, [pc, #180]	; (8001790 <HAL_InitTick+0xd0>)
 80016da:	f043 0301 	orr.w	r3, r3, #1
 80016de:	6453      	str	r3, [r2, #68]	; 0x44
 80016e0:	4b2b      	ldr	r3, [pc, #172]	; (8001790 <HAL_InitTick+0xd0>)
 80016e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e4:	f003 0301 	and.w	r3, r3, #1
 80016e8:	60bb      	str	r3, [r7, #8]
 80016ea:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80016ec:	f107 020c 	add.w	r2, r7, #12
 80016f0:	f107 0310 	add.w	r3, r7, #16
 80016f4:	4611      	mov	r1, r2
 80016f6:	4618      	mov	r0, r3
 80016f8:	f001 fdd0 	bl	800329c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80016fc:	f001 fdba 	bl	8003274 <HAL_RCC_GetPCLK2Freq>
 8001700:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001704:	4a23      	ldr	r2, [pc, #140]	; (8001794 <HAL_InitTick+0xd4>)
 8001706:	fba2 2303 	umull	r2, r3, r2, r3
 800170a:	0c9b      	lsrs	r3, r3, #18
 800170c:	3b01      	subs	r3, #1
 800170e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001710:	4b21      	ldr	r3, [pc, #132]	; (8001798 <HAL_InitTick+0xd8>)
 8001712:	4a22      	ldr	r2, [pc, #136]	; (800179c <HAL_InitTick+0xdc>)
 8001714:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001716:	4b20      	ldr	r3, [pc, #128]	; (8001798 <HAL_InitTick+0xd8>)
 8001718:	f240 32e7 	movw	r2, #999	; 0x3e7
 800171c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800171e:	4a1e      	ldr	r2, [pc, #120]	; (8001798 <HAL_InitTick+0xd8>)
 8001720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001722:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001724:	4b1c      	ldr	r3, [pc, #112]	; (8001798 <HAL_InitTick+0xd8>)
 8001726:	2200      	movs	r2, #0
 8001728:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800172a:	4b1b      	ldr	r3, [pc, #108]	; (8001798 <HAL_InitTick+0xd8>)
 800172c:	2200      	movs	r2, #0
 800172e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001730:	4b19      	ldr	r3, [pc, #100]	; (8001798 <HAL_InitTick+0xd8>)
 8001732:	2200      	movs	r2, #0
 8001734:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001736:	4818      	ldr	r0, [pc, #96]	; (8001798 <HAL_InitTick+0xd8>)
 8001738:	f001 fde2 	bl	8003300 <HAL_TIM_Base_Init>
 800173c:	4603      	mov	r3, r0
 800173e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001742:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001746:	2b00      	cmp	r3, #0
 8001748:	d11b      	bne.n	8001782 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800174a:	4813      	ldr	r0, [pc, #76]	; (8001798 <HAL_InitTick+0xd8>)
 800174c:	f001 fe32 	bl	80033b4 <HAL_TIM_Base_Start_IT>
 8001750:	4603      	mov	r3, r0
 8001752:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001756:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800175a:	2b00      	cmp	r3, #0
 800175c:	d111      	bne.n	8001782 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800175e:	2019      	movs	r0, #25
 8001760:	f000 fbb1 	bl	8001ec6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2b0f      	cmp	r3, #15
 8001768:	d808      	bhi.n	800177c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800176a:	2200      	movs	r2, #0
 800176c:	6879      	ldr	r1, [r7, #4]
 800176e:	2019      	movs	r0, #25
 8001770:	f000 fb8d 	bl	8001e8e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001774:	4a0a      	ldr	r2, [pc, #40]	; (80017a0 <HAL_InitTick+0xe0>)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6013      	str	r3, [r2, #0]
 800177a:	e002      	b.n	8001782 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001782:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001786:	4618      	mov	r0, r3
 8001788:	3730      	adds	r7, #48	; 0x30
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40023800 	.word	0x40023800
 8001794:	431bde83 	.word	0x431bde83
 8001798:	20000280 	.word	0x20000280
 800179c:	40010000 	.word	0x40010000
 80017a0:	20000004 	.word	0x20000004

080017a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017a8:	e7fe      	b.n	80017a8 <NMI_Handler+0x4>

080017aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ae:	e7fe      	b.n	80017ae <HardFault_Handler+0x4>

080017b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017b4:	e7fe      	b.n	80017b4 <MemManage_Handler+0x4>

080017b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ba:	e7fe      	b.n	80017ba <BusFault_Handler+0x4>

080017bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017c0:	e7fe      	b.n	80017c0 <UsageFault_Handler+0x4>

080017c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017c2:	b480      	push	{r7}
 80017c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017de:	b480      	push	{r7}
 80017e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017f0:	bf00      	nop
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
	...

080017fc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001800:	4802      	ldr	r0, [pc, #8]	; (800180c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001802:	f001 fe39 	bl	8003478 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20000280 	.word	0x20000280

08001810 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001814:	4802      	ldr	r0, [pc, #8]	; (8001820 <USART2_IRQHandler+0x10>)
 8001816:	f002 f903 	bl	8003a20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	200002cc 	.word	0x200002cc

08001824 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  return 1;
 8001828:	2301      	movs	r3, #1
}
 800182a:	4618      	mov	r0, r3
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr

08001834 <_kill>:

int _kill(int pid, int sig)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800183e:	f003 facb 	bl	8004dd8 <__errno>
 8001842:	4603      	mov	r3, r0
 8001844:	2216      	movs	r2, #22
 8001846:	601a      	str	r2, [r3, #0]
  return -1;
 8001848:	f04f 33ff 	mov.w	r3, #4294967295
}
 800184c:	4618      	mov	r0, r3
 800184e:	3708      	adds	r7, #8
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <_exit>:

void _exit (int status)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800185c:	f04f 31ff 	mov.w	r1, #4294967295
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f7ff ffe7 	bl	8001834 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001866:	e7fe      	b.n	8001866 <_exit+0x12>

08001868 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b086      	sub	sp, #24
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001874:	2300      	movs	r3, #0
 8001876:	617b      	str	r3, [r7, #20]
 8001878:	e00a      	b.n	8001890 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800187a:	f3af 8000 	nop.w
 800187e:	4601      	mov	r1, r0
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	1c5a      	adds	r2, r3, #1
 8001884:	60ba      	str	r2, [r7, #8]
 8001886:	b2ca      	uxtb	r2, r1
 8001888:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	3301      	adds	r3, #1
 800188e:	617b      	str	r3, [r7, #20]
 8001890:	697a      	ldr	r2, [r7, #20]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	429a      	cmp	r2, r3
 8001896:	dbf0      	blt.n	800187a <_read+0x12>
  }

  return len;
 8001898:	687b      	ldr	r3, [r7, #4]
}
 800189a:	4618      	mov	r0, r3
 800189c:	3718      	adds	r7, #24
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b086      	sub	sp, #24
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	60f8      	str	r0, [r7, #12]
 80018aa:	60b9      	str	r1, [r7, #8]
 80018ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ae:	2300      	movs	r3, #0
 80018b0:	617b      	str	r3, [r7, #20]
 80018b2:	e009      	b.n	80018c8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	1c5a      	adds	r2, r3, #1
 80018b8:	60ba      	str	r2, [r7, #8]
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff fb0d 	bl	8000edc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	3301      	adds	r3, #1
 80018c6:	617b      	str	r3, [r7, #20]
 80018c8:	697a      	ldr	r2, [r7, #20]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	dbf1      	blt.n	80018b4 <_write+0x12>
  }
  return len;
 80018d0:	687b      	ldr	r3, [r7, #4]
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3718      	adds	r7, #24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <_close>:

int _close(int file)
{
 80018da:	b480      	push	{r7}
 80018dc:	b083      	sub	sp, #12
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr

080018f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018f2:	b480      	push	{r7}
 80018f4:	b083      	sub	sp, #12
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
 80018fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001902:	605a      	str	r2, [r3, #4]
  return 0;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	370c      	adds	r7, #12
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr

08001912 <_isatty>:

int _isatty(int file)
{
 8001912:	b480      	push	{r7}
 8001914:	b083      	sub	sp, #12
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800191a:	2301      	movs	r3, #1
}
 800191c:	4618      	mov	r0, r3
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3714      	adds	r7, #20
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
	...

08001944 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800194c:	4a14      	ldr	r2, [pc, #80]	; (80019a0 <_sbrk+0x5c>)
 800194e:	4b15      	ldr	r3, [pc, #84]	; (80019a4 <_sbrk+0x60>)
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001958:	4b13      	ldr	r3, [pc, #76]	; (80019a8 <_sbrk+0x64>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d102      	bne.n	8001966 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001960:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <_sbrk+0x64>)
 8001962:	4a12      	ldr	r2, [pc, #72]	; (80019ac <_sbrk+0x68>)
 8001964:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001966:	4b10      	ldr	r3, [pc, #64]	; (80019a8 <_sbrk+0x64>)
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4413      	add	r3, r2
 800196e:	693a      	ldr	r2, [r7, #16]
 8001970:	429a      	cmp	r2, r3
 8001972:	d207      	bcs.n	8001984 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001974:	f003 fa30 	bl	8004dd8 <__errno>
 8001978:	4603      	mov	r3, r0
 800197a:	220c      	movs	r2, #12
 800197c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800197e:	f04f 33ff 	mov.w	r3, #4294967295
 8001982:	e009      	b.n	8001998 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001984:	4b08      	ldr	r3, [pc, #32]	; (80019a8 <_sbrk+0x64>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800198a:	4b07      	ldr	r3, [pc, #28]	; (80019a8 <_sbrk+0x64>)
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4413      	add	r3, r2
 8001992:	4a05      	ldr	r2, [pc, #20]	; (80019a8 <_sbrk+0x64>)
 8001994:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001996:	68fb      	ldr	r3, [r7, #12]
}
 8001998:	4618      	mov	r0, r3
 800199a:	3718      	adds	r7, #24
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	20018000 	.word	0x20018000
 80019a4:	00000800 	.word	0x00000800
 80019a8:	200002c8 	.word	0x200002c8
 80019ac:	20000350 	.word	0x20000350

080019b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b094      	sub	sp, #80	; 0x50
 80019b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019b6:	f107 0320 	add.w	r3, r7, #32
 80019ba:	2230      	movs	r2, #48	; 0x30
 80019bc:	2100      	movs	r1, #0
 80019be:	4618      	mov	r0, r3
 80019c0:	f003 fa34 	bl	8004e2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019c4:	f107 030c 	add.w	r3, r7, #12
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	60da      	str	r2, [r3, #12]
 80019d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019d4:	2300      	movs	r3, #0
 80019d6:	60bb      	str	r3, [r7, #8]
 80019d8:	4b29      	ldr	r3, [pc, #164]	; (8001a80 <SystemClock_Config+0xd0>)
 80019da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019dc:	4a28      	ldr	r2, [pc, #160]	; (8001a80 <SystemClock_Config+0xd0>)
 80019de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019e2:	6413      	str	r3, [r2, #64]	; 0x40
 80019e4:	4b26      	ldr	r3, [pc, #152]	; (8001a80 <SystemClock_Config+0xd0>)
 80019e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ec:	60bb      	str	r3, [r7, #8]
 80019ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80019f0:	2300      	movs	r3, #0
 80019f2:	607b      	str	r3, [r7, #4]
 80019f4:	4b23      	ldr	r3, [pc, #140]	; (8001a84 <SystemClock_Config+0xd4>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80019fc:	4a21      	ldr	r2, [pc, #132]	; (8001a84 <SystemClock_Config+0xd4>)
 80019fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a02:	6013      	str	r3, [r2, #0]
 8001a04:	4b1f      	ldr	r3, [pc, #124]	; (8001a84 <SystemClock_Config+0xd4>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a0c:	607b      	str	r3, [r7, #4]
 8001a0e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a10:	2302      	movs	r3, #2
 8001a12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a14:	2301      	movs	r3, #1
 8001a16:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a18:	2310      	movs	r3, #16
 8001a1a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a20:	2300      	movs	r3, #0
 8001a22:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001a24:	2310      	movs	r3, #16
 8001a26:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001a28:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001a2c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001a2e:	2304      	movs	r3, #4
 8001a30:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001a32:	2307      	movs	r3, #7
 8001a34:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a36:	f107 0320 	add.w	r3, r7, #32
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f000 ff96 	bl	800296c <HAL_RCC_OscConfig>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001a46:	f000 f831 	bl	8001aac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a4a:	230f      	movs	r3, #15
 8001a4c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a4e:	2302      	movs	r3, #2
 8001a50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a52:	2300      	movs	r3, #0
 8001a54:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a5a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a60:	f107 030c 	add.w	r3, r7, #12
 8001a64:	2102      	movs	r1, #2
 8001a66:	4618      	mov	r0, r3
 8001a68:	f001 f9f8 	bl	8002e5c <HAL_RCC_ClockConfig>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001a72:	f000 f81b 	bl	8001aac <Error_Handler>
  }
}
 8001a76:	bf00      	nop
 8001a78:	3750      	adds	r7, #80	; 0x50
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	40023800 	.word	0x40023800
 8001a84:	40007000 	.word	0x40007000

08001a88 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a04      	ldr	r2, [pc, #16]	; (8001aa8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d101      	bne.n	8001a9e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001a9a:	f000 f8e5 	bl	8001c68 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40010000 	.word	0x40010000

08001aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001ab0:	b672      	cpsid	i
}
 8001ab2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ab4:	e7fe      	b.n	8001ab4 <Error_Handler+0x8>
	...

08001ab8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001abc:	4b06      	ldr	r3, [pc, #24]	; (8001ad8 <SystemInit+0x20>)
 8001abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ac2:	4a05      	ldr	r2, [pc, #20]	; (8001ad8 <SystemInit+0x20>)
 8001ac4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ac8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001acc:	bf00      	nop
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	e000ed00 	.word	0xe000ed00

08001adc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ae0:	4b11      	ldr	r3, [pc, #68]	; (8001b28 <MX_USART2_UART_Init+0x4c>)
 8001ae2:	4a12      	ldr	r2, [pc, #72]	; (8001b2c <MX_USART2_UART_Init+0x50>)
 8001ae4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ae6:	4b10      	ldr	r3, [pc, #64]	; (8001b28 <MX_USART2_UART_Init+0x4c>)
 8001ae8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001aec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001aee:	4b0e      	ldr	r3, [pc, #56]	; (8001b28 <MX_USART2_UART_Init+0x4c>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001af4:	4b0c      	ldr	r3, [pc, #48]	; (8001b28 <MX_USART2_UART_Init+0x4c>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001afa:	4b0b      	ldr	r3, [pc, #44]	; (8001b28 <MX_USART2_UART_Init+0x4c>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b00:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <MX_USART2_UART_Init+0x4c>)
 8001b02:	220c      	movs	r2, #12
 8001b04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b06:	4b08      	ldr	r3, [pc, #32]	; (8001b28 <MX_USART2_UART_Init+0x4c>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b0c:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <MX_USART2_UART_Init+0x4c>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b12:	4805      	ldr	r0, [pc, #20]	; (8001b28 <MX_USART2_UART_Init+0x4c>)
 8001b14:	f001 fe74 	bl	8003800 <HAL_UART_Init>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b1e:	f7ff ffc5 	bl	8001aac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	200002cc 	.word	0x200002cc
 8001b2c:	40004400 	.word	0x40004400

08001b30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b08a      	sub	sp, #40	; 0x28
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b38:	f107 0314 	add.w	r3, r7, #20
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	609a      	str	r2, [r3, #8]
 8001b44:	60da      	str	r2, [r3, #12]
 8001b46:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a1d      	ldr	r2, [pc, #116]	; (8001bc4 <HAL_UART_MspInit+0x94>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d133      	bne.n	8001bba <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	613b      	str	r3, [r7, #16]
 8001b56:	4b1c      	ldr	r3, [pc, #112]	; (8001bc8 <HAL_UART_MspInit+0x98>)
 8001b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5a:	4a1b      	ldr	r2, [pc, #108]	; (8001bc8 <HAL_UART_MspInit+0x98>)
 8001b5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b60:	6413      	str	r3, [r2, #64]	; 0x40
 8001b62:	4b19      	ldr	r3, [pc, #100]	; (8001bc8 <HAL_UART_MspInit+0x98>)
 8001b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6a:	613b      	str	r3, [r7, #16]
 8001b6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	4b15      	ldr	r3, [pc, #84]	; (8001bc8 <HAL_UART_MspInit+0x98>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	4a14      	ldr	r2, [pc, #80]	; (8001bc8 <HAL_UART_MspInit+0x98>)
 8001b78:	f043 0301 	orr.w	r3, r3, #1
 8001b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7e:	4b12      	ldr	r3, [pc, #72]	; (8001bc8 <HAL_UART_MspInit+0x98>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b8a:	230c      	movs	r3, #12
 8001b8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b96:	2300      	movs	r3, #0
 8001b98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b9a:	2307      	movs	r3, #7
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b9e:	f107 0314 	add.w	r3, r7, #20
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4809      	ldr	r0, [pc, #36]	; (8001bcc <HAL_UART_MspInit+0x9c>)
 8001ba6:	f000 fd29 	bl	80025fc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001baa:	2200      	movs	r2, #0
 8001bac:	2100      	movs	r1, #0
 8001bae:	2026      	movs	r0, #38	; 0x26
 8001bb0:	f000 f96d 	bl	8001e8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001bb4:	2026      	movs	r0, #38	; 0x26
 8001bb6:	f000 f986 	bl	8001ec6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001bba:	bf00      	nop
 8001bbc:	3728      	adds	r7, #40	; 0x28
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40004400 	.word	0x40004400
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	40020000 	.word	0x40020000

08001bd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001bd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bd4:	480d      	ldr	r0, [pc, #52]	; (8001c0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001bd6:	490e      	ldr	r1, [pc, #56]	; (8001c10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001bd8:	4a0e      	ldr	r2, [pc, #56]	; (8001c14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bdc:	e002      	b.n	8001be4 <LoopCopyDataInit>

08001bde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001be0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001be2:	3304      	adds	r3, #4

08001be4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001be4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001be6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001be8:	d3f9      	bcc.n	8001bde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bea:	4a0b      	ldr	r2, [pc, #44]	; (8001c18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001bec:	4c0b      	ldr	r4, [pc, #44]	; (8001c1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001bee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bf0:	e001      	b.n	8001bf6 <LoopFillZerobss>

08001bf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bf4:	3204      	adds	r2, #4

08001bf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bf8:	d3fb      	bcc.n	8001bf2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001bfa:	f7ff ff5d 	bl	8001ab8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bfe:	f003 f8f1 	bl	8004de4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c02:	f7ff fcc1 	bl	8001588 <main>
  bx  lr    
 8001c06:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c08:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001c0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c10:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001c14:	08008848 	.word	0x08008848
  ldr r2, =_sbss
 8001c18:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001c1c:	20000350 	.word	0x20000350

08001c20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c20:	e7fe      	b.n	8001c20 <ADC_IRQHandler>
	...

08001c24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c28:	4b0e      	ldr	r3, [pc, #56]	; (8001c64 <HAL_Init+0x40>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a0d      	ldr	r2, [pc, #52]	; (8001c64 <HAL_Init+0x40>)
 8001c2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c34:	4b0b      	ldr	r3, [pc, #44]	; (8001c64 <HAL_Init+0x40>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a0a      	ldr	r2, [pc, #40]	; (8001c64 <HAL_Init+0x40>)
 8001c3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c40:	4b08      	ldr	r3, [pc, #32]	; (8001c64 <HAL_Init+0x40>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a07      	ldr	r2, [pc, #28]	; (8001c64 <HAL_Init+0x40>)
 8001c46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c4c:	2003      	movs	r0, #3
 8001c4e:	f000 f913 	bl	8001e78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c52:	2000      	movs	r0, #0
 8001c54:	f7ff fd34 	bl	80016c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c58:	f7ff fd0a 	bl	8001670 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40023c00 	.word	0x40023c00

08001c68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c6c:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <HAL_IncTick+0x20>)
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	461a      	mov	r2, r3
 8001c72:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <HAL_IncTick+0x24>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4413      	add	r3, r2
 8001c78:	4a04      	ldr	r2, [pc, #16]	; (8001c8c <HAL_IncTick+0x24>)
 8001c7a:	6013      	str	r3, [r2, #0]
}
 8001c7c:	bf00      	nop
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
 8001c86:	bf00      	nop
 8001c88:	20000008 	.word	0x20000008
 8001c8c:	20000310 	.word	0x20000310

08001c90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  return uwTick;
 8001c94:	4b03      	ldr	r3, [pc, #12]	; (8001ca4 <HAL_GetTick+0x14>)
 8001c96:	681b      	ldr	r3, [r3, #0]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	20000310 	.word	0x20000310

08001ca8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cb8:	4b0c      	ldr	r3, [pc, #48]	; (8001cec <__NVIC_SetPriorityGrouping+0x44>)
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cbe:	68ba      	ldr	r2, [r7, #8]
 8001cc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cda:	4a04      	ldr	r2, [pc, #16]	; (8001cec <__NVIC_SetPriorityGrouping+0x44>)
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	60d3      	str	r3, [r2, #12]
}
 8001ce0:	bf00      	nop
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	e000ed00 	.word	0xe000ed00

08001cf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cf4:	4b04      	ldr	r3, [pc, #16]	; (8001d08 <__NVIC_GetPriorityGrouping+0x18>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	0a1b      	lsrs	r3, r3, #8
 8001cfa:	f003 0307 	and.w	r3, r3, #7
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	e000ed00 	.word	0xe000ed00

08001d0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	db0b      	blt.n	8001d36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d1e:	79fb      	ldrb	r3, [r7, #7]
 8001d20:	f003 021f 	and.w	r2, r3, #31
 8001d24:	4907      	ldr	r1, [pc, #28]	; (8001d44 <__NVIC_EnableIRQ+0x38>)
 8001d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2a:	095b      	lsrs	r3, r3, #5
 8001d2c:	2001      	movs	r0, #1
 8001d2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d36:	bf00      	nop
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	e000e100 	.word	0xe000e100

08001d48 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	db12      	blt.n	8001d80 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d5a:	79fb      	ldrb	r3, [r7, #7]
 8001d5c:	f003 021f 	and.w	r2, r3, #31
 8001d60:	490a      	ldr	r1, [pc, #40]	; (8001d8c <__NVIC_DisableIRQ+0x44>)
 8001d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d66:	095b      	lsrs	r3, r3, #5
 8001d68:	2001      	movs	r0, #1
 8001d6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d6e:	3320      	adds	r3, #32
 8001d70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001d74:	f3bf 8f4f 	dsb	sy
}
 8001d78:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d7a:	f3bf 8f6f 	isb	sy
}
 8001d7e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr
 8001d8c:	e000e100 	.word	0xe000e100

08001d90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	4603      	mov	r3, r0
 8001d98:	6039      	str	r1, [r7, #0]
 8001d9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	db0a      	blt.n	8001dba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	b2da      	uxtb	r2, r3
 8001da8:	490c      	ldr	r1, [pc, #48]	; (8001ddc <__NVIC_SetPriority+0x4c>)
 8001daa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dae:	0112      	lsls	r2, r2, #4
 8001db0:	b2d2      	uxtb	r2, r2
 8001db2:	440b      	add	r3, r1
 8001db4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001db8:	e00a      	b.n	8001dd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	b2da      	uxtb	r2, r3
 8001dbe:	4908      	ldr	r1, [pc, #32]	; (8001de0 <__NVIC_SetPriority+0x50>)
 8001dc0:	79fb      	ldrb	r3, [r7, #7]
 8001dc2:	f003 030f 	and.w	r3, r3, #15
 8001dc6:	3b04      	subs	r3, #4
 8001dc8:	0112      	lsls	r2, r2, #4
 8001dca:	b2d2      	uxtb	r2, r2
 8001dcc:	440b      	add	r3, r1
 8001dce:	761a      	strb	r2, [r3, #24]
}
 8001dd0:	bf00      	nop
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr
 8001ddc:	e000e100 	.word	0xe000e100
 8001de0:	e000ed00 	.word	0xe000ed00

08001de4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b089      	sub	sp, #36	; 0x24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	60f8      	str	r0, [r7, #12]
 8001dec:	60b9      	str	r1, [r7, #8]
 8001dee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001df8:	69fb      	ldr	r3, [r7, #28]
 8001dfa:	f1c3 0307 	rsb	r3, r3, #7
 8001dfe:	2b04      	cmp	r3, #4
 8001e00:	bf28      	it	cs
 8001e02:	2304      	movcs	r3, #4
 8001e04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	3304      	adds	r3, #4
 8001e0a:	2b06      	cmp	r3, #6
 8001e0c:	d902      	bls.n	8001e14 <NVIC_EncodePriority+0x30>
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	3b03      	subs	r3, #3
 8001e12:	e000      	b.n	8001e16 <NVIC_EncodePriority+0x32>
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e18:	f04f 32ff 	mov.w	r2, #4294967295
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e22:	43da      	mvns	r2, r3
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	401a      	ands	r2, r3
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	fa01 f303 	lsl.w	r3, r1, r3
 8001e36:	43d9      	mvns	r1, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e3c:	4313      	orrs	r3, r2
         );
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3724      	adds	r7, #36	; 0x24
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
	...

08001e4c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001e50:	f3bf 8f4f 	dsb	sy
}
 8001e54:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001e56:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <__NVIC_SystemReset+0x24>)
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001e5e:	4904      	ldr	r1, [pc, #16]	; (8001e70 <__NVIC_SystemReset+0x24>)
 8001e60:	4b04      	ldr	r3, [pc, #16]	; (8001e74 <__NVIC_SystemReset+0x28>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001e66:	f3bf 8f4f 	dsb	sy
}
 8001e6a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001e6c:	bf00      	nop
 8001e6e:	e7fd      	b.n	8001e6c <__NVIC_SystemReset+0x20>
 8001e70:	e000ed00 	.word	0xe000ed00
 8001e74:	05fa0004 	.word	0x05fa0004

08001e78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f7ff ff11 	bl	8001ca8 <__NVIC_SetPriorityGrouping>
}
 8001e86:	bf00      	nop
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b086      	sub	sp, #24
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	4603      	mov	r3, r0
 8001e96:	60b9      	str	r1, [r7, #8]
 8001e98:	607a      	str	r2, [r7, #4]
 8001e9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ea0:	f7ff ff26 	bl	8001cf0 <__NVIC_GetPriorityGrouping>
 8001ea4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	68b9      	ldr	r1, [r7, #8]
 8001eaa:	6978      	ldr	r0, [r7, #20]
 8001eac:	f7ff ff9a 	bl	8001de4 <NVIC_EncodePriority>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eb6:	4611      	mov	r1, r2
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff ff69 	bl	8001d90 <__NVIC_SetPriority>
}
 8001ebe:	bf00      	nop
 8001ec0:	3718      	adds	r7, #24
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b082      	sub	sp, #8
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	4603      	mov	r3, r0
 8001ece:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff ff19 	bl	8001d0c <__NVIC_EnableIRQ>
}
 8001eda:	bf00      	nop
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b082      	sub	sp, #8
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	4603      	mov	r3, r0
 8001eea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff ff29 	bl	8001d48 <__NVIC_DisableIRQ>
}
 8001ef6:	bf00      	nop
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8001f02:	f7ff ffa3 	bl	8001e4c <__NVIC_SystemReset>

08001f06 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b084      	sub	sp, #16
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f12:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f14:	f7ff febc 	bl	8001c90 <HAL_GetTick>
 8001f18:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d008      	beq.n	8001f38 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2280      	movs	r2, #128	; 0x80
 8001f2a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e052      	b.n	8001fde <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f022 0216 	bic.w	r2, r2, #22
 8001f46:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	695a      	ldr	r2, [r3, #20]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f56:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d103      	bne.n	8001f68 <HAL_DMA_Abort+0x62>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d007      	beq.n	8001f78 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f022 0208 	bic.w	r2, r2, #8
 8001f76:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f022 0201 	bic.w	r2, r2, #1
 8001f86:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f88:	e013      	b.n	8001fb2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f8a:	f7ff fe81 	bl	8001c90 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b05      	cmp	r3, #5
 8001f96:	d90c      	bls.n	8001fb2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2220      	movs	r2, #32
 8001f9c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2203      	movs	r2, #3
 8001fa2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e015      	b.n	8001fde <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0301 	and.w	r3, r3, #1
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d1e4      	bne.n	8001f8a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc4:	223f      	movs	r2, #63	; 0x3f
 8001fc6:	409a      	lsls	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3710      	adds	r7, #16
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fe6:	b480      	push	{r7}
 8001fe8:	b083      	sub	sp, #12
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d004      	beq.n	8002004 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2280      	movs	r2, #128	; 0x80
 8001ffe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e00c      	b.n	800201e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2205      	movs	r2, #5
 8002008:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f022 0201 	bic.w	r2, r2, #1
 800201a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
	...

0800202c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800203e:	4b23      	ldr	r3, [pc, #140]	; (80020cc <HAL_FLASH_Program+0xa0>)
 8002040:	7e1b      	ldrb	r3, [r3, #24]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d101      	bne.n	800204a <HAL_FLASH_Program+0x1e>
 8002046:	2302      	movs	r3, #2
 8002048:	e03b      	b.n	80020c2 <HAL_FLASH_Program+0x96>
 800204a:	4b20      	ldr	r3, [pc, #128]	; (80020cc <HAL_FLASH_Program+0xa0>)
 800204c:	2201      	movs	r2, #1
 800204e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002050:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002054:	f000 f870 	bl	8002138 <FLASH_WaitForLastOperation>
 8002058:	4603      	mov	r3, r0
 800205a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800205c:	7dfb      	ldrb	r3, [r7, #23]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d12b      	bne.n	80020ba <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d105      	bne.n	8002074 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8002068:	783b      	ldrb	r3, [r7, #0]
 800206a:	4619      	mov	r1, r3
 800206c:	68b8      	ldr	r0, [r7, #8]
 800206e:	f000 f91b 	bl	80022a8 <FLASH_Program_Byte>
 8002072:	e016      	b.n	80020a2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d105      	bne.n	8002086 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800207a:	883b      	ldrh	r3, [r7, #0]
 800207c:	4619      	mov	r1, r3
 800207e:	68b8      	ldr	r0, [r7, #8]
 8002080:	f000 f8ee 	bl	8002260 <FLASH_Program_HalfWord>
 8002084:	e00d      	b.n	80020a2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2b02      	cmp	r3, #2
 800208a:	d105      	bne.n	8002098 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	4619      	mov	r1, r3
 8002090:	68b8      	ldr	r0, [r7, #8]
 8002092:	f000 f8c3 	bl	800221c <FLASH_Program_Word>
 8002096:	e004      	b.n	80020a2 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8002098:	e9d7 2300 	ldrd	r2, r3, [r7]
 800209c:	68b8      	ldr	r0, [r7, #8]
 800209e:	f000 f88b 	bl	80021b8 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80020a2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80020a6:	f000 f847 	bl	8002138 <FLASH_WaitForLastOperation>
 80020aa:	4603      	mov	r3, r0
 80020ac:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80020ae:	4b08      	ldr	r3, [pc, #32]	; (80020d0 <HAL_FLASH_Program+0xa4>)
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	4a07      	ldr	r2, [pc, #28]	; (80020d0 <HAL_FLASH_Program+0xa4>)
 80020b4:	f023 0301 	bic.w	r3, r3, #1
 80020b8:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80020ba:	4b04      	ldr	r3, [pc, #16]	; (80020cc <HAL_FLASH_Program+0xa0>)
 80020bc:	2200      	movs	r2, #0
 80020be:	761a      	strb	r2, [r3, #24]
  
  return status;
 80020c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3718      	adds	r7, #24
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	20000314 	.word	0x20000314
 80020d0:	40023c00 	.word	0x40023c00

080020d4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80020da:	2300      	movs	r3, #0
 80020dc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80020de:	4b0b      	ldr	r3, [pc, #44]	; (800210c <HAL_FLASH_Unlock+0x38>)
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	da0b      	bge.n	80020fe <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80020e6:	4b09      	ldr	r3, [pc, #36]	; (800210c <HAL_FLASH_Unlock+0x38>)
 80020e8:	4a09      	ldr	r2, [pc, #36]	; (8002110 <HAL_FLASH_Unlock+0x3c>)
 80020ea:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80020ec:	4b07      	ldr	r3, [pc, #28]	; (800210c <HAL_FLASH_Unlock+0x38>)
 80020ee:	4a09      	ldr	r2, [pc, #36]	; (8002114 <HAL_FLASH_Unlock+0x40>)
 80020f0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80020f2:	4b06      	ldr	r3, [pc, #24]	; (800210c <HAL_FLASH_Unlock+0x38>)
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	da01      	bge.n	80020fe <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80020fe:	79fb      	ldrb	r3, [r7, #7]
}
 8002100:	4618      	mov	r0, r3
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	40023c00 	.word	0x40023c00
 8002110:	45670123 	.word	0x45670123
 8002114:	cdef89ab 	.word	0xcdef89ab

08002118 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800211c:	4b05      	ldr	r3, [pc, #20]	; (8002134 <HAL_FLASH_Lock+0x1c>)
 800211e:	691b      	ldr	r3, [r3, #16]
 8002120:	4a04      	ldr	r2, [pc, #16]	; (8002134 <HAL_FLASH_Lock+0x1c>)
 8002122:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002126:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr
 8002134:	40023c00 	.word	0x40023c00

08002138 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002140:	2300      	movs	r3, #0
 8002142:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002144:	4b1a      	ldr	r3, [pc, #104]	; (80021b0 <FLASH_WaitForLastOperation+0x78>)
 8002146:	2200      	movs	r2, #0
 8002148:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800214a:	f7ff fda1 	bl	8001c90 <HAL_GetTick>
 800214e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002150:	e010      	b.n	8002174 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002158:	d00c      	beq.n	8002174 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d007      	beq.n	8002170 <FLASH_WaitForLastOperation+0x38>
 8002160:	f7ff fd96 	bl	8001c90 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	429a      	cmp	r2, r3
 800216e:	d201      	bcs.n	8002174 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e019      	b.n	80021a8 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8002174:	4b0f      	ldr	r3, [pc, #60]	; (80021b4 <FLASH_WaitForLastOperation+0x7c>)
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d1e8      	bne.n	8002152 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8002180:	4b0c      	ldr	r3, [pc, #48]	; (80021b4 <FLASH_WaitForLastOperation+0x7c>)
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	2b00      	cmp	r3, #0
 800218a:	d002      	beq.n	8002192 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800218c:	4b09      	ldr	r3, [pc, #36]	; (80021b4 <FLASH_WaitForLastOperation+0x7c>)
 800218e:	2201      	movs	r2, #1
 8002190:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8002192:	4b08      	ldr	r3, [pc, #32]	; (80021b4 <FLASH_WaitForLastOperation+0x7c>)
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800219e:	f000 f8a5 	bl	80022ec <FLASH_SetErrorCode>
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	e000      	b.n	80021a8 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80021a6:	2300      	movs	r3, #0
  
}  
 80021a8:	4618      	mov	r0, r3
 80021aa:	3710      	adds	r7, #16
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	20000314 	.word	0x20000314
 80021b4:	40023c00 	.word	0x40023c00

080021b8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80021c4:	4b14      	ldr	r3, [pc, #80]	; (8002218 <FLASH_Program_DoubleWord+0x60>)
 80021c6:	691b      	ldr	r3, [r3, #16]
 80021c8:	4a13      	ldr	r2, [pc, #76]	; (8002218 <FLASH_Program_DoubleWord+0x60>)
 80021ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021ce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80021d0:	4b11      	ldr	r3, [pc, #68]	; (8002218 <FLASH_Program_DoubleWord+0x60>)
 80021d2:	691b      	ldr	r3, [r3, #16]
 80021d4:	4a10      	ldr	r2, [pc, #64]	; (8002218 <FLASH_Program_DoubleWord+0x60>)
 80021d6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80021da:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80021dc:	4b0e      	ldr	r3, [pc, #56]	; (8002218 <FLASH_Program_DoubleWord+0x60>)
 80021de:	691b      	ldr	r3, [r3, #16]
 80021e0:	4a0d      	ldr	r2, [pc, #52]	; (8002218 <FLASH_Program_DoubleWord+0x60>)
 80021e2:	f043 0301 	orr.w	r3, r3, #1
 80021e6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80021ee:	f3bf 8f6f 	isb	sy
}
 80021f2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80021f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80021f8:	f04f 0200 	mov.w	r2, #0
 80021fc:	f04f 0300 	mov.w	r3, #0
 8002200:	000a      	movs	r2, r1
 8002202:	2300      	movs	r3, #0
 8002204:	68f9      	ldr	r1, [r7, #12]
 8002206:	3104      	adds	r1, #4
 8002208:	4613      	mov	r3, r2
 800220a:	600b      	str	r3, [r1, #0]
}
 800220c:	bf00      	nop
 800220e:	3714      	adds	r7, #20
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr
 8002218:	40023c00 	.word	0x40023c00

0800221c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002226:	4b0d      	ldr	r3, [pc, #52]	; (800225c <FLASH_Program_Word+0x40>)
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	4a0c      	ldr	r2, [pc, #48]	; (800225c <FLASH_Program_Word+0x40>)
 800222c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002230:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8002232:	4b0a      	ldr	r3, [pc, #40]	; (800225c <FLASH_Program_Word+0x40>)
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	4a09      	ldr	r2, [pc, #36]	; (800225c <FLASH_Program_Word+0x40>)
 8002238:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800223c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800223e:	4b07      	ldr	r3, [pc, #28]	; (800225c <FLASH_Program_Word+0x40>)
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	4a06      	ldr	r2, [pc, #24]	; (800225c <FLASH_Program_Word+0x40>)
 8002244:	f043 0301 	orr.w	r3, r3, #1
 8002248:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	601a      	str	r2, [r3, #0]
}
 8002250:	bf00      	nop
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	40023c00 	.word	0x40023c00

08002260 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	460b      	mov	r3, r1
 800226a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800226c:	4b0d      	ldr	r3, [pc, #52]	; (80022a4 <FLASH_Program_HalfWord+0x44>)
 800226e:	691b      	ldr	r3, [r3, #16]
 8002270:	4a0c      	ldr	r2, [pc, #48]	; (80022a4 <FLASH_Program_HalfWord+0x44>)
 8002272:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002276:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8002278:	4b0a      	ldr	r3, [pc, #40]	; (80022a4 <FLASH_Program_HalfWord+0x44>)
 800227a:	691b      	ldr	r3, [r3, #16]
 800227c:	4a09      	ldr	r2, [pc, #36]	; (80022a4 <FLASH_Program_HalfWord+0x44>)
 800227e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002282:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002284:	4b07      	ldr	r3, [pc, #28]	; (80022a4 <FLASH_Program_HalfWord+0x44>)
 8002286:	691b      	ldr	r3, [r3, #16]
 8002288:	4a06      	ldr	r2, [pc, #24]	; (80022a4 <FLASH_Program_HalfWord+0x44>)
 800228a:	f043 0301 	orr.w	r3, r3, #1
 800228e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	887a      	ldrh	r2, [r7, #2]
 8002294:	801a      	strh	r2, [r3, #0]
}
 8002296:	bf00      	nop
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	40023c00 	.word	0x40023c00

080022a8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	460b      	mov	r3, r1
 80022b2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80022b4:	4b0c      	ldr	r3, [pc, #48]	; (80022e8 <FLASH_Program_Byte+0x40>)
 80022b6:	691b      	ldr	r3, [r3, #16]
 80022b8:	4a0b      	ldr	r2, [pc, #44]	; (80022e8 <FLASH_Program_Byte+0x40>)
 80022ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80022c0:	4b09      	ldr	r3, [pc, #36]	; (80022e8 <FLASH_Program_Byte+0x40>)
 80022c2:	4a09      	ldr	r2, [pc, #36]	; (80022e8 <FLASH_Program_Byte+0x40>)
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80022c8:	4b07      	ldr	r3, [pc, #28]	; (80022e8 <FLASH_Program_Byte+0x40>)
 80022ca:	691b      	ldr	r3, [r3, #16]
 80022cc:	4a06      	ldr	r2, [pc, #24]	; (80022e8 <FLASH_Program_Byte+0x40>)
 80022ce:	f043 0301 	orr.w	r3, r3, #1
 80022d2:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	78fa      	ldrb	r2, [r7, #3]
 80022d8:	701a      	strb	r2, [r3, #0]
}
 80022da:	bf00      	nop
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	40023c00 	.word	0x40023c00

080022ec <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80022f0:	4b2f      	ldr	r3, [pc, #188]	; (80023b0 <FLASH_SetErrorCode+0xc4>)
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	f003 0310 	and.w	r3, r3, #16
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d008      	beq.n	800230e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80022fc:	4b2d      	ldr	r3, [pc, #180]	; (80023b4 <FLASH_SetErrorCode+0xc8>)
 80022fe:	69db      	ldr	r3, [r3, #28]
 8002300:	f043 0310 	orr.w	r3, r3, #16
 8002304:	4a2b      	ldr	r2, [pc, #172]	; (80023b4 <FLASH_SetErrorCode+0xc8>)
 8002306:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002308:	4b29      	ldr	r3, [pc, #164]	; (80023b0 <FLASH_SetErrorCode+0xc4>)
 800230a:	2210      	movs	r2, #16
 800230c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800230e:	4b28      	ldr	r3, [pc, #160]	; (80023b0 <FLASH_SetErrorCode+0xc4>)
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	f003 0320 	and.w	r3, r3, #32
 8002316:	2b00      	cmp	r3, #0
 8002318:	d008      	beq.n	800232c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800231a:	4b26      	ldr	r3, [pc, #152]	; (80023b4 <FLASH_SetErrorCode+0xc8>)
 800231c:	69db      	ldr	r3, [r3, #28]
 800231e:	f043 0308 	orr.w	r3, r3, #8
 8002322:	4a24      	ldr	r2, [pc, #144]	; (80023b4 <FLASH_SetErrorCode+0xc8>)
 8002324:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8002326:	4b22      	ldr	r3, [pc, #136]	; (80023b0 <FLASH_SetErrorCode+0xc4>)
 8002328:	2220      	movs	r2, #32
 800232a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800232c:	4b20      	ldr	r3, [pc, #128]	; (80023b0 <FLASH_SetErrorCode+0xc4>)
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002334:	2b00      	cmp	r3, #0
 8002336:	d008      	beq.n	800234a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002338:	4b1e      	ldr	r3, [pc, #120]	; (80023b4 <FLASH_SetErrorCode+0xc8>)
 800233a:	69db      	ldr	r3, [r3, #28]
 800233c:	f043 0304 	orr.w	r3, r3, #4
 8002340:	4a1c      	ldr	r2, [pc, #112]	; (80023b4 <FLASH_SetErrorCode+0xc8>)
 8002342:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8002344:	4b1a      	ldr	r3, [pc, #104]	; (80023b0 <FLASH_SetErrorCode+0xc4>)
 8002346:	2240      	movs	r2, #64	; 0x40
 8002348:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800234a:	4b19      	ldr	r3, [pc, #100]	; (80023b0 <FLASH_SetErrorCode+0xc4>)
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002352:	2b00      	cmp	r3, #0
 8002354:	d008      	beq.n	8002368 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8002356:	4b17      	ldr	r3, [pc, #92]	; (80023b4 <FLASH_SetErrorCode+0xc8>)
 8002358:	69db      	ldr	r3, [r3, #28]
 800235a:	f043 0302 	orr.w	r3, r3, #2
 800235e:	4a15      	ldr	r2, [pc, #84]	; (80023b4 <FLASH_SetErrorCode+0xc8>)
 8002360:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8002362:	4b13      	ldr	r3, [pc, #76]	; (80023b0 <FLASH_SetErrorCode+0xc4>)
 8002364:	2280      	movs	r2, #128	; 0x80
 8002366:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8002368:	4b11      	ldr	r3, [pc, #68]	; (80023b0 <FLASH_SetErrorCode+0xc4>)
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002370:	2b00      	cmp	r3, #0
 8002372:	d009      	beq.n	8002388 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8002374:	4b0f      	ldr	r3, [pc, #60]	; (80023b4 <FLASH_SetErrorCode+0xc8>)
 8002376:	69db      	ldr	r3, [r3, #28]
 8002378:	f043 0301 	orr.w	r3, r3, #1
 800237c:	4a0d      	ldr	r2, [pc, #52]	; (80023b4 <FLASH_SetErrorCode+0xc8>)
 800237e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8002380:	4b0b      	ldr	r3, [pc, #44]	; (80023b0 <FLASH_SetErrorCode+0xc4>)
 8002382:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002386:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8002388:	4b09      	ldr	r3, [pc, #36]	; (80023b0 <FLASH_SetErrorCode+0xc4>)
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d008      	beq.n	80023a6 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8002394:	4b07      	ldr	r3, [pc, #28]	; (80023b4 <FLASH_SetErrorCode+0xc8>)
 8002396:	69db      	ldr	r3, [r3, #28]
 8002398:	f043 0320 	orr.w	r3, r3, #32
 800239c:	4a05      	ldr	r2, [pc, #20]	; (80023b4 <FLASH_SetErrorCode+0xc8>)
 800239e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80023a0:	4b03      	ldr	r3, [pc, #12]	; (80023b0 <FLASH_SetErrorCode+0xc4>)
 80023a2:	2202      	movs	r2, #2
 80023a4:	60da      	str	r2, [r3, #12]
  }
}
 80023a6:	bf00      	nop
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	40023c00 	.word	0x40023c00
 80023b4:	20000314 	.word	0x20000314

080023b8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80023c6:	2300      	movs	r3, #0
 80023c8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80023ca:	4b31      	ldr	r3, [pc, #196]	; (8002490 <HAL_FLASHEx_Erase+0xd8>)
 80023cc:	7e1b      	ldrb	r3, [r3, #24]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d101      	bne.n	80023d6 <HAL_FLASHEx_Erase+0x1e>
 80023d2:	2302      	movs	r3, #2
 80023d4:	e058      	b.n	8002488 <HAL_FLASHEx_Erase+0xd0>
 80023d6:	4b2e      	ldr	r3, [pc, #184]	; (8002490 <HAL_FLASHEx_Erase+0xd8>)
 80023d8:	2201      	movs	r2, #1
 80023da:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80023dc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80023e0:	f7ff feaa 	bl	8002138 <FLASH_WaitForLastOperation>
 80023e4:	4603      	mov	r3, r0
 80023e6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80023e8:	7bfb      	ldrb	r3, [r7, #15]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d148      	bne.n	8002480 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	f04f 32ff 	mov.w	r2, #4294967295
 80023f4:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d115      	bne.n	800242a <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	b2da      	uxtb	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	4619      	mov	r1, r3
 800240a:	4610      	mov	r0, r2
 800240c:	f000 f844 	bl	8002498 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002410:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002414:	f7ff fe90 	bl	8002138 <FLASH_WaitForLastOperation>
 8002418:	4603      	mov	r3, r0
 800241a:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800241c:	4b1d      	ldr	r3, [pc, #116]	; (8002494 <HAL_FLASHEx_Erase+0xdc>)
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	4a1c      	ldr	r2, [pc, #112]	; (8002494 <HAL_FLASHEx_Erase+0xdc>)
 8002422:	f023 0304 	bic.w	r3, r3, #4
 8002426:	6113      	str	r3, [r2, #16]
 8002428:	e028      	b.n	800247c <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	60bb      	str	r3, [r7, #8]
 8002430:	e01c      	b.n	800246c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	b2db      	uxtb	r3, r3
 8002438:	4619      	mov	r1, r3
 800243a:	68b8      	ldr	r0, [r7, #8]
 800243c:	f000 f850 	bl	80024e0 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002440:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002444:	f7ff fe78 	bl	8002138 <FLASH_WaitForLastOperation>
 8002448:	4603      	mov	r3, r0
 800244a:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800244c:	4b11      	ldr	r3, [pc, #68]	; (8002494 <HAL_FLASHEx_Erase+0xdc>)
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	4a10      	ldr	r2, [pc, #64]	; (8002494 <HAL_FLASHEx_Erase+0xdc>)
 8002452:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8002456:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8002458:	7bfb      	ldrb	r3, [r7, #15]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d003      	beq.n	8002466 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	68ba      	ldr	r2, [r7, #8]
 8002462:	601a      	str	r2, [r3, #0]
          break;
 8002464:	e00a      	b.n	800247c <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	3301      	adds	r3, #1
 800246a:	60bb      	str	r3, [r7, #8]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	68da      	ldr	r2, [r3, #12]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	4413      	add	r3, r2
 8002476:	68ba      	ldr	r2, [r7, #8]
 8002478:	429a      	cmp	r2, r3
 800247a:	d3da      	bcc.n	8002432 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800247c:	f000 f878 	bl	8002570 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002480:	4b03      	ldr	r3, [pc, #12]	; (8002490 <HAL_FLASHEx_Erase+0xd8>)
 8002482:	2200      	movs	r2, #0
 8002484:	761a      	strb	r2, [r3, #24]

  return status;
 8002486:	7bfb      	ldrb	r3, [r7, #15]
}
 8002488:	4618      	mov	r0, r3
 800248a:	3710      	adds	r7, #16
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	20000314 	.word	0x20000314
 8002494:	40023c00 	.word	0x40023c00

08002498 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	4603      	mov	r3, r0
 80024a0:	6039      	str	r1, [r7, #0]
 80024a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80024a4:	4b0d      	ldr	r3, [pc, #52]	; (80024dc <FLASH_MassErase+0x44>)
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	4a0c      	ldr	r2, [pc, #48]	; (80024dc <FLASH_MassErase+0x44>)
 80024aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024ae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80024b0:	4b0a      	ldr	r3, [pc, #40]	; (80024dc <FLASH_MassErase+0x44>)
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	4a09      	ldr	r2, [pc, #36]	; (80024dc <FLASH_MassErase+0x44>)
 80024b6:	f043 0304 	orr.w	r3, r3, #4
 80024ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80024bc:	4b07      	ldr	r3, [pc, #28]	; (80024dc <FLASH_MassErase+0x44>)
 80024be:	691a      	ldr	r2, [r3, #16]
 80024c0:	79fb      	ldrb	r3, [r7, #7]
 80024c2:	021b      	lsls	r3, r3, #8
 80024c4:	4313      	orrs	r3, r2
 80024c6:	4a05      	ldr	r2, [pc, #20]	; (80024dc <FLASH_MassErase+0x44>)
 80024c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024cc:	6113      	str	r3, [r2, #16]
}
 80024ce:	bf00      	nop
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	40023c00 	.word	0x40023c00

080024e0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	460b      	mov	r3, r1
 80024ea:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80024ec:	2300      	movs	r3, #0
 80024ee:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80024f0:	78fb      	ldrb	r3, [r7, #3]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d102      	bne.n	80024fc <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80024f6:	2300      	movs	r3, #0
 80024f8:	60fb      	str	r3, [r7, #12]
 80024fa:	e010      	b.n	800251e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80024fc:	78fb      	ldrb	r3, [r7, #3]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d103      	bne.n	800250a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002502:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002506:	60fb      	str	r3, [r7, #12]
 8002508:	e009      	b.n	800251e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800250a:	78fb      	ldrb	r3, [r7, #3]
 800250c:	2b02      	cmp	r3, #2
 800250e:	d103      	bne.n	8002518 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002510:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002514:	60fb      	str	r3, [r7, #12]
 8002516:	e002      	b.n	800251e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002518:	f44f 7340 	mov.w	r3, #768	; 0x300
 800251c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800251e:	4b13      	ldr	r3, [pc, #76]	; (800256c <FLASH_Erase_Sector+0x8c>)
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	4a12      	ldr	r2, [pc, #72]	; (800256c <FLASH_Erase_Sector+0x8c>)
 8002524:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002528:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800252a:	4b10      	ldr	r3, [pc, #64]	; (800256c <FLASH_Erase_Sector+0x8c>)
 800252c:	691a      	ldr	r2, [r3, #16]
 800252e:	490f      	ldr	r1, [pc, #60]	; (800256c <FLASH_Erase_Sector+0x8c>)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	4313      	orrs	r3, r2
 8002534:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002536:	4b0d      	ldr	r3, [pc, #52]	; (800256c <FLASH_Erase_Sector+0x8c>)
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	4a0c      	ldr	r2, [pc, #48]	; (800256c <FLASH_Erase_Sector+0x8c>)
 800253c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002540:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8002542:	4b0a      	ldr	r3, [pc, #40]	; (800256c <FLASH_Erase_Sector+0x8c>)
 8002544:	691a      	ldr	r2, [r3, #16]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	00db      	lsls	r3, r3, #3
 800254a:	4313      	orrs	r3, r2
 800254c:	4a07      	ldr	r2, [pc, #28]	; (800256c <FLASH_Erase_Sector+0x8c>)
 800254e:	f043 0302 	orr.w	r3, r3, #2
 8002552:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8002554:	4b05      	ldr	r3, [pc, #20]	; (800256c <FLASH_Erase_Sector+0x8c>)
 8002556:	691b      	ldr	r3, [r3, #16]
 8002558:	4a04      	ldr	r2, [pc, #16]	; (800256c <FLASH_Erase_Sector+0x8c>)
 800255a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800255e:	6113      	str	r3, [r2, #16]
}
 8002560:	bf00      	nop
 8002562:	3714      	adds	r7, #20
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr
 800256c:	40023c00 	.word	0x40023c00

08002570 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8002574:	4b20      	ldr	r3, [pc, #128]	; (80025f8 <FLASH_FlushCaches+0x88>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800257c:	2b00      	cmp	r3, #0
 800257e:	d017      	beq.n	80025b0 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8002580:	4b1d      	ldr	r3, [pc, #116]	; (80025f8 <FLASH_FlushCaches+0x88>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a1c      	ldr	r2, [pc, #112]	; (80025f8 <FLASH_FlushCaches+0x88>)
 8002586:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800258a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800258c:	4b1a      	ldr	r3, [pc, #104]	; (80025f8 <FLASH_FlushCaches+0x88>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a19      	ldr	r2, [pc, #100]	; (80025f8 <FLASH_FlushCaches+0x88>)
 8002592:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002596:	6013      	str	r3, [r2, #0]
 8002598:	4b17      	ldr	r3, [pc, #92]	; (80025f8 <FLASH_FlushCaches+0x88>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a16      	ldr	r2, [pc, #88]	; (80025f8 <FLASH_FlushCaches+0x88>)
 800259e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80025a2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025a4:	4b14      	ldr	r3, [pc, #80]	; (80025f8 <FLASH_FlushCaches+0x88>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a13      	ldr	r2, [pc, #76]	; (80025f8 <FLASH_FlushCaches+0x88>)
 80025aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025ae:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80025b0:	4b11      	ldr	r3, [pc, #68]	; (80025f8 <FLASH_FlushCaches+0x88>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d017      	beq.n	80025ec <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80025bc:	4b0e      	ldr	r3, [pc, #56]	; (80025f8 <FLASH_FlushCaches+0x88>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a0d      	ldr	r2, [pc, #52]	; (80025f8 <FLASH_FlushCaches+0x88>)
 80025c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80025c6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80025c8:	4b0b      	ldr	r3, [pc, #44]	; (80025f8 <FLASH_FlushCaches+0x88>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a0a      	ldr	r2, [pc, #40]	; (80025f8 <FLASH_FlushCaches+0x88>)
 80025ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025d2:	6013      	str	r3, [r2, #0]
 80025d4:	4b08      	ldr	r3, [pc, #32]	; (80025f8 <FLASH_FlushCaches+0x88>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a07      	ldr	r2, [pc, #28]	; (80025f8 <FLASH_FlushCaches+0x88>)
 80025da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80025de:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80025e0:	4b05      	ldr	r3, [pc, #20]	; (80025f8 <FLASH_FlushCaches+0x88>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a04      	ldr	r2, [pc, #16]	; (80025f8 <FLASH_FlushCaches+0x88>)
 80025e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025ea:	6013      	str	r3, [r2, #0]
  }
}
 80025ec:	bf00      	nop
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	40023c00 	.word	0x40023c00

080025fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b089      	sub	sp, #36	; 0x24
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
 8002604:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002606:	2300      	movs	r3, #0
 8002608:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800260a:	2300      	movs	r3, #0
 800260c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800260e:	2300      	movs	r3, #0
 8002610:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002612:	2300      	movs	r3, #0
 8002614:	61fb      	str	r3, [r7, #28]
 8002616:	e159      	b.n	80028cc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002618:	2201      	movs	r2, #1
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	fa02 f303 	lsl.w	r3, r2, r3
 8002620:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	697a      	ldr	r2, [r7, #20]
 8002628:	4013      	ands	r3, r2
 800262a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800262c:	693a      	ldr	r2, [r7, #16]
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	429a      	cmp	r2, r3
 8002632:	f040 8148 	bne.w	80028c6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f003 0303 	and.w	r3, r3, #3
 800263e:	2b01      	cmp	r3, #1
 8002640:	d005      	beq.n	800264e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800264a:	2b02      	cmp	r3, #2
 800264c:	d130      	bne.n	80026b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	2203      	movs	r2, #3
 800265a:	fa02 f303 	lsl.w	r3, r2, r3
 800265e:	43db      	mvns	r3, r3
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	4013      	ands	r3, r2
 8002664:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	68da      	ldr	r2, [r3, #12]
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	4313      	orrs	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	69ba      	ldr	r2, [r7, #24]
 800267c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002684:	2201      	movs	r2, #1
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	43db      	mvns	r3, r3
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	4013      	ands	r3, r2
 8002692:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	091b      	lsrs	r3, r3, #4
 800269a:	f003 0201 	and.w	r2, r3, #1
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f003 0303 	and.w	r3, r3, #3
 80026b8:	2b03      	cmp	r3, #3
 80026ba:	d017      	beq.n	80026ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	2203      	movs	r2, #3
 80026c8:	fa02 f303 	lsl.w	r3, r2, r3
 80026cc:	43db      	mvns	r3, r3
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	4013      	ands	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	fa02 f303 	lsl.w	r3, r2, r3
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f003 0303 	and.w	r3, r3, #3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d123      	bne.n	8002740 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	08da      	lsrs	r2, r3, #3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	3208      	adds	r2, #8
 8002700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002704:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	f003 0307 	and.w	r3, r3, #7
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	220f      	movs	r2, #15
 8002710:	fa02 f303 	lsl.w	r3, r2, r3
 8002714:	43db      	mvns	r3, r3
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	4013      	ands	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	691a      	ldr	r2, [r3, #16]
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	f003 0307 	and.w	r3, r3, #7
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	4313      	orrs	r3, r2
 8002730:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	08da      	lsrs	r2, r3, #3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	3208      	adds	r2, #8
 800273a:	69b9      	ldr	r1, [r7, #24]
 800273c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	2203      	movs	r2, #3
 800274c:	fa02 f303 	lsl.w	r3, r2, r3
 8002750:	43db      	mvns	r3, r3
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	4013      	ands	r3, r2
 8002756:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f003 0203 	and.w	r2, r3, #3
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	4313      	orrs	r3, r2
 800276c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800277c:	2b00      	cmp	r3, #0
 800277e:	f000 80a2 	beq.w	80028c6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002782:	2300      	movs	r3, #0
 8002784:	60fb      	str	r3, [r7, #12]
 8002786:	4b57      	ldr	r3, [pc, #348]	; (80028e4 <HAL_GPIO_Init+0x2e8>)
 8002788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278a:	4a56      	ldr	r2, [pc, #344]	; (80028e4 <HAL_GPIO_Init+0x2e8>)
 800278c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002790:	6453      	str	r3, [r2, #68]	; 0x44
 8002792:	4b54      	ldr	r3, [pc, #336]	; (80028e4 <HAL_GPIO_Init+0x2e8>)
 8002794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002796:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800279a:	60fb      	str	r3, [r7, #12]
 800279c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800279e:	4a52      	ldr	r2, [pc, #328]	; (80028e8 <HAL_GPIO_Init+0x2ec>)
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	089b      	lsrs	r3, r3, #2
 80027a4:	3302      	adds	r3, #2
 80027a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	f003 0303 	and.w	r3, r3, #3
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	220f      	movs	r2, #15
 80027b6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ba:	43db      	mvns	r3, r3
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	4013      	ands	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	4a49      	ldr	r2, [pc, #292]	; (80028ec <HAL_GPIO_Init+0x2f0>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d019      	beq.n	80027fe <HAL_GPIO_Init+0x202>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a48      	ldr	r2, [pc, #288]	; (80028f0 <HAL_GPIO_Init+0x2f4>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d013      	beq.n	80027fa <HAL_GPIO_Init+0x1fe>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a47      	ldr	r2, [pc, #284]	; (80028f4 <HAL_GPIO_Init+0x2f8>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d00d      	beq.n	80027f6 <HAL_GPIO_Init+0x1fa>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a46      	ldr	r2, [pc, #280]	; (80028f8 <HAL_GPIO_Init+0x2fc>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d007      	beq.n	80027f2 <HAL_GPIO_Init+0x1f6>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a45      	ldr	r2, [pc, #276]	; (80028fc <HAL_GPIO_Init+0x300>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d101      	bne.n	80027ee <HAL_GPIO_Init+0x1f2>
 80027ea:	2304      	movs	r3, #4
 80027ec:	e008      	b.n	8002800 <HAL_GPIO_Init+0x204>
 80027ee:	2307      	movs	r3, #7
 80027f0:	e006      	b.n	8002800 <HAL_GPIO_Init+0x204>
 80027f2:	2303      	movs	r3, #3
 80027f4:	e004      	b.n	8002800 <HAL_GPIO_Init+0x204>
 80027f6:	2302      	movs	r3, #2
 80027f8:	e002      	b.n	8002800 <HAL_GPIO_Init+0x204>
 80027fa:	2301      	movs	r3, #1
 80027fc:	e000      	b.n	8002800 <HAL_GPIO_Init+0x204>
 80027fe:	2300      	movs	r3, #0
 8002800:	69fa      	ldr	r2, [r7, #28]
 8002802:	f002 0203 	and.w	r2, r2, #3
 8002806:	0092      	lsls	r2, r2, #2
 8002808:	4093      	lsls	r3, r2
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	4313      	orrs	r3, r2
 800280e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002810:	4935      	ldr	r1, [pc, #212]	; (80028e8 <HAL_GPIO_Init+0x2ec>)
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	089b      	lsrs	r3, r3, #2
 8002816:	3302      	adds	r3, #2
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800281e:	4b38      	ldr	r3, [pc, #224]	; (8002900 <HAL_GPIO_Init+0x304>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	43db      	mvns	r3, r3
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	4013      	ands	r3, r2
 800282c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d003      	beq.n	8002842 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	4313      	orrs	r3, r2
 8002840:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002842:	4a2f      	ldr	r2, [pc, #188]	; (8002900 <HAL_GPIO_Init+0x304>)
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002848:	4b2d      	ldr	r3, [pc, #180]	; (8002900 <HAL_GPIO_Init+0x304>)
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	43db      	mvns	r3, r3
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	4013      	ands	r3, r2
 8002856:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d003      	beq.n	800286c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	4313      	orrs	r3, r2
 800286a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800286c:	4a24      	ldr	r2, [pc, #144]	; (8002900 <HAL_GPIO_Init+0x304>)
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002872:	4b23      	ldr	r3, [pc, #140]	; (8002900 <HAL_GPIO_Init+0x304>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	43db      	mvns	r3, r3
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	4013      	ands	r3, r2
 8002880:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d003      	beq.n	8002896 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	4313      	orrs	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002896:	4a1a      	ldr	r2, [pc, #104]	; (8002900 <HAL_GPIO_Init+0x304>)
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800289c:	4b18      	ldr	r3, [pc, #96]	; (8002900 <HAL_GPIO_Init+0x304>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	43db      	mvns	r3, r3
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	4013      	ands	r3, r2
 80028aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d003      	beq.n	80028c0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	4313      	orrs	r3, r2
 80028be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028c0:	4a0f      	ldr	r2, [pc, #60]	; (8002900 <HAL_GPIO_Init+0x304>)
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	3301      	adds	r3, #1
 80028ca:	61fb      	str	r3, [r7, #28]
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	2b0f      	cmp	r3, #15
 80028d0:	f67f aea2 	bls.w	8002618 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028d4:	bf00      	nop
 80028d6:	bf00      	nop
 80028d8:	3724      	adds	r7, #36	; 0x24
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	40023800 	.word	0x40023800
 80028e8:	40013800 	.word	0x40013800
 80028ec:	40020000 	.word	0x40020000
 80028f0:	40020400 	.word	0x40020400
 80028f4:	40020800 	.word	0x40020800
 80028f8:	40020c00 	.word	0x40020c00
 80028fc:	40021000 	.word	0x40021000
 8002900:	40013c00 	.word	0x40013c00

08002904 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	460b      	mov	r3, r1
 800290e:	807b      	strh	r3, [r7, #2]
 8002910:	4613      	mov	r3, r2
 8002912:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002914:	787b      	ldrb	r3, [r7, #1]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d003      	beq.n	8002922 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800291a:	887a      	ldrh	r2, [r7, #2]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002920:	e003      	b.n	800292a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002922:	887b      	ldrh	r3, [r7, #2]
 8002924:	041a      	lsls	r2, r3, #16
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	619a      	str	r2, [r3, #24]
}
 800292a:	bf00      	nop
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr

08002936 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002936:	b480      	push	{r7}
 8002938:	b085      	sub	sp, #20
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
 800293e:	460b      	mov	r3, r1
 8002940:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002948:	887a      	ldrh	r2, [r7, #2]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	4013      	ands	r3, r2
 800294e:	041a      	lsls	r2, r3, #16
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	43d9      	mvns	r1, r3
 8002954:	887b      	ldrh	r3, [r7, #2]
 8002956:	400b      	ands	r3, r1
 8002958:	431a      	orrs	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	619a      	str	r2, [r3, #24]
}
 800295e:	bf00      	nop
 8002960:	3714      	adds	r7, #20
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
	...

0800296c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b086      	sub	sp, #24
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d101      	bne.n	800297e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e267      	b.n	8002e4e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	2b00      	cmp	r3, #0
 8002988:	d075      	beq.n	8002a76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800298a:	4b88      	ldr	r3, [pc, #544]	; (8002bac <HAL_RCC_OscConfig+0x240>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 030c 	and.w	r3, r3, #12
 8002992:	2b04      	cmp	r3, #4
 8002994:	d00c      	beq.n	80029b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002996:	4b85      	ldr	r3, [pc, #532]	; (8002bac <HAL_RCC_OscConfig+0x240>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800299e:	2b08      	cmp	r3, #8
 80029a0:	d112      	bne.n	80029c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029a2:	4b82      	ldr	r3, [pc, #520]	; (8002bac <HAL_RCC_OscConfig+0x240>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029ae:	d10b      	bne.n	80029c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029b0:	4b7e      	ldr	r3, [pc, #504]	; (8002bac <HAL_RCC_OscConfig+0x240>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d05b      	beq.n	8002a74 <HAL_RCC_OscConfig+0x108>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d157      	bne.n	8002a74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e242      	b.n	8002e4e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029d0:	d106      	bne.n	80029e0 <HAL_RCC_OscConfig+0x74>
 80029d2:	4b76      	ldr	r3, [pc, #472]	; (8002bac <HAL_RCC_OscConfig+0x240>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a75      	ldr	r2, [pc, #468]	; (8002bac <HAL_RCC_OscConfig+0x240>)
 80029d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029dc:	6013      	str	r3, [r2, #0]
 80029de:	e01d      	b.n	8002a1c <HAL_RCC_OscConfig+0xb0>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029e8:	d10c      	bne.n	8002a04 <HAL_RCC_OscConfig+0x98>
 80029ea:	4b70      	ldr	r3, [pc, #448]	; (8002bac <HAL_RCC_OscConfig+0x240>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a6f      	ldr	r2, [pc, #444]	; (8002bac <HAL_RCC_OscConfig+0x240>)
 80029f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029f4:	6013      	str	r3, [r2, #0]
 80029f6:	4b6d      	ldr	r3, [pc, #436]	; (8002bac <HAL_RCC_OscConfig+0x240>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a6c      	ldr	r2, [pc, #432]	; (8002bac <HAL_RCC_OscConfig+0x240>)
 80029fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a00:	6013      	str	r3, [r2, #0]
 8002a02:	e00b      	b.n	8002a1c <HAL_RCC_OscConfig+0xb0>
 8002a04:	4b69      	ldr	r3, [pc, #420]	; (8002bac <HAL_RCC_OscConfig+0x240>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a68      	ldr	r2, [pc, #416]	; (8002bac <HAL_RCC_OscConfig+0x240>)
 8002a0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a0e:	6013      	str	r3, [r2, #0]
 8002a10:	4b66      	ldr	r3, [pc, #408]	; (8002bac <HAL_RCC_OscConfig+0x240>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a65      	ldr	r2, [pc, #404]	; (8002bac <HAL_RCC_OscConfig+0x240>)
 8002a16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d013      	beq.n	8002a4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a24:	f7ff f934 	bl	8001c90 <HAL_GetTick>
 8002a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a2a:	e008      	b.n	8002a3e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a2c:	f7ff f930 	bl	8001c90 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b64      	cmp	r3, #100	; 0x64
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e207      	b.n	8002e4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a3e:	4b5b      	ldr	r3, [pc, #364]	; (8002bac <HAL_RCC_OscConfig+0x240>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d0f0      	beq.n	8002a2c <HAL_RCC_OscConfig+0xc0>
 8002a4a:	e014      	b.n	8002a76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a4c:	f7ff f920 	bl	8001c90 <HAL_GetTick>
 8002a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a52:	e008      	b.n	8002a66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a54:	f7ff f91c 	bl	8001c90 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b64      	cmp	r3, #100	; 0x64
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e1f3      	b.n	8002e4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a66:	4b51      	ldr	r3, [pc, #324]	; (8002bac <HAL_RCC_OscConfig+0x240>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1f0      	bne.n	8002a54 <HAL_RCC_OscConfig+0xe8>
 8002a72:	e000      	b.n	8002a76 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d063      	beq.n	8002b4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a82:	4b4a      	ldr	r3, [pc, #296]	; (8002bac <HAL_RCC_OscConfig+0x240>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f003 030c 	and.w	r3, r3, #12
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00b      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a8e:	4b47      	ldr	r3, [pc, #284]	; (8002bac <HAL_RCC_OscConfig+0x240>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a96:	2b08      	cmp	r3, #8
 8002a98:	d11c      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a9a:	4b44      	ldr	r3, [pc, #272]	; (8002bac <HAL_RCC_OscConfig+0x240>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d116      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aa6:	4b41      	ldr	r3, [pc, #260]	; (8002bac <HAL_RCC_OscConfig+0x240>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d005      	beq.n	8002abe <HAL_RCC_OscConfig+0x152>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d001      	beq.n	8002abe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e1c7      	b.n	8002e4e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002abe:	4b3b      	ldr	r3, [pc, #236]	; (8002bac <HAL_RCC_OscConfig+0x240>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	4937      	ldr	r1, [pc, #220]	; (8002bac <HAL_RCC_OscConfig+0x240>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ad2:	e03a      	b.n	8002b4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d020      	beq.n	8002b1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002adc:	4b34      	ldr	r3, [pc, #208]	; (8002bb0 <HAL_RCC_OscConfig+0x244>)
 8002ade:	2201      	movs	r2, #1
 8002ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae2:	f7ff f8d5 	bl	8001c90 <HAL_GetTick>
 8002ae6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ae8:	e008      	b.n	8002afc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002aea:	f7ff f8d1 	bl	8001c90 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e1a8      	b.n	8002e4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002afc:	4b2b      	ldr	r3, [pc, #172]	; (8002bac <HAL_RCC_OscConfig+0x240>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d0f0      	beq.n	8002aea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b08:	4b28      	ldr	r3, [pc, #160]	; (8002bac <HAL_RCC_OscConfig+0x240>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	691b      	ldr	r3, [r3, #16]
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	4925      	ldr	r1, [pc, #148]	; (8002bac <HAL_RCC_OscConfig+0x240>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	600b      	str	r3, [r1, #0]
 8002b1c:	e015      	b.n	8002b4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b1e:	4b24      	ldr	r3, [pc, #144]	; (8002bb0 <HAL_RCC_OscConfig+0x244>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b24:	f7ff f8b4 	bl	8001c90 <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b2c:	f7ff f8b0 	bl	8001c90 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e187      	b.n	8002e4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b3e:	4b1b      	ldr	r3, [pc, #108]	; (8002bac <HAL_RCC_OscConfig+0x240>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1f0      	bne.n	8002b2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0308 	and.w	r3, r3, #8
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d036      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d016      	beq.n	8002b8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b5e:	4b15      	ldr	r3, [pc, #84]	; (8002bb4 <HAL_RCC_OscConfig+0x248>)
 8002b60:	2201      	movs	r2, #1
 8002b62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b64:	f7ff f894 	bl	8001c90 <HAL_GetTick>
 8002b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b6a:	e008      	b.n	8002b7e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b6c:	f7ff f890 	bl	8001c90 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e167      	b.n	8002e4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b7e:	4b0b      	ldr	r3, [pc, #44]	; (8002bac <HAL_RCC_OscConfig+0x240>)
 8002b80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d0f0      	beq.n	8002b6c <HAL_RCC_OscConfig+0x200>
 8002b8a:	e01b      	b.n	8002bc4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b8c:	4b09      	ldr	r3, [pc, #36]	; (8002bb4 <HAL_RCC_OscConfig+0x248>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b92:	f7ff f87d 	bl	8001c90 <HAL_GetTick>
 8002b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b98:	e00e      	b.n	8002bb8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b9a:	f7ff f879 	bl	8001c90 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d907      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e150      	b.n	8002e4e <HAL_RCC_OscConfig+0x4e2>
 8002bac:	40023800 	.word	0x40023800
 8002bb0:	42470000 	.word	0x42470000
 8002bb4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bb8:	4b88      	ldr	r3, [pc, #544]	; (8002ddc <HAL_RCC_OscConfig+0x470>)
 8002bba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d1ea      	bne.n	8002b9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0304 	and.w	r3, r3, #4
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	f000 8097 	beq.w	8002d00 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bd6:	4b81      	ldr	r3, [pc, #516]	; (8002ddc <HAL_RCC_OscConfig+0x470>)
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d10f      	bne.n	8002c02 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002be2:	2300      	movs	r3, #0
 8002be4:	60bb      	str	r3, [r7, #8]
 8002be6:	4b7d      	ldr	r3, [pc, #500]	; (8002ddc <HAL_RCC_OscConfig+0x470>)
 8002be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bea:	4a7c      	ldr	r2, [pc, #496]	; (8002ddc <HAL_RCC_OscConfig+0x470>)
 8002bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8002bf2:	4b7a      	ldr	r3, [pc, #488]	; (8002ddc <HAL_RCC_OscConfig+0x470>)
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bfa:	60bb      	str	r3, [r7, #8]
 8002bfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c02:	4b77      	ldr	r3, [pc, #476]	; (8002de0 <HAL_RCC_OscConfig+0x474>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d118      	bne.n	8002c40 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c0e:	4b74      	ldr	r3, [pc, #464]	; (8002de0 <HAL_RCC_OscConfig+0x474>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a73      	ldr	r2, [pc, #460]	; (8002de0 <HAL_RCC_OscConfig+0x474>)
 8002c14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c1a:	f7ff f839 	bl	8001c90 <HAL_GetTick>
 8002c1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c20:	e008      	b.n	8002c34 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c22:	f7ff f835 	bl	8001c90 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d901      	bls.n	8002c34 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e10c      	b.n	8002e4e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c34:	4b6a      	ldr	r3, [pc, #424]	; (8002de0 <HAL_RCC_OscConfig+0x474>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d0f0      	beq.n	8002c22 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d106      	bne.n	8002c56 <HAL_RCC_OscConfig+0x2ea>
 8002c48:	4b64      	ldr	r3, [pc, #400]	; (8002ddc <HAL_RCC_OscConfig+0x470>)
 8002c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c4c:	4a63      	ldr	r2, [pc, #396]	; (8002ddc <HAL_RCC_OscConfig+0x470>)
 8002c4e:	f043 0301 	orr.w	r3, r3, #1
 8002c52:	6713      	str	r3, [r2, #112]	; 0x70
 8002c54:	e01c      	b.n	8002c90 <HAL_RCC_OscConfig+0x324>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	2b05      	cmp	r3, #5
 8002c5c:	d10c      	bne.n	8002c78 <HAL_RCC_OscConfig+0x30c>
 8002c5e:	4b5f      	ldr	r3, [pc, #380]	; (8002ddc <HAL_RCC_OscConfig+0x470>)
 8002c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c62:	4a5e      	ldr	r2, [pc, #376]	; (8002ddc <HAL_RCC_OscConfig+0x470>)
 8002c64:	f043 0304 	orr.w	r3, r3, #4
 8002c68:	6713      	str	r3, [r2, #112]	; 0x70
 8002c6a:	4b5c      	ldr	r3, [pc, #368]	; (8002ddc <HAL_RCC_OscConfig+0x470>)
 8002c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6e:	4a5b      	ldr	r2, [pc, #364]	; (8002ddc <HAL_RCC_OscConfig+0x470>)
 8002c70:	f043 0301 	orr.w	r3, r3, #1
 8002c74:	6713      	str	r3, [r2, #112]	; 0x70
 8002c76:	e00b      	b.n	8002c90 <HAL_RCC_OscConfig+0x324>
 8002c78:	4b58      	ldr	r3, [pc, #352]	; (8002ddc <HAL_RCC_OscConfig+0x470>)
 8002c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c7c:	4a57      	ldr	r2, [pc, #348]	; (8002ddc <HAL_RCC_OscConfig+0x470>)
 8002c7e:	f023 0301 	bic.w	r3, r3, #1
 8002c82:	6713      	str	r3, [r2, #112]	; 0x70
 8002c84:	4b55      	ldr	r3, [pc, #340]	; (8002ddc <HAL_RCC_OscConfig+0x470>)
 8002c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c88:	4a54      	ldr	r2, [pc, #336]	; (8002ddc <HAL_RCC_OscConfig+0x470>)
 8002c8a:	f023 0304 	bic.w	r3, r3, #4
 8002c8e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d015      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c98:	f7fe fffa 	bl	8001c90 <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c9e:	e00a      	b.n	8002cb6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ca0:	f7fe fff6 	bl	8001c90 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e0cb      	b.n	8002e4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cb6:	4b49      	ldr	r3, [pc, #292]	; (8002ddc <HAL_RCC_OscConfig+0x470>)
 8002cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d0ee      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x334>
 8002cc2:	e014      	b.n	8002cee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cc4:	f7fe ffe4 	bl	8001c90 <HAL_GetTick>
 8002cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cca:	e00a      	b.n	8002ce2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ccc:	f7fe ffe0 	bl	8001c90 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e0b5      	b.n	8002e4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ce2:	4b3e      	ldr	r3, [pc, #248]	; (8002ddc <HAL_RCC_OscConfig+0x470>)
 8002ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1ee      	bne.n	8002ccc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cee:	7dfb      	ldrb	r3, [r7, #23]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d105      	bne.n	8002d00 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cf4:	4b39      	ldr	r3, [pc, #228]	; (8002ddc <HAL_RCC_OscConfig+0x470>)
 8002cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf8:	4a38      	ldr	r2, [pc, #224]	; (8002ddc <HAL_RCC_OscConfig+0x470>)
 8002cfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cfe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	f000 80a1 	beq.w	8002e4c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d0a:	4b34      	ldr	r3, [pc, #208]	; (8002ddc <HAL_RCC_OscConfig+0x470>)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f003 030c 	and.w	r3, r3, #12
 8002d12:	2b08      	cmp	r3, #8
 8002d14:	d05c      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d141      	bne.n	8002da2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d1e:	4b31      	ldr	r3, [pc, #196]	; (8002de4 <HAL_RCC_OscConfig+0x478>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d24:	f7fe ffb4 	bl	8001c90 <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d2c:	f7fe ffb0 	bl	8001c90 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e087      	b.n	8002e4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d3e:	4b27      	ldr	r3, [pc, #156]	; (8002ddc <HAL_RCC_OscConfig+0x470>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1f0      	bne.n	8002d2c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	69da      	ldr	r2, [r3, #28]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	431a      	orrs	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d58:	019b      	lsls	r3, r3, #6
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d60:	085b      	lsrs	r3, r3, #1
 8002d62:	3b01      	subs	r3, #1
 8002d64:	041b      	lsls	r3, r3, #16
 8002d66:	431a      	orrs	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6c:	061b      	lsls	r3, r3, #24
 8002d6e:	491b      	ldr	r1, [pc, #108]	; (8002ddc <HAL_RCC_OscConfig+0x470>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d74:	4b1b      	ldr	r3, [pc, #108]	; (8002de4 <HAL_RCC_OscConfig+0x478>)
 8002d76:	2201      	movs	r2, #1
 8002d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d7a:	f7fe ff89 	bl	8001c90 <HAL_GetTick>
 8002d7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d80:	e008      	b.n	8002d94 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d82:	f7fe ff85 	bl	8001c90 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d901      	bls.n	8002d94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e05c      	b.n	8002e4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d94:	4b11      	ldr	r3, [pc, #68]	; (8002ddc <HAL_RCC_OscConfig+0x470>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d0f0      	beq.n	8002d82 <HAL_RCC_OscConfig+0x416>
 8002da0:	e054      	b.n	8002e4c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002da2:	4b10      	ldr	r3, [pc, #64]	; (8002de4 <HAL_RCC_OscConfig+0x478>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da8:	f7fe ff72 	bl	8001c90 <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002db0:	f7fe ff6e 	bl	8001c90 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e045      	b.n	8002e4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dc2:	4b06      	ldr	r3, [pc, #24]	; (8002ddc <HAL_RCC_OscConfig+0x470>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1f0      	bne.n	8002db0 <HAL_RCC_OscConfig+0x444>
 8002dce:	e03d      	b.n	8002e4c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d107      	bne.n	8002de8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e038      	b.n	8002e4e <HAL_RCC_OscConfig+0x4e2>
 8002ddc:	40023800 	.word	0x40023800
 8002de0:	40007000 	.word	0x40007000
 8002de4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002de8:	4b1b      	ldr	r3, [pc, #108]	; (8002e58 <HAL_RCC_OscConfig+0x4ec>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d028      	beq.n	8002e48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d121      	bne.n	8002e48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d11a      	bne.n	8002e48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e18:	4013      	ands	r3, r2
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d111      	bne.n	8002e48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e2e:	085b      	lsrs	r3, r3, #1
 8002e30:	3b01      	subs	r3, #1
 8002e32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d107      	bne.n	8002e48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d001      	beq.n	8002e4c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e000      	b.n	8002e4e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3718      	adds	r7, #24
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	40023800 	.word	0x40023800

08002e5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d101      	bne.n	8002e70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e0cc      	b.n	800300a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e70:	4b68      	ldr	r3, [pc, #416]	; (8003014 <HAL_RCC_ClockConfig+0x1b8>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0307 	and.w	r3, r3, #7
 8002e78:	683a      	ldr	r2, [r7, #0]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d90c      	bls.n	8002e98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e7e:	4b65      	ldr	r3, [pc, #404]	; (8003014 <HAL_RCC_ClockConfig+0x1b8>)
 8002e80:	683a      	ldr	r2, [r7, #0]
 8002e82:	b2d2      	uxtb	r2, r2
 8002e84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e86:	4b63      	ldr	r3, [pc, #396]	; (8003014 <HAL_RCC_ClockConfig+0x1b8>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0307 	and.w	r3, r3, #7
 8002e8e:	683a      	ldr	r2, [r7, #0]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d001      	beq.n	8002e98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e0b8      	b.n	800300a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d020      	beq.n	8002ee6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0304 	and.w	r3, r3, #4
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d005      	beq.n	8002ebc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002eb0:	4b59      	ldr	r3, [pc, #356]	; (8003018 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	4a58      	ldr	r2, [pc, #352]	; (8003018 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002eba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0308 	and.w	r3, r3, #8
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d005      	beq.n	8002ed4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ec8:	4b53      	ldr	r3, [pc, #332]	; (8003018 <HAL_RCC_ClockConfig+0x1bc>)
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	4a52      	ldr	r2, [pc, #328]	; (8003018 <HAL_RCC_ClockConfig+0x1bc>)
 8002ece:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ed2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ed4:	4b50      	ldr	r3, [pc, #320]	; (8003018 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	494d      	ldr	r1, [pc, #308]	; (8003018 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d044      	beq.n	8002f7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d107      	bne.n	8002f0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002efa:	4b47      	ldr	r3, [pc, #284]	; (8003018 <HAL_RCC_ClockConfig+0x1bc>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d119      	bne.n	8002f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e07f      	b.n	800300a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d003      	beq.n	8002f1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f16:	2b03      	cmp	r3, #3
 8002f18:	d107      	bne.n	8002f2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f1a:	4b3f      	ldr	r3, [pc, #252]	; (8003018 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d109      	bne.n	8002f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e06f      	b.n	800300a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f2a:	4b3b      	ldr	r3, [pc, #236]	; (8003018 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e067      	b.n	800300a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f3a:	4b37      	ldr	r3, [pc, #220]	; (8003018 <HAL_RCC_ClockConfig+0x1bc>)
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f023 0203 	bic.w	r2, r3, #3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	4934      	ldr	r1, [pc, #208]	; (8003018 <HAL_RCC_ClockConfig+0x1bc>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f4c:	f7fe fea0 	bl	8001c90 <HAL_GetTick>
 8002f50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f52:	e00a      	b.n	8002f6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f54:	f7fe fe9c 	bl	8001c90 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e04f      	b.n	800300a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f6a:	4b2b      	ldr	r3, [pc, #172]	; (8003018 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f003 020c 	and.w	r2, r3, #12
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d1eb      	bne.n	8002f54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f7c:	4b25      	ldr	r3, [pc, #148]	; (8003014 <HAL_RCC_ClockConfig+0x1b8>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0307 	and.w	r3, r3, #7
 8002f84:	683a      	ldr	r2, [r7, #0]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d20c      	bcs.n	8002fa4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f8a:	4b22      	ldr	r3, [pc, #136]	; (8003014 <HAL_RCC_ClockConfig+0x1b8>)
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	b2d2      	uxtb	r2, r2
 8002f90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f92:	4b20      	ldr	r3, [pc, #128]	; (8003014 <HAL_RCC_ClockConfig+0x1b8>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0307 	and.w	r3, r3, #7
 8002f9a:	683a      	ldr	r2, [r7, #0]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d001      	beq.n	8002fa4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e032      	b.n	800300a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0304 	and.w	r3, r3, #4
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d008      	beq.n	8002fc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fb0:	4b19      	ldr	r3, [pc, #100]	; (8003018 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	4916      	ldr	r1, [pc, #88]	; (8003018 <HAL_RCC_ClockConfig+0x1bc>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0308 	and.w	r3, r3, #8
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d009      	beq.n	8002fe2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fce:	4b12      	ldr	r3, [pc, #72]	; (8003018 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	490e      	ldr	r1, [pc, #56]	; (8003018 <HAL_RCC_ClockConfig+0x1bc>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fe2:	f000 f821 	bl	8003028 <HAL_RCC_GetSysClockFreq>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	4b0b      	ldr	r3, [pc, #44]	; (8003018 <HAL_RCC_ClockConfig+0x1bc>)
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	091b      	lsrs	r3, r3, #4
 8002fee:	f003 030f 	and.w	r3, r3, #15
 8002ff2:	490a      	ldr	r1, [pc, #40]	; (800301c <HAL_RCC_ClockConfig+0x1c0>)
 8002ff4:	5ccb      	ldrb	r3, [r1, r3]
 8002ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8002ffa:	4a09      	ldr	r2, [pc, #36]	; (8003020 <HAL_RCC_ClockConfig+0x1c4>)
 8002ffc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ffe:	4b09      	ldr	r3, [pc, #36]	; (8003024 <HAL_RCC_ClockConfig+0x1c8>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4618      	mov	r0, r3
 8003004:	f7fe fb5c 	bl	80016c0 <HAL_InitTick>

  return HAL_OK;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	40023c00 	.word	0x40023c00
 8003018:	40023800 	.word	0x40023800
 800301c:	080081e8 	.word	0x080081e8
 8003020:	20000000 	.word	0x20000000
 8003024:	20000004 	.word	0x20000004

08003028 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003028:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800302c:	b094      	sub	sp, #80	; 0x50
 800302e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003030:	2300      	movs	r3, #0
 8003032:	647b      	str	r3, [r7, #68]	; 0x44
 8003034:	2300      	movs	r3, #0
 8003036:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003038:	2300      	movs	r3, #0
 800303a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800303c:	2300      	movs	r3, #0
 800303e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003040:	4b79      	ldr	r3, [pc, #484]	; (8003228 <HAL_RCC_GetSysClockFreq+0x200>)
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f003 030c 	and.w	r3, r3, #12
 8003048:	2b08      	cmp	r3, #8
 800304a:	d00d      	beq.n	8003068 <HAL_RCC_GetSysClockFreq+0x40>
 800304c:	2b08      	cmp	r3, #8
 800304e:	f200 80e1 	bhi.w	8003214 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003052:	2b00      	cmp	r3, #0
 8003054:	d002      	beq.n	800305c <HAL_RCC_GetSysClockFreq+0x34>
 8003056:	2b04      	cmp	r3, #4
 8003058:	d003      	beq.n	8003062 <HAL_RCC_GetSysClockFreq+0x3a>
 800305a:	e0db      	b.n	8003214 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800305c:	4b73      	ldr	r3, [pc, #460]	; (800322c <HAL_RCC_GetSysClockFreq+0x204>)
 800305e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003060:	e0db      	b.n	800321a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003062:	4b73      	ldr	r3, [pc, #460]	; (8003230 <HAL_RCC_GetSysClockFreq+0x208>)
 8003064:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003066:	e0d8      	b.n	800321a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003068:	4b6f      	ldr	r3, [pc, #444]	; (8003228 <HAL_RCC_GetSysClockFreq+0x200>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003070:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003072:	4b6d      	ldr	r3, [pc, #436]	; (8003228 <HAL_RCC_GetSysClockFreq+0x200>)
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d063      	beq.n	8003146 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800307e:	4b6a      	ldr	r3, [pc, #424]	; (8003228 <HAL_RCC_GetSysClockFreq+0x200>)
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	099b      	lsrs	r3, r3, #6
 8003084:	2200      	movs	r2, #0
 8003086:	63bb      	str	r3, [r7, #56]	; 0x38
 8003088:	63fa      	str	r2, [r7, #60]	; 0x3c
 800308a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800308c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003090:	633b      	str	r3, [r7, #48]	; 0x30
 8003092:	2300      	movs	r3, #0
 8003094:	637b      	str	r3, [r7, #52]	; 0x34
 8003096:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800309a:	4622      	mov	r2, r4
 800309c:	462b      	mov	r3, r5
 800309e:	f04f 0000 	mov.w	r0, #0
 80030a2:	f04f 0100 	mov.w	r1, #0
 80030a6:	0159      	lsls	r1, r3, #5
 80030a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030ac:	0150      	lsls	r0, r2, #5
 80030ae:	4602      	mov	r2, r0
 80030b0:	460b      	mov	r3, r1
 80030b2:	4621      	mov	r1, r4
 80030b4:	1a51      	subs	r1, r2, r1
 80030b6:	6139      	str	r1, [r7, #16]
 80030b8:	4629      	mov	r1, r5
 80030ba:	eb63 0301 	sbc.w	r3, r3, r1
 80030be:	617b      	str	r3, [r7, #20]
 80030c0:	f04f 0200 	mov.w	r2, #0
 80030c4:	f04f 0300 	mov.w	r3, #0
 80030c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030cc:	4659      	mov	r1, fp
 80030ce:	018b      	lsls	r3, r1, #6
 80030d0:	4651      	mov	r1, sl
 80030d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030d6:	4651      	mov	r1, sl
 80030d8:	018a      	lsls	r2, r1, #6
 80030da:	4651      	mov	r1, sl
 80030dc:	ebb2 0801 	subs.w	r8, r2, r1
 80030e0:	4659      	mov	r1, fp
 80030e2:	eb63 0901 	sbc.w	r9, r3, r1
 80030e6:	f04f 0200 	mov.w	r2, #0
 80030ea:	f04f 0300 	mov.w	r3, #0
 80030ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030fa:	4690      	mov	r8, r2
 80030fc:	4699      	mov	r9, r3
 80030fe:	4623      	mov	r3, r4
 8003100:	eb18 0303 	adds.w	r3, r8, r3
 8003104:	60bb      	str	r3, [r7, #8]
 8003106:	462b      	mov	r3, r5
 8003108:	eb49 0303 	adc.w	r3, r9, r3
 800310c:	60fb      	str	r3, [r7, #12]
 800310e:	f04f 0200 	mov.w	r2, #0
 8003112:	f04f 0300 	mov.w	r3, #0
 8003116:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800311a:	4629      	mov	r1, r5
 800311c:	024b      	lsls	r3, r1, #9
 800311e:	4621      	mov	r1, r4
 8003120:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003124:	4621      	mov	r1, r4
 8003126:	024a      	lsls	r2, r1, #9
 8003128:	4610      	mov	r0, r2
 800312a:	4619      	mov	r1, r3
 800312c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800312e:	2200      	movs	r2, #0
 8003130:	62bb      	str	r3, [r7, #40]	; 0x28
 8003132:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003134:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003138:	f7fd fd4e 	bl	8000bd8 <__aeabi_uldivmod>
 800313c:	4602      	mov	r2, r0
 800313e:	460b      	mov	r3, r1
 8003140:	4613      	mov	r3, r2
 8003142:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003144:	e058      	b.n	80031f8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003146:	4b38      	ldr	r3, [pc, #224]	; (8003228 <HAL_RCC_GetSysClockFreq+0x200>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	099b      	lsrs	r3, r3, #6
 800314c:	2200      	movs	r2, #0
 800314e:	4618      	mov	r0, r3
 8003150:	4611      	mov	r1, r2
 8003152:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003156:	623b      	str	r3, [r7, #32]
 8003158:	2300      	movs	r3, #0
 800315a:	627b      	str	r3, [r7, #36]	; 0x24
 800315c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003160:	4642      	mov	r2, r8
 8003162:	464b      	mov	r3, r9
 8003164:	f04f 0000 	mov.w	r0, #0
 8003168:	f04f 0100 	mov.w	r1, #0
 800316c:	0159      	lsls	r1, r3, #5
 800316e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003172:	0150      	lsls	r0, r2, #5
 8003174:	4602      	mov	r2, r0
 8003176:	460b      	mov	r3, r1
 8003178:	4641      	mov	r1, r8
 800317a:	ebb2 0a01 	subs.w	sl, r2, r1
 800317e:	4649      	mov	r1, r9
 8003180:	eb63 0b01 	sbc.w	fp, r3, r1
 8003184:	f04f 0200 	mov.w	r2, #0
 8003188:	f04f 0300 	mov.w	r3, #0
 800318c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003190:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003194:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003198:	ebb2 040a 	subs.w	r4, r2, sl
 800319c:	eb63 050b 	sbc.w	r5, r3, fp
 80031a0:	f04f 0200 	mov.w	r2, #0
 80031a4:	f04f 0300 	mov.w	r3, #0
 80031a8:	00eb      	lsls	r3, r5, #3
 80031aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031ae:	00e2      	lsls	r2, r4, #3
 80031b0:	4614      	mov	r4, r2
 80031b2:	461d      	mov	r5, r3
 80031b4:	4643      	mov	r3, r8
 80031b6:	18e3      	adds	r3, r4, r3
 80031b8:	603b      	str	r3, [r7, #0]
 80031ba:	464b      	mov	r3, r9
 80031bc:	eb45 0303 	adc.w	r3, r5, r3
 80031c0:	607b      	str	r3, [r7, #4]
 80031c2:	f04f 0200 	mov.w	r2, #0
 80031c6:	f04f 0300 	mov.w	r3, #0
 80031ca:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031ce:	4629      	mov	r1, r5
 80031d0:	028b      	lsls	r3, r1, #10
 80031d2:	4621      	mov	r1, r4
 80031d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031d8:	4621      	mov	r1, r4
 80031da:	028a      	lsls	r2, r1, #10
 80031dc:	4610      	mov	r0, r2
 80031de:	4619      	mov	r1, r3
 80031e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031e2:	2200      	movs	r2, #0
 80031e4:	61bb      	str	r3, [r7, #24]
 80031e6:	61fa      	str	r2, [r7, #28]
 80031e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031ec:	f7fd fcf4 	bl	8000bd8 <__aeabi_uldivmod>
 80031f0:	4602      	mov	r2, r0
 80031f2:	460b      	mov	r3, r1
 80031f4:	4613      	mov	r3, r2
 80031f6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80031f8:	4b0b      	ldr	r3, [pc, #44]	; (8003228 <HAL_RCC_GetSysClockFreq+0x200>)
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	0c1b      	lsrs	r3, r3, #16
 80031fe:	f003 0303 	and.w	r3, r3, #3
 8003202:	3301      	adds	r3, #1
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003208:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800320a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800320c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003210:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003212:	e002      	b.n	800321a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003214:	4b05      	ldr	r3, [pc, #20]	; (800322c <HAL_RCC_GetSysClockFreq+0x204>)
 8003216:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003218:	bf00      	nop
    }
  }
  return sysclockfreq;
 800321a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800321c:	4618      	mov	r0, r3
 800321e:	3750      	adds	r7, #80	; 0x50
 8003220:	46bd      	mov	sp, r7
 8003222:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003226:	bf00      	nop
 8003228:	40023800 	.word	0x40023800
 800322c:	00f42400 	.word	0x00f42400
 8003230:	007a1200 	.word	0x007a1200

08003234 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003238:	4b03      	ldr	r3, [pc, #12]	; (8003248 <HAL_RCC_GetHCLKFreq+0x14>)
 800323a:	681b      	ldr	r3, [r3, #0]
}
 800323c:	4618      	mov	r0, r3
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
 8003246:	bf00      	nop
 8003248:	20000000 	.word	0x20000000

0800324c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003250:	f7ff fff0 	bl	8003234 <HAL_RCC_GetHCLKFreq>
 8003254:	4602      	mov	r2, r0
 8003256:	4b05      	ldr	r3, [pc, #20]	; (800326c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	0a9b      	lsrs	r3, r3, #10
 800325c:	f003 0307 	and.w	r3, r3, #7
 8003260:	4903      	ldr	r1, [pc, #12]	; (8003270 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003262:	5ccb      	ldrb	r3, [r1, r3]
 8003264:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003268:	4618      	mov	r0, r3
 800326a:	bd80      	pop	{r7, pc}
 800326c:	40023800 	.word	0x40023800
 8003270:	080081f8 	.word	0x080081f8

08003274 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003278:	f7ff ffdc 	bl	8003234 <HAL_RCC_GetHCLKFreq>
 800327c:	4602      	mov	r2, r0
 800327e:	4b05      	ldr	r3, [pc, #20]	; (8003294 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	0b5b      	lsrs	r3, r3, #13
 8003284:	f003 0307 	and.w	r3, r3, #7
 8003288:	4903      	ldr	r1, [pc, #12]	; (8003298 <HAL_RCC_GetPCLK2Freq+0x24>)
 800328a:	5ccb      	ldrb	r3, [r1, r3]
 800328c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003290:	4618      	mov	r0, r3
 8003292:	bd80      	pop	{r7, pc}
 8003294:	40023800 	.word	0x40023800
 8003298:	080081f8 	.word	0x080081f8

0800329c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	220f      	movs	r2, #15
 80032aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80032ac:	4b12      	ldr	r3, [pc, #72]	; (80032f8 <HAL_RCC_GetClockConfig+0x5c>)
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f003 0203 	and.w	r2, r3, #3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80032b8:	4b0f      	ldr	r3, [pc, #60]	; (80032f8 <HAL_RCC_GetClockConfig+0x5c>)
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80032c4:	4b0c      	ldr	r3, [pc, #48]	; (80032f8 <HAL_RCC_GetClockConfig+0x5c>)
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80032d0:	4b09      	ldr	r3, [pc, #36]	; (80032f8 <HAL_RCC_GetClockConfig+0x5c>)
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	08db      	lsrs	r3, r3, #3
 80032d6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80032de:	4b07      	ldr	r3, [pc, #28]	; (80032fc <HAL_RCC_GetClockConfig+0x60>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0207 	and.w	r2, r3, #7
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	601a      	str	r2, [r3, #0]
}
 80032ea:	bf00      	nop
 80032ec:	370c      	adds	r7, #12
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	40023800 	.word	0x40023800
 80032fc:	40023c00 	.word	0x40023c00

08003300 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d101      	bne.n	8003312 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e041      	b.n	8003396 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d106      	bne.n	800332c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 f839 	bl	800339e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2202      	movs	r2, #2
 8003330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	3304      	adds	r3, #4
 800333c:	4619      	mov	r1, r3
 800333e:	4610      	mov	r0, r2
 8003340:	f000 f9ca 	bl	80036d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800339e:	b480      	push	{r7}
 80033a0:	b083      	sub	sp, #12
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80033a6:	bf00      	nop
 80033a8:	370c      	adds	r7, #12
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
	...

080033b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b085      	sub	sp, #20
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d001      	beq.n	80033cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e044      	b.n	8003456 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2202      	movs	r2, #2
 80033d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68da      	ldr	r2, [r3, #12]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f042 0201 	orr.w	r2, r2, #1
 80033e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a1e      	ldr	r2, [pc, #120]	; (8003464 <HAL_TIM_Base_Start_IT+0xb0>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d018      	beq.n	8003420 <HAL_TIM_Base_Start_IT+0x6c>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033f6:	d013      	beq.n	8003420 <HAL_TIM_Base_Start_IT+0x6c>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a1a      	ldr	r2, [pc, #104]	; (8003468 <HAL_TIM_Base_Start_IT+0xb4>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d00e      	beq.n	8003420 <HAL_TIM_Base_Start_IT+0x6c>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a19      	ldr	r2, [pc, #100]	; (800346c <HAL_TIM_Base_Start_IT+0xb8>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d009      	beq.n	8003420 <HAL_TIM_Base_Start_IT+0x6c>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a17      	ldr	r2, [pc, #92]	; (8003470 <HAL_TIM_Base_Start_IT+0xbc>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d004      	beq.n	8003420 <HAL_TIM_Base_Start_IT+0x6c>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a16      	ldr	r2, [pc, #88]	; (8003474 <HAL_TIM_Base_Start_IT+0xc0>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d111      	bne.n	8003444 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f003 0307 	and.w	r3, r3, #7
 800342a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2b06      	cmp	r3, #6
 8003430:	d010      	beq.n	8003454 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f042 0201 	orr.w	r2, r2, #1
 8003440:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003442:	e007      	b.n	8003454 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f042 0201 	orr.w	r2, r2, #1
 8003452:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3714      	adds	r7, #20
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	40010000 	.word	0x40010000
 8003468:	40000400 	.word	0x40000400
 800346c:	40000800 	.word	0x40000800
 8003470:	40000c00 	.word	0x40000c00
 8003474:	40014000 	.word	0x40014000

08003478 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b02      	cmp	r3, #2
 800348c:	d122      	bne.n	80034d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	f003 0302 	and.w	r3, r3, #2
 8003498:	2b02      	cmp	r3, #2
 800349a:	d11b      	bne.n	80034d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f06f 0202 	mvn.w	r2, #2
 80034a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2201      	movs	r2, #1
 80034aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	699b      	ldr	r3, [r3, #24]
 80034b2:	f003 0303 	and.w	r3, r3, #3
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d003      	beq.n	80034c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 f8ee 	bl	800369c <HAL_TIM_IC_CaptureCallback>
 80034c0:	e005      	b.n	80034ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f000 f8e0 	bl	8003688 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 f8f1 	bl	80036b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	f003 0304 	and.w	r3, r3, #4
 80034de:	2b04      	cmp	r3, #4
 80034e0:	d122      	bne.n	8003528 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	f003 0304 	and.w	r3, r3, #4
 80034ec:	2b04      	cmp	r3, #4
 80034ee:	d11b      	bne.n	8003528 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f06f 0204 	mvn.w	r2, #4
 80034f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2202      	movs	r2, #2
 80034fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	699b      	ldr	r3, [r3, #24]
 8003506:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800350a:	2b00      	cmp	r3, #0
 800350c:	d003      	beq.n	8003516 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f8c4 	bl	800369c <HAL_TIM_IC_CaptureCallback>
 8003514:	e005      	b.n	8003522 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 f8b6 	bl	8003688 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f000 f8c7 	bl	80036b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	f003 0308 	and.w	r3, r3, #8
 8003532:	2b08      	cmp	r3, #8
 8003534:	d122      	bne.n	800357c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	f003 0308 	and.w	r3, r3, #8
 8003540:	2b08      	cmp	r3, #8
 8003542:	d11b      	bne.n	800357c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f06f 0208 	mvn.w	r2, #8
 800354c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2204      	movs	r2, #4
 8003552:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	69db      	ldr	r3, [r3, #28]
 800355a:	f003 0303 	and.w	r3, r3, #3
 800355e:	2b00      	cmp	r3, #0
 8003560:	d003      	beq.n	800356a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 f89a 	bl	800369c <HAL_TIM_IC_CaptureCallback>
 8003568:	e005      	b.n	8003576 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 f88c 	bl	8003688 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f000 f89d 	bl	80036b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	f003 0310 	and.w	r3, r3, #16
 8003586:	2b10      	cmp	r3, #16
 8003588:	d122      	bne.n	80035d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	f003 0310 	and.w	r3, r3, #16
 8003594:	2b10      	cmp	r3, #16
 8003596:	d11b      	bne.n	80035d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f06f 0210 	mvn.w	r2, #16
 80035a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2208      	movs	r2, #8
 80035a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	69db      	ldr	r3, [r3, #28]
 80035ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d003      	beq.n	80035be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 f870 	bl	800369c <HAL_TIM_IC_CaptureCallback>
 80035bc:	e005      	b.n	80035ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f862 	bl	8003688 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	f000 f873 	bl	80036b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d10e      	bne.n	80035fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	f003 0301 	and.w	r3, r3, #1
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d107      	bne.n	80035fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f06f 0201 	mvn.w	r2, #1
 80035f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f7fe fa46 	bl	8001a88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003606:	2b80      	cmp	r3, #128	; 0x80
 8003608:	d10e      	bne.n	8003628 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003614:	2b80      	cmp	r3, #128	; 0x80
 8003616:	d107      	bne.n	8003628 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003620:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f000 f8e2 	bl	80037ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003632:	2b40      	cmp	r3, #64	; 0x40
 8003634:	d10e      	bne.n	8003654 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003640:	2b40      	cmp	r3, #64	; 0x40
 8003642:	d107      	bne.n	8003654 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800364c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 f838 	bl	80036c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	f003 0320 	and.w	r3, r3, #32
 800365e:	2b20      	cmp	r3, #32
 8003660:	d10e      	bne.n	8003680 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	f003 0320 	and.w	r3, r3, #32
 800366c:	2b20      	cmp	r3, #32
 800366e:	d107      	bne.n	8003680 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f06f 0220 	mvn.w	r2, #32
 8003678:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 f8ac 	bl	80037d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003680:	bf00      	nop
 8003682:	3708      	adds	r7, #8
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003690:	bf00      	nop
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036a4:	bf00      	nop
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b083      	sub	sp, #12
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036b8:	bf00      	nop
 80036ba:	370c      	adds	r7, #12
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036cc:	bf00      	nop
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80036d8:	b480      	push	{r7}
 80036da:	b085      	sub	sp, #20
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	4a34      	ldr	r2, [pc, #208]	; (80037bc <TIM_Base_SetConfig+0xe4>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d00f      	beq.n	8003710 <TIM_Base_SetConfig+0x38>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036f6:	d00b      	beq.n	8003710 <TIM_Base_SetConfig+0x38>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4a31      	ldr	r2, [pc, #196]	; (80037c0 <TIM_Base_SetConfig+0xe8>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d007      	beq.n	8003710 <TIM_Base_SetConfig+0x38>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a30      	ldr	r2, [pc, #192]	; (80037c4 <TIM_Base_SetConfig+0xec>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d003      	beq.n	8003710 <TIM_Base_SetConfig+0x38>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a2f      	ldr	r2, [pc, #188]	; (80037c8 <TIM_Base_SetConfig+0xf0>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d108      	bne.n	8003722 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003716:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	68fa      	ldr	r2, [r7, #12]
 800371e:	4313      	orrs	r3, r2
 8003720:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a25      	ldr	r2, [pc, #148]	; (80037bc <TIM_Base_SetConfig+0xe4>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d01b      	beq.n	8003762 <TIM_Base_SetConfig+0x8a>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003730:	d017      	beq.n	8003762 <TIM_Base_SetConfig+0x8a>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a22      	ldr	r2, [pc, #136]	; (80037c0 <TIM_Base_SetConfig+0xe8>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d013      	beq.n	8003762 <TIM_Base_SetConfig+0x8a>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a21      	ldr	r2, [pc, #132]	; (80037c4 <TIM_Base_SetConfig+0xec>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d00f      	beq.n	8003762 <TIM_Base_SetConfig+0x8a>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a20      	ldr	r2, [pc, #128]	; (80037c8 <TIM_Base_SetConfig+0xf0>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d00b      	beq.n	8003762 <TIM_Base_SetConfig+0x8a>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a1f      	ldr	r2, [pc, #124]	; (80037cc <TIM_Base_SetConfig+0xf4>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d007      	beq.n	8003762 <TIM_Base_SetConfig+0x8a>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a1e      	ldr	r2, [pc, #120]	; (80037d0 <TIM_Base_SetConfig+0xf8>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d003      	beq.n	8003762 <TIM_Base_SetConfig+0x8a>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a1d      	ldr	r2, [pc, #116]	; (80037d4 <TIM_Base_SetConfig+0xfc>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d108      	bne.n	8003774 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003768:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	68fa      	ldr	r2, [r7, #12]
 8003770:	4313      	orrs	r3, r2
 8003772:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	4313      	orrs	r3, r2
 8003780:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	689a      	ldr	r2, [r3, #8]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	4a08      	ldr	r2, [pc, #32]	; (80037bc <TIM_Base_SetConfig+0xe4>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d103      	bne.n	80037a8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	691a      	ldr	r2, [r3, #16]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2201      	movs	r2, #1
 80037ac:	615a      	str	r2, [r3, #20]
}
 80037ae:	bf00      	nop
 80037b0:	3714      	adds	r7, #20
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	40010000 	.word	0x40010000
 80037c0:	40000400 	.word	0x40000400
 80037c4:	40000800 	.word	0x40000800
 80037c8:	40000c00 	.word	0x40000c00
 80037cc:	40014000 	.word	0x40014000
 80037d0:	40014400 	.word	0x40014400
 80037d4:	40014800 	.word	0x40014800

080037d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037f4:	bf00      	nop
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e03f      	b.n	8003892 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d106      	bne.n	800382c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f7fe f982 	bl	8001b30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2224      	movs	r2, #36	; 0x24
 8003830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68da      	ldr	r2, [r3, #12]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003842:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f000 fddf 	bl	8004408 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	691a      	ldr	r2, [r3, #16]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003858:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	695a      	ldr	r2, [r3, #20]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003868:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68da      	ldr	r2, [r3, #12]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003878:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2220      	movs	r2, #32
 8003884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2220      	movs	r2, #32
 800388c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3708      	adds	r7, #8
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b08a      	sub	sp, #40	; 0x28
 800389e:	af02      	add	r7, sp, #8
 80038a0:	60f8      	str	r0, [r7, #12]
 80038a2:	60b9      	str	r1, [r7, #8]
 80038a4:	603b      	str	r3, [r7, #0]
 80038a6:	4613      	mov	r3, r2
 80038a8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80038aa:	2300      	movs	r3, #0
 80038ac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b20      	cmp	r3, #32
 80038b8:	d17c      	bne.n	80039b4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d002      	beq.n	80038c6 <HAL_UART_Transmit+0x2c>
 80038c0:	88fb      	ldrh	r3, [r7, #6]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d101      	bne.n	80038ca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e075      	b.n	80039b6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d101      	bne.n	80038d8 <HAL_UART_Transmit+0x3e>
 80038d4:	2302      	movs	r3, #2
 80038d6:	e06e      	b.n	80039b6 <HAL_UART_Transmit+0x11c>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2200      	movs	r2, #0
 80038e4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2221      	movs	r2, #33	; 0x21
 80038ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038ee:	f7fe f9cf 	bl	8001c90 <HAL_GetTick>
 80038f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	88fa      	ldrh	r2, [r7, #6]
 80038f8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	88fa      	ldrh	r2, [r7, #6]
 80038fe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003908:	d108      	bne.n	800391c <HAL_UART_Transmit+0x82>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d104      	bne.n	800391c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003912:	2300      	movs	r3, #0
 8003914:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	61bb      	str	r3, [r7, #24]
 800391a:	e003      	b.n	8003924 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003920:	2300      	movs	r3, #0
 8003922:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800392c:	e02a      	b.n	8003984 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	9300      	str	r3, [sp, #0]
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	2200      	movs	r2, #0
 8003936:	2180      	movs	r1, #128	; 0x80
 8003938:	68f8      	ldr	r0, [r7, #12]
 800393a:	f000 fb1f 	bl	8003f7c <UART_WaitOnFlagUntilTimeout>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d001      	beq.n	8003948 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e036      	b.n	80039b6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d10b      	bne.n	8003966 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	881b      	ldrh	r3, [r3, #0]
 8003952:	461a      	mov	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800395c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800395e:	69bb      	ldr	r3, [r7, #24]
 8003960:	3302      	adds	r3, #2
 8003962:	61bb      	str	r3, [r7, #24]
 8003964:	e007      	b.n	8003976 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	781a      	ldrb	r2, [r3, #0]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	3301      	adds	r3, #1
 8003974:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800397a:	b29b      	uxth	r3, r3
 800397c:	3b01      	subs	r3, #1
 800397e:	b29a      	uxth	r2, r3
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003988:	b29b      	uxth	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	d1cf      	bne.n	800392e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	9300      	str	r3, [sp, #0]
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	2200      	movs	r2, #0
 8003996:	2140      	movs	r1, #64	; 0x40
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f000 faef 	bl	8003f7c <UART_WaitOnFlagUntilTimeout>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d001      	beq.n	80039a8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e006      	b.n	80039b6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2220      	movs	r2, #32
 80039ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80039b0:	2300      	movs	r3, #0
 80039b2:	e000      	b.n	80039b6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80039b4:	2302      	movs	r3, #2
  }
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3720      	adds	r7, #32
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039be:	b580      	push	{r7, lr}
 80039c0:	b084      	sub	sp, #16
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	60f8      	str	r0, [r7, #12]
 80039c6:	60b9      	str	r1, [r7, #8]
 80039c8:	4613      	mov	r3, r2
 80039ca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	2b20      	cmp	r3, #32
 80039d6:	d11d      	bne.n	8003a14 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d002      	beq.n	80039e4 <HAL_UART_Receive_IT+0x26>
 80039de:	88fb      	ldrh	r3, [r7, #6]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d101      	bne.n	80039e8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e016      	b.n	8003a16 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d101      	bne.n	80039f6 <HAL_UART_Receive_IT+0x38>
 80039f2:	2302      	movs	r3, #2
 80039f4:	e00f      	b.n	8003a16 <HAL_UART_Receive_IT+0x58>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2201      	movs	r2, #1
 80039fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2200      	movs	r2, #0
 8003a02:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003a04:	88fb      	ldrh	r3, [r7, #6]
 8003a06:	461a      	mov	r2, r3
 8003a08:	68b9      	ldr	r1, [r7, #8]
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	f000 fb24 	bl	8004058 <UART_Start_Receive_IT>
 8003a10:	4603      	mov	r3, r0
 8003a12:	e000      	b.n	8003a16 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003a14:	2302      	movs	r3, #2
  }
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
	...

08003a20 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b0ba      	sub	sp, #232	; 0xe8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003a46:	2300      	movs	r3, #0
 8003a48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a56:	f003 030f 	and.w	r3, r3, #15
 8003a5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003a5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d10f      	bne.n	8003a86 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a6a:	f003 0320 	and.w	r3, r3, #32
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d009      	beq.n	8003a86 <HAL_UART_IRQHandler+0x66>
 8003a72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a76:	f003 0320 	and.w	r3, r3, #32
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d003      	beq.n	8003a86 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 fc07 	bl	8004292 <UART_Receive_IT>
      return;
 8003a84:	e256      	b.n	8003f34 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003a86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	f000 80de 	beq.w	8003c4c <HAL_UART_IRQHandler+0x22c>
 8003a90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a94:	f003 0301 	and.w	r3, r3, #1
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d106      	bne.n	8003aaa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003a9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003aa0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	f000 80d1 	beq.w	8003c4c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00b      	beq.n	8003ace <HAL_UART_IRQHandler+0xae>
 8003ab6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d005      	beq.n	8003ace <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac6:	f043 0201 	orr.w	r2, r3, #1
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ace:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ad2:	f003 0304 	and.w	r3, r3, #4
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d00b      	beq.n	8003af2 <HAL_UART_IRQHandler+0xd2>
 8003ada:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ade:	f003 0301 	and.w	r3, r3, #1
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d005      	beq.n	8003af2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aea:	f043 0202 	orr.w	r2, r3, #2
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003af2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003af6:	f003 0302 	and.w	r3, r3, #2
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00b      	beq.n	8003b16 <HAL_UART_IRQHandler+0xf6>
 8003afe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d005      	beq.n	8003b16 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0e:	f043 0204 	orr.w	r2, r3, #4
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003b16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b1a:	f003 0308 	and.w	r3, r3, #8
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d011      	beq.n	8003b46 <HAL_UART_IRQHandler+0x126>
 8003b22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b26:	f003 0320 	and.w	r3, r3, #32
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d105      	bne.n	8003b3a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b32:	f003 0301 	and.w	r3, r3, #1
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d005      	beq.n	8003b46 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3e:	f043 0208 	orr.w	r2, r3, #8
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	f000 81ed 	beq.w	8003f2a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b54:	f003 0320 	and.w	r3, r3, #32
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d008      	beq.n	8003b6e <HAL_UART_IRQHandler+0x14e>
 8003b5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b60:	f003 0320 	and.w	r3, r3, #32
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d002      	beq.n	8003b6e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 fb92 	bl	8004292 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	695b      	ldr	r3, [r3, #20]
 8003b74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b78:	2b40      	cmp	r3, #64	; 0x40
 8003b7a:	bf0c      	ite	eq
 8003b7c:	2301      	moveq	r3, #1
 8003b7e:	2300      	movne	r3, #0
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b8a:	f003 0308 	and.w	r3, r3, #8
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d103      	bne.n	8003b9a <HAL_UART_IRQHandler+0x17a>
 8003b92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d04f      	beq.n	8003c3a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 fa9a 	bl	80040d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003baa:	2b40      	cmp	r3, #64	; 0x40
 8003bac:	d141      	bne.n	8003c32 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	3314      	adds	r3, #20
 8003bb4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003bbc:	e853 3f00 	ldrex	r3, [r3]
 8003bc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003bc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003bc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bcc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	3314      	adds	r3, #20
 8003bd6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003bda:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003bde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003be6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003bea:	e841 2300 	strex	r3, r2, [r1]
 8003bee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003bf2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d1d9      	bne.n	8003bae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d013      	beq.n	8003c2a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c06:	4a7d      	ldr	r2, [pc, #500]	; (8003dfc <HAL_UART_IRQHandler+0x3dc>)
 8003c08:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c0e:	4618      	mov	r0, r3
 8003c10:	f7fe f9e9 	bl	8001fe6 <HAL_DMA_Abort_IT>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d016      	beq.n	8003c48 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c20:	687a      	ldr	r2, [r7, #4]
 8003c22:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c24:	4610      	mov	r0, r2
 8003c26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c28:	e00e      	b.n	8003c48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f990 	bl	8003f50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c30:	e00a      	b.n	8003c48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 f98c 	bl	8003f50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c38:	e006      	b.n	8003c48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 f988 	bl	8003f50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003c46:	e170      	b.n	8003f2a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c48:	bf00      	nop
    return;
 8003c4a:	e16e      	b.n	8003f2a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	f040 814a 	bne.w	8003eea <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003c56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c5a:	f003 0310 	and.w	r3, r3, #16
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	f000 8143 	beq.w	8003eea <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003c64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c68:	f003 0310 	and.w	r3, r3, #16
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	f000 813c 	beq.w	8003eea <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c72:	2300      	movs	r3, #0
 8003c74:	60bb      	str	r3, [r7, #8]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	60bb      	str	r3, [r7, #8]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	60bb      	str	r3, [r7, #8]
 8003c86:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c92:	2b40      	cmp	r3, #64	; 0x40
 8003c94:	f040 80b4 	bne.w	8003e00 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003ca4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	f000 8140 	beq.w	8003f2e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003cb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	f080 8139 	bcs.w	8003f2e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003cc2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc8:	69db      	ldr	r3, [r3, #28]
 8003cca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cce:	f000 8088 	beq.w	8003de2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	330c      	adds	r3, #12
 8003cd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cdc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ce0:	e853 3f00 	ldrex	r3, [r3]
 8003ce4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003ce8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003cec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cf0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	330c      	adds	r3, #12
 8003cfa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003cfe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d06:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003d0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003d0e:	e841 2300 	strex	r3, r2, [r1]
 8003d12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003d16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1d9      	bne.n	8003cd2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	3314      	adds	r3, #20
 8003d24:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d28:	e853 3f00 	ldrex	r3, [r3]
 8003d2c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003d2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d30:	f023 0301 	bic.w	r3, r3, #1
 8003d34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	3314      	adds	r3, #20
 8003d3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d42:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003d46:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d48:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003d4a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003d4e:	e841 2300 	strex	r3, r2, [r1]
 8003d52:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003d54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d1e1      	bne.n	8003d1e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	3314      	adds	r3, #20
 8003d60:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d64:	e853 3f00 	ldrex	r3, [r3]
 8003d68:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003d6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	3314      	adds	r3, #20
 8003d7a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003d7e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d80:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d82:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003d84:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d86:	e841 2300 	strex	r3, r2, [r1]
 8003d8a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003d8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1e3      	bne.n	8003d5a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2220      	movs	r2, #32
 8003d96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	330c      	adds	r3, #12
 8003da6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003daa:	e853 3f00 	ldrex	r3, [r3]
 8003dae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003db0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003db2:	f023 0310 	bic.w	r3, r3, #16
 8003db6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	330c      	adds	r3, #12
 8003dc0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003dc4:	65ba      	str	r2, [r7, #88]	; 0x58
 8003dc6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003dca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003dcc:	e841 2300 	strex	r3, r2, [r1]
 8003dd0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003dd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d1e3      	bne.n	8003da0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f7fe f892 	bl	8001f06 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	4619      	mov	r1, r3
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 f8b6 	bl	8003f64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003df8:	e099      	b.n	8003f2e <HAL_UART_IRQHandler+0x50e>
 8003dfa:	bf00      	nop
 8003dfc:	0800419b 	.word	0x0800419b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f000 808b 	beq.w	8003f32 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003e1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	f000 8086 	beq.w	8003f32 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	330c      	adds	r3, #12
 8003e2c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e30:	e853 3f00 	ldrex	r3, [r3]
 8003e34:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e3c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	330c      	adds	r3, #12
 8003e46:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003e4a:	647a      	str	r2, [r7, #68]	; 0x44
 8003e4c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e52:	e841 2300 	strex	r3, r2, [r1]
 8003e56:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d1e3      	bne.n	8003e26 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	3314      	adds	r3, #20
 8003e64:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e68:	e853 3f00 	ldrex	r3, [r3]
 8003e6c:	623b      	str	r3, [r7, #32]
   return(result);
 8003e6e:	6a3b      	ldr	r3, [r7, #32]
 8003e70:	f023 0301 	bic.w	r3, r3, #1
 8003e74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	3314      	adds	r3, #20
 8003e7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003e82:	633a      	str	r2, [r7, #48]	; 0x30
 8003e84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e8a:	e841 2300 	strex	r3, r2, [r1]
 8003e8e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1e3      	bne.n	8003e5e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2220      	movs	r2, #32
 8003e9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	330c      	adds	r3, #12
 8003eaa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	e853 3f00 	ldrex	r3, [r3]
 8003eb2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f023 0310 	bic.w	r3, r3, #16
 8003eba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	330c      	adds	r3, #12
 8003ec4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003ec8:	61fa      	str	r2, [r7, #28]
 8003eca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ecc:	69b9      	ldr	r1, [r7, #24]
 8003ece:	69fa      	ldr	r2, [r7, #28]
 8003ed0:	e841 2300 	strex	r3, r2, [r1]
 8003ed4:	617b      	str	r3, [r7, #20]
   return(result);
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d1e3      	bne.n	8003ea4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003edc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 f83e 	bl	8003f64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ee8:	e023      	b.n	8003f32 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003eea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d009      	beq.n	8003f0a <HAL_UART_IRQHandler+0x4ea>
 8003ef6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d003      	beq.n	8003f0a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 f95d 	bl	80041c2 <UART_Transmit_IT>
    return;
 8003f08:	e014      	b.n	8003f34 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00e      	beq.n	8003f34 <HAL_UART_IRQHandler+0x514>
 8003f16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d008      	beq.n	8003f34 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 f99d 	bl	8004262 <UART_EndTransmit_IT>
    return;
 8003f28:	e004      	b.n	8003f34 <HAL_UART_IRQHandler+0x514>
    return;
 8003f2a:	bf00      	nop
 8003f2c:	e002      	b.n	8003f34 <HAL_UART_IRQHandler+0x514>
      return;
 8003f2e:	bf00      	nop
 8003f30:	e000      	b.n	8003f34 <HAL_UART_IRQHandler+0x514>
      return;
 8003f32:	bf00      	nop
  }
}
 8003f34:	37e8      	adds	r7, #232	; 0xe8
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop

08003f3c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003f44:	bf00      	nop
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	460b      	mov	r3, r1
 8003f6e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f70:	bf00      	nop
 8003f72:	370c      	adds	r7, #12
 8003f74:	46bd      	mov	sp, r7
 8003f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7a:	4770      	bx	lr

08003f7c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b090      	sub	sp, #64	; 0x40
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	603b      	str	r3, [r7, #0]
 8003f88:	4613      	mov	r3, r2
 8003f8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f8c:	e050      	b.n	8004030 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f94:	d04c      	beq.n	8004030 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d007      	beq.n	8003fac <UART_WaitOnFlagUntilTimeout+0x30>
 8003f9c:	f7fd fe78 	bl	8001c90 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d241      	bcs.n	8004030 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	330c      	adds	r3, #12
 8003fb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb6:	e853 3f00 	ldrex	r3, [r3]
 8003fba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	330c      	adds	r3, #12
 8003fca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003fcc:	637a      	str	r2, [r7, #52]	; 0x34
 8003fce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fd4:	e841 2300 	strex	r3, r2, [r1]
 8003fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d1e5      	bne.n	8003fac <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	3314      	adds	r3, #20
 8003fe6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	e853 3f00 	ldrex	r3, [r3]
 8003fee:	613b      	str	r3, [r7, #16]
   return(result);
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	f023 0301 	bic.w	r3, r3, #1
 8003ff6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	3314      	adds	r3, #20
 8003ffe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004000:	623a      	str	r2, [r7, #32]
 8004002:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004004:	69f9      	ldr	r1, [r7, #28]
 8004006:	6a3a      	ldr	r2, [r7, #32]
 8004008:	e841 2300 	strex	r3, r2, [r1]
 800400c:	61bb      	str	r3, [r7, #24]
   return(result);
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d1e5      	bne.n	8003fe0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2220      	movs	r2, #32
 8004018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2220      	movs	r2, #32
 8004020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800402c:	2303      	movs	r3, #3
 800402e:	e00f      	b.n	8004050 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	4013      	ands	r3, r2
 800403a:	68ba      	ldr	r2, [r7, #8]
 800403c:	429a      	cmp	r2, r3
 800403e:	bf0c      	ite	eq
 8004040:	2301      	moveq	r3, #1
 8004042:	2300      	movne	r3, #0
 8004044:	b2db      	uxtb	r3, r3
 8004046:	461a      	mov	r2, r3
 8004048:	79fb      	ldrb	r3, [r7, #7]
 800404a:	429a      	cmp	r2, r3
 800404c:	d09f      	beq.n	8003f8e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800404e:	2300      	movs	r3, #0
}
 8004050:	4618      	mov	r0, r3
 8004052:	3740      	adds	r7, #64	; 0x40
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004058:	b480      	push	{r7}
 800405a:	b085      	sub	sp, #20
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	60b9      	str	r1, [r7, #8]
 8004062:	4613      	mov	r3, r2
 8004064:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	68ba      	ldr	r2, [r7, #8]
 800406a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	88fa      	ldrh	r2, [r7, #6]
 8004070:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	88fa      	ldrh	r2, [r7, #6]
 8004076:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2200      	movs	r2, #0
 800407c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2222      	movs	r2, #34	; 0x22
 8004082:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d007      	beq.n	80040a6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68da      	ldr	r2, [r3, #12]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040a4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	695a      	ldr	r2, [r3, #20]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f042 0201 	orr.w	r2, r2, #1
 80040b4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68da      	ldr	r2, [r3, #12]
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f042 0220 	orr.w	r2, r2, #32
 80040c4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3714      	adds	r7, #20
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b095      	sub	sp, #84	; 0x54
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	330c      	adds	r3, #12
 80040e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040e6:	e853 3f00 	ldrex	r3, [r3]
 80040ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80040ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	330c      	adds	r3, #12
 80040fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80040fc:	643a      	str	r2, [r7, #64]	; 0x40
 80040fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004100:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004102:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004104:	e841 2300 	strex	r3, r2, [r1]
 8004108:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800410a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1e5      	bne.n	80040dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	3314      	adds	r3, #20
 8004116:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004118:	6a3b      	ldr	r3, [r7, #32]
 800411a:	e853 3f00 	ldrex	r3, [r3]
 800411e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	f023 0301 	bic.w	r3, r3, #1
 8004126:	64bb      	str	r3, [r7, #72]	; 0x48
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	3314      	adds	r3, #20
 800412e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004130:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004132:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004134:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004136:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004138:	e841 2300 	strex	r3, r2, [r1]
 800413c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800413e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004140:	2b00      	cmp	r3, #0
 8004142:	d1e5      	bne.n	8004110 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004148:	2b01      	cmp	r3, #1
 800414a:	d119      	bne.n	8004180 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	330c      	adds	r3, #12
 8004152:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	e853 3f00 	ldrex	r3, [r3]
 800415a:	60bb      	str	r3, [r7, #8]
   return(result);
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	f023 0310 	bic.w	r3, r3, #16
 8004162:	647b      	str	r3, [r7, #68]	; 0x44
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	330c      	adds	r3, #12
 800416a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800416c:	61ba      	str	r2, [r7, #24]
 800416e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004170:	6979      	ldr	r1, [r7, #20]
 8004172:	69ba      	ldr	r2, [r7, #24]
 8004174:	e841 2300 	strex	r3, r2, [r1]
 8004178:	613b      	str	r3, [r7, #16]
   return(result);
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d1e5      	bne.n	800414c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2220      	movs	r2, #32
 8004184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800418e:	bf00      	nop
 8004190:	3754      	adds	r7, #84	; 0x54
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr

0800419a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800419a:	b580      	push	{r7, lr}
 800419c:	b084      	sub	sp, #16
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2200      	movs	r2, #0
 80041b2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041b4:	68f8      	ldr	r0, [r7, #12]
 80041b6:	f7ff fecb 	bl	8003f50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041ba:	bf00      	nop
 80041bc:	3710      	adds	r7, #16
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80041c2:	b480      	push	{r7}
 80041c4:	b085      	sub	sp, #20
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	2b21      	cmp	r3, #33	; 0x21
 80041d4:	d13e      	bne.n	8004254 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041de:	d114      	bne.n	800420a <UART_Transmit_IT+0x48>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	691b      	ldr	r3, [r3, #16]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d110      	bne.n	800420a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a1b      	ldr	r3, [r3, #32]
 80041ec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	881b      	ldrh	r3, [r3, #0]
 80041f2:	461a      	mov	r2, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041fc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	1c9a      	adds	r2, r3, #2
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	621a      	str	r2, [r3, #32]
 8004208:	e008      	b.n	800421c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a1b      	ldr	r3, [r3, #32]
 800420e:	1c59      	adds	r1, r3, #1
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	6211      	str	r1, [r2, #32]
 8004214:	781a      	ldrb	r2, [r3, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004220:	b29b      	uxth	r3, r3
 8004222:	3b01      	subs	r3, #1
 8004224:	b29b      	uxth	r3, r3
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	4619      	mov	r1, r3
 800422a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800422c:	2b00      	cmp	r3, #0
 800422e:	d10f      	bne.n	8004250 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68da      	ldr	r2, [r3, #12]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800423e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	68da      	ldr	r2, [r3, #12]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800424e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004250:	2300      	movs	r3, #0
 8004252:	e000      	b.n	8004256 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004254:	2302      	movs	r3, #2
  }
}
 8004256:	4618      	mov	r0, r3
 8004258:	3714      	adds	r7, #20
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr

08004262 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004262:	b580      	push	{r7, lr}
 8004264:	b082      	sub	sp, #8
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68da      	ldr	r2, [r3, #12]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004278:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2220      	movs	r2, #32
 800427e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f7ff fe5a 	bl	8003f3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004288:	2300      	movs	r3, #0
}
 800428a:	4618      	mov	r0, r3
 800428c:	3708      	adds	r7, #8
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004292:	b580      	push	{r7, lr}
 8004294:	b08c      	sub	sp, #48	; 0x30
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	2b22      	cmp	r3, #34	; 0x22
 80042a4:	f040 80ab 	bne.w	80043fe <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042b0:	d117      	bne.n	80042e2 <UART_Receive_IT+0x50>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	691b      	ldr	r3, [r3, #16]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d113      	bne.n	80042e2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80042ba:	2300      	movs	r3, #0
 80042bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042d0:	b29a      	uxth	r2, r3
 80042d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042da:	1c9a      	adds	r2, r3, #2
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	629a      	str	r2, [r3, #40]	; 0x28
 80042e0:	e026      	b.n	8004330 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80042e8:	2300      	movs	r3, #0
 80042ea:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042f4:	d007      	beq.n	8004306 <UART_Receive_IT+0x74>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	689b      	ldr	r3, [r3, #8]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d10a      	bne.n	8004314 <UART_Receive_IT+0x82>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d106      	bne.n	8004314 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	b2da      	uxtb	r2, r3
 800430e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004310:	701a      	strb	r2, [r3, #0]
 8004312:	e008      	b.n	8004326 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	b2db      	uxtb	r3, r3
 800431c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004320:	b2da      	uxtb	r2, r3
 8004322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004324:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800432a:	1c5a      	adds	r2, r3, #1
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004334:	b29b      	uxth	r3, r3
 8004336:	3b01      	subs	r3, #1
 8004338:	b29b      	uxth	r3, r3
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	4619      	mov	r1, r3
 800433e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004340:	2b00      	cmp	r3, #0
 8004342:	d15a      	bne.n	80043fa <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68da      	ldr	r2, [r3, #12]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f022 0220 	bic.w	r2, r2, #32
 8004352:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	68da      	ldr	r2, [r3, #12]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004362:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	695a      	ldr	r2, [r3, #20]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f022 0201 	bic.w	r2, r2, #1
 8004372:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2220      	movs	r2, #32
 8004378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004380:	2b01      	cmp	r3, #1
 8004382:	d135      	bne.n	80043f0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	330c      	adds	r3, #12
 8004390:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	e853 3f00 	ldrex	r3, [r3]
 8004398:	613b      	str	r3, [r7, #16]
   return(result);
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	f023 0310 	bic.w	r3, r3, #16
 80043a0:	627b      	str	r3, [r7, #36]	; 0x24
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	330c      	adds	r3, #12
 80043a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043aa:	623a      	str	r2, [r7, #32]
 80043ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ae:	69f9      	ldr	r1, [r7, #28]
 80043b0:	6a3a      	ldr	r2, [r7, #32]
 80043b2:	e841 2300 	strex	r3, r2, [r1]
 80043b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1e5      	bne.n	800438a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0310 	and.w	r3, r3, #16
 80043c8:	2b10      	cmp	r3, #16
 80043ca:	d10a      	bne.n	80043e2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80043cc:	2300      	movs	r3, #0
 80043ce:	60fb      	str	r3, [r7, #12]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	60fb      	str	r3, [r7, #12]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	60fb      	str	r3, [r7, #12]
 80043e0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80043e6:	4619      	mov	r1, r3
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f7ff fdbb 	bl	8003f64 <HAL_UARTEx_RxEventCallback>
 80043ee:	e002      	b.n	80043f6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80043f0:	6878      	ldr	r0, [r7, #4]
 80043f2:	f7fc fd9d 	bl	8000f30 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80043f6:	2300      	movs	r3, #0
 80043f8:	e002      	b.n	8004400 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80043fa:	2300      	movs	r3, #0
 80043fc:	e000      	b.n	8004400 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80043fe:	2302      	movs	r3, #2
  }
}
 8004400:	4618      	mov	r0, r3
 8004402:	3730      	adds	r7, #48	; 0x30
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004408:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800440c:	b0c0      	sub	sp, #256	; 0x100
 800440e:	af00      	add	r7, sp, #0
 8004410:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004424:	68d9      	ldr	r1, [r3, #12]
 8004426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	ea40 0301 	orr.w	r3, r0, r1
 8004430:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004436:	689a      	ldr	r2, [r3, #8]
 8004438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800443c:	691b      	ldr	r3, [r3, #16]
 800443e:	431a      	orrs	r2, r3
 8004440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	431a      	orrs	r2, r3
 8004448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800444c:	69db      	ldr	r3, [r3, #28]
 800444e:	4313      	orrs	r3, r2
 8004450:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004460:	f021 010c 	bic.w	r1, r1, #12
 8004464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800446e:	430b      	orrs	r3, r1
 8004470:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800447e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004482:	6999      	ldr	r1, [r3, #24]
 8004484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	ea40 0301 	orr.w	r3, r0, r1
 800448e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	4b8f      	ldr	r3, [pc, #572]	; (80046d4 <UART_SetConfig+0x2cc>)
 8004498:	429a      	cmp	r2, r3
 800449a:	d005      	beq.n	80044a8 <UART_SetConfig+0xa0>
 800449c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	4b8d      	ldr	r3, [pc, #564]	; (80046d8 <UART_SetConfig+0x2d0>)
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d104      	bne.n	80044b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80044a8:	f7fe fee4 	bl	8003274 <HAL_RCC_GetPCLK2Freq>
 80044ac:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80044b0:	e003      	b.n	80044ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80044b2:	f7fe fecb 	bl	800324c <HAL_RCC_GetPCLK1Freq>
 80044b6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044be:	69db      	ldr	r3, [r3, #28]
 80044c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044c4:	f040 810c 	bne.w	80046e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80044c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044cc:	2200      	movs	r2, #0
 80044ce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80044d2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80044d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80044da:	4622      	mov	r2, r4
 80044dc:	462b      	mov	r3, r5
 80044de:	1891      	adds	r1, r2, r2
 80044e0:	65b9      	str	r1, [r7, #88]	; 0x58
 80044e2:	415b      	adcs	r3, r3
 80044e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80044ea:	4621      	mov	r1, r4
 80044ec:	eb12 0801 	adds.w	r8, r2, r1
 80044f0:	4629      	mov	r1, r5
 80044f2:	eb43 0901 	adc.w	r9, r3, r1
 80044f6:	f04f 0200 	mov.w	r2, #0
 80044fa:	f04f 0300 	mov.w	r3, #0
 80044fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004502:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004506:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800450a:	4690      	mov	r8, r2
 800450c:	4699      	mov	r9, r3
 800450e:	4623      	mov	r3, r4
 8004510:	eb18 0303 	adds.w	r3, r8, r3
 8004514:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004518:	462b      	mov	r3, r5
 800451a:	eb49 0303 	adc.w	r3, r9, r3
 800451e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800452e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004532:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004536:	460b      	mov	r3, r1
 8004538:	18db      	adds	r3, r3, r3
 800453a:	653b      	str	r3, [r7, #80]	; 0x50
 800453c:	4613      	mov	r3, r2
 800453e:	eb42 0303 	adc.w	r3, r2, r3
 8004542:	657b      	str	r3, [r7, #84]	; 0x54
 8004544:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004548:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800454c:	f7fc fb44 	bl	8000bd8 <__aeabi_uldivmod>
 8004550:	4602      	mov	r2, r0
 8004552:	460b      	mov	r3, r1
 8004554:	4b61      	ldr	r3, [pc, #388]	; (80046dc <UART_SetConfig+0x2d4>)
 8004556:	fba3 2302 	umull	r2, r3, r3, r2
 800455a:	095b      	lsrs	r3, r3, #5
 800455c:	011c      	lsls	r4, r3, #4
 800455e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004562:	2200      	movs	r2, #0
 8004564:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004568:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800456c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004570:	4642      	mov	r2, r8
 8004572:	464b      	mov	r3, r9
 8004574:	1891      	adds	r1, r2, r2
 8004576:	64b9      	str	r1, [r7, #72]	; 0x48
 8004578:	415b      	adcs	r3, r3
 800457a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800457c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004580:	4641      	mov	r1, r8
 8004582:	eb12 0a01 	adds.w	sl, r2, r1
 8004586:	4649      	mov	r1, r9
 8004588:	eb43 0b01 	adc.w	fp, r3, r1
 800458c:	f04f 0200 	mov.w	r2, #0
 8004590:	f04f 0300 	mov.w	r3, #0
 8004594:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004598:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800459c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80045a0:	4692      	mov	sl, r2
 80045a2:	469b      	mov	fp, r3
 80045a4:	4643      	mov	r3, r8
 80045a6:	eb1a 0303 	adds.w	r3, sl, r3
 80045aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80045ae:	464b      	mov	r3, r9
 80045b0:	eb4b 0303 	adc.w	r3, fp, r3
 80045b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80045b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80045c4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80045c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80045cc:	460b      	mov	r3, r1
 80045ce:	18db      	adds	r3, r3, r3
 80045d0:	643b      	str	r3, [r7, #64]	; 0x40
 80045d2:	4613      	mov	r3, r2
 80045d4:	eb42 0303 	adc.w	r3, r2, r3
 80045d8:	647b      	str	r3, [r7, #68]	; 0x44
 80045da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80045de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80045e2:	f7fc faf9 	bl	8000bd8 <__aeabi_uldivmod>
 80045e6:	4602      	mov	r2, r0
 80045e8:	460b      	mov	r3, r1
 80045ea:	4611      	mov	r1, r2
 80045ec:	4b3b      	ldr	r3, [pc, #236]	; (80046dc <UART_SetConfig+0x2d4>)
 80045ee:	fba3 2301 	umull	r2, r3, r3, r1
 80045f2:	095b      	lsrs	r3, r3, #5
 80045f4:	2264      	movs	r2, #100	; 0x64
 80045f6:	fb02 f303 	mul.w	r3, r2, r3
 80045fa:	1acb      	subs	r3, r1, r3
 80045fc:	00db      	lsls	r3, r3, #3
 80045fe:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004602:	4b36      	ldr	r3, [pc, #216]	; (80046dc <UART_SetConfig+0x2d4>)
 8004604:	fba3 2302 	umull	r2, r3, r3, r2
 8004608:	095b      	lsrs	r3, r3, #5
 800460a:	005b      	lsls	r3, r3, #1
 800460c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004610:	441c      	add	r4, r3
 8004612:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004616:	2200      	movs	r2, #0
 8004618:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800461c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004620:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004624:	4642      	mov	r2, r8
 8004626:	464b      	mov	r3, r9
 8004628:	1891      	adds	r1, r2, r2
 800462a:	63b9      	str	r1, [r7, #56]	; 0x38
 800462c:	415b      	adcs	r3, r3
 800462e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004630:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004634:	4641      	mov	r1, r8
 8004636:	1851      	adds	r1, r2, r1
 8004638:	6339      	str	r1, [r7, #48]	; 0x30
 800463a:	4649      	mov	r1, r9
 800463c:	414b      	adcs	r3, r1
 800463e:	637b      	str	r3, [r7, #52]	; 0x34
 8004640:	f04f 0200 	mov.w	r2, #0
 8004644:	f04f 0300 	mov.w	r3, #0
 8004648:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800464c:	4659      	mov	r1, fp
 800464e:	00cb      	lsls	r3, r1, #3
 8004650:	4651      	mov	r1, sl
 8004652:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004656:	4651      	mov	r1, sl
 8004658:	00ca      	lsls	r2, r1, #3
 800465a:	4610      	mov	r0, r2
 800465c:	4619      	mov	r1, r3
 800465e:	4603      	mov	r3, r0
 8004660:	4642      	mov	r2, r8
 8004662:	189b      	adds	r3, r3, r2
 8004664:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004668:	464b      	mov	r3, r9
 800466a:	460a      	mov	r2, r1
 800466c:	eb42 0303 	adc.w	r3, r2, r3
 8004670:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004680:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004684:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004688:	460b      	mov	r3, r1
 800468a:	18db      	adds	r3, r3, r3
 800468c:	62bb      	str	r3, [r7, #40]	; 0x28
 800468e:	4613      	mov	r3, r2
 8004690:	eb42 0303 	adc.w	r3, r2, r3
 8004694:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004696:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800469a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800469e:	f7fc fa9b 	bl	8000bd8 <__aeabi_uldivmod>
 80046a2:	4602      	mov	r2, r0
 80046a4:	460b      	mov	r3, r1
 80046a6:	4b0d      	ldr	r3, [pc, #52]	; (80046dc <UART_SetConfig+0x2d4>)
 80046a8:	fba3 1302 	umull	r1, r3, r3, r2
 80046ac:	095b      	lsrs	r3, r3, #5
 80046ae:	2164      	movs	r1, #100	; 0x64
 80046b0:	fb01 f303 	mul.w	r3, r1, r3
 80046b4:	1ad3      	subs	r3, r2, r3
 80046b6:	00db      	lsls	r3, r3, #3
 80046b8:	3332      	adds	r3, #50	; 0x32
 80046ba:	4a08      	ldr	r2, [pc, #32]	; (80046dc <UART_SetConfig+0x2d4>)
 80046bc:	fba2 2303 	umull	r2, r3, r2, r3
 80046c0:	095b      	lsrs	r3, r3, #5
 80046c2:	f003 0207 	and.w	r2, r3, #7
 80046c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4422      	add	r2, r4
 80046ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80046d0:	e105      	b.n	80048de <UART_SetConfig+0x4d6>
 80046d2:	bf00      	nop
 80046d4:	40011000 	.word	0x40011000
 80046d8:	40011400 	.word	0x40011400
 80046dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046e4:	2200      	movs	r2, #0
 80046e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80046ea:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80046ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80046f2:	4642      	mov	r2, r8
 80046f4:	464b      	mov	r3, r9
 80046f6:	1891      	adds	r1, r2, r2
 80046f8:	6239      	str	r1, [r7, #32]
 80046fa:	415b      	adcs	r3, r3
 80046fc:	627b      	str	r3, [r7, #36]	; 0x24
 80046fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004702:	4641      	mov	r1, r8
 8004704:	1854      	adds	r4, r2, r1
 8004706:	4649      	mov	r1, r9
 8004708:	eb43 0501 	adc.w	r5, r3, r1
 800470c:	f04f 0200 	mov.w	r2, #0
 8004710:	f04f 0300 	mov.w	r3, #0
 8004714:	00eb      	lsls	r3, r5, #3
 8004716:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800471a:	00e2      	lsls	r2, r4, #3
 800471c:	4614      	mov	r4, r2
 800471e:	461d      	mov	r5, r3
 8004720:	4643      	mov	r3, r8
 8004722:	18e3      	adds	r3, r4, r3
 8004724:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004728:	464b      	mov	r3, r9
 800472a:	eb45 0303 	adc.w	r3, r5, r3
 800472e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004732:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800473e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004742:	f04f 0200 	mov.w	r2, #0
 8004746:	f04f 0300 	mov.w	r3, #0
 800474a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800474e:	4629      	mov	r1, r5
 8004750:	008b      	lsls	r3, r1, #2
 8004752:	4621      	mov	r1, r4
 8004754:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004758:	4621      	mov	r1, r4
 800475a:	008a      	lsls	r2, r1, #2
 800475c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004760:	f7fc fa3a 	bl	8000bd8 <__aeabi_uldivmod>
 8004764:	4602      	mov	r2, r0
 8004766:	460b      	mov	r3, r1
 8004768:	4b60      	ldr	r3, [pc, #384]	; (80048ec <UART_SetConfig+0x4e4>)
 800476a:	fba3 2302 	umull	r2, r3, r3, r2
 800476e:	095b      	lsrs	r3, r3, #5
 8004770:	011c      	lsls	r4, r3, #4
 8004772:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004776:	2200      	movs	r2, #0
 8004778:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800477c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004780:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004784:	4642      	mov	r2, r8
 8004786:	464b      	mov	r3, r9
 8004788:	1891      	adds	r1, r2, r2
 800478a:	61b9      	str	r1, [r7, #24]
 800478c:	415b      	adcs	r3, r3
 800478e:	61fb      	str	r3, [r7, #28]
 8004790:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004794:	4641      	mov	r1, r8
 8004796:	1851      	adds	r1, r2, r1
 8004798:	6139      	str	r1, [r7, #16]
 800479a:	4649      	mov	r1, r9
 800479c:	414b      	adcs	r3, r1
 800479e:	617b      	str	r3, [r7, #20]
 80047a0:	f04f 0200 	mov.w	r2, #0
 80047a4:	f04f 0300 	mov.w	r3, #0
 80047a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047ac:	4659      	mov	r1, fp
 80047ae:	00cb      	lsls	r3, r1, #3
 80047b0:	4651      	mov	r1, sl
 80047b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047b6:	4651      	mov	r1, sl
 80047b8:	00ca      	lsls	r2, r1, #3
 80047ba:	4610      	mov	r0, r2
 80047bc:	4619      	mov	r1, r3
 80047be:	4603      	mov	r3, r0
 80047c0:	4642      	mov	r2, r8
 80047c2:	189b      	adds	r3, r3, r2
 80047c4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80047c8:	464b      	mov	r3, r9
 80047ca:	460a      	mov	r2, r1
 80047cc:	eb42 0303 	adc.w	r3, r2, r3
 80047d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80047d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80047de:	67fa      	str	r2, [r7, #124]	; 0x7c
 80047e0:	f04f 0200 	mov.w	r2, #0
 80047e4:	f04f 0300 	mov.w	r3, #0
 80047e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80047ec:	4649      	mov	r1, r9
 80047ee:	008b      	lsls	r3, r1, #2
 80047f0:	4641      	mov	r1, r8
 80047f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047f6:	4641      	mov	r1, r8
 80047f8:	008a      	lsls	r2, r1, #2
 80047fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80047fe:	f7fc f9eb 	bl	8000bd8 <__aeabi_uldivmod>
 8004802:	4602      	mov	r2, r0
 8004804:	460b      	mov	r3, r1
 8004806:	4b39      	ldr	r3, [pc, #228]	; (80048ec <UART_SetConfig+0x4e4>)
 8004808:	fba3 1302 	umull	r1, r3, r3, r2
 800480c:	095b      	lsrs	r3, r3, #5
 800480e:	2164      	movs	r1, #100	; 0x64
 8004810:	fb01 f303 	mul.w	r3, r1, r3
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	011b      	lsls	r3, r3, #4
 8004818:	3332      	adds	r3, #50	; 0x32
 800481a:	4a34      	ldr	r2, [pc, #208]	; (80048ec <UART_SetConfig+0x4e4>)
 800481c:	fba2 2303 	umull	r2, r3, r2, r3
 8004820:	095b      	lsrs	r3, r3, #5
 8004822:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004826:	441c      	add	r4, r3
 8004828:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800482c:	2200      	movs	r2, #0
 800482e:	673b      	str	r3, [r7, #112]	; 0x70
 8004830:	677a      	str	r2, [r7, #116]	; 0x74
 8004832:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004836:	4642      	mov	r2, r8
 8004838:	464b      	mov	r3, r9
 800483a:	1891      	adds	r1, r2, r2
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	415b      	adcs	r3, r3
 8004840:	60fb      	str	r3, [r7, #12]
 8004842:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004846:	4641      	mov	r1, r8
 8004848:	1851      	adds	r1, r2, r1
 800484a:	6039      	str	r1, [r7, #0]
 800484c:	4649      	mov	r1, r9
 800484e:	414b      	adcs	r3, r1
 8004850:	607b      	str	r3, [r7, #4]
 8004852:	f04f 0200 	mov.w	r2, #0
 8004856:	f04f 0300 	mov.w	r3, #0
 800485a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800485e:	4659      	mov	r1, fp
 8004860:	00cb      	lsls	r3, r1, #3
 8004862:	4651      	mov	r1, sl
 8004864:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004868:	4651      	mov	r1, sl
 800486a:	00ca      	lsls	r2, r1, #3
 800486c:	4610      	mov	r0, r2
 800486e:	4619      	mov	r1, r3
 8004870:	4603      	mov	r3, r0
 8004872:	4642      	mov	r2, r8
 8004874:	189b      	adds	r3, r3, r2
 8004876:	66bb      	str	r3, [r7, #104]	; 0x68
 8004878:	464b      	mov	r3, r9
 800487a:	460a      	mov	r2, r1
 800487c:	eb42 0303 	adc.w	r3, r2, r3
 8004880:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	663b      	str	r3, [r7, #96]	; 0x60
 800488c:	667a      	str	r2, [r7, #100]	; 0x64
 800488e:	f04f 0200 	mov.w	r2, #0
 8004892:	f04f 0300 	mov.w	r3, #0
 8004896:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800489a:	4649      	mov	r1, r9
 800489c:	008b      	lsls	r3, r1, #2
 800489e:	4641      	mov	r1, r8
 80048a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048a4:	4641      	mov	r1, r8
 80048a6:	008a      	lsls	r2, r1, #2
 80048a8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80048ac:	f7fc f994 	bl	8000bd8 <__aeabi_uldivmod>
 80048b0:	4602      	mov	r2, r0
 80048b2:	460b      	mov	r3, r1
 80048b4:	4b0d      	ldr	r3, [pc, #52]	; (80048ec <UART_SetConfig+0x4e4>)
 80048b6:	fba3 1302 	umull	r1, r3, r3, r2
 80048ba:	095b      	lsrs	r3, r3, #5
 80048bc:	2164      	movs	r1, #100	; 0x64
 80048be:	fb01 f303 	mul.w	r3, r1, r3
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	011b      	lsls	r3, r3, #4
 80048c6:	3332      	adds	r3, #50	; 0x32
 80048c8:	4a08      	ldr	r2, [pc, #32]	; (80048ec <UART_SetConfig+0x4e4>)
 80048ca:	fba2 2303 	umull	r2, r3, r2, r3
 80048ce:	095b      	lsrs	r3, r3, #5
 80048d0:	f003 020f 	and.w	r2, r3, #15
 80048d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4422      	add	r2, r4
 80048dc:	609a      	str	r2, [r3, #8]
}
 80048de:	bf00      	nop
 80048e0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80048e4:	46bd      	mov	sp, r7
 80048e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048ea:	bf00      	nop
 80048ec:	51eb851f 	.word	0x51eb851f

080048f0 <Serial_PutByte>:
  * @brief  Transmit a byte to the HyperTerminal
  * @param  param The byte to be sent
  * @retval HAL_StatusTypeDef HAL_OK if OK
  */
HAL_StatusTypeDef Serial_PutByte( uint8_t param )
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	4603      	mov	r3, r0
 80048f8:	71fb      	strb	r3, [r7, #7]
  /* May be timeouted... */
  if ( huart2.gState == HAL_UART_STATE_TIMEOUT )
 80048fa:	4b0a      	ldr	r3, [pc, #40]	; (8004924 <Serial_PutByte+0x34>)
 80048fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2ba0      	cmp	r3, #160	; 0xa0
 8004904:	d103      	bne.n	800490e <Serial_PutByte+0x1e>
  {
	  huart2.gState = HAL_UART_STATE_READY;
 8004906:	4b07      	ldr	r3, [pc, #28]	; (8004924 <Serial_PutByte+0x34>)
 8004908:	2220      	movs	r2, #32
 800490a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }
  return HAL_UART_Transmit(&huart2, &param, 1, TX_TIMEOUT);
 800490e:	1df9      	adds	r1, r7, #7
 8004910:	2364      	movs	r3, #100	; 0x64
 8004912:	2201      	movs	r2, #1
 8004914:	4803      	ldr	r0, [pc, #12]	; (8004924 <Serial_PutByte+0x34>)
 8004916:	f7fe ffc0 	bl	800389a <HAL_UART_Transmit>
 800491a:	4603      	mov	r3, r0
}
 800491c:	4618      	mov	r0, r3
 800491e:	3708      	adds	r7, #8
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}
 8004924:	200002cc 	.word	0x200002cc

08004928 <FLASH_If_Init>:
  * @brief  Unlocks Flash for write access
  * @param  None
  * @retval None
  */
void FLASH_If_Init(void)
{
 8004928:	b480      	push	{r7}
 800492a:	af00      	add	r7, sp, #0
#if 0
  /* Clear pending flags (if any) */  
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | 
                         FLASH_FLAG_PGSERR | FLASH_FLAG_WRPERR);
#else
__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR );
 800492c:	4b03      	ldr	r3, [pc, #12]	; (800493c <FLASH_If_Init+0x14>)
 800492e:	22b3      	movs	r2, #179	; 0xb3
 8004930:	60da      	str	r2, [r3, #12]
#endif
}
 8004932:	bf00      	nop
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr
 800493c:	40023c00 	.word	0x40023c00

08004940 <FLASH_If_Erase>:
  * @param  StartSector: start of user flash area
  * @retval 0: user flash area successfully erased
  *         1: error occurred
  */
uint32_t FLASH_If_Erase(uint32_t StartSector)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b08a      	sub	sp, #40	; 0x28
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  uint32_t UserStartSector;
  uint32_t SectorError;
  FLASH_EraseInitTypeDef pEraseInit;

  /* Unlock the Flash to enable the flash control register access *************/ 
  HAL_FLASH_Unlock(); 
 8004948:	f7fd fbc4 	bl	80020d4 <HAL_FLASH_Unlock>
  FLASH_If_Init();
 800494c:	f7ff ffec 	bl	8004928 <FLASH_If_Init>
  
  /* Get the sector where start the user flash area */
  UserStartSector = GetSector(StartSector);
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	f000 f827 	bl	80049a4 <GetSector>
 8004956:	6278      	str	r0, [r7, #36]	; 0x24
  pEraseInit.TypeErase    = FLASH_TYPEERASE_SECTORS;
 8004958:	2300      	movs	r3, #0
 800495a:	60fb      	str	r3, [r7, #12]
  pEraseInit.Sector       = UserStartSector;
 800495c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495e:	617b      	str	r3, [r7, #20]
  pEraseInit.NbSectors    = 8 - UserStartSector + 1;
 8004960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004962:	f1c3 0309 	rsb	r3, r3, #9
 8004966:	61bb      	str	r3, [r7, #24]
  pEraseInit.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8004968:	2302      	movs	r3, #2
 800496a:	61fb      	str	r3, [r7, #28]
  
  if (StartSector < APPLICATION_ADDRESS_M4_END)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4a0c      	ldr	r2, [pc, #48]	; (80049a0 <FLASH_If_Erase+0x60>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d20e      	bcs.n	8004992 <FLASH_If_Erase+0x52>
  {
    pEraseInit.Banks = FLASH_BANK_1;
 8004974:	2301      	movs	r3, #1
 8004976:	613b      	str	r3, [r7, #16]
    if (HAL_FLASHEx_Erase(&pEraseInit, &SectorError) != HAL_OK)
 8004978:	f107 0220 	add.w	r2, r7, #32
 800497c:	f107 030c 	add.w	r3, r7, #12
 8004980:	4611      	mov	r1, r2
 8004982:	4618      	mov	r0, r3
 8004984:	f7fd fd18 	bl	80023b8 <HAL_FLASHEx_Erase>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d001      	beq.n	8004992 <FLASH_If_Erase+0x52>
    {
      /* Error occurred while sector erase */
      return (1);
 800498e:	2301      	movs	r3, #1
 8004990:	e002      	b.n	8004998 <FLASH_If_Erase+0x58>
      /* Error occurred while sector erase */
      return (1);
    }
  }
  #endif
  HAL_FLASH_Lock(); 
 8004992:	f7fd fbc1 	bl	8002118 <HAL_FLASH_Lock>
  return (0);
 8004996:	2300      	movs	r3, #0
}
 8004998:	4618      	mov	r0, r3
 800499a:	3728      	adds	r7, #40	; 0x28
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}
 80049a0:	0807ffff 	.word	0x0807ffff

080049a4 <GetSector>:
  * @brief  Gets the sector of a given address
  * @param  Address: Flash address
  * @retval The sector of a given address
  */
static uint32_t GetSector(uint32_t Address)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b085      	sub	sp, #20
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 80049ac:	2300      	movs	r3, #0
 80049ae:	60fb      	str	r3, [r7, #12]
  
  if((Address < ADDR_FLASH_SECTOR_1_BANK1) && (Address >= ADDR_FLASH_SECTOR_0_BANK1))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a30      	ldr	r2, [pc, #192]	; (8004a74 <GetSector+0xd0>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d206      	bcs.n	80049c6 <GetSector+0x22>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049be:	d302      	bcc.n	80049c6 <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;  
 80049c0:	2300      	movs	r3, #0
 80049c2:	60fb      	str	r3, [r7, #12]
 80049c4:	e04e      	b.n	8004a64 <GetSector+0xc0>
  }
  else if((Address < ADDR_FLASH_SECTOR_2_BANK1) && (Address >= ADDR_FLASH_SECTOR_1_BANK1))
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a2b      	ldr	r2, [pc, #172]	; (8004a78 <GetSector+0xd4>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d206      	bcs.n	80049dc <GetSector+0x38>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a28      	ldr	r2, [pc, #160]	; (8004a74 <GetSector+0xd0>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d302      	bcc.n	80049dc <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;  
 80049d6:	2301      	movs	r3, #1
 80049d8:	60fb      	str	r3, [r7, #12]
 80049da:	e043      	b.n	8004a64 <GetSector+0xc0>
  }
  else if((Address < ADDR_FLASH_SECTOR_3_BANK1) && (Address >= ADDR_FLASH_SECTOR_2_BANK1))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	4a27      	ldr	r2, [pc, #156]	; (8004a7c <GetSector+0xd8>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d206      	bcs.n	80049f2 <GetSector+0x4e>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4a24      	ldr	r2, [pc, #144]	; (8004a78 <GetSector+0xd4>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d302      	bcc.n	80049f2 <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;  
 80049ec:	2302      	movs	r3, #2
 80049ee:	60fb      	str	r3, [r7, #12]
 80049f0:	e038      	b.n	8004a64 <GetSector+0xc0>
  }
  else if((Address < ADDR_FLASH_SECTOR_4_BANK1) && (Address >= ADDR_FLASH_SECTOR_3_BANK1))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a22      	ldr	r2, [pc, #136]	; (8004a80 <GetSector+0xdc>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d806      	bhi.n	8004a08 <GetSector+0x64>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a1f      	ldr	r2, [pc, #124]	; (8004a7c <GetSector+0xd8>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d302      	bcc.n	8004a08 <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;  
 8004a02:	2303      	movs	r3, #3
 8004a04:	60fb      	str	r3, [r7, #12]
 8004a06:	e02d      	b.n	8004a64 <GetSector+0xc0>
  }
  else if((Address < ADDR_FLASH_SECTOR_5_BANK1) && (Address >= ADDR_FLASH_SECTOR_4_BANK1))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a1e      	ldr	r2, [pc, #120]	; (8004a84 <GetSector+0xe0>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d806      	bhi.n	8004a1e <GetSector+0x7a>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	4a1b      	ldr	r2, [pc, #108]	; (8004a80 <GetSector+0xdc>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d902      	bls.n	8004a1e <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;  
 8004a18:	2304      	movs	r3, #4
 8004a1a:	60fb      	str	r3, [r7, #12]
 8004a1c:	e022      	b.n	8004a64 <GetSector+0xc0>
  }
  else if((Address < ADDR_FLASH_SECTOR_6_BANK1) && (Address >= ADDR_FLASH_SECTOR_5_BANK1))
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a19      	ldr	r2, [pc, #100]	; (8004a88 <GetSector+0xe4>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d806      	bhi.n	8004a34 <GetSector+0x90>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a16      	ldr	r2, [pc, #88]	; (8004a84 <GetSector+0xe0>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d902      	bls.n	8004a34 <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;  
 8004a2e:	2305      	movs	r3, #5
 8004a30:	60fb      	str	r3, [r7, #12]
 8004a32:	e017      	b.n	8004a64 <GetSector+0xc0>
  }
  else if((Address < ADDR_FLASH_SECTOR_7_BANK1) && (Address >= ADDR_FLASH_SECTOR_6_BANK1))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4a15      	ldr	r2, [pc, #84]	; (8004a8c <GetSector+0xe8>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d806      	bhi.n	8004a4a <GetSector+0xa6>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4a12      	ldr	r2, [pc, #72]	; (8004a88 <GetSector+0xe4>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d902      	bls.n	8004a4a <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;  
 8004a44:	2306      	movs	r3, #6
 8004a46:	60fb      	str	r3, [r7, #12]
 8004a48:	e00c      	b.n	8004a64 <GetSector+0xc0>
  }
  else if((Address < APPLICATION_ADDRESS_M4_END) && (Address >= ADDR_FLASH_SECTOR_7_BANK1))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a10      	ldr	r2, [pc, #64]	; (8004a90 <GetSector+0xec>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d206      	bcs.n	8004a60 <GetSector+0xbc>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a0d      	ldr	r2, [pc, #52]	; (8004a8c <GetSector+0xe8>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d902      	bls.n	8004a60 <GetSector+0xbc>
  {
    sector = FLASH_SECTOR_7;  
 8004a5a:	2307      	movs	r3, #7
 8004a5c:	60fb      	str	r3, [r7, #12]
 8004a5e:	e001      	b.n	8004a64 <GetSector+0xc0>
    sector = FLASH_SECTOR_6;  
  }
  #endif
  else /*if((Address < USER_FLASH_END_ADDRESS) && (Address >= ADDR_FLASH_SECTOR_7_BANK2))*/
  {
    sector = FLASH_SECTOR_7;  
 8004a60:	2307      	movs	r3, #7
 8004a62:	60fb      	str	r3, [r7, #12]
  }

  return sector;
 8004a64:	68fb      	ldr	r3, [r7, #12]
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3714      	adds	r7, #20
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	08004000 	.word	0x08004000
 8004a78:	08008000 	.word	0x08008000
 8004a7c:	0800c000 	.word	0x0800c000
 8004a80:	0800ffff 	.word	0x0800ffff
 8004a84:	0801ffff 	.word	0x0801ffff
 8004a88:	0803ffff 	.word	0x0803ffff
 8004a8c:	0805ffff 	.word	0x0805ffff
 8004a90:	0807ffff 	.word	0x0807ffff

08004a94 <Xmodem_Getchar>:
 **                                                                         **
 **                                                                         **
 *****************************************************************************/

U8 Xmodem_Getchar(U8 *retChar)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
    if ((__HAL_UART_GET_FLAG(&huart2, UART_FLAG_RXNE) ? SET : RESET) == SET)
 8004a9c:	4b0a      	ldr	r3, [pc, #40]	; (8004ac8 <Xmodem_Getchar+0x34>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0320 	and.w	r3, r3, #32
 8004aa6:	2b20      	cmp	r3, #32
 8004aa8:	d107      	bne.n	8004aba <Xmodem_Getchar+0x26>
    {
        *retChar = (U8)huart2.Instance->DR;
 8004aaa:	4b07      	ldr	r3, [pc, #28]	; (8004ac8 <Xmodem_Getchar+0x34>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	b2da      	uxtb	r2, r3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	701a      	strb	r2, [r3, #0]
    else
    {
        return (FALSE );
    }
    
    return( TRUE );
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e000      	b.n	8004abc <Xmodem_Getchar+0x28>
        return (FALSE );
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr
 8004ac8:	200002cc 	.word	0x200002cc

08004acc <XMODEM_WaitForChar>:
 **                                                                         **
 **                                                                         **
 *****************************************************************************/

BOOL_e XMODEM_WaitForChar(U8 *u8CPtr, U32 u32ProcessTime)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
    U32     u32Thisms;

    ++u32ProcessTime;
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	3301      	adds	r3, #1
 8004ada:	603b      	str	r3, [r7, #0]

    u32Thisms = uwTick;
 8004adc:	4b0f      	ldr	r3, [pc, #60]	; (8004b1c <XMODEM_WaitForChar+0x50>)
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	60fb      	str	r3, [r7, #12]

    while (u32ProcessTime)
 8004ae2:	e012      	b.n	8004b0a <XMODEM_WaitForChar+0x3e>
    {
        if (Xmodem_Getchar(u8CPtr))
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f7ff ffd5 	bl	8004a94 <Xmodem_Getchar>
 8004aea:	4603      	mov	r3, r0
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d001      	beq.n	8004af4 <XMODEM_WaitForChar+0x28>
        {
            return (TRUE);
 8004af0:	2301      	movs	r3, #1
 8004af2:	e00e      	b.n	8004b12 <XMODEM_WaitForChar+0x46>
        }

        if (uwTick != u32Thisms) {
 8004af4:	4b09      	ldr	r3, [pc, #36]	; (8004b1c <XMODEM_WaitForChar+0x50>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68fa      	ldr	r2, [r7, #12]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d005      	beq.n	8004b0a <XMODEM_WaitForChar+0x3e>
            --u32ProcessTime;
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	3b01      	subs	r3, #1
 8004b02:	603b      	str	r3, [r7, #0]
            u32Thisms = uwTick;
 8004b04:	4b05      	ldr	r3, [pc, #20]	; (8004b1c <XMODEM_WaitForChar+0x50>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	60fb      	str	r3, [r7, #12]
    while (u32ProcessTime)
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d1e9      	bne.n	8004ae4 <XMODEM_WaitForChar+0x18>
        }
    }

    return (FALSE);
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3710      	adds	r7, #16
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	20000310 	.word	0x20000310

08004b20 <XMODEM_GetRecord>:
 **                                                                         **
 **                                                                         **
 *****************************************************************************/

BOOL_e XMODEM_GetRecord(U8 *u8DestAddress)
{
 8004b20:	b5b0      	push	{r4, r5, r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
    U32         u32Size = 0;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	60fb      	str	r3, [r7, #12]
    U16         u16CRC_check;
    U8          u8GetChar;
    BOOL_e      bGetCheck;

    u16CRC_check = 0;
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	817b      	strh	r3, [r7, #10]

    /* Packet number */
    bGetCheck = XMODEM_WaitForChar(&u8GetChar, DOWNLOAD_TIMEOUT);
 8004b30:	f107 0308 	add.w	r3, r7, #8
 8004b34:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f7ff ffc7 	bl	8004acc <XMODEM_WaitForChar>
 8004b3e:	4603      	mov	r3, r0
 8004b40:	727b      	strb	r3, [r7, #9]
    if ((!bGetCheck) || (u8GetChar != gu8PacketNumber))
 8004b42:	7a7b      	ldrb	r3, [r7, #9]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d004      	beq.n	8004b52 <XMODEM_GetRecord+0x32>
 8004b48:	7a3a      	ldrb	r2, [r7, #8]
 8004b4a:	4b3f      	ldr	r3, [pc, #252]	; (8004c48 <XMODEM_GetRecord+0x128>)
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d001      	beq.n	8004b56 <XMODEM_GetRecord+0x36>
    {
        return (FALSE);
 8004b52:	2300      	movs	r3, #0
 8004b54:	e073      	b.n	8004c3e <XMODEM_GetRecord+0x11e>
    }    

    bGetCheck = XMODEM_WaitForChar(&u8GetChar, DOWNLOAD_TIMEOUT);
 8004b56:	f107 0308 	add.w	r3, r7, #8
 8004b5a:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f7ff ffb4 	bl	8004acc <XMODEM_WaitForChar>
 8004b64:	4603      	mov	r3, r0
 8004b66:	727b      	strb	r3, [r7, #9]
    if ((!bGetCheck) || (u8GetChar != (U8)~gu8PacketNumber))
 8004b68:	7a7b      	ldrb	r3, [r7, #9]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d006      	beq.n	8004b7c <XMODEM_GetRecord+0x5c>
 8004b6e:	4b36      	ldr	r3, [pc, #216]	; (8004c48 <XMODEM_GetRecord+0x128>)
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	43db      	mvns	r3, r3
 8004b74:	b2da      	uxtb	r2, r3
 8004b76:	7a3b      	ldrb	r3, [r7, #8]
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d001      	beq.n	8004b80 <XMODEM_GetRecord+0x60>
    {
        return (FALSE);
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	e05e      	b.n	8004c3e <XMODEM_GetRecord+0x11e>
    }    


    /* Get data - 128 or 1024 byte */
    for (u32Size = 0; u32Size < gu32PacketSize; ++u32Size)
 8004b80:	2300      	movs	r3, #0
 8004b82:	60fb      	str	r3, [r7, #12]
 8004b84:	e02d      	b.n	8004be2 <XMODEM_GetRecord+0xc2>
    {
        if (!XMODEM_WaitForChar(&u8GetChar, DOWNLOAD_TIMEOUT))
 8004b86:	f107 0308 	add.w	r3, r7, #8
 8004b8a:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7ff ff9c 	bl	8004acc <XMODEM_WaitForChar>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d101      	bne.n	8004b9e <XMODEM_GetRecord+0x7e>
        {
            return (FALSE);
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	e04f      	b.n	8004c3e <XMODEM_GetRecord+0x11e>
        }

        /* CRC calculation */
        u16CRC_check = (u16CRC_check<<8) ^ crc16tab[((u16CRC_check>>8) ^ u8GetChar)&0x00FF];
 8004b9e:	897b      	ldrh	r3, [r7, #10]
 8004ba0:	021b      	lsls	r3, r3, #8
 8004ba2:	b21a      	sxth	r2, r3
 8004ba4:	897b      	ldrh	r3, [r7, #10]
 8004ba6:	0a1b      	lsrs	r3, r3, #8
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	4619      	mov	r1, r3
 8004bac:	7a3b      	ldrb	r3, [r7, #8]
 8004bae:	404b      	eors	r3, r1
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	4926      	ldr	r1, [pc, #152]	; (8004c4c <XMODEM_GetRecord+0x12c>)
 8004bb4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004bb8:	b21b      	sxth	r3, r3
 8004bba:	4053      	eors	r3, r2
 8004bbc:	b21b      	sxth	r3, r3
 8004bbe:	817b      	strh	r3, [r7, #10]
        
        #if 1
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, u8DestAddress++, u8GetChar);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	1c5a      	adds	r2, r3, #1
 8004bc4:	607a      	str	r2, [r7, #4]
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	7a3b      	ldrb	r3, [r7, #8]
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	2200      	movs	r2, #0
 8004bce:	461c      	mov	r4, r3
 8004bd0:	4615      	mov	r5, r2
 8004bd2:	4622      	mov	r2, r4
 8004bd4:	462b      	mov	r3, r5
 8004bd6:	2000      	movs	r0, #0
 8004bd8:	f7fd fa28 	bl	800202c <HAL_FLASH_Program>
    for (u32Size = 0; u32Size < gu32PacketSize; ++u32Size)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	3301      	adds	r3, #1
 8004be0:	60fb      	str	r3, [r7, #12]
 8004be2:	4b1b      	ldr	r3, [pc, #108]	; (8004c50 <XMODEM_GetRecord+0x130>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	68fa      	ldr	r2, [r7, #12]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d3cc      	bcc.n	8004b86 <XMODEM_GetRecord+0x66>
        #endif
    }

    /* high & low CRC bit */
    u16CRC_check &= 0xFFFF;
    bGetCheck = XMODEM_WaitForChar(&u8GetChar, DOWNLOAD_TIMEOUT);
 8004bec:	f107 0308 	add.w	r3, r7, #8
 8004bf0:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f7ff ff69 	bl	8004acc <XMODEM_WaitForChar>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	727b      	strb	r3, [r7, #9]
    if ((!bGetCheck) || (u8GetChar != (U8)((u16CRC_check >> 8) & 0xFF)))
 8004bfe:	7a7b      	ldrb	r3, [r7, #9]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d006      	beq.n	8004c12 <XMODEM_GetRecord+0xf2>
 8004c04:	897b      	ldrh	r3, [r7, #10]
 8004c06:	0a1b      	lsrs	r3, r3, #8
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	b2da      	uxtb	r2, r3
 8004c0c:	7a3b      	ldrb	r3, [r7, #8]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d001      	beq.n	8004c16 <XMODEM_GetRecord+0xf6>
    {
        return (FALSE);
 8004c12:	2300      	movs	r3, #0
 8004c14:	e013      	b.n	8004c3e <XMODEM_GetRecord+0x11e>
    }    

    bGetCheck = XMODEM_WaitForChar(&u8GetChar, DOWNLOAD_TIMEOUT);
 8004c16:	f107 0308 	add.w	r3, r7, #8
 8004c1a:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f7ff ff54 	bl	8004acc <XMODEM_WaitForChar>
 8004c24:	4603      	mov	r3, r0
 8004c26:	727b      	strb	r3, [r7, #9]
    if ((!bGetCheck) || (u8GetChar != (U8)(u16CRC_check & 0xFF)))
 8004c28:	7a7b      	ldrb	r3, [r7, #9]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d004      	beq.n	8004c38 <XMODEM_GetRecord+0x118>
 8004c2e:	897b      	ldrh	r3, [r7, #10]
 8004c30:	b2da      	uxtb	r2, r3
 8004c32:	7a3b      	ldrb	r3, [r7, #8]
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d001      	beq.n	8004c3c <XMODEM_GetRecord+0x11c>
    {
        return (FALSE);
 8004c38:	2300      	movs	r3, #0
 8004c3a:	e000      	b.n	8004c3e <XMODEM_GetRecord+0x11e>
    }    

    return (TRUE);
 8004c3c:	2301      	movs	r3, #1
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3710      	adds	r7, #16
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bdb0      	pop	{r4, r5, r7, pc}
 8004c46:	bf00      	nop
 8004c48:	20000334 	.word	0x20000334
 8004c4c:	08008200 	.word	0x08008200
 8004c50:	20000338 	.word	0x20000338

08004c54 <XMODEM_Rx>:
 **  128 or 1024 xmodem Rx                                                  **
 **                                                                         **
 *****************************************************************************/

BOOL_e XMODEM_Rx(U32 *p_size, U8 *u8DestAddress)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b086      	sub	sp, #24
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]

    U32     u32State;
    U32     u32Retrynum = 10;                            
 8004c5e:	230a      	movs	r3, #10
 8004c60:	613b      	str	r3, [r7, #16]
    U8      u8GetChar;
    U8      *u8StartAddress =  u8DestAddress;
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	60fb      	str	r3, [r7, #12]

    gu32PacketTSize = 0;
 8004c66:	4b56      	ldr	r3, [pc, #344]	; (8004dc0 <XMODEM_Rx+0x16c>)
 8004c68:	2200      	movs	r2, #0
 8004c6a:	601a      	str	r2, [r3, #0]
    gu8PacketNumber = 1;
 8004c6c:	4b55      	ldr	r3, [pc, #340]	; (8004dc4 <XMODEM_Rx+0x170>)
 8004c6e:	2201      	movs	r2, #1
 8004c70:	701a      	strb	r2, [r3, #0]
    u32State = WAITING_START;
 8004c72:	2301      	movs	r3, #1
 8004c74:	617b      	str	r3, [r7, #20]
    
#if DBG_LED
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8004c76:	2201      	movs	r2, #1
 8004c78:	2120      	movs	r1, #32
 8004c7a:	4853      	ldr	r0, [pc, #332]	; (8004dc8 <XMODEM_Rx+0x174>)
 8004c7c:	f7fd fe42 	bl	8002904 <HAL_GPIO_WritePin>
#endif

    while (u32Retrynum)
 8004c80:	e094      	b.n	8004dac <XMODEM_Rx+0x158>
    {                              
        if (u32State == WAITING_START)                 
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d12a      	bne.n	8004cde <XMODEM_Rx+0x8a>
        {
            Serial_PutByte('C');
 8004c88:	2043      	movs	r0, #67	; 0x43
 8004c8a:	f7ff fe31 	bl	80048f0 <Serial_PutByte>

            if (XMODEM_WaitForChar(&u8GetChar, DOWNLOAD_TIMEOUT))
 8004c8e:	f107 030b 	add.w	r3, r7, #11
 8004c92:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8004c96:	4618      	mov	r0, r3
 8004c98:	f7ff ff18 	bl	8004acc <XMODEM_WaitForChar>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d01d      	beq.n	8004cde <XMODEM_Rx+0x8a>
            {
                /* packet head packet size  */
                if (u8GetChar == XMODEM_SOH)
 8004ca2:	7afb      	ldrb	r3, [r7, #11]
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d109      	bne.n	8004cbc <XMODEM_Rx+0x68>
                {
                    gu32PacketSize = PACKET_SIZE_SOH;
 8004ca8:	4b48      	ldr	r3, [pc, #288]	; (8004dcc <XMODEM_Rx+0x178>)
 8004caa:	2280      	movs	r2, #128	; 0x80
 8004cac:	601a      	str	r2, [r3, #0]
                    TransitionState(u32State, RX_PACKET);
 8004cae:	2303      	movs	r3, #3
 8004cb0:	617b      	str	r3, [r7, #20]
                    #if DBG_LED
                    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	2120      	movs	r1, #32
 8004cb6:	4844      	ldr	r0, [pc, #272]	; (8004dc8 <XMODEM_Rx+0x174>)
 8004cb8:	f7fd fe24 	bl	8002904 <HAL_GPIO_WritePin>
                    #endif
                }
                
                // x modem 1024byte
                if (u8GetChar == XMODEM_STX)
 8004cbc:	7afb      	ldrb	r3, [r7, #11]
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d105      	bne.n	8004cce <XMODEM_Rx+0x7a>
                {
                    gu32PacketSize = PACKET_SIZE_STX;
 8004cc2:	4b42      	ldr	r3, [pc, #264]	; (8004dcc <XMODEM_Rx+0x178>)
 8004cc4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004cc8:	601a      	str	r2, [r3, #0]
                    TransitionState(u32State, RX_PACKET);
 8004cca:	2303      	movs	r3, #3
 8004ccc:	617b      	str	r3, [r7, #20]
                }

                if ((u8GetChar == ABORT1) || (u8GetChar == ABORT2))
 8004cce:	7afb      	ldrb	r3, [r7, #11]
 8004cd0:	2b41      	cmp	r3, #65	; 0x41
 8004cd2:	d002      	beq.n	8004cda <XMODEM_Rx+0x86>
 8004cd4:	7afb      	ldrb	r3, [r7, #11]
 8004cd6:	2b61      	cmp	r3, #97	; 0x61
 8004cd8:	d101      	bne.n	8004cde <XMODEM_Rx+0x8a>
                {
                    return (FALSE);
 8004cda:	2300      	movs	r3, #0
 8004cdc:	e06b      	b.n	8004db6 <XMODEM_Rx+0x162>
                }
            }
        }

        if (u32State == WAIT_HEAD)                      
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d136      	bne.n	8004d52 <XMODEM_Rx+0xfe>
        {
            if (!XMODEM_WaitForChar(&u8GetChar, DOWNLOAD_TIMEOUT))     
 8004ce4:	f107 030b 	add.w	r3, r7, #11
 8004ce8:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8004cec:	4618      	mov	r0, r3
 8004cee:	f7ff feed 	bl	8004acc <XMODEM_WaitForChar>
 8004cf2:	4603      	mov	r3, r0
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d106      	bne.n	8004d06 <XMODEM_Rx+0xb2>
            {                                           
                Serial_PutByte(XMODEM_NAK);
 8004cf8:	2015      	movs	r0, #21
 8004cfa:	f7ff fdf9 	bl	80048f0 <Serial_PutByte>

                u32Retrynum--;                         
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	3b01      	subs	r3, #1
 8004d02:	613b      	str	r3, [r7, #16]
 8004d04:	e020      	b.n	8004d48 <XMODEM_Rx+0xf4>
            }
            else if (u8GetChar == XMODEM_SOH)
 8004d06:	7afb      	ldrb	r3, [r7, #11]
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d105      	bne.n	8004d18 <XMODEM_Rx+0xc4>
            {
                gu32PacketSize = PACKET_SIZE_SOH;
 8004d0c:	4b2f      	ldr	r3, [pc, #188]	; (8004dcc <XMODEM_Rx+0x178>)
 8004d0e:	2280      	movs	r2, #128	; 0x80
 8004d10:	601a      	str	r2, [r3, #0]
                TransitionState(u32State, RX_PACKET);
 8004d12:	2303      	movs	r3, #3
 8004d14:	617b      	str	r3, [r7, #20]
 8004d16:	e017      	b.n	8004d48 <XMODEM_Rx+0xf4>
            }
            else if (u8GetChar == XMODEM_STX)
 8004d18:	7afb      	ldrb	r3, [r7, #11]
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d106      	bne.n	8004d2c <XMODEM_Rx+0xd8>
            {
                gu32PacketSize = PACKET_SIZE_STX;
 8004d1e:	4b2b      	ldr	r3, [pc, #172]	; (8004dcc <XMODEM_Rx+0x178>)
 8004d20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d24:	601a      	str	r2, [r3, #0]
                TransitionState(u32State, RX_PACKET);
 8004d26:	2303      	movs	r3, #3
 8004d28:	617b      	str	r3, [r7, #20]
 8004d2a:	e00d      	b.n	8004d48 <XMODEM_Rx+0xf4>
            }
            else if (u8GetChar == XMODEM_EOT) 
 8004d2c:	7afb      	ldrb	r3, [r7, #11]
 8004d2e:	2b04      	cmp	r3, #4
 8004d30:	d10a      	bne.n	8004d48 <XMODEM_Rx+0xf4>
            {
                Serial_PutByte(XMODEM_ACK);
 8004d32:	2006      	movs	r0, #6
 8004d34:	f7ff fddc 	bl	80048f0 <Serial_PutByte>

                *p_size = (u8DestAddress - u8StartAddress);
 8004d38:	683a      	ldr	r2, [r7, #0]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	461a      	mov	r2, r3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	601a      	str	r2, [r3, #0]
                //*p_size = gu32PacketTSize;
                return (TRUE);
 8004d44:	2301      	movs	r3, #1
 8004d46:	e036      	b.n	8004db6 <XMODEM_Rx+0x162>
            }

            if (u8GetChar == XMODEM_CAN) /* CANCEL */
 8004d48:	7afb      	ldrb	r3, [r7, #11]
 8004d4a:	2b18      	cmp	r3, #24
 8004d4c:	d101      	bne.n	8004d52 <XMODEM_Rx+0xfe>
            {
                return (FALSE);                        
 8004d4e:	2300      	movs	r3, #0
 8004d50:	e031      	b.n	8004db6 <XMODEM_Rx+0x162>
            }
        }

        if (u32State == RX_PACKET)
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	2b03      	cmp	r3, #3
 8004d56:	d129      	bne.n	8004dac <XMODEM_Rx+0x158>
        {
            #if DBG_LED
            HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8004d58:	2120      	movs	r1, #32
 8004d5a:	481b      	ldr	r0, [pc, #108]	; (8004dc8 <XMODEM_Rx+0x174>)
 8004d5c:	f7fd fdeb 	bl	8002936 <HAL_GPIO_TogglePin>
            #endif
            if (XMODEM_GetRecord(u8DestAddress))
 8004d60:	6838      	ldr	r0, [r7, #0]
 8004d62:	f7ff fedd 	bl	8004b20 <XMODEM_GetRecord>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d017      	beq.n	8004d9c <XMODEM_Rx+0x148>
            {
                Serial_PutByte(XMODEM_ACK);
 8004d6c:	2006      	movs	r0, #6
 8004d6e:	f7ff fdbf 	bl	80048f0 <Serial_PutByte>
                u8DestAddress += gu32PacketSize;
 8004d72:	4b16      	ldr	r3, [pc, #88]	; (8004dcc <XMODEM_Rx+0x178>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	683a      	ldr	r2, [r7, #0]
 8004d78:	4413      	add	r3, r2
 8004d7a:	603b      	str	r3, [r7, #0]
                gu32PacketTSize += gu32PacketSize;
 8004d7c:	4b10      	ldr	r3, [pc, #64]	; (8004dc0 <XMODEM_Rx+0x16c>)
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	4b12      	ldr	r3, [pc, #72]	; (8004dcc <XMODEM_Rx+0x178>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4413      	add	r3, r2
 8004d86:	4a0e      	ldr	r2, [pc, #56]	; (8004dc0 <XMODEM_Rx+0x16c>)
 8004d88:	6013      	str	r3, [r2, #0]
                ++gu8PacketNumber;
 8004d8a:	4b0e      	ldr	r3, [pc, #56]	; (8004dc4 <XMODEM_Rx+0x170>)
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	3301      	adds	r3, #1
 8004d90:	b2da      	uxtb	r2, r3
 8004d92:	4b0c      	ldr	r3, [pc, #48]	; (8004dc4 <XMODEM_Rx+0x170>)
 8004d94:	701a      	strb	r2, [r3, #0]
                TransitionState(u32State, WAIT_HEAD);
 8004d96:	2302      	movs	r3, #2
 8004d98:	617b      	str	r3, [r7, #20]
 8004d9a:	e007      	b.n	8004dac <XMODEM_Rx+0x158>
            }
            else
            {
                Serial_PutByte(XMODEM_ACK);
 8004d9c:	2006      	movs	r0, #6
 8004d9e:	f7ff fda7 	bl	80048f0 <Serial_PutByte>
                u32Retrynum--;
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	3b01      	subs	r3, #1
 8004da6:	613b      	str	r3, [r7, #16]
                TransitionState(u32State, WAIT_HEAD);
 8004da8:	2302      	movs	r3, #2
 8004daa:	617b      	str	r3, [r7, #20]
    while (u32Retrynum)
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	f47f af67 	bne.w	8004c82 <XMODEM_Rx+0x2e>
            }
        }
    }

    return (FALSE);
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3718      	adds	r7, #24
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	2000033c 	.word	0x2000033c
 8004dc4:	20000334 	.word	0x20000334
 8004dc8:	40020000 	.word	0x40020000
 8004dcc:	20000338 	.word	0x20000338

08004dd0 <atoi>:
 8004dd0:	220a      	movs	r2, #10
 8004dd2:	2100      	movs	r1, #0
 8004dd4:	f000 beec 	b.w	8005bb0 <strtol>

08004dd8 <__errno>:
 8004dd8:	4b01      	ldr	r3, [pc, #4]	; (8004de0 <__errno+0x8>)
 8004dda:	6818      	ldr	r0, [r3, #0]
 8004ddc:	4770      	bx	lr
 8004dde:	bf00      	nop
 8004de0:	2000000c 	.word	0x2000000c

08004de4 <__libc_init_array>:
 8004de4:	b570      	push	{r4, r5, r6, lr}
 8004de6:	4d0d      	ldr	r5, [pc, #52]	; (8004e1c <__libc_init_array+0x38>)
 8004de8:	4c0d      	ldr	r4, [pc, #52]	; (8004e20 <__libc_init_array+0x3c>)
 8004dea:	1b64      	subs	r4, r4, r5
 8004dec:	10a4      	asrs	r4, r4, #2
 8004dee:	2600      	movs	r6, #0
 8004df0:	42a6      	cmp	r6, r4
 8004df2:	d109      	bne.n	8004e08 <__libc_init_array+0x24>
 8004df4:	4d0b      	ldr	r5, [pc, #44]	; (8004e24 <__libc_init_array+0x40>)
 8004df6:	4c0c      	ldr	r4, [pc, #48]	; (8004e28 <__libc_init_array+0x44>)
 8004df8:	f002 ffd8 	bl	8007dac <_init>
 8004dfc:	1b64      	subs	r4, r4, r5
 8004dfe:	10a4      	asrs	r4, r4, #2
 8004e00:	2600      	movs	r6, #0
 8004e02:	42a6      	cmp	r6, r4
 8004e04:	d105      	bne.n	8004e12 <__libc_init_array+0x2e>
 8004e06:	bd70      	pop	{r4, r5, r6, pc}
 8004e08:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e0c:	4798      	blx	r3
 8004e0e:	3601      	adds	r6, #1
 8004e10:	e7ee      	b.n	8004df0 <__libc_init_array+0xc>
 8004e12:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e16:	4798      	blx	r3
 8004e18:	3601      	adds	r6, #1
 8004e1a:	e7f2      	b.n	8004e02 <__libc_init_array+0x1e>
 8004e1c:	08008840 	.word	0x08008840
 8004e20:	08008840 	.word	0x08008840
 8004e24:	08008840 	.word	0x08008840
 8004e28:	08008844 	.word	0x08008844

08004e2c <memset>:
 8004e2c:	4402      	add	r2, r0
 8004e2e:	4603      	mov	r3, r0
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d100      	bne.n	8004e36 <memset+0xa>
 8004e34:	4770      	bx	lr
 8004e36:	f803 1b01 	strb.w	r1, [r3], #1
 8004e3a:	e7f9      	b.n	8004e30 <memset+0x4>

08004e3c <__cvt>:
 8004e3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e40:	ec55 4b10 	vmov	r4, r5, d0
 8004e44:	2d00      	cmp	r5, #0
 8004e46:	460e      	mov	r6, r1
 8004e48:	4619      	mov	r1, r3
 8004e4a:	462b      	mov	r3, r5
 8004e4c:	bfbb      	ittet	lt
 8004e4e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004e52:	461d      	movlt	r5, r3
 8004e54:	2300      	movge	r3, #0
 8004e56:	232d      	movlt	r3, #45	; 0x2d
 8004e58:	700b      	strb	r3, [r1, #0]
 8004e5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e5c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004e60:	4691      	mov	r9, r2
 8004e62:	f023 0820 	bic.w	r8, r3, #32
 8004e66:	bfbc      	itt	lt
 8004e68:	4622      	movlt	r2, r4
 8004e6a:	4614      	movlt	r4, r2
 8004e6c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004e70:	d005      	beq.n	8004e7e <__cvt+0x42>
 8004e72:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004e76:	d100      	bne.n	8004e7a <__cvt+0x3e>
 8004e78:	3601      	adds	r6, #1
 8004e7a:	2102      	movs	r1, #2
 8004e7c:	e000      	b.n	8004e80 <__cvt+0x44>
 8004e7e:	2103      	movs	r1, #3
 8004e80:	ab03      	add	r3, sp, #12
 8004e82:	9301      	str	r3, [sp, #4]
 8004e84:	ab02      	add	r3, sp, #8
 8004e86:	9300      	str	r3, [sp, #0]
 8004e88:	ec45 4b10 	vmov	d0, r4, r5
 8004e8c:	4653      	mov	r3, sl
 8004e8e:	4632      	mov	r2, r6
 8004e90:	f001 f802 	bl	8005e98 <_dtoa_r>
 8004e94:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004e98:	4607      	mov	r7, r0
 8004e9a:	d102      	bne.n	8004ea2 <__cvt+0x66>
 8004e9c:	f019 0f01 	tst.w	r9, #1
 8004ea0:	d022      	beq.n	8004ee8 <__cvt+0xac>
 8004ea2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004ea6:	eb07 0906 	add.w	r9, r7, r6
 8004eaa:	d110      	bne.n	8004ece <__cvt+0x92>
 8004eac:	783b      	ldrb	r3, [r7, #0]
 8004eae:	2b30      	cmp	r3, #48	; 0x30
 8004eb0:	d10a      	bne.n	8004ec8 <__cvt+0x8c>
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	4620      	mov	r0, r4
 8004eb8:	4629      	mov	r1, r5
 8004eba:	f7fb fe1d 	bl	8000af8 <__aeabi_dcmpeq>
 8004ebe:	b918      	cbnz	r0, 8004ec8 <__cvt+0x8c>
 8004ec0:	f1c6 0601 	rsb	r6, r6, #1
 8004ec4:	f8ca 6000 	str.w	r6, [sl]
 8004ec8:	f8da 3000 	ldr.w	r3, [sl]
 8004ecc:	4499      	add	r9, r3
 8004ece:	2200      	movs	r2, #0
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	4620      	mov	r0, r4
 8004ed4:	4629      	mov	r1, r5
 8004ed6:	f7fb fe0f 	bl	8000af8 <__aeabi_dcmpeq>
 8004eda:	b108      	cbz	r0, 8004ee0 <__cvt+0xa4>
 8004edc:	f8cd 900c 	str.w	r9, [sp, #12]
 8004ee0:	2230      	movs	r2, #48	; 0x30
 8004ee2:	9b03      	ldr	r3, [sp, #12]
 8004ee4:	454b      	cmp	r3, r9
 8004ee6:	d307      	bcc.n	8004ef8 <__cvt+0xbc>
 8004ee8:	9b03      	ldr	r3, [sp, #12]
 8004eea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004eec:	1bdb      	subs	r3, r3, r7
 8004eee:	4638      	mov	r0, r7
 8004ef0:	6013      	str	r3, [r2, #0]
 8004ef2:	b004      	add	sp, #16
 8004ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ef8:	1c59      	adds	r1, r3, #1
 8004efa:	9103      	str	r1, [sp, #12]
 8004efc:	701a      	strb	r2, [r3, #0]
 8004efe:	e7f0      	b.n	8004ee2 <__cvt+0xa6>

08004f00 <__exponent>:
 8004f00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f02:	4603      	mov	r3, r0
 8004f04:	2900      	cmp	r1, #0
 8004f06:	bfb8      	it	lt
 8004f08:	4249      	neglt	r1, r1
 8004f0a:	f803 2b02 	strb.w	r2, [r3], #2
 8004f0e:	bfb4      	ite	lt
 8004f10:	222d      	movlt	r2, #45	; 0x2d
 8004f12:	222b      	movge	r2, #43	; 0x2b
 8004f14:	2909      	cmp	r1, #9
 8004f16:	7042      	strb	r2, [r0, #1]
 8004f18:	dd2a      	ble.n	8004f70 <__exponent+0x70>
 8004f1a:	f10d 0407 	add.w	r4, sp, #7
 8004f1e:	46a4      	mov	ip, r4
 8004f20:	270a      	movs	r7, #10
 8004f22:	46a6      	mov	lr, r4
 8004f24:	460a      	mov	r2, r1
 8004f26:	fb91 f6f7 	sdiv	r6, r1, r7
 8004f2a:	fb07 1516 	mls	r5, r7, r6, r1
 8004f2e:	3530      	adds	r5, #48	; 0x30
 8004f30:	2a63      	cmp	r2, #99	; 0x63
 8004f32:	f104 34ff 	add.w	r4, r4, #4294967295
 8004f36:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004f3a:	4631      	mov	r1, r6
 8004f3c:	dcf1      	bgt.n	8004f22 <__exponent+0x22>
 8004f3e:	3130      	adds	r1, #48	; 0x30
 8004f40:	f1ae 0502 	sub.w	r5, lr, #2
 8004f44:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004f48:	1c44      	adds	r4, r0, #1
 8004f4a:	4629      	mov	r1, r5
 8004f4c:	4561      	cmp	r1, ip
 8004f4e:	d30a      	bcc.n	8004f66 <__exponent+0x66>
 8004f50:	f10d 0209 	add.w	r2, sp, #9
 8004f54:	eba2 020e 	sub.w	r2, r2, lr
 8004f58:	4565      	cmp	r5, ip
 8004f5a:	bf88      	it	hi
 8004f5c:	2200      	movhi	r2, #0
 8004f5e:	4413      	add	r3, r2
 8004f60:	1a18      	subs	r0, r3, r0
 8004f62:	b003      	add	sp, #12
 8004f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f6a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004f6e:	e7ed      	b.n	8004f4c <__exponent+0x4c>
 8004f70:	2330      	movs	r3, #48	; 0x30
 8004f72:	3130      	adds	r1, #48	; 0x30
 8004f74:	7083      	strb	r3, [r0, #2]
 8004f76:	70c1      	strb	r1, [r0, #3]
 8004f78:	1d03      	adds	r3, r0, #4
 8004f7a:	e7f1      	b.n	8004f60 <__exponent+0x60>

08004f7c <_printf_float>:
 8004f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f80:	ed2d 8b02 	vpush	{d8}
 8004f84:	b08d      	sub	sp, #52	; 0x34
 8004f86:	460c      	mov	r4, r1
 8004f88:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004f8c:	4616      	mov	r6, r2
 8004f8e:	461f      	mov	r7, r3
 8004f90:	4605      	mov	r5, r0
 8004f92:	f001 ff39 	bl	8006e08 <_localeconv_r>
 8004f96:	f8d0 a000 	ldr.w	sl, [r0]
 8004f9a:	4650      	mov	r0, sl
 8004f9c:	f7fb f92a 	bl	80001f4 <strlen>
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	930a      	str	r3, [sp, #40]	; 0x28
 8004fa4:	6823      	ldr	r3, [r4, #0]
 8004fa6:	9305      	str	r3, [sp, #20]
 8004fa8:	f8d8 3000 	ldr.w	r3, [r8]
 8004fac:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004fb0:	3307      	adds	r3, #7
 8004fb2:	f023 0307 	bic.w	r3, r3, #7
 8004fb6:	f103 0208 	add.w	r2, r3, #8
 8004fba:	f8c8 2000 	str.w	r2, [r8]
 8004fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004fc6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004fca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004fce:	9307      	str	r3, [sp, #28]
 8004fd0:	f8cd 8018 	str.w	r8, [sp, #24]
 8004fd4:	ee08 0a10 	vmov	s16, r0
 8004fd8:	4b9f      	ldr	r3, [pc, #636]	; (8005258 <_printf_float+0x2dc>)
 8004fda:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004fde:	f04f 32ff 	mov.w	r2, #4294967295
 8004fe2:	f7fb fdbb 	bl	8000b5c <__aeabi_dcmpun>
 8004fe6:	bb88      	cbnz	r0, 800504c <_printf_float+0xd0>
 8004fe8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004fec:	4b9a      	ldr	r3, [pc, #616]	; (8005258 <_printf_float+0x2dc>)
 8004fee:	f04f 32ff 	mov.w	r2, #4294967295
 8004ff2:	f7fb fd95 	bl	8000b20 <__aeabi_dcmple>
 8004ff6:	bb48      	cbnz	r0, 800504c <_printf_float+0xd0>
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	4640      	mov	r0, r8
 8004ffe:	4649      	mov	r1, r9
 8005000:	f7fb fd84 	bl	8000b0c <__aeabi_dcmplt>
 8005004:	b110      	cbz	r0, 800500c <_printf_float+0x90>
 8005006:	232d      	movs	r3, #45	; 0x2d
 8005008:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800500c:	4b93      	ldr	r3, [pc, #588]	; (800525c <_printf_float+0x2e0>)
 800500e:	4894      	ldr	r0, [pc, #592]	; (8005260 <_printf_float+0x2e4>)
 8005010:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005014:	bf94      	ite	ls
 8005016:	4698      	movls	r8, r3
 8005018:	4680      	movhi	r8, r0
 800501a:	2303      	movs	r3, #3
 800501c:	6123      	str	r3, [r4, #16]
 800501e:	9b05      	ldr	r3, [sp, #20]
 8005020:	f023 0204 	bic.w	r2, r3, #4
 8005024:	6022      	str	r2, [r4, #0]
 8005026:	f04f 0900 	mov.w	r9, #0
 800502a:	9700      	str	r7, [sp, #0]
 800502c:	4633      	mov	r3, r6
 800502e:	aa0b      	add	r2, sp, #44	; 0x2c
 8005030:	4621      	mov	r1, r4
 8005032:	4628      	mov	r0, r5
 8005034:	f000 f9d8 	bl	80053e8 <_printf_common>
 8005038:	3001      	adds	r0, #1
 800503a:	f040 8090 	bne.w	800515e <_printf_float+0x1e2>
 800503e:	f04f 30ff 	mov.w	r0, #4294967295
 8005042:	b00d      	add	sp, #52	; 0x34
 8005044:	ecbd 8b02 	vpop	{d8}
 8005048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800504c:	4642      	mov	r2, r8
 800504e:	464b      	mov	r3, r9
 8005050:	4640      	mov	r0, r8
 8005052:	4649      	mov	r1, r9
 8005054:	f7fb fd82 	bl	8000b5c <__aeabi_dcmpun>
 8005058:	b140      	cbz	r0, 800506c <_printf_float+0xf0>
 800505a:	464b      	mov	r3, r9
 800505c:	2b00      	cmp	r3, #0
 800505e:	bfbc      	itt	lt
 8005060:	232d      	movlt	r3, #45	; 0x2d
 8005062:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005066:	487f      	ldr	r0, [pc, #508]	; (8005264 <_printf_float+0x2e8>)
 8005068:	4b7f      	ldr	r3, [pc, #508]	; (8005268 <_printf_float+0x2ec>)
 800506a:	e7d1      	b.n	8005010 <_printf_float+0x94>
 800506c:	6863      	ldr	r3, [r4, #4]
 800506e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005072:	9206      	str	r2, [sp, #24]
 8005074:	1c5a      	adds	r2, r3, #1
 8005076:	d13f      	bne.n	80050f8 <_printf_float+0x17c>
 8005078:	2306      	movs	r3, #6
 800507a:	6063      	str	r3, [r4, #4]
 800507c:	9b05      	ldr	r3, [sp, #20]
 800507e:	6861      	ldr	r1, [r4, #4]
 8005080:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005084:	2300      	movs	r3, #0
 8005086:	9303      	str	r3, [sp, #12]
 8005088:	ab0a      	add	r3, sp, #40	; 0x28
 800508a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800508e:	ab09      	add	r3, sp, #36	; 0x24
 8005090:	ec49 8b10 	vmov	d0, r8, r9
 8005094:	9300      	str	r3, [sp, #0]
 8005096:	6022      	str	r2, [r4, #0]
 8005098:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800509c:	4628      	mov	r0, r5
 800509e:	f7ff fecd 	bl	8004e3c <__cvt>
 80050a2:	9b06      	ldr	r3, [sp, #24]
 80050a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80050a6:	2b47      	cmp	r3, #71	; 0x47
 80050a8:	4680      	mov	r8, r0
 80050aa:	d108      	bne.n	80050be <_printf_float+0x142>
 80050ac:	1cc8      	adds	r0, r1, #3
 80050ae:	db02      	blt.n	80050b6 <_printf_float+0x13a>
 80050b0:	6863      	ldr	r3, [r4, #4]
 80050b2:	4299      	cmp	r1, r3
 80050b4:	dd41      	ble.n	800513a <_printf_float+0x1be>
 80050b6:	f1ab 0b02 	sub.w	fp, fp, #2
 80050ba:	fa5f fb8b 	uxtb.w	fp, fp
 80050be:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80050c2:	d820      	bhi.n	8005106 <_printf_float+0x18a>
 80050c4:	3901      	subs	r1, #1
 80050c6:	465a      	mov	r2, fp
 80050c8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80050cc:	9109      	str	r1, [sp, #36]	; 0x24
 80050ce:	f7ff ff17 	bl	8004f00 <__exponent>
 80050d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80050d4:	1813      	adds	r3, r2, r0
 80050d6:	2a01      	cmp	r2, #1
 80050d8:	4681      	mov	r9, r0
 80050da:	6123      	str	r3, [r4, #16]
 80050dc:	dc02      	bgt.n	80050e4 <_printf_float+0x168>
 80050de:	6822      	ldr	r2, [r4, #0]
 80050e0:	07d2      	lsls	r2, r2, #31
 80050e2:	d501      	bpl.n	80050e8 <_printf_float+0x16c>
 80050e4:	3301      	adds	r3, #1
 80050e6:	6123      	str	r3, [r4, #16]
 80050e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d09c      	beq.n	800502a <_printf_float+0xae>
 80050f0:	232d      	movs	r3, #45	; 0x2d
 80050f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050f6:	e798      	b.n	800502a <_printf_float+0xae>
 80050f8:	9a06      	ldr	r2, [sp, #24]
 80050fa:	2a47      	cmp	r2, #71	; 0x47
 80050fc:	d1be      	bne.n	800507c <_printf_float+0x100>
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d1bc      	bne.n	800507c <_printf_float+0x100>
 8005102:	2301      	movs	r3, #1
 8005104:	e7b9      	b.n	800507a <_printf_float+0xfe>
 8005106:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800510a:	d118      	bne.n	800513e <_printf_float+0x1c2>
 800510c:	2900      	cmp	r1, #0
 800510e:	6863      	ldr	r3, [r4, #4]
 8005110:	dd0b      	ble.n	800512a <_printf_float+0x1ae>
 8005112:	6121      	str	r1, [r4, #16]
 8005114:	b913      	cbnz	r3, 800511c <_printf_float+0x1a0>
 8005116:	6822      	ldr	r2, [r4, #0]
 8005118:	07d0      	lsls	r0, r2, #31
 800511a:	d502      	bpl.n	8005122 <_printf_float+0x1a6>
 800511c:	3301      	adds	r3, #1
 800511e:	440b      	add	r3, r1
 8005120:	6123      	str	r3, [r4, #16]
 8005122:	65a1      	str	r1, [r4, #88]	; 0x58
 8005124:	f04f 0900 	mov.w	r9, #0
 8005128:	e7de      	b.n	80050e8 <_printf_float+0x16c>
 800512a:	b913      	cbnz	r3, 8005132 <_printf_float+0x1b6>
 800512c:	6822      	ldr	r2, [r4, #0]
 800512e:	07d2      	lsls	r2, r2, #31
 8005130:	d501      	bpl.n	8005136 <_printf_float+0x1ba>
 8005132:	3302      	adds	r3, #2
 8005134:	e7f4      	b.n	8005120 <_printf_float+0x1a4>
 8005136:	2301      	movs	r3, #1
 8005138:	e7f2      	b.n	8005120 <_printf_float+0x1a4>
 800513a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800513e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005140:	4299      	cmp	r1, r3
 8005142:	db05      	blt.n	8005150 <_printf_float+0x1d4>
 8005144:	6823      	ldr	r3, [r4, #0]
 8005146:	6121      	str	r1, [r4, #16]
 8005148:	07d8      	lsls	r0, r3, #31
 800514a:	d5ea      	bpl.n	8005122 <_printf_float+0x1a6>
 800514c:	1c4b      	adds	r3, r1, #1
 800514e:	e7e7      	b.n	8005120 <_printf_float+0x1a4>
 8005150:	2900      	cmp	r1, #0
 8005152:	bfd4      	ite	le
 8005154:	f1c1 0202 	rsble	r2, r1, #2
 8005158:	2201      	movgt	r2, #1
 800515a:	4413      	add	r3, r2
 800515c:	e7e0      	b.n	8005120 <_printf_float+0x1a4>
 800515e:	6823      	ldr	r3, [r4, #0]
 8005160:	055a      	lsls	r2, r3, #21
 8005162:	d407      	bmi.n	8005174 <_printf_float+0x1f8>
 8005164:	6923      	ldr	r3, [r4, #16]
 8005166:	4642      	mov	r2, r8
 8005168:	4631      	mov	r1, r6
 800516a:	4628      	mov	r0, r5
 800516c:	47b8      	blx	r7
 800516e:	3001      	adds	r0, #1
 8005170:	d12c      	bne.n	80051cc <_printf_float+0x250>
 8005172:	e764      	b.n	800503e <_printf_float+0xc2>
 8005174:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005178:	f240 80e0 	bls.w	800533c <_printf_float+0x3c0>
 800517c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005180:	2200      	movs	r2, #0
 8005182:	2300      	movs	r3, #0
 8005184:	f7fb fcb8 	bl	8000af8 <__aeabi_dcmpeq>
 8005188:	2800      	cmp	r0, #0
 800518a:	d034      	beq.n	80051f6 <_printf_float+0x27a>
 800518c:	4a37      	ldr	r2, [pc, #220]	; (800526c <_printf_float+0x2f0>)
 800518e:	2301      	movs	r3, #1
 8005190:	4631      	mov	r1, r6
 8005192:	4628      	mov	r0, r5
 8005194:	47b8      	blx	r7
 8005196:	3001      	adds	r0, #1
 8005198:	f43f af51 	beq.w	800503e <_printf_float+0xc2>
 800519c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80051a0:	429a      	cmp	r2, r3
 80051a2:	db02      	blt.n	80051aa <_printf_float+0x22e>
 80051a4:	6823      	ldr	r3, [r4, #0]
 80051a6:	07d8      	lsls	r0, r3, #31
 80051a8:	d510      	bpl.n	80051cc <_printf_float+0x250>
 80051aa:	ee18 3a10 	vmov	r3, s16
 80051ae:	4652      	mov	r2, sl
 80051b0:	4631      	mov	r1, r6
 80051b2:	4628      	mov	r0, r5
 80051b4:	47b8      	blx	r7
 80051b6:	3001      	adds	r0, #1
 80051b8:	f43f af41 	beq.w	800503e <_printf_float+0xc2>
 80051bc:	f04f 0800 	mov.w	r8, #0
 80051c0:	f104 091a 	add.w	r9, r4, #26
 80051c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051c6:	3b01      	subs	r3, #1
 80051c8:	4543      	cmp	r3, r8
 80051ca:	dc09      	bgt.n	80051e0 <_printf_float+0x264>
 80051cc:	6823      	ldr	r3, [r4, #0]
 80051ce:	079b      	lsls	r3, r3, #30
 80051d0:	f100 8105 	bmi.w	80053de <_printf_float+0x462>
 80051d4:	68e0      	ldr	r0, [r4, #12]
 80051d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051d8:	4298      	cmp	r0, r3
 80051da:	bfb8      	it	lt
 80051dc:	4618      	movlt	r0, r3
 80051de:	e730      	b.n	8005042 <_printf_float+0xc6>
 80051e0:	2301      	movs	r3, #1
 80051e2:	464a      	mov	r2, r9
 80051e4:	4631      	mov	r1, r6
 80051e6:	4628      	mov	r0, r5
 80051e8:	47b8      	blx	r7
 80051ea:	3001      	adds	r0, #1
 80051ec:	f43f af27 	beq.w	800503e <_printf_float+0xc2>
 80051f0:	f108 0801 	add.w	r8, r8, #1
 80051f4:	e7e6      	b.n	80051c4 <_printf_float+0x248>
 80051f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	dc39      	bgt.n	8005270 <_printf_float+0x2f4>
 80051fc:	4a1b      	ldr	r2, [pc, #108]	; (800526c <_printf_float+0x2f0>)
 80051fe:	2301      	movs	r3, #1
 8005200:	4631      	mov	r1, r6
 8005202:	4628      	mov	r0, r5
 8005204:	47b8      	blx	r7
 8005206:	3001      	adds	r0, #1
 8005208:	f43f af19 	beq.w	800503e <_printf_float+0xc2>
 800520c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005210:	4313      	orrs	r3, r2
 8005212:	d102      	bne.n	800521a <_printf_float+0x29e>
 8005214:	6823      	ldr	r3, [r4, #0]
 8005216:	07d9      	lsls	r1, r3, #31
 8005218:	d5d8      	bpl.n	80051cc <_printf_float+0x250>
 800521a:	ee18 3a10 	vmov	r3, s16
 800521e:	4652      	mov	r2, sl
 8005220:	4631      	mov	r1, r6
 8005222:	4628      	mov	r0, r5
 8005224:	47b8      	blx	r7
 8005226:	3001      	adds	r0, #1
 8005228:	f43f af09 	beq.w	800503e <_printf_float+0xc2>
 800522c:	f04f 0900 	mov.w	r9, #0
 8005230:	f104 0a1a 	add.w	sl, r4, #26
 8005234:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005236:	425b      	negs	r3, r3
 8005238:	454b      	cmp	r3, r9
 800523a:	dc01      	bgt.n	8005240 <_printf_float+0x2c4>
 800523c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800523e:	e792      	b.n	8005166 <_printf_float+0x1ea>
 8005240:	2301      	movs	r3, #1
 8005242:	4652      	mov	r2, sl
 8005244:	4631      	mov	r1, r6
 8005246:	4628      	mov	r0, r5
 8005248:	47b8      	blx	r7
 800524a:	3001      	adds	r0, #1
 800524c:	f43f aef7 	beq.w	800503e <_printf_float+0xc2>
 8005250:	f109 0901 	add.w	r9, r9, #1
 8005254:	e7ee      	b.n	8005234 <_printf_float+0x2b8>
 8005256:	bf00      	nop
 8005258:	7fefffff 	.word	0x7fefffff
 800525c:	08008404 	.word	0x08008404
 8005260:	08008408 	.word	0x08008408
 8005264:	08008410 	.word	0x08008410
 8005268:	0800840c 	.word	0x0800840c
 800526c:	08008414 	.word	0x08008414
 8005270:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005272:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005274:	429a      	cmp	r2, r3
 8005276:	bfa8      	it	ge
 8005278:	461a      	movge	r2, r3
 800527a:	2a00      	cmp	r2, #0
 800527c:	4691      	mov	r9, r2
 800527e:	dc37      	bgt.n	80052f0 <_printf_float+0x374>
 8005280:	f04f 0b00 	mov.w	fp, #0
 8005284:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005288:	f104 021a 	add.w	r2, r4, #26
 800528c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800528e:	9305      	str	r3, [sp, #20]
 8005290:	eba3 0309 	sub.w	r3, r3, r9
 8005294:	455b      	cmp	r3, fp
 8005296:	dc33      	bgt.n	8005300 <_printf_float+0x384>
 8005298:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800529c:	429a      	cmp	r2, r3
 800529e:	db3b      	blt.n	8005318 <_printf_float+0x39c>
 80052a0:	6823      	ldr	r3, [r4, #0]
 80052a2:	07da      	lsls	r2, r3, #31
 80052a4:	d438      	bmi.n	8005318 <_printf_float+0x39c>
 80052a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052a8:	9a05      	ldr	r2, [sp, #20]
 80052aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80052ac:	1a9a      	subs	r2, r3, r2
 80052ae:	eba3 0901 	sub.w	r9, r3, r1
 80052b2:	4591      	cmp	r9, r2
 80052b4:	bfa8      	it	ge
 80052b6:	4691      	movge	r9, r2
 80052b8:	f1b9 0f00 	cmp.w	r9, #0
 80052bc:	dc35      	bgt.n	800532a <_printf_float+0x3ae>
 80052be:	f04f 0800 	mov.w	r8, #0
 80052c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80052c6:	f104 0a1a 	add.w	sl, r4, #26
 80052ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80052ce:	1a9b      	subs	r3, r3, r2
 80052d0:	eba3 0309 	sub.w	r3, r3, r9
 80052d4:	4543      	cmp	r3, r8
 80052d6:	f77f af79 	ble.w	80051cc <_printf_float+0x250>
 80052da:	2301      	movs	r3, #1
 80052dc:	4652      	mov	r2, sl
 80052de:	4631      	mov	r1, r6
 80052e0:	4628      	mov	r0, r5
 80052e2:	47b8      	blx	r7
 80052e4:	3001      	adds	r0, #1
 80052e6:	f43f aeaa 	beq.w	800503e <_printf_float+0xc2>
 80052ea:	f108 0801 	add.w	r8, r8, #1
 80052ee:	e7ec      	b.n	80052ca <_printf_float+0x34e>
 80052f0:	4613      	mov	r3, r2
 80052f2:	4631      	mov	r1, r6
 80052f4:	4642      	mov	r2, r8
 80052f6:	4628      	mov	r0, r5
 80052f8:	47b8      	blx	r7
 80052fa:	3001      	adds	r0, #1
 80052fc:	d1c0      	bne.n	8005280 <_printf_float+0x304>
 80052fe:	e69e      	b.n	800503e <_printf_float+0xc2>
 8005300:	2301      	movs	r3, #1
 8005302:	4631      	mov	r1, r6
 8005304:	4628      	mov	r0, r5
 8005306:	9205      	str	r2, [sp, #20]
 8005308:	47b8      	blx	r7
 800530a:	3001      	adds	r0, #1
 800530c:	f43f ae97 	beq.w	800503e <_printf_float+0xc2>
 8005310:	9a05      	ldr	r2, [sp, #20]
 8005312:	f10b 0b01 	add.w	fp, fp, #1
 8005316:	e7b9      	b.n	800528c <_printf_float+0x310>
 8005318:	ee18 3a10 	vmov	r3, s16
 800531c:	4652      	mov	r2, sl
 800531e:	4631      	mov	r1, r6
 8005320:	4628      	mov	r0, r5
 8005322:	47b8      	blx	r7
 8005324:	3001      	adds	r0, #1
 8005326:	d1be      	bne.n	80052a6 <_printf_float+0x32a>
 8005328:	e689      	b.n	800503e <_printf_float+0xc2>
 800532a:	9a05      	ldr	r2, [sp, #20]
 800532c:	464b      	mov	r3, r9
 800532e:	4442      	add	r2, r8
 8005330:	4631      	mov	r1, r6
 8005332:	4628      	mov	r0, r5
 8005334:	47b8      	blx	r7
 8005336:	3001      	adds	r0, #1
 8005338:	d1c1      	bne.n	80052be <_printf_float+0x342>
 800533a:	e680      	b.n	800503e <_printf_float+0xc2>
 800533c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800533e:	2a01      	cmp	r2, #1
 8005340:	dc01      	bgt.n	8005346 <_printf_float+0x3ca>
 8005342:	07db      	lsls	r3, r3, #31
 8005344:	d538      	bpl.n	80053b8 <_printf_float+0x43c>
 8005346:	2301      	movs	r3, #1
 8005348:	4642      	mov	r2, r8
 800534a:	4631      	mov	r1, r6
 800534c:	4628      	mov	r0, r5
 800534e:	47b8      	blx	r7
 8005350:	3001      	adds	r0, #1
 8005352:	f43f ae74 	beq.w	800503e <_printf_float+0xc2>
 8005356:	ee18 3a10 	vmov	r3, s16
 800535a:	4652      	mov	r2, sl
 800535c:	4631      	mov	r1, r6
 800535e:	4628      	mov	r0, r5
 8005360:	47b8      	blx	r7
 8005362:	3001      	adds	r0, #1
 8005364:	f43f ae6b 	beq.w	800503e <_printf_float+0xc2>
 8005368:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800536c:	2200      	movs	r2, #0
 800536e:	2300      	movs	r3, #0
 8005370:	f7fb fbc2 	bl	8000af8 <__aeabi_dcmpeq>
 8005374:	b9d8      	cbnz	r0, 80053ae <_printf_float+0x432>
 8005376:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005378:	f108 0201 	add.w	r2, r8, #1
 800537c:	3b01      	subs	r3, #1
 800537e:	4631      	mov	r1, r6
 8005380:	4628      	mov	r0, r5
 8005382:	47b8      	blx	r7
 8005384:	3001      	adds	r0, #1
 8005386:	d10e      	bne.n	80053a6 <_printf_float+0x42a>
 8005388:	e659      	b.n	800503e <_printf_float+0xc2>
 800538a:	2301      	movs	r3, #1
 800538c:	4652      	mov	r2, sl
 800538e:	4631      	mov	r1, r6
 8005390:	4628      	mov	r0, r5
 8005392:	47b8      	blx	r7
 8005394:	3001      	adds	r0, #1
 8005396:	f43f ae52 	beq.w	800503e <_printf_float+0xc2>
 800539a:	f108 0801 	add.w	r8, r8, #1
 800539e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053a0:	3b01      	subs	r3, #1
 80053a2:	4543      	cmp	r3, r8
 80053a4:	dcf1      	bgt.n	800538a <_printf_float+0x40e>
 80053a6:	464b      	mov	r3, r9
 80053a8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80053ac:	e6dc      	b.n	8005168 <_printf_float+0x1ec>
 80053ae:	f04f 0800 	mov.w	r8, #0
 80053b2:	f104 0a1a 	add.w	sl, r4, #26
 80053b6:	e7f2      	b.n	800539e <_printf_float+0x422>
 80053b8:	2301      	movs	r3, #1
 80053ba:	4642      	mov	r2, r8
 80053bc:	e7df      	b.n	800537e <_printf_float+0x402>
 80053be:	2301      	movs	r3, #1
 80053c0:	464a      	mov	r2, r9
 80053c2:	4631      	mov	r1, r6
 80053c4:	4628      	mov	r0, r5
 80053c6:	47b8      	blx	r7
 80053c8:	3001      	adds	r0, #1
 80053ca:	f43f ae38 	beq.w	800503e <_printf_float+0xc2>
 80053ce:	f108 0801 	add.w	r8, r8, #1
 80053d2:	68e3      	ldr	r3, [r4, #12]
 80053d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80053d6:	1a5b      	subs	r3, r3, r1
 80053d8:	4543      	cmp	r3, r8
 80053da:	dcf0      	bgt.n	80053be <_printf_float+0x442>
 80053dc:	e6fa      	b.n	80051d4 <_printf_float+0x258>
 80053de:	f04f 0800 	mov.w	r8, #0
 80053e2:	f104 0919 	add.w	r9, r4, #25
 80053e6:	e7f4      	b.n	80053d2 <_printf_float+0x456>

080053e8 <_printf_common>:
 80053e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053ec:	4616      	mov	r6, r2
 80053ee:	4699      	mov	r9, r3
 80053f0:	688a      	ldr	r2, [r1, #8]
 80053f2:	690b      	ldr	r3, [r1, #16]
 80053f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80053f8:	4293      	cmp	r3, r2
 80053fa:	bfb8      	it	lt
 80053fc:	4613      	movlt	r3, r2
 80053fe:	6033      	str	r3, [r6, #0]
 8005400:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005404:	4607      	mov	r7, r0
 8005406:	460c      	mov	r4, r1
 8005408:	b10a      	cbz	r2, 800540e <_printf_common+0x26>
 800540a:	3301      	adds	r3, #1
 800540c:	6033      	str	r3, [r6, #0]
 800540e:	6823      	ldr	r3, [r4, #0]
 8005410:	0699      	lsls	r1, r3, #26
 8005412:	bf42      	ittt	mi
 8005414:	6833      	ldrmi	r3, [r6, #0]
 8005416:	3302      	addmi	r3, #2
 8005418:	6033      	strmi	r3, [r6, #0]
 800541a:	6825      	ldr	r5, [r4, #0]
 800541c:	f015 0506 	ands.w	r5, r5, #6
 8005420:	d106      	bne.n	8005430 <_printf_common+0x48>
 8005422:	f104 0a19 	add.w	sl, r4, #25
 8005426:	68e3      	ldr	r3, [r4, #12]
 8005428:	6832      	ldr	r2, [r6, #0]
 800542a:	1a9b      	subs	r3, r3, r2
 800542c:	42ab      	cmp	r3, r5
 800542e:	dc26      	bgt.n	800547e <_printf_common+0x96>
 8005430:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005434:	1e13      	subs	r3, r2, #0
 8005436:	6822      	ldr	r2, [r4, #0]
 8005438:	bf18      	it	ne
 800543a:	2301      	movne	r3, #1
 800543c:	0692      	lsls	r2, r2, #26
 800543e:	d42b      	bmi.n	8005498 <_printf_common+0xb0>
 8005440:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005444:	4649      	mov	r1, r9
 8005446:	4638      	mov	r0, r7
 8005448:	47c0      	blx	r8
 800544a:	3001      	adds	r0, #1
 800544c:	d01e      	beq.n	800548c <_printf_common+0xa4>
 800544e:	6823      	ldr	r3, [r4, #0]
 8005450:	68e5      	ldr	r5, [r4, #12]
 8005452:	6832      	ldr	r2, [r6, #0]
 8005454:	f003 0306 	and.w	r3, r3, #6
 8005458:	2b04      	cmp	r3, #4
 800545a:	bf08      	it	eq
 800545c:	1aad      	subeq	r5, r5, r2
 800545e:	68a3      	ldr	r3, [r4, #8]
 8005460:	6922      	ldr	r2, [r4, #16]
 8005462:	bf0c      	ite	eq
 8005464:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005468:	2500      	movne	r5, #0
 800546a:	4293      	cmp	r3, r2
 800546c:	bfc4      	itt	gt
 800546e:	1a9b      	subgt	r3, r3, r2
 8005470:	18ed      	addgt	r5, r5, r3
 8005472:	2600      	movs	r6, #0
 8005474:	341a      	adds	r4, #26
 8005476:	42b5      	cmp	r5, r6
 8005478:	d11a      	bne.n	80054b0 <_printf_common+0xc8>
 800547a:	2000      	movs	r0, #0
 800547c:	e008      	b.n	8005490 <_printf_common+0xa8>
 800547e:	2301      	movs	r3, #1
 8005480:	4652      	mov	r2, sl
 8005482:	4649      	mov	r1, r9
 8005484:	4638      	mov	r0, r7
 8005486:	47c0      	blx	r8
 8005488:	3001      	adds	r0, #1
 800548a:	d103      	bne.n	8005494 <_printf_common+0xac>
 800548c:	f04f 30ff 	mov.w	r0, #4294967295
 8005490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005494:	3501      	adds	r5, #1
 8005496:	e7c6      	b.n	8005426 <_printf_common+0x3e>
 8005498:	18e1      	adds	r1, r4, r3
 800549a:	1c5a      	adds	r2, r3, #1
 800549c:	2030      	movs	r0, #48	; 0x30
 800549e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80054a2:	4422      	add	r2, r4
 80054a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80054a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80054ac:	3302      	adds	r3, #2
 80054ae:	e7c7      	b.n	8005440 <_printf_common+0x58>
 80054b0:	2301      	movs	r3, #1
 80054b2:	4622      	mov	r2, r4
 80054b4:	4649      	mov	r1, r9
 80054b6:	4638      	mov	r0, r7
 80054b8:	47c0      	blx	r8
 80054ba:	3001      	adds	r0, #1
 80054bc:	d0e6      	beq.n	800548c <_printf_common+0xa4>
 80054be:	3601      	adds	r6, #1
 80054c0:	e7d9      	b.n	8005476 <_printf_common+0x8e>
	...

080054c4 <_printf_i>:
 80054c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054c8:	7e0f      	ldrb	r7, [r1, #24]
 80054ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80054cc:	2f78      	cmp	r7, #120	; 0x78
 80054ce:	4691      	mov	r9, r2
 80054d0:	4680      	mov	r8, r0
 80054d2:	460c      	mov	r4, r1
 80054d4:	469a      	mov	sl, r3
 80054d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80054da:	d807      	bhi.n	80054ec <_printf_i+0x28>
 80054dc:	2f62      	cmp	r7, #98	; 0x62
 80054de:	d80a      	bhi.n	80054f6 <_printf_i+0x32>
 80054e0:	2f00      	cmp	r7, #0
 80054e2:	f000 80d8 	beq.w	8005696 <_printf_i+0x1d2>
 80054e6:	2f58      	cmp	r7, #88	; 0x58
 80054e8:	f000 80a3 	beq.w	8005632 <_printf_i+0x16e>
 80054ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80054f4:	e03a      	b.n	800556c <_printf_i+0xa8>
 80054f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80054fa:	2b15      	cmp	r3, #21
 80054fc:	d8f6      	bhi.n	80054ec <_printf_i+0x28>
 80054fe:	a101      	add	r1, pc, #4	; (adr r1, 8005504 <_printf_i+0x40>)
 8005500:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005504:	0800555d 	.word	0x0800555d
 8005508:	08005571 	.word	0x08005571
 800550c:	080054ed 	.word	0x080054ed
 8005510:	080054ed 	.word	0x080054ed
 8005514:	080054ed 	.word	0x080054ed
 8005518:	080054ed 	.word	0x080054ed
 800551c:	08005571 	.word	0x08005571
 8005520:	080054ed 	.word	0x080054ed
 8005524:	080054ed 	.word	0x080054ed
 8005528:	080054ed 	.word	0x080054ed
 800552c:	080054ed 	.word	0x080054ed
 8005530:	0800567d 	.word	0x0800567d
 8005534:	080055a1 	.word	0x080055a1
 8005538:	0800565f 	.word	0x0800565f
 800553c:	080054ed 	.word	0x080054ed
 8005540:	080054ed 	.word	0x080054ed
 8005544:	0800569f 	.word	0x0800569f
 8005548:	080054ed 	.word	0x080054ed
 800554c:	080055a1 	.word	0x080055a1
 8005550:	080054ed 	.word	0x080054ed
 8005554:	080054ed 	.word	0x080054ed
 8005558:	08005667 	.word	0x08005667
 800555c:	682b      	ldr	r3, [r5, #0]
 800555e:	1d1a      	adds	r2, r3, #4
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	602a      	str	r2, [r5, #0]
 8005564:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005568:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800556c:	2301      	movs	r3, #1
 800556e:	e0a3      	b.n	80056b8 <_printf_i+0x1f4>
 8005570:	6820      	ldr	r0, [r4, #0]
 8005572:	6829      	ldr	r1, [r5, #0]
 8005574:	0606      	lsls	r6, r0, #24
 8005576:	f101 0304 	add.w	r3, r1, #4
 800557a:	d50a      	bpl.n	8005592 <_printf_i+0xce>
 800557c:	680e      	ldr	r6, [r1, #0]
 800557e:	602b      	str	r3, [r5, #0]
 8005580:	2e00      	cmp	r6, #0
 8005582:	da03      	bge.n	800558c <_printf_i+0xc8>
 8005584:	232d      	movs	r3, #45	; 0x2d
 8005586:	4276      	negs	r6, r6
 8005588:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800558c:	485e      	ldr	r0, [pc, #376]	; (8005708 <_printf_i+0x244>)
 800558e:	230a      	movs	r3, #10
 8005590:	e019      	b.n	80055c6 <_printf_i+0x102>
 8005592:	680e      	ldr	r6, [r1, #0]
 8005594:	602b      	str	r3, [r5, #0]
 8005596:	f010 0f40 	tst.w	r0, #64	; 0x40
 800559a:	bf18      	it	ne
 800559c:	b236      	sxthne	r6, r6
 800559e:	e7ef      	b.n	8005580 <_printf_i+0xbc>
 80055a0:	682b      	ldr	r3, [r5, #0]
 80055a2:	6820      	ldr	r0, [r4, #0]
 80055a4:	1d19      	adds	r1, r3, #4
 80055a6:	6029      	str	r1, [r5, #0]
 80055a8:	0601      	lsls	r1, r0, #24
 80055aa:	d501      	bpl.n	80055b0 <_printf_i+0xec>
 80055ac:	681e      	ldr	r6, [r3, #0]
 80055ae:	e002      	b.n	80055b6 <_printf_i+0xf2>
 80055b0:	0646      	lsls	r6, r0, #25
 80055b2:	d5fb      	bpl.n	80055ac <_printf_i+0xe8>
 80055b4:	881e      	ldrh	r6, [r3, #0]
 80055b6:	4854      	ldr	r0, [pc, #336]	; (8005708 <_printf_i+0x244>)
 80055b8:	2f6f      	cmp	r7, #111	; 0x6f
 80055ba:	bf0c      	ite	eq
 80055bc:	2308      	moveq	r3, #8
 80055be:	230a      	movne	r3, #10
 80055c0:	2100      	movs	r1, #0
 80055c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80055c6:	6865      	ldr	r5, [r4, #4]
 80055c8:	60a5      	str	r5, [r4, #8]
 80055ca:	2d00      	cmp	r5, #0
 80055cc:	bfa2      	ittt	ge
 80055ce:	6821      	ldrge	r1, [r4, #0]
 80055d0:	f021 0104 	bicge.w	r1, r1, #4
 80055d4:	6021      	strge	r1, [r4, #0]
 80055d6:	b90e      	cbnz	r6, 80055dc <_printf_i+0x118>
 80055d8:	2d00      	cmp	r5, #0
 80055da:	d04d      	beq.n	8005678 <_printf_i+0x1b4>
 80055dc:	4615      	mov	r5, r2
 80055de:	fbb6 f1f3 	udiv	r1, r6, r3
 80055e2:	fb03 6711 	mls	r7, r3, r1, r6
 80055e6:	5dc7      	ldrb	r7, [r0, r7]
 80055e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80055ec:	4637      	mov	r7, r6
 80055ee:	42bb      	cmp	r3, r7
 80055f0:	460e      	mov	r6, r1
 80055f2:	d9f4      	bls.n	80055de <_printf_i+0x11a>
 80055f4:	2b08      	cmp	r3, #8
 80055f6:	d10b      	bne.n	8005610 <_printf_i+0x14c>
 80055f8:	6823      	ldr	r3, [r4, #0]
 80055fa:	07de      	lsls	r6, r3, #31
 80055fc:	d508      	bpl.n	8005610 <_printf_i+0x14c>
 80055fe:	6923      	ldr	r3, [r4, #16]
 8005600:	6861      	ldr	r1, [r4, #4]
 8005602:	4299      	cmp	r1, r3
 8005604:	bfde      	ittt	le
 8005606:	2330      	movle	r3, #48	; 0x30
 8005608:	f805 3c01 	strble.w	r3, [r5, #-1]
 800560c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005610:	1b52      	subs	r2, r2, r5
 8005612:	6122      	str	r2, [r4, #16]
 8005614:	f8cd a000 	str.w	sl, [sp]
 8005618:	464b      	mov	r3, r9
 800561a:	aa03      	add	r2, sp, #12
 800561c:	4621      	mov	r1, r4
 800561e:	4640      	mov	r0, r8
 8005620:	f7ff fee2 	bl	80053e8 <_printf_common>
 8005624:	3001      	adds	r0, #1
 8005626:	d14c      	bne.n	80056c2 <_printf_i+0x1fe>
 8005628:	f04f 30ff 	mov.w	r0, #4294967295
 800562c:	b004      	add	sp, #16
 800562e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005632:	4835      	ldr	r0, [pc, #212]	; (8005708 <_printf_i+0x244>)
 8005634:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005638:	6829      	ldr	r1, [r5, #0]
 800563a:	6823      	ldr	r3, [r4, #0]
 800563c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005640:	6029      	str	r1, [r5, #0]
 8005642:	061d      	lsls	r5, r3, #24
 8005644:	d514      	bpl.n	8005670 <_printf_i+0x1ac>
 8005646:	07df      	lsls	r7, r3, #31
 8005648:	bf44      	itt	mi
 800564a:	f043 0320 	orrmi.w	r3, r3, #32
 800564e:	6023      	strmi	r3, [r4, #0]
 8005650:	b91e      	cbnz	r6, 800565a <_printf_i+0x196>
 8005652:	6823      	ldr	r3, [r4, #0]
 8005654:	f023 0320 	bic.w	r3, r3, #32
 8005658:	6023      	str	r3, [r4, #0]
 800565a:	2310      	movs	r3, #16
 800565c:	e7b0      	b.n	80055c0 <_printf_i+0xfc>
 800565e:	6823      	ldr	r3, [r4, #0]
 8005660:	f043 0320 	orr.w	r3, r3, #32
 8005664:	6023      	str	r3, [r4, #0]
 8005666:	2378      	movs	r3, #120	; 0x78
 8005668:	4828      	ldr	r0, [pc, #160]	; (800570c <_printf_i+0x248>)
 800566a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800566e:	e7e3      	b.n	8005638 <_printf_i+0x174>
 8005670:	0659      	lsls	r1, r3, #25
 8005672:	bf48      	it	mi
 8005674:	b2b6      	uxthmi	r6, r6
 8005676:	e7e6      	b.n	8005646 <_printf_i+0x182>
 8005678:	4615      	mov	r5, r2
 800567a:	e7bb      	b.n	80055f4 <_printf_i+0x130>
 800567c:	682b      	ldr	r3, [r5, #0]
 800567e:	6826      	ldr	r6, [r4, #0]
 8005680:	6961      	ldr	r1, [r4, #20]
 8005682:	1d18      	adds	r0, r3, #4
 8005684:	6028      	str	r0, [r5, #0]
 8005686:	0635      	lsls	r5, r6, #24
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	d501      	bpl.n	8005690 <_printf_i+0x1cc>
 800568c:	6019      	str	r1, [r3, #0]
 800568e:	e002      	b.n	8005696 <_printf_i+0x1d2>
 8005690:	0670      	lsls	r0, r6, #25
 8005692:	d5fb      	bpl.n	800568c <_printf_i+0x1c8>
 8005694:	8019      	strh	r1, [r3, #0]
 8005696:	2300      	movs	r3, #0
 8005698:	6123      	str	r3, [r4, #16]
 800569a:	4615      	mov	r5, r2
 800569c:	e7ba      	b.n	8005614 <_printf_i+0x150>
 800569e:	682b      	ldr	r3, [r5, #0]
 80056a0:	1d1a      	adds	r2, r3, #4
 80056a2:	602a      	str	r2, [r5, #0]
 80056a4:	681d      	ldr	r5, [r3, #0]
 80056a6:	6862      	ldr	r2, [r4, #4]
 80056a8:	2100      	movs	r1, #0
 80056aa:	4628      	mov	r0, r5
 80056ac:	f7fa fdb0 	bl	8000210 <memchr>
 80056b0:	b108      	cbz	r0, 80056b6 <_printf_i+0x1f2>
 80056b2:	1b40      	subs	r0, r0, r5
 80056b4:	6060      	str	r0, [r4, #4]
 80056b6:	6863      	ldr	r3, [r4, #4]
 80056b8:	6123      	str	r3, [r4, #16]
 80056ba:	2300      	movs	r3, #0
 80056bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056c0:	e7a8      	b.n	8005614 <_printf_i+0x150>
 80056c2:	6923      	ldr	r3, [r4, #16]
 80056c4:	462a      	mov	r2, r5
 80056c6:	4649      	mov	r1, r9
 80056c8:	4640      	mov	r0, r8
 80056ca:	47d0      	blx	sl
 80056cc:	3001      	adds	r0, #1
 80056ce:	d0ab      	beq.n	8005628 <_printf_i+0x164>
 80056d0:	6823      	ldr	r3, [r4, #0]
 80056d2:	079b      	lsls	r3, r3, #30
 80056d4:	d413      	bmi.n	80056fe <_printf_i+0x23a>
 80056d6:	68e0      	ldr	r0, [r4, #12]
 80056d8:	9b03      	ldr	r3, [sp, #12]
 80056da:	4298      	cmp	r0, r3
 80056dc:	bfb8      	it	lt
 80056de:	4618      	movlt	r0, r3
 80056e0:	e7a4      	b.n	800562c <_printf_i+0x168>
 80056e2:	2301      	movs	r3, #1
 80056e4:	4632      	mov	r2, r6
 80056e6:	4649      	mov	r1, r9
 80056e8:	4640      	mov	r0, r8
 80056ea:	47d0      	blx	sl
 80056ec:	3001      	adds	r0, #1
 80056ee:	d09b      	beq.n	8005628 <_printf_i+0x164>
 80056f0:	3501      	adds	r5, #1
 80056f2:	68e3      	ldr	r3, [r4, #12]
 80056f4:	9903      	ldr	r1, [sp, #12]
 80056f6:	1a5b      	subs	r3, r3, r1
 80056f8:	42ab      	cmp	r3, r5
 80056fa:	dcf2      	bgt.n	80056e2 <_printf_i+0x21e>
 80056fc:	e7eb      	b.n	80056d6 <_printf_i+0x212>
 80056fe:	2500      	movs	r5, #0
 8005700:	f104 0619 	add.w	r6, r4, #25
 8005704:	e7f5      	b.n	80056f2 <_printf_i+0x22e>
 8005706:	bf00      	nop
 8005708:	08008416 	.word	0x08008416
 800570c:	08008427 	.word	0x08008427

08005710 <iprintf>:
 8005710:	b40f      	push	{r0, r1, r2, r3}
 8005712:	4b0a      	ldr	r3, [pc, #40]	; (800573c <iprintf+0x2c>)
 8005714:	b513      	push	{r0, r1, r4, lr}
 8005716:	681c      	ldr	r4, [r3, #0]
 8005718:	b124      	cbz	r4, 8005724 <iprintf+0x14>
 800571a:	69a3      	ldr	r3, [r4, #24]
 800571c:	b913      	cbnz	r3, 8005724 <iprintf+0x14>
 800571e:	4620      	mov	r0, r4
 8005720:	f001 fac2 	bl	8006ca8 <__sinit>
 8005724:	ab05      	add	r3, sp, #20
 8005726:	9a04      	ldr	r2, [sp, #16]
 8005728:	68a1      	ldr	r1, [r4, #8]
 800572a:	9301      	str	r3, [sp, #4]
 800572c:	4620      	mov	r0, r4
 800572e:	f002 f891 	bl	8007854 <_vfiprintf_r>
 8005732:	b002      	add	sp, #8
 8005734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005738:	b004      	add	sp, #16
 800573a:	4770      	bx	lr
 800573c:	2000000c 	.word	0x2000000c

08005740 <putchar>:
 8005740:	4b09      	ldr	r3, [pc, #36]	; (8005768 <putchar+0x28>)
 8005742:	b513      	push	{r0, r1, r4, lr}
 8005744:	681c      	ldr	r4, [r3, #0]
 8005746:	4601      	mov	r1, r0
 8005748:	b134      	cbz	r4, 8005758 <putchar+0x18>
 800574a:	69a3      	ldr	r3, [r4, #24]
 800574c:	b923      	cbnz	r3, 8005758 <putchar+0x18>
 800574e:	9001      	str	r0, [sp, #4]
 8005750:	4620      	mov	r0, r4
 8005752:	f001 faa9 	bl	8006ca8 <__sinit>
 8005756:	9901      	ldr	r1, [sp, #4]
 8005758:	68a2      	ldr	r2, [r4, #8]
 800575a:	4620      	mov	r0, r4
 800575c:	b002      	add	sp, #8
 800575e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005762:	f002 b9a7 	b.w	8007ab4 <_putc_r>
 8005766:	bf00      	nop
 8005768:	2000000c 	.word	0x2000000c

0800576c <_puts_r>:
 800576c:	b570      	push	{r4, r5, r6, lr}
 800576e:	460e      	mov	r6, r1
 8005770:	4605      	mov	r5, r0
 8005772:	b118      	cbz	r0, 800577c <_puts_r+0x10>
 8005774:	6983      	ldr	r3, [r0, #24]
 8005776:	b90b      	cbnz	r3, 800577c <_puts_r+0x10>
 8005778:	f001 fa96 	bl	8006ca8 <__sinit>
 800577c:	69ab      	ldr	r3, [r5, #24]
 800577e:	68ac      	ldr	r4, [r5, #8]
 8005780:	b913      	cbnz	r3, 8005788 <_puts_r+0x1c>
 8005782:	4628      	mov	r0, r5
 8005784:	f001 fa90 	bl	8006ca8 <__sinit>
 8005788:	4b2c      	ldr	r3, [pc, #176]	; (800583c <_puts_r+0xd0>)
 800578a:	429c      	cmp	r4, r3
 800578c:	d120      	bne.n	80057d0 <_puts_r+0x64>
 800578e:	686c      	ldr	r4, [r5, #4]
 8005790:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005792:	07db      	lsls	r3, r3, #31
 8005794:	d405      	bmi.n	80057a2 <_puts_r+0x36>
 8005796:	89a3      	ldrh	r3, [r4, #12]
 8005798:	0598      	lsls	r0, r3, #22
 800579a:	d402      	bmi.n	80057a2 <_puts_r+0x36>
 800579c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800579e:	f001 fb38 	bl	8006e12 <__retarget_lock_acquire_recursive>
 80057a2:	89a3      	ldrh	r3, [r4, #12]
 80057a4:	0719      	lsls	r1, r3, #28
 80057a6:	d51d      	bpl.n	80057e4 <_puts_r+0x78>
 80057a8:	6923      	ldr	r3, [r4, #16]
 80057aa:	b1db      	cbz	r3, 80057e4 <_puts_r+0x78>
 80057ac:	3e01      	subs	r6, #1
 80057ae:	68a3      	ldr	r3, [r4, #8]
 80057b0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80057b4:	3b01      	subs	r3, #1
 80057b6:	60a3      	str	r3, [r4, #8]
 80057b8:	bb39      	cbnz	r1, 800580a <_puts_r+0x9e>
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	da38      	bge.n	8005830 <_puts_r+0xc4>
 80057be:	4622      	mov	r2, r4
 80057c0:	210a      	movs	r1, #10
 80057c2:	4628      	mov	r0, r5
 80057c4:	f000 f9fe 	bl	8005bc4 <__swbuf_r>
 80057c8:	3001      	adds	r0, #1
 80057ca:	d011      	beq.n	80057f0 <_puts_r+0x84>
 80057cc:	250a      	movs	r5, #10
 80057ce:	e011      	b.n	80057f4 <_puts_r+0x88>
 80057d0:	4b1b      	ldr	r3, [pc, #108]	; (8005840 <_puts_r+0xd4>)
 80057d2:	429c      	cmp	r4, r3
 80057d4:	d101      	bne.n	80057da <_puts_r+0x6e>
 80057d6:	68ac      	ldr	r4, [r5, #8]
 80057d8:	e7da      	b.n	8005790 <_puts_r+0x24>
 80057da:	4b1a      	ldr	r3, [pc, #104]	; (8005844 <_puts_r+0xd8>)
 80057dc:	429c      	cmp	r4, r3
 80057de:	bf08      	it	eq
 80057e0:	68ec      	ldreq	r4, [r5, #12]
 80057e2:	e7d5      	b.n	8005790 <_puts_r+0x24>
 80057e4:	4621      	mov	r1, r4
 80057e6:	4628      	mov	r0, r5
 80057e8:	f000 fa3e 	bl	8005c68 <__swsetup_r>
 80057ec:	2800      	cmp	r0, #0
 80057ee:	d0dd      	beq.n	80057ac <_puts_r+0x40>
 80057f0:	f04f 35ff 	mov.w	r5, #4294967295
 80057f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80057f6:	07da      	lsls	r2, r3, #31
 80057f8:	d405      	bmi.n	8005806 <_puts_r+0x9a>
 80057fa:	89a3      	ldrh	r3, [r4, #12]
 80057fc:	059b      	lsls	r3, r3, #22
 80057fe:	d402      	bmi.n	8005806 <_puts_r+0x9a>
 8005800:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005802:	f001 fb07 	bl	8006e14 <__retarget_lock_release_recursive>
 8005806:	4628      	mov	r0, r5
 8005808:	bd70      	pop	{r4, r5, r6, pc}
 800580a:	2b00      	cmp	r3, #0
 800580c:	da04      	bge.n	8005818 <_puts_r+0xac>
 800580e:	69a2      	ldr	r2, [r4, #24]
 8005810:	429a      	cmp	r2, r3
 8005812:	dc06      	bgt.n	8005822 <_puts_r+0xb6>
 8005814:	290a      	cmp	r1, #10
 8005816:	d004      	beq.n	8005822 <_puts_r+0xb6>
 8005818:	6823      	ldr	r3, [r4, #0]
 800581a:	1c5a      	adds	r2, r3, #1
 800581c:	6022      	str	r2, [r4, #0]
 800581e:	7019      	strb	r1, [r3, #0]
 8005820:	e7c5      	b.n	80057ae <_puts_r+0x42>
 8005822:	4622      	mov	r2, r4
 8005824:	4628      	mov	r0, r5
 8005826:	f000 f9cd 	bl	8005bc4 <__swbuf_r>
 800582a:	3001      	adds	r0, #1
 800582c:	d1bf      	bne.n	80057ae <_puts_r+0x42>
 800582e:	e7df      	b.n	80057f0 <_puts_r+0x84>
 8005830:	6823      	ldr	r3, [r4, #0]
 8005832:	250a      	movs	r5, #10
 8005834:	1c5a      	adds	r2, r3, #1
 8005836:	6022      	str	r2, [r4, #0]
 8005838:	701d      	strb	r5, [r3, #0]
 800583a:	e7db      	b.n	80057f4 <_puts_r+0x88>
 800583c:	08008684 	.word	0x08008684
 8005840:	080086a4 	.word	0x080086a4
 8005844:	08008664 	.word	0x08008664

08005848 <puts>:
 8005848:	4b02      	ldr	r3, [pc, #8]	; (8005854 <puts+0xc>)
 800584a:	4601      	mov	r1, r0
 800584c:	6818      	ldr	r0, [r3, #0]
 800584e:	f7ff bf8d 	b.w	800576c <_puts_r>
 8005852:	bf00      	nop
 8005854:	2000000c 	.word	0x2000000c

08005858 <setbuf>:
 8005858:	2900      	cmp	r1, #0
 800585a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800585e:	bf0c      	ite	eq
 8005860:	2202      	moveq	r2, #2
 8005862:	2200      	movne	r2, #0
 8005864:	f000 b800 	b.w	8005868 <setvbuf>

08005868 <setvbuf>:
 8005868:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800586c:	461d      	mov	r5, r3
 800586e:	4b5d      	ldr	r3, [pc, #372]	; (80059e4 <setvbuf+0x17c>)
 8005870:	681f      	ldr	r7, [r3, #0]
 8005872:	4604      	mov	r4, r0
 8005874:	460e      	mov	r6, r1
 8005876:	4690      	mov	r8, r2
 8005878:	b127      	cbz	r7, 8005884 <setvbuf+0x1c>
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	b913      	cbnz	r3, 8005884 <setvbuf+0x1c>
 800587e:	4638      	mov	r0, r7
 8005880:	f001 fa12 	bl	8006ca8 <__sinit>
 8005884:	4b58      	ldr	r3, [pc, #352]	; (80059e8 <setvbuf+0x180>)
 8005886:	429c      	cmp	r4, r3
 8005888:	d167      	bne.n	800595a <setvbuf+0xf2>
 800588a:	687c      	ldr	r4, [r7, #4]
 800588c:	f1b8 0f02 	cmp.w	r8, #2
 8005890:	d006      	beq.n	80058a0 <setvbuf+0x38>
 8005892:	f1b8 0f01 	cmp.w	r8, #1
 8005896:	f200 809f 	bhi.w	80059d8 <setvbuf+0x170>
 800589a:	2d00      	cmp	r5, #0
 800589c:	f2c0 809c 	blt.w	80059d8 <setvbuf+0x170>
 80058a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80058a2:	07db      	lsls	r3, r3, #31
 80058a4:	d405      	bmi.n	80058b2 <setvbuf+0x4a>
 80058a6:	89a3      	ldrh	r3, [r4, #12]
 80058a8:	0598      	lsls	r0, r3, #22
 80058aa:	d402      	bmi.n	80058b2 <setvbuf+0x4a>
 80058ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058ae:	f001 fab0 	bl	8006e12 <__retarget_lock_acquire_recursive>
 80058b2:	4621      	mov	r1, r4
 80058b4:	4638      	mov	r0, r7
 80058b6:	f001 f963 	bl	8006b80 <_fflush_r>
 80058ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80058bc:	b141      	cbz	r1, 80058d0 <setvbuf+0x68>
 80058be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80058c2:	4299      	cmp	r1, r3
 80058c4:	d002      	beq.n	80058cc <setvbuf+0x64>
 80058c6:	4638      	mov	r0, r7
 80058c8:	f001 feba 	bl	8007640 <_free_r>
 80058cc:	2300      	movs	r3, #0
 80058ce:	6363      	str	r3, [r4, #52]	; 0x34
 80058d0:	2300      	movs	r3, #0
 80058d2:	61a3      	str	r3, [r4, #24]
 80058d4:	6063      	str	r3, [r4, #4]
 80058d6:	89a3      	ldrh	r3, [r4, #12]
 80058d8:	0619      	lsls	r1, r3, #24
 80058da:	d503      	bpl.n	80058e4 <setvbuf+0x7c>
 80058dc:	6921      	ldr	r1, [r4, #16]
 80058de:	4638      	mov	r0, r7
 80058e0:	f001 feae 	bl	8007640 <_free_r>
 80058e4:	89a3      	ldrh	r3, [r4, #12]
 80058e6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80058ea:	f023 0303 	bic.w	r3, r3, #3
 80058ee:	f1b8 0f02 	cmp.w	r8, #2
 80058f2:	81a3      	strh	r3, [r4, #12]
 80058f4:	d06c      	beq.n	80059d0 <setvbuf+0x168>
 80058f6:	ab01      	add	r3, sp, #4
 80058f8:	466a      	mov	r2, sp
 80058fa:	4621      	mov	r1, r4
 80058fc:	4638      	mov	r0, r7
 80058fe:	f001 fa8a 	bl	8006e16 <__swhatbuf_r>
 8005902:	89a3      	ldrh	r3, [r4, #12]
 8005904:	4318      	orrs	r0, r3
 8005906:	81a0      	strh	r0, [r4, #12]
 8005908:	2d00      	cmp	r5, #0
 800590a:	d130      	bne.n	800596e <setvbuf+0x106>
 800590c:	9d00      	ldr	r5, [sp, #0]
 800590e:	4628      	mov	r0, r5
 8005910:	f001 fae6 	bl	8006ee0 <malloc>
 8005914:	4606      	mov	r6, r0
 8005916:	2800      	cmp	r0, #0
 8005918:	d155      	bne.n	80059c6 <setvbuf+0x15e>
 800591a:	f8dd 9000 	ldr.w	r9, [sp]
 800591e:	45a9      	cmp	r9, r5
 8005920:	d14a      	bne.n	80059b8 <setvbuf+0x150>
 8005922:	f04f 35ff 	mov.w	r5, #4294967295
 8005926:	2200      	movs	r2, #0
 8005928:	60a2      	str	r2, [r4, #8]
 800592a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 800592e:	6022      	str	r2, [r4, #0]
 8005930:	6122      	str	r2, [r4, #16]
 8005932:	2201      	movs	r2, #1
 8005934:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005938:	6162      	str	r2, [r4, #20]
 800593a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800593c:	f043 0302 	orr.w	r3, r3, #2
 8005940:	07d2      	lsls	r2, r2, #31
 8005942:	81a3      	strh	r3, [r4, #12]
 8005944:	d405      	bmi.n	8005952 <setvbuf+0xea>
 8005946:	f413 7f00 	tst.w	r3, #512	; 0x200
 800594a:	d102      	bne.n	8005952 <setvbuf+0xea>
 800594c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800594e:	f001 fa61 	bl	8006e14 <__retarget_lock_release_recursive>
 8005952:	4628      	mov	r0, r5
 8005954:	b003      	add	sp, #12
 8005956:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800595a:	4b24      	ldr	r3, [pc, #144]	; (80059ec <setvbuf+0x184>)
 800595c:	429c      	cmp	r4, r3
 800595e:	d101      	bne.n	8005964 <setvbuf+0xfc>
 8005960:	68bc      	ldr	r4, [r7, #8]
 8005962:	e793      	b.n	800588c <setvbuf+0x24>
 8005964:	4b22      	ldr	r3, [pc, #136]	; (80059f0 <setvbuf+0x188>)
 8005966:	429c      	cmp	r4, r3
 8005968:	bf08      	it	eq
 800596a:	68fc      	ldreq	r4, [r7, #12]
 800596c:	e78e      	b.n	800588c <setvbuf+0x24>
 800596e:	2e00      	cmp	r6, #0
 8005970:	d0cd      	beq.n	800590e <setvbuf+0xa6>
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	b913      	cbnz	r3, 800597c <setvbuf+0x114>
 8005976:	4638      	mov	r0, r7
 8005978:	f001 f996 	bl	8006ca8 <__sinit>
 800597c:	f1b8 0f01 	cmp.w	r8, #1
 8005980:	bf08      	it	eq
 8005982:	89a3      	ldrheq	r3, [r4, #12]
 8005984:	6026      	str	r6, [r4, #0]
 8005986:	bf04      	itt	eq
 8005988:	f043 0301 	orreq.w	r3, r3, #1
 800598c:	81a3      	strheq	r3, [r4, #12]
 800598e:	89a2      	ldrh	r2, [r4, #12]
 8005990:	f012 0308 	ands.w	r3, r2, #8
 8005994:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8005998:	d01c      	beq.n	80059d4 <setvbuf+0x16c>
 800599a:	07d3      	lsls	r3, r2, #31
 800599c:	bf41      	itttt	mi
 800599e:	2300      	movmi	r3, #0
 80059a0:	426d      	negmi	r5, r5
 80059a2:	60a3      	strmi	r3, [r4, #8]
 80059a4:	61a5      	strmi	r5, [r4, #24]
 80059a6:	bf58      	it	pl
 80059a8:	60a5      	strpl	r5, [r4, #8]
 80059aa:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80059ac:	f015 0501 	ands.w	r5, r5, #1
 80059b0:	d115      	bne.n	80059de <setvbuf+0x176>
 80059b2:	f412 7f00 	tst.w	r2, #512	; 0x200
 80059b6:	e7c8      	b.n	800594a <setvbuf+0xe2>
 80059b8:	4648      	mov	r0, r9
 80059ba:	f001 fa91 	bl	8006ee0 <malloc>
 80059be:	4606      	mov	r6, r0
 80059c0:	2800      	cmp	r0, #0
 80059c2:	d0ae      	beq.n	8005922 <setvbuf+0xba>
 80059c4:	464d      	mov	r5, r9
 80059c6:	89a3      	ldrh	r3, [r4, #12]
 80059c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059cc:	81a3      	strh	r3, [r4, #12]
 80059ce:	e7d0      	b.n	8005972 <setvbuf+0x10a>
 80059d0:	2500      	movs	r5, #0
 80059d2:	e7a8      	b.n	8005926 <setvbuf+0xbe>
 80059d4:	60a3      	str	r3, [r4, #8]
 80059d6:	e7e8      	b.n	80059aa <setvbuf+0x142>
 80059d8:	f04f 35ff 	mov.w	r5, #4294967295
 80059dc:	e7b9      	b.n	8005952 <setvbuf+0xea>
 80059de:	2500      	movs	r5, #0
 80059e0:	e7b7      	b.n	8005952 <setvbuf+0xea>
 80059e2:	bf00      	nop
 80059e4:	2000000c 	.word	0x2000000c
 80059e8:	08008684 	.word	0x08008684
 80059ec:	080086a4 	.word	0x080086a4
 80059f0:	08008664 	.word	0x08008664

080059f4 <strtok>:
 80059f4:	4b16      	ldr	r3, [pc, #88]	; (8005a50 <strtok+0x5c>)
 80059f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80059f8:	681e      	ldr	r6, [r3, #0]
 80059fa:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80059fc:	4605      	mov	r5, r0
 80059fe:	b9fc      	cbnz	r4, 8005a40 <strtok+0x4c>
 8005a00:	2050      	movs	r0, #80	; 0x50
 8005a02:	9101      	str	r1, [sp, #4]
 8005a04:	f001 fa6c 	bl	8006ee0 <malloc>
 8005a08:	9901      	ldr	r1, [sp, #4]
 8005a0a:	65b0      	str	r0, [r6, #88]	; 0x58
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	b920      	cbnz	r0, 8005a1a <strtok+0x26>
 8005a10:	4b10      	ldr	r3, [pc, #64]	; (8005a54 <strtok+0x60>)
 8005a12:	4811      	ldr	r0, [pc, #68]	; (8005a58 <strtok+0x64>)
 8005a14:	2157      	movs	r1, #87	; 0x57
 8005a16:	f000 f995 	bl	8005d44 <__assert_func>
 8005a1a:	e9c0 4400 	strd	r4, r4, [r0]
 8005a1e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005a22:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8005a26:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8005a2a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8005a2e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8005a32:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8005a36:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8005a3a:	6184      	str	r4, [r0, #24]
 8005a3c:	7704      	strb	r4, [r0, #28]
 8005a3e:	6244      	str	r4, [r0, #36]	; 0x24
 8005a40:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8005a42:	2301      	movs	r3, #1
 8005a44:	4628      	mov	r0, r5
 8005a46:	b002      	add	sp, #8
 8005a48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005a4c:	f000 b806 	b.w	8005a5c <__strtok_r>
 8005a50:	2000000c 	.word	0x2000000c
 8005a54:	08008438 	.word	0x08008438
 8005a58:	0800844f 	.word	0x0800844f

08005a5c <__strtok_r>:
 8005a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a5e:	b908      	cbnz	r0, 8005a64 <__strtok_r+0x8>
 8005a60:	6810      	ldr	r0, [r2, #0]
 8005a62:	b188      	cbz	r0, 8005a88 <__strtok_r+0x2c>
 8005a64:	4604      	mov	r4, r0
 8005a66:	4620      	mov	r0, r4
 8005a68:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005a6c:	460f      	mov	r7, r1
 8005a6e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005a72:	b91e      	cbnz	r6, 8005a7c <__strtok_r+0x20>
 8005a74:	b965      	cbnz	r5, 8005a90 <__strtok_r+0x34>
 8005a76:	6015      	str	r5, [r2, #0]
 8005a78:	4628      	mov	r0, r5
 8005a7a:	e005      	b.n	8005a88 <__strtok_r+0x2c>
 8005a7c:	42b5      	cmp	r5, r6
 8005a7e:	d1f6      	bne.n	8005a6e <__strtok_r+0x12>
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d1f0      	bne.n	8005a66 <__strtok_r+0xa>
 8005a84:	6014      	str	r4, [r2, #0]
 8005a86:	7003      	strb	r3, [r0, #0]
 8005a88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a8a:	461c      	mov	r4, r3
 8005a8c:	e00c      	b.n	8005aa8 <__strtok_r+0x4c>
 8005a8e:	b915      	cbnz	r5, 8005a96 <__strtok_r+0x3a>
 8005a90:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005a94:	460e      	mov	r6, r1
 8005a96:	f816 5b01 	ldrb.w	r5, [r6], #1
 8005a9a:	42ab      	cmp	r3, r5
 8005a9c:	d1f7      	bne.n	8005a8e <__strtok_r+0x32>
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d0f3      	beq.n	8005a8a <__strtok_r+0x2e>
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	f804 3c01 	strb.w	r3, [r4, #-1]
 8005aa8:	6014      	str	r4, [r2, #0]
 8005aaa:	e7ed      	b.n	8005a88 <__strtok_r+0x2c>

08005aac <_strtol_l.constprop.0>:
 8005aac:	2b01      	cmp	r3, #1
 8005aae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ab2:	d001      	beq.n	8005ab8 <_strtol_l.constprop.0+0xc>
 8005ab4:	2b24      	cmp	r3, #36	; 0x24
 8005ab6:	d906      	bls.n	8005ac6 <_strtol_l.constprop.0+0x1a>
 8005ab8:	f7ff f98e 	bl	8004dd8 <__errno>
 8005abc:	2316      	movs	r3, #22
 8005abe:	6003      	str	r3, [r0, #0]
 8005ac0:	2000      	movs	r0, #0
 8005ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ac6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005bac <_strtol_l.constprop.0+0x100>
 8005aca:	460d      	mov	r5, r1
 8005acc:	462e      	mov	r6, r5
 8005ace:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005ad2:	f814 700c 	ldrb.w	r7, [r4, ip]
 8005ad6:	f017 0708 	ands.w	r7, r7, #8
 8005ada:	d1f7      	bne.n	8005acc <_strtol_l.constprop.0+0x20>
 8005adc:	2c2d      	cmp	r4, #45	; 0x2d
 8005ade:	d132      	bne.n	8005b46 <_strtol_l.constprop.0+0x9a>
 8005ae0:	782c      	ldrb	r4, [r5, #0]
 8005ae2:	2701      	movs	r7, #1
 8005ae4:	1cb5      	adds	r5, r6, #2
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d05b      	beq.n	8005ba2 <_strtol_l.constprop.0+0xf6>
 8005aea:	2b10      	cmp	r3, #16
 8005aec:	d109      	bne.n	8005b02 <_strtol_l.constprop.0+0x56>
 8005aee:	2c30      	cmp	r4, #48	; 0x30
 8005af0:	d107      	bne.n	8005b02 <_strtol_l.constprop.0+0x56>
 8005af2:	782c      	ldrb	r4, [r5, #0]
 8005af4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005af8:	2c58      	cmp	r4, #88	; 0x58
 8005afa:	d14d      	bne.n	8005b98 <_strtol_l.constprop.0+0xec>
 8005afc:	786c      	ldrb	r4, [r5, #1]
 8005afe:	2310      	movs	r3, #16
 8005b00:	3502      	adds	r5, #2
 8005b02:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005b06:	f108 38ff 	add.w	r8, r8, #4294967295
 8005b0a:	f04f 0c00 	mov.w	ip, #0
 8005b0e:	fbb8 f9f3 	udiv	r9, r8, r3
 8005b12:	4666      	mov	r6, ip
 8005b14:	fb03 8a19 	mls	sl, r3, r9, r8
 8005b18:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005b1c:	f1be 0f09 	cmp.w	lr, #9
 8005b20:	d816      	bhi.n	8005b50 <_strtol_l.constprop.0+0xa4>
 8005b22:	4674      	mov	r4, lr
 8005b24:	42a3      	cmp	r3, r4
 8005b26:	dd24      	ble.n	8005b72 <_strtol_l.constprop.0+0xc6>
 8005b28:	f1bc 0f00 	cmp.w	ip, #0
 8005b2c:	db1e      	blt.n	8005b6c <_strtol_l.constprop.0+0xc0>
 8005b2e:	45b1      	cmp	r9, r6
 8005b30:	d31c      	bcc.n	8005b6c <_strtol_l.constprop.0+0xc0>
 8005b32:	d101      	bne.n	8005b38 <_strtol_l.constprop.0+0x8c>
 8005b34:	45a2      	cmp	sl, r4
 8005b36:	db19      	blt.n	8005b6c <_strtol_l.constprop.0+0xc0>
 8005b38:	fb06 4603 	mla	r6, r6, r3, r4
 8005b3c:	f04f 0c01 	mov.w	ip, #1
 8005b40:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005b44:	e7e8      	b.n	8005b18 <_strtol_l.constprop.0+0x6c>
 8005b46:	2c2b      	cmp	r4, #43	; 0x2b
 8005b48:	bf04      	itt	eq
 8005b4a:	782c      	ldrbeq	r4, [r5, #0]
 8005b4c:	1cb5      	addeq	r5, r6, #2
 8005b4e:	e7ca      	b.n	8005ae6 <_strtol_l.constprop.0+0x3a>
 8005b50:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8005b54:	f1be 0f19 	cmp.w	lr, #25
 8005b58:	d801      	bhi.n	8005b5e <_strtol_l.constprop.0+0xb2>
 8005b5a:	3c37      	subs	r4, #55	; 0x37
 8005b5c:	e7e2      	b.n	8005b24 <_strtol_l.constprop.0+0x78>
 8005b5e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8005b62:	f1be 0f19 	cmp.w	lr, #25
 8005b66:	d804      	bhi.n	8005b72 <_strtol_l.constprop.0+0xc6>
 8005b68:	3c57      	subs	r4, #87	; 0x57
 8005b6a:	e7db      	b.n	8005b24 <_strtol_l.constprop.0+0x78>
 8005b6c:	f04f 3cff 	mov.w	ip, #4294967295
 8005b70:	e7e6      	b.n	8005b40 <_strtol_l.constprop.0+0x94>
 8005b72:	f1bc 0f00 	cmp.w	ip, #0
 8005b76:	da05      	bge.n	8005b84 <_strtol_l.constprop.0+0xd8>
 8005b78:	2322      	movs	r3, #34	; 0x22
 8005b7a:	6003      	str	r3, [r0, #0]
 8005b7c:	4646      	mov	r6, r8
 8005b7e:	b942      	cbnz	r2, 8005b92 <_strtol_l.constprop.0+0xe6>
 8005b80:	4630      	mov	r0, r6
 8005b82:	e79e      	b.n	8005ac2 <_strtol_l.constprop.0+0x16>
 8005b84:	b107      	cbz	r7, 8005b88 <_strtol_l.constprop.0+0xdc>
 8005b86:	4276      	negs	r6, r6
 8005b88:	2a00      	cmp	r2, #0
 8005b8a:	d0f9      	beq.n	8005b80 <_strtol_l.constprop.0+0xd4>
 8005b8c:	f1bc 0f00 	cmp.w	ip, #0
 8005b90:	d000      	beq.n	8005b94 <_strtol_l.constprop.0+0xe8>
 8005b92:	1e69      	subs	r1, r5, #1
 8005b94:	6011      	str	r1, [r2, #0]
 8005b96:	e7f3      	b.n	8005b80 <_strtol_l.constprop.0+0xd4>
 8005b98:	2430      	movs	r4, #48	; 0x30
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d1b1      	bne.n	8005b02 <_strtol_l.constprop.0+0x56>
 8005b9e:	2308      	movs	r3, #8
 8005ba0:	e7af      	b.n	8005b02 <_strtol_l.constprop.0+0x56>
 8005ba2:	2c30      	cmp	r4, #48	; 0x30
 8005ba4:	d0a5      	beq.n	8005af2 <_strtol_l.constprop.0+0x46>
 8005ba6:	230a      	movs	r3, #10
 8005ba8:	e7ab      	b.n	8005b02 <_strtol_l.constprop.0+0x56>
 8005baa:	bf00      	nop
 8005bac:	080084e9 	.word	0x080084e9

08005bb0 <strtol>:
 8005bb0:	4613      	mov	r3, r2
 8005bb2:	460a      	mov	r2, r1
 8005bb4:	4601      	mov	r1, r0
 8005bb6:	4802      	ldr	r0, [pc, #8]	; (8005bc0 <strtol+0x10>)
 8005bb8:	6800      	ldr	r0, [r0, #0]
 8005bba:	f7ff bf77 	b.w	8005aac <_strtol_l.constprop.0>
 8005bbe:	bf00      	nop
 8005bc0:	2000000c 	.word	0x2000000c

08005bc4 <__swbuf_r>:
 8005bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bc6:	460e      	mov	r6, r1
 8005bc8:	4614      	mov	r4, r2
 8005bca:	4605      	mov	r5, r0
 8005bcc:	b118      	cbz	r0, 8005bd6 <__swbuf_r+0x12>
 8005bce:	6983      	ldr	r3, [r0, #24]
 8005bd0:	b90b      	cbnz	r3, 8005bd6 <__swbuf_r+0x12>
 8005bd2:	f001 f869 	bl	8006ca8 <__sinit>
 8005bd6:	4b21      	ldr	r3, [pc, #132]	; (8005c5c <__swbuf_r+0x98>)
 8005bd8:	429c      	cmp	r4, r3
 8005bda:	d12b      	bne.n	8005c34 <__swbuf_r+0x70>
 8005bdc:	686c      	ldr	r4, [r5, #4]
 8005bde:	69a3      	ldr	r3, [r4, #24]
 8005be0:	60a3      	str	r3, [r4, #8]
 8005be2:	89a3      	ldrh	r3, [r4, #12]
 8005be4:	071a      	lsls	r2, r3, #28
 8005be6:	d52f      	bpl.n	8005c48 <__swbuf_r+0x84>
 8005be8:	6923      	ldr	r3, [r4, #16]
 8005bea:	b36b      	cbz	r3, 8005c48 <__swbuf_r+0x84>
 8005bec:	6923      	ldr	r3, [r4, #16]
 8005bee:	6820      	ldr	r0, [r4, #0]
 8005bf0:	1ac0      	subs	r0, r0, r3
 8005bf2:	6963      	ldr	r3, [r4, #20]
 8005bf4:	b2f6      	uxtb	r6, r6
 8005bf6:	4283      	cmp	r3, r0
 8005bf8:	4637      	mov	r7, r6
 8005bfa:	dc04      	bgt.n	8005c06 <__swbuf_r+0x42>
 8005bfc:	4621      	mov	r1, r4
 8005bfe:	4628      	mov	r0, r5
 8005c00:	f000 ffbe 	bl	8006b80 <_fflush_r>
 8005c04:	bb30      	cbnz	r0, 8005c54 <__swbuf_r+0x90>
 8005c06:	68a3      	ldr	r3, [r4, #8]
 8005c08:	3b01      	subs	r3, #1
 8005c0a:	60a3      	str	r3, [r4, #8]
 8005c0c:	6823      	ldr	r3, [r4, #0]
 8005c0e:	1c5a      	adds	r2, r3, #1
 8005c10:	6022      	str	r2, [r4, #0]
 8005c12:	701e      	strb	r6, [r3, #0]
 8005c14:	6963      	ldr	r3, [r4, #20]
 8005c16:	3001      	adds	r0, #1
 8005c18:	4283      	cmp	r3, r0
 8005c1a:	d004      	beq.n	8005c26 <__swbuf_r+0x62>
 8005c1c:	89a3      	ldrh	r3, [r4, #12]
 8005c1e:	07db      	lsls	r3, r3, #31
 8005c20:	d506      	bpl.n	8005c30 <__swbuf_r+0x6c>
 8005c22:	2e0a      	cmp	r6, #10
 8005c24:	d104      	bne.n	8005c30 <__swbuf_r+0x6c>
 8005c26:	4621      	mov	r1, r4
 8005c28:	4628      	mov	r0, r5
 8005c2a:	f000 ffa9 	bl	8006b80 <_fflush_r>
 8005c2e:	b988      	cbnz	r0, 8005c54 <__swbuf_r+0x90>
 8005c30:	4638      	mov	r0, r7
 8005c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c34:	4b0a      	ldr	r3, [pc, #40]	; (8005c60 <__swbuf_r+0x9c>)
 8005c36:	429c      	cmp	r4, r3
 8005c38:	d101      	bne.n	8005c3e <__swbuf_r+0x7a>
 8005c3a:	68ac      	ldr	r4, [r5, #8]
 8005c3c:	e7cf      	b.n	8005bde <__swbuf_r+0x1a>
 8005c3e:	4b09      	ldr	r3, [pc, #36]	; (8005c64 <__swbuf_r+0xa0>)
 8005c40:	429c      	cmp	r4, r3
 8005c42:	bf08      	it	eq
 8005c44:	68ec      	ldreq	r4, [r5, #12]
 8005c46:	e7ca      	b.n	8005bde <__swbuf_r+0x1a>
 8005c48:	4621      	mov	r1, r4
 8005c4a:	4628      	mov	r0, r5
 8005c4c:	f000 f80c 	bl	8005c68 <__swsetup_r>
 8005c50:	2800      	cmp	r0, #0
 8005c52:	d0cb      	beq.n	8005bec <__swbuf_r+0x28>
 8005c54:	f04f 37ff 	mov.w	r7, #4294967295
 8005c58:	e7ea      	b.n	8005c30 <__swbuf_r+0x6c>
 8005c5a:	bf00      	nop
 8005c5c:	08008684 	.word	0x08008684
 8005c60:	080086a4 	.word	0x080086a4
 8005c64:	08008664 	.word	0x08008664

08005c68 <__swsetup_r>:
 8005c68:	4b32      	ldr	r3, [pc, #200]	; (8005d34 <__swsetup_r+0xcc>)
 8005c6a:	b570      	push	{r4, r5, r6, lr}
 8005c6c:	681d      	ldr	r5, [r3, #0]
 8005c6e:	4606      	mov	r6, r0
 8005c70:	460c      	mov	r4, r1
 8005c72:	b125      	cbz	r5, 8005c7e <__swsetup_r+0x16>
 8005c74:	69ab      	ldr	r3, [r5, #24]
 8005c76:	b913      	cbnz	r3, 8005c7e <__swsetup_r+0x16>
 8005c78:	4628      	mov	r0, r5
 8005c7a:	f001 f815 	bl	8006ca8 <__sinit>
 8005c7e:	4b2e      	ldr	r3, [pc, #184]	; (8005d38 <__swsetup_r+0xd0>)
 8005c80:	429c      	cmp	r4, r3
 8005c82:	d10f      	bne.n	8005ca4 <__swsetup_r+0x3c>
 8005c84:	686c      	ldr	r4, [r5, #4]
 8005c86:	89a3      	ldrh	r3, [r4, #12]
 8005c88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c8c:	0719      	lsls	r1, r3, #28
 8005c8e:	d42c      	bmi.n	8005cea <__swsetup_r+0x82>
 8005c90:	06dd      	lsls	r5, r3, #27
 8005c92:	d411      	bmi.n	8005cb8 <__swsetup_r+0x50>
 8005c94:	2309      	movs	r3, #9
 8005c96:	6033      	str	r3, [r6, #0]
 8005c98:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005c9c:	81a3      	strh	r3, [r4, #12]
 8005c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8005ca2:	e03e      	b.n	8005d22 <__swsetup_r+0xba>
 8005ca4:	4b25      	ldr	r3, [pc, #148]	; (8005d3c <__swsetup_r+0xd4>)
 8005ca6:	429c      	cmp	r4, r3
 8005ca8:	d101      	bne.n	8005cae <__swsetup_r+0x46>
 8005caa:	68ac      	ldr	r4, [r5, #8]
 8005cac:	e7eb      	b.n	8005c86 <__swsetup_r+0x1e>
 8005cae:	4b24      	ldr	r3, [pc, #144]	; (8005d40 <__swsetup_r+0xd8>)
 8005cb0:	429c      	cmp	r4, r3
 8005cb2:	bf08      	it	eq
 8005cb4:	68ec      	ldreq	r4, [r5, #12]
 8005cb6:	e7e6      	b.n	8005c86 <__swsetup_r+0x1e>
 8005cb8:	0758      	lsls	r0, r3, #29
 8005cba:	d512      	bpl.n	8005ce2 <__swsetup_r+0x7a>
 8005cbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005cbe:	b141      	cbz	r1, 8005cd2 <__swsetup_r+0x6a>
 8005cc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005cc4:	4299      	cmp	r1, r3
 8005cc6:	d002      	beq.n	8005cce <__swsetup_r+0x66>
 8005cc8:	4630      	mov	r0, r6
 8005cca:	f001 fcb9 	bl	8007640 <_free_r>
 8005cce:	2300      	movs	r3, #0
 8005cd0:	6363      	str	r3, [r4, #52]	; 0x34
 8005cd2:	89a3      	ldrh	r3, [r4, #12]
 8005cd4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005cd8:	81a3      	strh	r3, [r4, #12]
 8005cda:	2300      	movs	r3, #0
 8005cdc:	6063      	str	r3, [r4, #4]
 8005cde:	6923      	ldr	r3, [r4, #16]
 8005ce0:	6023      	str	r3, [r4, #0]
 8005ce2:	89a3      	ldrh	r3, [r4, #12]
 8005ce4:	f043 0308 	orr.w	r3, r3, #8
 8005ce8:	81a3      	strh	r3, [r4, #12]
 8005cea:	6923      	ldr	r3, [r4, #16]
 8005cec:	b94b      	cbnz	r3, 8005d02 <__swsetup_r+0x9a>
 8005cee:	89a3      	ldrh	r3, [r4, #12]
 8005cf0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005cf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005cf8:	d003      	beq.n	8005d02 <__swsetup_r+0x9a>
 8005cfa:	4621      	mov	r1, r4
 8005cfc:	4630      	mov	r0, r6
 8005cfe:	f001 f8af 	bl	8006e60 <__smakebuf_r>
 8005d02:	89a0      	ldrh	r0, [r4, #12]
 8005d04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005d08:	f010 0301 	ands.w	r3, r0, #1
 8005d0c:	d00a      	beq.n	8005d24 <__swsetup_r+0xbc>
 8005d0e:	2300      	movs	r3, #0
 8005d10:	60a3      	str	r3, [r4, #8]
 8005d12:	6963      	ldr	r3, [r4, #20]
 8005d14:	425b      	negs	r3, r3
 8005d16:	61a3      	str	r3, [r4, #24]
 8005d18:	6923      	ldr	r3, [r4, #16]
 8005d1a:	b943      	cbnz	r3, 8005d2e <__swsetup_r+0xc6>
 8005d1c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005d20:	d1ba      	bne.n	8005c98 <__swsetup_r+0x30>
 8005d22:	bd70      	pop	{r4, r5, r6, pc}
 8005d24:	0781      	lsls	r1, r0, #30
 8005d26:	bf58      	it	pl
 8005d28:	6963      	ldrpl	r3, [r4, #20]
 8005d2a:	60a3      	str	r3, [r4, #8]
 8005d2c:	e7f4      	b.n	8005d18 <__swsetup_r+0xb0>
 8005d2e:	2000      	movs	r0, #0
 8005d30:	e7f7      	b.n	8005d22 <__swsetup_r+0xba>
 8005d32:	bf00      	nop
 8005d34:	2000000c 	.word	0x2000000c
 8005d38:	08008684 	.word	0x08008684
 8005d3c:	080086a4 	.word	0x080086a4
 8005d40:	08008664 	.word	0x08008664

08005d44 <__assert_func>:
 8005d44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005d46:	4614      	mov	r4, r2
 8005d48:	461a      	mov	r2, r3
 8005d4a:	4b09      	ldr	r3, [pc, #36]	; (8005d70 <__assert_func+0x2c>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4605      	mov	r5, r0
 8005d50:	68d8      	ldr	r0, [r3, #12]
 8005d52:	b14c      	cbz	r4, 8005d68 <__assert_func+0x24>
 8005d54:	4b07      	ldr	r3, [pc, #28]	; (8005d74 <__assert_func+0x30>)
 8005d56:	9100      	str	r1, [sp, #0]
 8005d58:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005d5c:	4906      	ldr	r1, [pc, #24]	; (8005d78 <__assert_func+0x34>)
 8005d5e:	462b      	mov	r3, r5
 8005d60:	f001 f820 	bl	8006da4 <fiprintf>
 8005d64:	f001 ff54 	bl	8007c10 <abort>
 8005d68:	4b04      	ldr	r3, [pc, #16]	; (8005d7c <__assert_func+0x38>)
 8005d6a:	461c      	mov	r4, r3
 8005d6c:	e7f3      	b.n	8005d56 <__assert_func+0x12>
 8005d6e:	bf00      	nop
 8005d70:	2000000c 	.word	0x2000000c
 8005d74:	080084ac 	.word	0x080084ac
 8005d78:	080084b9 	.word	0x080084b9
 8005d7c:	080084e7 	.word	0x080084e7

08005d80 <quorem>:
 8005d80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d84:	6903      	ldr	r3, [r0, #16]
 8005d86:	690c      	ldr	r4, [r1, #16]
 8005d88:	42a3      	cmp	r3, r4
 8005d8a:	4607      	mov	r7, r0
 8005d8c:	f2c0 8081 	blt.w	8005e92 <quorem+0x112>
 8005d90:	3c01      	subs	r4, #1
 8005d92:	f101 0814 	add.w	r8, r1, #20
 8005d96:	f100 0514 	add.w	r5, r0, #20
 8005d9a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d9e:	9301      	str	r3, [sp, #4]
 8005da0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005da4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005da8:	3301      	adds	r3, #1
 8005daa:	429a      	cmp	r2, r3
 8005dac:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005db0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005db4:	fbb2 f6f3 	udiv	r6, r2, r3
 8005db8:	d331      	bcc.n	8005e1e <quorem+0x9e>
 8005dba:	f04f 0e00 	mov.w	lr, #0
 8005dbe:	4640      	mov	r0, r8
 8005dc0:	46ac      	mov	ip, r5
 8005dc2:	46f2      	mov	sl, lr
 8005dc4:	f850 2b04 	ldr.w	r2, [r0], #4
 8005dc8:	b293      	uxth	r3, r2
 8005dca:	fb06 e303 	mla	r3, r6, r3, lr
 8005dce:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005dd2:	b29b      	uxth	r3, r3
 8005dd4:	ebaa 0303 	sub.w	r3, sl, r3
 8005dd8:	f8dc a000 	ldr.w	sl, [ip]
 8005ddc:	0c12      	lsrs	r2, r2, #16
 8005dde:	fa13 f38a 	uxtah	r3, r3, sl
 8005de2:	fb06 e202 	mla	r2, r6, r2, lr
 8005de6:	9300      	str	r3, [sp, #0]
 8005de8:	9b00      	ldr	r3, [sp, #0]
 8005dea:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005dee:	b292      	uxth	r2, r2
 8005df0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005df4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005df8:	f8bd 3000 	ldrh.w	r3, [sp]
 8005dfc:	4581      	cmp	r9, r0
 8005dfe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e02:	f84c 3b04 	str.w	r3, [ip], #4
 8005e06:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005e0a:	d2db      	bcs.n	8005dc4 <quorem+0x44>
 8005e0c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005e10:	b92b      	cbnz	r3, 8005e1e <quorem+0x9e>
 8005e12:	9b01      	ldr	r3, [sp, #4]
 8005e14:	3b04      	subs	r3, #4
 8005e16:	429d      	cmp	r5, r3
 8005e18:	461a      	mov	r2, r3
 8005e1a:	d32e      	bcc.n	8005e7a <quorem+0xfa>
 8005e1c:	613c      	str	r4, [r7, #16]
 8005e1e:	4638      	mov	r0, r7
 8005e20:	f001 faf6 	bl	8007410 <__mcmp>
 8005e24:	2800      	cmp	r0, #0
 8005e26:	db24      	blt.n	8005e72 <quorem+0xf2>
 8005e28:	3601      	adds	r6, #1
 8005e2a:	4628      	mov	r0, r5
 8005e2c:	f04f 0c00 	mov.w	ip, #0
 8005e30:	f858 2b04 	ldr.w	r2, [r8], #4
 8005e34:	f8d0 e000 	ldr.w	lr, [r0]
 8005e38:	b293      	uxth	r3, r2
 8005e3a:	ebac 0303 	sub.w	r3, ip, r3
 8005e3e:	0c12      	lsrs	r2, r2, #16
 8005e40:	fa13 f38e 	uxtah	r3, r3, lr
 8005e44:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005e48:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e52:	45c1      	cmp	r9, r8
 8005e54:	f840 3b04 	str.w	r3, [r0], #4
 8005e58:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005e5c:	d2e8      	bcs.n	8005e30 <quorem+0xb0>
 8005e5e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e62:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e66:	b922      	cbnz	r2, 8005e72 <quorem+0xf2>
 8005e68:	3b04      	subs	r3, #4
 8005e6a:	429d      	cmp	r5, r3
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	d30a      	bcc.n	8005e86 <quorem+0x106>
 8005e70:	613c      	str	r4, [r7, #16]
 8005e72:	4630      	mov	r0, r6
 8005e74:	b003      	add	sp, #12
 8005e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e7a:	6812      	ldr	r2, [r2, #0]
 8005e7c:	3b04      	subs	r3, #4
 8005e7e:	2a00      	cmp	r2, #0
 8005e80:	d1cc      	bne.n	8005e1c <quorem+0x9c>
 8005e82:	3c01      	subs	r4, #1
 8005e84:	e7c7      	b.n	8005e16 <quorem+0x96>
 8005e86:	6812      	ldr	r2, [r2, #0]
 8005e88:	3b04      	subs	r3, #4
 8005e8a:	2a00      	cmp	r2, #0
 8005e8c:	d1f0      	bne.n	8005e70 <quorem+0xf0>
 8005e8e:	3c01      	subs	r4, #1
 8005e90:	e7eb      	b.n	8005e6a <quorem+0xea>
 8005e92:	2000      	movs	r0, #0
 8005e94:	e7ee      	b.n	8005e74 <quorem+0xf4>
	...

08005e98 <_dtoa_r>:
 8005e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e9c:	ed2d 8b04 	vpush	{d8-d9}
 8005ea0:	ec57 6b10 	vmov	r6, r7, d0
 8005ea4:	b093      	sub	sp, #76	; 0x4c
 8005ea6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005ea8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005eac:	9106      	str	r1, [sp, #24]
 8005eae:	ee10 aa10 	vmov	sl, s0
 8005eb2:	4604      	mov	r4, r0
 8005eb4:	9209      	str	r2, [sp, #36]	; 0x24
 8005eb6:	930c      	str	r3, [sp, #48]	; 0x30
 8005eb8:	46bb      	mov	fp, r7
 8005eba:	b975      	cbnz	r5, 8005eda <_dtoa_r+0x42>
 8005ebc:	2010      	movs	r0, #16
 8005ebe:	f001 f80f 	bl	8006ee0 <malloc>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	6260      	str	r0, [r4, #36]	; 0x24
 8005ec6:	b920      	cbnz	r0, 8005ed2 <_dtoa_r+0x3a>
 8005ec8:	4ba7      	ldr	r3, [pc, #668]	; (8006168 <_dtoa_r+0x2d0>)
 8005eca:	21ea      	movs	r1, #234	; 0xea
 8005ecc:	48a7      	ldr	r0, [pc, #668]	; (800616c <_dtoa_r+0x2d4>)
 8005ece:	f7ff ff39 	bl	8005d44 <__assert_func>
 8005ed2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005ed6:	6005      	str	r5, [r0, #0]
 8005ed8:	60c5      	str	r5, [r0, #12]
 8005eda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005edc:	6819      	ldr	r1, [r3, #0]
 8005ede:	b151      	cbz	r1, 8005ef6 <_dtoa_r+0x5e>
 8005ee0:	685a      	ldr	r2, [r3, #4]
 8005ee2:	604a      	str	r2, [r1, #4]
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	4093      	lsls	r3, r2
 8005ee8:	608b      	str	r3, [r1, #8]
 8005eea:	4620      	mov	r0, r4
 8005eec:	f001 f84e 	bl	8006f8c <_Bfree>
 8005ef0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	601a      	str	r2, [r3, #0]
 8005ef6:	1e3b      	subs	r3, r7, #0
 8005ef8:	bfaa      	itet	ge
 8005efa:	2300      	movge	r3, #0
 8005efc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005f00:	f8c8 3000 	strge.w	r3, [r8]
 8005f04:	4b9a      	ldr	r3, [pc, #616]	; (8006170 <_dtoa_r+0x2d8>)
 8005f06:	bfbc      	itt	lt
 8005f08:	2201      	movlt	r2, #1
 8005f0a:	f8c8 2000 	strlt.w	r2, [r8]
 8005f0e:	ea33 030b 	bics.w	r3, r3, fp
 8005f12:	d11b      	bne.n	8005f4c <_dtoa_r+0xb4>
 8005f14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f16:	f242 730f 	movw	r3, #9999	; 0x270f
 8005f1a:	6013      	str	r3, [r2, #0]
 8005f1c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005f20:	4333      	orrs	r3, r6
 8005f22:	f000 8592 	beq.w	8006a4a <_dtoa_r+0xbb2>
 8005f26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f28:	b963      	cbnz	r3, 8005f44 <_dtoa_r+0xac>
 8005f2a:	4b92      	ldr	r3, [pc, #584]	; (8006174 <_dtoa_r+0x2dc>)
 8005f2c:	e022      	b.n	8005f74 <_dtoa_r+0xdc>
 8005f2e:	4b92      	ldr	r3, [pc, #584]	; (8006178 <_dtoa_r+0x2e0>)
 8005f30:	9301      	str	r3, [sp, #4]
 8005f32:	3308      	adds	r3, #8
 8005f34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005f36:	6013      	str	r3, [r2, #0]
 8005f38:	9801      	ldr	r0, [sp, #4]
 8005f3a:	b013      	add	sp, #76	; 0x4c
 8005f3c:	ecbd 8b04 	vpop	{d8-d9}
 8005f40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f44:	4b8b      	ldr	r3, [pc, #556]	; (8006174 <_dtoa_r+0x2dc>)
 8005f46:	9301      	str	r3, [sp, #4]
 8005f48:	3303      	adds	r3, #3
 8005f4a:	e7f3      	b.n	8005f34 <_dtoa_r+0x9c>
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	2300      	movs	r3, #0
 8005f50:	4650      	mov	r0, sl
 8005f52:	4659      	mov	r1, fp
 8005f54:	f7fa fdd0 	bl	8000af8 <__aeabi_dcmpeq>
 8005f58:	ec4b ab19 	vmov	d9, sl, fp
 8005f5c:	4680      	mov	r8, r0
 8005f5e:	b158      	cbz	r0, 8005f78 <_dtoa_r+0xe0>
 8005f60:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f62:	2301      	movs	r3, #1
 8005f64:	6013      	str	r3, [r2, #0]
 8005f66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	f000 856b 	beq.w	8006a44 <_dtoa_r+0xbac>
 8005f6e:	4883      	ldr	r0, [pc, #524]	; (800617c <_dtoa_r+0x2e4>)
 8005f70:	6018      	str	r0, [r3, #0]
 8005f72:	1e43      	subs	r3, r0, #1
 8005f74:	9301      	str	r3, [sp, #4]
 8005f76:	e7df      	b.n	8005f38 <_dtoa_r+0xa0>
 8005f78:	ec4b ab10 	vmov	d0, sl, fp
 8005f7c:	aa10      	add	r2, sp, #64	; 0x40
 8005f7e:	a911      	add	r1, sp, #68	; 0x44
 8005f80:	4620      	mov	r0, r4
 8005f82:	f001 faeb 	bl	800755c <__d2b>
 8005f86:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005f8a:	ee08 0a10 	vmov	s16, r0
 8005f8e:	2d00      	cmp	r5, #0
 8005f90:	f000 8084 	beq.w	800609c <_dtoa_r+0x204>
 8005f94:	ee19 3a90 	vmov	r3, s19
 8005f98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f9c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005fa0:	4656      	mov	r6, sl
 8005fa2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005fa6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005faa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005fae:	4b74      	ldr	r3, [pc, #464]	; (8006180 <_dtoa_r+0x2e8>)
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	4630      	mov	r0, r6
 8005fb4:	4639      	mov	r1, r7
 8005fb6:	f7fa f97f 	bl	80002b8 <__aeabi_dsub>
 8005fba:	a365      	add	r3, pc, #404	; (adr r3, 8006150 <_dtoa_r+0x2b8>)
 8005fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc0:	f7fa fb32 	bl	8000628 <__aeabi_dmul>
 8005fc4:	a364      	add	r3, pc, #400	; (adr r3, 8006158 <_dtoa_r+0x2c0>)
 8005fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fca:	f7fa f977 	bl	80002bc <__adddf3>
 8005fce:	4606      	mov	r6, r0
 8005fd0:	4628      	mov	r0, r5
 8005fd2:	460f      	mov	r7, r1
 8005fd4:	f7fa fabe 	bl	8000554 <__aeabi_i2d>
 8005fd8:	a361      	add	r3, pc, #388	; (adr r3, 8006160 <_dtoa_r+0x2c8>)
 8005fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fde:	f7fa fb23 	bl	8000628 <__aeabi_dmul>
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	460b      	mov	r3, r1
 8005fe6:	4630      	mov	r0, r6
 8005fe8:	4639      	mov	r1, r7
 8005fea:	f7fa f967 	bl	80002bc <__adddf3>
 8005fee:	4606      	mov	r6, r0
 8005ff0:	460f      	mov	r7, r1
 8005ff2:	f7fa fdc9 	bl	8000b88 <__aeabi_d2iz>
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	9000      	str	r0, [sp, #0]
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	4630      	mov	r0, r6
 8005ffe:	4639      	mov	r1, r7
 8006000:	f7fa fd84 	bl	8000b0c <__aeabi_dcmplt>
 8006004:	b150      	cbz	r0, 800601c <_dtoa_r+0x184>
 8006006:	9800      	ldr	r0, [sp, #0]
 8006008:	f7fa faa4 	bl	8000554 <__aeabi_i2d>
 800600c:	4632      	mov	r2, r6
 800600e:	463b      	mov	r3, r7
 8006010:	f7fa fd72 	bl	8000af8 <__aeabi_dcmpeq>
 8006014:	b910      	cbnz	r0, 800601c <_dtoa_r+0x184>
 8006016:	9b00      	ldr	r3, [sp, #0]
 8006018:	3b01      	subs	r3, #1
 800601a:	9300      	str	r3, [sp, #0]
 800601c:	9b00      	ldr	r3, [sp, #0]
 800601e:	2b16      	cmp	r3, #22
 8006020:	d85a      	bhi.n	80060d8 <_dtoa_r+0x240>
 8006022:	9a00      	ldr	r2, [sp, #0]
 8006024:	4b57      	ldr	r3, [pc, #348]	; (8006184 <_dtoa_r+0x2ec>)
 8006026:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800602a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800602e:	ec51 0b19 	vmov	r0, r1, d9
 8006032:	f7fa fd6b 	bl	8000b0c <__aeabi_dcmplt>
 8006036:	2800      	cmp	r0, #0
 8006038:	d050      	beq.n	80060dc <_dtoa_r+0x244>
 800603a:	9b00      	ldr	r3, [sp, #0]
 800603c:	3b01      	subs	r3, #1
 800603e:	9300      	str	r3, [sp, #0]
 8006040:	2300      	movs	r3, #0
 8006042:	930b      	str	r3, [sp, #44]	; 0x2c
 8006044:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006046:	1b5d      	subs	r5, r3, r5
 8006048:	1e6b      	subs	r3, r5, #1
 800604a:	9305      	str	r3, [sp, #20]
 800604c:	bf45      	ittet	mi
 800604e:	f1c5 0301 	rsbmi	r3, r5, #1
 8006052:	9304      	strmi	r3, [sp, #16]
 8006054:	2300      	movpl	r3, #0
 8006056:	2300      	movmi	r3, #0
 8006058:	bf4c      	ite	mi
 800605a:	9305      	strmi	r3, [sp, #20]
 800605c:	9304      	strpl	r3, [sp, #16]
 800605e:	9b00      	ldr	r3, [sp, #0]
 8006060:	2b00      	cmp	r3, #0
 8006062:	db3d      	blt.n	80060e0 <_dtoa_r+0x248>
 8006064:	9b05      	ldr	r3, [sp, #20]
 8006066:	9a00      	ldr	r2, [sp, #0]
 8006068:	920a      	str	r2, [sp, #40]	; 0x28
 800606a:	4413      	add	r3, r2
 800606c:	9305      	str	r3, [sp, #20]
 800606e:	2300      	movs	r3, #0
 8006070:	9307      	str	r3, [sp, #28]
 8006072:	9b06      	ldr	r3, [sp, #24]
 8006074:	2b09      	cmp	r3, #9
 8006076:	f200 8089 	bhi.w	800618c <_dtoa_r+0x2f4>
 800607a:	2b05      	cmp	r3, #5
 800607c:	bfc4      	itt	gt
 800607e:	3b04      	subgt	r3, #4
 8006080:	9306      	strgt	r3, [sp, #24]
 8006082:	9b06      	ldr	r3, [sp, #24]
 8006084:	f1a3 0302 	sub.w	r3, r3, #2
 8006088:	bfcc      	ite	gt
 800608a:	2500      	movgt	r5, #0
 800608c:	2501      	movle	r5, #1
 800608e:	2b03      	cmp	r3, #3
 8006090:	f200 8087 	bhi.w	80061a2 <_dtoa_r+0x30a>
 8006094:	e8df f003 	tbb	[pc, r3]
 8006098:	59383a2d 	.word	0x59383a2d
 800609c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80060a0:	441d      	add	r5, r3
 80060a2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80060a6:	2b20      	cmp	r3, #32
 80060a8:	bfc1      	itttt	gt
 80060aa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80060ae:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80060b2:	fa0b f303 	lslgt.w	r3, fp, r3
 80060b6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80060ba:	bfda      	itte	le
 80060bc:	f1c3 0320 	rsble	r3, r3, #32
 80060c0:	fa06 f003 	lslle.w	r0, r6, r3
 80060c4:	4318      	orrgt	r0, r3
 80060c6:	f7fa fa35 	bl	8000534 <__aeabi_ui2d>
 80060ca:	2301      	movs	r3, #1
 80060cc:	4606      	mov	r6, r0
 80060ce:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80060d2:	3d01      	subs	r5, #1
 80060d4:	930e      	str	r3, [sp, #56]	; 0x38
 80060d6:	e76a      	b.n	8005fae <_dtoa_r+0x116>
 80060d8:	2301      	movs	r3, #1
 80060da:	e7b2      	b.n	8006042 <_dtoa_r+0x1aa>
 80060dc:	900b      	str	r0, [sp, #44]	; 0x2c
 80060de:	e7b1      	b.n	8006044 <_dtoa_r+0x1ac>
 80060e0:	9b04      	ldr	r3, [sp, #16]
 80060e2:	9a00      	ldr	r2, [sp, #0]
 80060e4:	1a9b      	subs	r3, r3, r2
 80060e6:	9304      	str	r3, [sp, #16]
 80060e8:	4253      	negs	r3, r2
 80060ea:	9307      	str	r3, [sp, #28]
 80060ec:	2300      	movs	r3, #0
 80060ee:	930a      	str	r3, [sp, #40]	; 0x28
 80060f0:	e7bf      	b.n	8006072 <_dtoa_r+0x1da>
 80060f2:	2300      	movs	r3, #0
 80060f4:	9308      	str	r3, [sp, #32]
 80060f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	dc55      	bgt.n	80061a8 <_dtoa_r+0x310>
 80060fc:	2301      	movs	r3, #1
 80060fe:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006102:	461a      	mov	r2, r3
 8006104:	9209      	str	r2, [sp, #36]	; 0x24
 8006106:	e00c      	b.n	8006122 <_dtoa_r+0x28a>
 8006108:	2301      	movs	r3, #1
 800610a:	e7f3      	b.n	80060f4 <_dtoa_r+0x25c>
 800610c:	2300      	movs	r3, #0
 800610e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006110:	9308      	str	r3, [sp, #32]
 8006112:	9b00      	ldr	r3, [sp, #0]
 8006114:	4413      	add	r3, r2
 8006116:	9302      	str	r3, [sp, #8]
 8006118:	3301      	adds	r3, #1
 800611a:	2b01      	cmp	r3, #1
 800611c:	9303      	str	r3, [sp, #12]
 800611e:	bfb8      	it	lt
 8006120:	2301      	movlt	r3, #1
 8006122:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006124:	2200      	movs	r2, #0
 8006126:	6042      	str	r2, [r0, #4]
 8006128:	2204      	movs	r2, #4
 800612a:	f102 0614 	add.w	r6, r2, #20
 800612e:	429e      	cmp	r6, r3
 8006130:	6841      	ldr	r1, [r0, #4]
 8006132:	d93d      	bls.n	80061b0 <_dtoa_r+0x318>
 8006134:	4620      	mov	r0, r4
 8006136:	f000 fee9 	bl	8006f0c <_Balloc>
 800613a:	9001      	str	r0, [sp, #4]
 800613c:	2800      	cmp	r0, #0
 800613e:	d13b      	bne.n	80061b8 <_dtoa_r+0x320>
 8006140:	4b11      	ldr	r3, [pc, #68]	; (8006188 <_dtoa_r+0x2f0>)
 8006142:	4602      	mov	r2, r0
 8006144:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006148:	e6c0      	b.n	8005ecc <_dtoa_r+0x34>
 800614a:	2301      	movs	r3, #1
 800614c:	e7df      	b.n	800610e <_dtoa_r+0x276>
 800614e:	bf00      	nop
 8006150:	636f4361 	.word	0x636f4361
 8006154:	3fd287a7 	.word	0x3fd287a7
 8006158:	8b60c8b3 	.word	0x8b60c8b3
 800615c:	3fc68a28 	.word	0x3fc68a28
 8006160:	509f79fb 	.word	0x509f79fb
 8006164:	3fd34413 	.word	0x3fd34413
 8006168:	08008438 	.word	0x08008438
 800616c:	080085f6 	.word	0x080085f6
 8006170:	7ff00000 	.word	0x7ff00000
 8006174:	080085f2 	.word	0x080085f2
 8006178:	080085e9 	.word	0x080085e9
 800617c:	08008415 	.word	0x08008415
 8006180:	3ff80000 	.word	0x3ff80000
 8006184:	08008748 	.word	0x08008748
 8006188:	08008651 	.word	0x08008651
 800618c:	2501      	movs	r5, #1
 800618e:	2300      	movs	r3, #0
 8006190:	9306      	str	r3, [sp, #24]
 8006192:	9508      	str	r5, [sp, #32]
 8006194:	f04f 33ff 	mov.w	r3, #4294967295
 8006198:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800619c:	2200      	movs	r2, #0
 800619e:	2312      	movs	r3, #18
 80061a0:	e7b0      	b.n	8006104 <_dtoa_r+0x26c>
 80061a2:	2301      	movs	r3, #1
 80061a4:	9308      	str	r3, [sp, #32]
 80061a6:	e7f5      	b.n	8006194 <_dtoa_r+0x2fc>
 80061a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061aa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80061ae:	e7b8      	b.n	8006122 <_dtoa_r+0x28a>
 80061b0:	3101      	adds	r1, #1
 80061b2:	6041      	str	r1, [r0, #4]
 80061b4:	0052      	lsls	r2, r2, #1
 80061b6:	e7b8      	b.n	800612a <_dtoa_r+0x292>
 80061b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061ba:	9a01      	ldr	r2, [sp, #4]
 80061bc:	601a      	str	r2, [r3, #0]
 80061be:	9b03      	ldr	r3, [sp, #12]
 80061c0:	2b0e      	cmp	r3, #14
 80061c2:	f200 809d 	bhi.w	8006300 <_dtoa_r+0x468>
 80061c6:	2d00      	cmp	r5, #0
 80061c8:	f000 809a 	beq.w	8006300 <_dtoa_r+0x468>
 80061cc:	9b00      	ldr	r3, [sp, #0]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	dd32      	ble.n	8006238 <_dtoa_r+0x3a0>
 80061d2:	4ab7      	ldr	r2, [pc, #732]	; (80064b0 <_dtoa_r+0x618>)
 80061d4:	f003 030f 	and.w	r3, r3, #15
 80061d8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80061dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80061e0:	9b00      	ldr	r3, [sp, #0]
 80061e2:	05d8      	lsls	r0, r3, #23
 80061e4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80061e8:	d516      	bpl.n	8006218 <_dtoa_r+0x380>
 80061ea:	4bb2      	ldr	r3, [pc, #712]	; (80064b4 <_dtoa_r+0x61c>)
 80061ec:	ec51 0b19 	vmov	r0, r1, d9
 80061f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80061f4:	f7fa fb42 	bl	800087c <__aeabi_ddiv>
 80061f8:	f007 070f 	and.w	r7, r7, #15
 80061fc:	4682      	mov	sl, r0
 80061fe:	468b      	mov	fp, r1
 8006200:	2503      	movs	r5, #3
 8006202:	4eac      	ldr	r6, [pc, #688]	; (80064b4 <_dtoa_r+0x61c>)
 8006204:	b957      	cbnz	r7, 800621c <_dtoa_r+0x384>
 8006206:	4642      	mov	r2, r8
 8006208:	464b      	mov	r3, r9
 800620a:	4650      	mov	r0, sl
 800620c:	4659      	mov	r1, fp
 800620e:	f7fa fb35 	bl	800087c <__aeabi_ddiv>
 8006212:	4682      	mov	sl, r0
 8006214:	468b      	mov	fp, r1
 8006216:	e028      	b.n	800626a <_dtoa_r+0x3d2>
 8006218:	2502      	movs	r5, #2
 800621a:	e7f2      	b.n	8006202 <_dtoa_r+0x36a>
 800621c:	07f9      	lsls	r1, r7, #31
 800621e:	d508      	bpl.n	8006232 <_dtoa_r+0x39a>
 8006220:	4640      	mov	r0, r8
 8006222:	4649      	mov	r1, r9
 8006224:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006228:	f7fa f9fe 	bl	8000628 <__aeabi_dmul>
 800622c:	3501      	adds	r5, #1
 800622e:	4680      	mov	r8, r0
 8006230:	4689      	mov	r9, r1
 8006232:	107f      	asrs	r7, r7, #1
 8006234:	3608      	adds	r6, #8
 8006236:	e7e5      	b.n	8006204 <_dtoa_r+0x36c>
 8006238:	f000 809b 	beq.w	8006372 <_dtoa_r+0x4da>
 800623c:	9b00      	ldr	r3, [sp, #0]
 800623e:	4f9d      	ldr	r7, [pc, #628]	; (80064b4 <_dtoa_r+0x61c>)
 8006240:	425e      	negs	r6, r3
 8006242:	4b9b      	ldr	r3, [pc, #620]	; (80064b0 <_dtoa_r+0x618>)
 8006244:	f006 020f 	and.w	r2, r6, #15
 8006248:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800624c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006250:	ec51 0b19 	vmov	r0, r1, d9
 8006254:	f7fa f9e8 	bl	8000628 <__aeabi_dmul>
 8006258:	1136      	asrs	r6, r6, #4
 800625a:	4682      	mov	sl, r0
 800625c:	468b      	mov	fp, r1
 800625e:	2300      	movs	r3, #0
 8006260:	2502      	movs	r5, #2
 8006262:	2e00      	cmp	r6, #0
 8006264:	d17a      	bne.n	800635c <_dtoa_r+0x4c4>
 8006266:	2b00      	cmp	r3, #0
 8006268:	d1d3      	bne.n	8006212 <_dtoa_r+0x37a>
 800626a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800626c:	2b00      	cmp	r3, #0
 800626e:	f000 8082 	beq.w	8006376 <_dtoa_r+0x4de>
 8006272:	4b91      	ldr	r3, [pc, #580]	; (80064b8 <_dtoa_r+0x620>)
 8006274:	2200      	movs	r2, #0
 8006276:	4650      	mov	r0, sl
 8006278:	4659      	mov	r1, fp
 800627a:	f7fa fc47 	bl	8000b0c <__aeabi_dcmplt>
 800627e:	2800      	cmp	r0, #0
 8006280:	d079      	beq.n	8006376 <_dtoa_r+0x4de>
 8006282:	9b03      	ldr	r3, [sp, #12]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d076      	beq.n	8006376 <_dtoa_r+0x4de>
 8006288:	9b02      	ldr	r3, [sp, #8]
 800628a:	2b00      	cmp	r3, #0
 800628c:	dd36      	ble.n	80062fc <_dtoa_r+0x464>
 800628e:	9b00      	ldr	r3, [sp, #0]
 8006290:	4650      	mov	r0, sl
 8006292:	4659      	mov	r1, fp
 8006294:	1e5f      	subs	r7, r3, #1
 8006296:	2200      	movs	r2, #0
 8006298:	4b88      	ldr	r3, [pc, #544]	; (80064bc <_dtoa_r+0x624>)
 800629a:	f7fa f9c5 	bl	8000628 <__aeabi_dmul>
 800629e:	9e02      	ldr	r6, [sp, #8]
 80062a0:	4682      	mov	sl, r0
 80062a2:	468b      	mov	fp, r1
 80062a4:	3501      	adds	r5, #1
 80062a6:	4628      	mov	r0, r5
 80062a8:	f7fa f954 	bl	8000554 <__aeabi_i2d>
 80062ac:	4652      	mov	r2, sl
 80062ae:	465b      	mov	r3, fp
 80062b0:	f7fa f9ba 	bl	8000628 <__aeabi_dmul>
 80062b4:	4b82      	ldr	r3, [pc, #520]	; (80064c0 <_dtoa_r+0x628>)
 80062b6:	2200      	movs	r2, #0
 80062b8:	f7fa f800 	bl	80002bc <__adddf3>
 80062bc:	46d0      	mov	r8, sl
 80062be:	46d9      	mov	r9, fp
 80062c0:	4682      	mov	sl, r0
 80062c2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80062c6:	2e00      	cmp	r6, #0
 80062c8:	d158      	bne.n	800637c <_dtoa_r+0x4e4>
 80062ca:	4b7e      	ldr	r3, [pc, #504]	; (80064c4 <_dtoa_r+0x62c>)
 80062cc:	2200      	movs	r2, #0
 80062ce:	4640      	mov	r0, r8
 80062d0:	4649      	mov	r1, r9
 80062d2:	f7f9 fff1 	bl	80002b8 <__aeabi_dsub>
 80062d6:	4652      	mov	r2, sl
 80062d8:	465b      	mov	r3, fp
 80062da:	4680      	mov	r8, r0
 80062dc:	4689      	mov	r9, r1
 80062de:	f7fa fc33 	bl	8000b48 <__aeabi_dcmpgt>
 80062e2:	2800      	cmp	r0, #0
 80062e4:	f040 8295 	bne.w	8006812 <_dtoa_r+0x97a>
 80062e8:	4652      	mov	r2, sl
 80062ea:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80062ee:	4640      	mov	r0, r8
 80062f0:	4649      	mov	r1, r9
 80062f2:	f7fa fc0b 	bl	8000b0c <__aeabi_dcmplt>
 80062f6:	2800      	cmp	r0, #0
 80062f8:	f040 8289 	bne.w	800680e <_dtoa_r+0x976>
 80062fc:	ec5b ab19 	vmov	sl, fp, d9
 8006300:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006302:	2b00      	cmp	r3, #0
 8006304:	f2c0 8148 	blt.w	8006598 <_dtoa_r+0x700>
 8006308:	9a00      	ldr	r2, [sp, #0]
 800630a:	2a0e      	cmp	r2, #14
 800630c:	f300 8144 	bgt.w	8006598 <_dtoa_r+0x700>
 8006310:	4b67      	ldr	r3, [pc, #412]	; (80064b0 <_dtoa_r+0x618>)
 8006312:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006316:	e9d3 8900 	ldrd	r8, r9, [r3]
 800631a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800631c:	2b00      	cmp	r3, #0
 800631e:	f280 80d5 	bge.w	80064cc <_dtoa_r+0x634>
 8006322:	9b03      	ldr	r3, [sp, #12]
 8006324:	2b00      	cmp	r3, #0
 8006326:	f300 80d1 	bgt.w	80064cc <_dtoa_r+0x634>
 800632a:	f040 826f 	bne.w	800680c <_dtoa_r+0x974>
 800632e:	4b65      	ldr	r3, [pc, #404]	; (80064c4 <_dtoa_r+0x62c>)
 8006330:	2200      	movs	r2, #0
 8006332:	4640      	mov	r0, r8
 8006334:	4649      	mov	r1, r9
 8006336:	f7fa f977 	bl	8000628 <__aeabi_dmul>
 800633a:	4652      	mov	r2, sl
 800633c:	465b      	mov	r3, fp
 800633e:	f7fa fbf9 	bl	8000b34 <__aeabi_dcmpge>
 8006342:	9e03      	ldr	r6, [sp, #12]
 8006344:	4637      	mov	r7, r6
 8006346:	2800      	cmp	r0, #0
 8006348:	f040 8245 	bne.w	80067d6 <_dtoa_r+0x93e>
 800634c:	9d01      	ldr	r5, [sp, #4]
 800634e:	2331      	movs	r3, #49	; 0x31
 8006350:	f805 3b01 	strb.w	r3, [r5], #1
 8006354:	9b00      	ldr	r3, [sp, #0]
 8006356:	3301      	adds	r3, #1
 8006358:	9300      	str	r3, [sp, #0]
 800635a:	e240      	b.n	80067de <_dtoa_r+0x946>
 800635c:	07f2      	lsls	r2, r6, #31
 800635e:	d505      	bpl.n	800636c <_dtoa_r+0x4d4>
 8006360:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006364:	f7fa f960 	bl	8000628 <__aeabi_dmul>
 8006368:	3501      	adds	r5, #1
 800636a:	2301      	movs	r3, #1
 800636c:	1076      	asrs	r6, r6, #1
 800636e:	3708      	adds	r7, #8
 8006370:	e777      	b.n	8006262 <_dtoa_r+0x3ca>
 8006372:	2502      	movs	r5, #2
 8006374:	e779      	b.n	800626a <_dtoa_r+0x3d2>
 8006376:	9f00      	ldr	r7, [sp, #0]
 8006378:	9e03      	ldr	r6, [sp, #12]
 800637a:	e794      	b.n	80062a6 <_dtoa_r+0x40e>
 800637c:	9901      	ldr	r1, [sp, #4]
 800637e:	4b4c      	ldr	r3, [pc, #304]	; (80064b0 <_dtoa_r+0x618>)
 8006380:	4431      	add	r1, r6
 8006382:	910d      	str	r1, [sp, #52]	; 0x34
 8006384:	9908      	ldr	r1, [sp, #32]
 8006386:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800638a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800638e:	2900      	cmp	r1, #0
 8006390:	d043      	beq.n	800641a <_dtoa_r+0x582>
 8006392:	494d      	ldr	r1, [pc, #308]	; (80064c8 <_dtoa_r+0x630>)
 8006394:	2000      	movs	r0, #0
 8006396:	f7fa fa71 	bl	800087c <__aeabi_ddiv>
 800639a:	4652      	mov	r2, sl
 800639c:	465b      	mov	r3, fp
 800639e:	f7f9 ff8b 	bl	80002b8 <__aeabi_dsub>
 80063a2:	9d01      	ldr	r5, [sp, #4]
 80063a4:	4682      	mov	sl, r0
 80063a6:	468b      	mov	fp, r1
 80063a8:	4649      	mov	r1, r9
 80063aa:	4640      	mov	r0, r8
 80063ac:	f7fa fbec 	bl	8000b88 <__aeabi_d2iz>
 80063b0:	4606      	mov	r6, r0
 80063b2:	f7fa f8cf 	bl	8000554 <__aeabi_i2d>
 80063b6:	4602      	mov	r2, r0
 80063b8:	460b      	mov	r3, r1
 80063ba:	4640      	mov	r0, r8
 80063bc:	4649      	mov	r1, r9
 80063be:	f7f9 ff7b 	bl	80002b8 <__aeabi_dsub>
 80063c2:	3630      	adds	r6, #48	; 0x30
 80063c4:	f805 6b01 	strb.w	r6, [r5], #1
 80063c8:	4652      	mov	r2, sl
 80063ca:	465b      	mov	r3, fp
 80063cc:	4680      	mov	r8, r0
 80063ce:	4689      	mov	r9, r1
 80063d0:	f7fa fb9c 	bl	8000b0c <__aeabi_dcmplt>
 80063d4:	2800      	cmp	r0, #0
 80063d6:	d163      	bne.n	80064a0 <_dtoa_r+0x608>
 80063d8:	4642      	mov	r2, r8
 80063da:	464b      	mov	r3, r9
 80063dc:	4936      	ldr	r1, [pc, #216]	; (80064b8 <_dtoa_r+0x620>)
 80063de:	2000      	movs	r0, #0
 80063e0:	f7f9 ff6a 	bl	80002b8 <__aeabi_dsub>
 80063e4:	4652      	mov	r2, sl
 80063e6:	465b      	mov	r3, fp
 80063e8:	f7fa fb90 	bl	8000b0c <__aeabi_dcmplt>
 80063ec:	2800      	cmp	r0, #0
 80063ee:	f040 80b5 	bne.w	800655c <_dtoa_r+0x6c4>
 80063f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063f4:	429d      	cmp	r5, r3
 80063f6:	d081      	beq.n	80062fc <_dtoa_r+0x464>
 80063f8:	4b30      	ldr	r3, [pc, #192]	; (80064bc <_dtoa_r+0x624>)
 80063fa:	2200      	movs	r2, #0
 80063fc:	4650      	mov	r0, sl
 80063fe:	4659      	mov	r1, fp
 8006400:	f7fa f912 	bl	8000628 <__aeabi_dmul>
 8006404:	4b2d      	ldr	r3, [pc, #180]	; (80064bc <_dtoa_r+0x624>)
 8006406:	4682      	mov	sl, r0
 8006408:	468b      	mov	fp, r1
 800640a:	4640      	mov	r0, r8
 800640c:	4649      	mov	r1, r9
 800640e:	2200      	movs	r2, #0
 8006410:	f7fa f90a 	bl	8000628 <__aeabi_dmul>
 8006414:	4680      	mov	r8, r0
 8006416:	4689      	mov	r9, r1
 8006418:	e7c6      	b.n	80063a8 <_dtoa_r+0x510>
 800641a:	4650      	mov	r0, sl
 800641c:	4659      	mov	r1, fp
 800641e:	f7fa f903 	bl	8000628 <__aeabi_dmul>
 8006422:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006424:	9d01      	ldr	r5, [sp, #4]
 8006426:	930f      	str	r3, [sp, #60]	; 0x3c
 8006428:	4682      	mov	sl, r0
 800642a:	468b      	mov	fp, r1
 800642c:	4649      	mov	r1, r9
 800642e:	4640      	mov	r0, r8
 8006430:	f7fa fbaa 	bl	8000b88 <__aeabi_d2iz>
 8006434:	4606      	mov	r6, r0
 8006436:	f7fa f88d 	bl	8000554 <__aeabi_i2d>
 800643a:	3630      	adds	r6, #48	; 0x30
 800643c:	4602      	mov	r2, r0
 800643e:	460b      	mov	r3, r1
 8006440:	4640      	mov	r0, r8
 8006442:	4649      	mov	r1, r9
 8006444:	f7f9 ff38 	bl	80002b8 <__aeabi_dsub>
 8006448:	f805 6b01 	strb.w	r6, [r5], #1
 800644c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800644e:	429d      	cmp	r5, r3
 8006450:	4680      	mov	r8, r0
 8006452:	4689      	mov	r9, r1
 8006454:	f04f 0200 	mov.w	r2, #0
 8006458:	d124      	bne.n	80064a4 <_dtoa_r+0x60c>
 800645a:	4b1b      	ldr	r3, [pc, #108]	; (80064c8 <_dtoa_r+0x630>)
 800645c:	4650      	mov	r0, sl
 800645e:	4659      	mov	r1, fp
 8006460:	f7f9 ff2c 	bl	80002bc <__adddf3>
 8006464:	4602      	mov	r2, r0
 8006466:	460b      	mov	r3, r1
 8006468:	4640      	mov	r0, r8
 800646a:	4649      	mov	r1, r9
 800646c:	f7fa fb6c 	bl	8000b48 <__aeabi_dcmpgt>
 8006470:	2800      	cmp	r0, #0
 8006472:	d173      	bne.n	800655c <_dtoa_r+0x6c4>
 8006474:	4652      	mov	r2, sl
 8006476:	465b      	mov	r3, fp
 8006478:	4913      	ldr	r1, [pc, #76]	; (80064c8 <_dtoa_r+0x630>)
 800647a:	2000      	movs	r0, #0
 800647c:	f7f9 ff1c 	bl	80002b8 <__aeabi_dsub>
 8006480:	4602      	mov	r2, r0
 8006482:	460b      	mov	r3, r1
 8006484:	4640      	mov	r0, r8
 8006486:	4649      	mov	r1, r9
 8006488:	f7fa fb40 	bl	8000b0c <__aeabi_dcmplt>
 800648c:	2800      	cmp	r0, #0
 800648e:	f43f af35 	beq.w	80062fc <_dtoa_r+0x464>
 8006492:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006494:	1e6b      	subs	r3, r5, #1
 8006496:	930f      	str	r3, [sp, #60]	; 0x3c
 8006498:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800649c:	2b30      	cmp	r3, #48	; 0x30
 800649e:	d0f8      	beq.n	8006492 <_dtoa_r+0x5fa>
 80064a0:	9700      	str	r7, [sp, #0]
 80064a2:	e049      	b.n	8006538 <_dtoa_r+0x6a0>
 80064a4:	4b05      	ldr	r3, [pc, #20]	; (80064bc <_dtoa_r+0x624>)
 80064a6:	f7fa f8bf 	bl	8000628 <__aeabi_dmul>
 80064aa:	4680      	mov	r8, r0
 80064ac:	4689      	mov	r9, r1
 80064ae:	e7bd      	b.n	800642c <_dtoa_r+0x594>
 80064b0:	08008748 	.word	0x08008748
 80064b4:	08008720 	.word	0x08008720
 80064b8:	3ff00000 	.word	0x3ff00000
 80064bc:	40240000 	.word	0x40240000
 80064c0:	401c0000 	.word	0x401c0000
 80064c4:	40140000 	.word	0x40140000
 80064c8:	3fe00000 	.word	0x3fe00000
 80064cc:	9d01      	ldr	r5, [sp, #4]
 80064ce:	4656      	mov	r6, sl
 80064d0:	465f      	mov	r7, fp
 80064d2:	4642      	mov	r2, r8
 80064d4:	464b      	mov	r3, r9
 80064d6:	4630      	mov	r0, r6
 80064d8:	4639      	mov	r1, r7
 80064da:	f7fa f9cf 	bl	800087c <__aeabi_ddiv>
 80064de:	f7fa fb53 	bl	8000b88 <__aeabi_d2iz>
 80064e2:	4682      	mov	sl, r0
 80064e4:	f7fa f836 	bl	8000554 <__aeabi_i2d>
 80064e8:	4642      	mov	r2, r8
 80064ea:	464b      	mov	r3, r9
 80064ec:	f7fa f89c 	bl	8000628 <__aeabi_dmul>
 80064f0:	4602      	mov	r2, r0
 80064f2:	460b      	mov	r3, r1
 80064f4:	4630      	mov	r0, r6
 80064f6:	4639      	mov	r1, r7
 80064f8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80064fc:	f7f9 fedc 	bl	80002b8 <__aeabi_dsub>
 8006500:	f805 6b01 	strb.w	r6, [r5], #1
 8006504:	9e01      	ldr	r6, [sp, #4]
 8006506:	9f03      	ldr	r7, [sp, #12]
 8006508:	1bae      	subs	r6, r5, r6
 800650a:	42b7      	cmp	r7, r6
 800650c:	4602      	mov	r2, r0
 800650e:	460b      	mov	r3, r1
 8006510:	d135      	bne.n	800657e <_dtoa_r+0x6e6>
 8006512:	f7f9 fed3 	bl	80002bc <__adddf3>
 8006516:	4642      	mov	r2, r8
 8006518:	464b      	mov	r3, r9
 800651a:	4606      	mov	r6, r0
 800651c:	460f      	mov	r7, r1
 800651e:	f7fa fb13 	bl	8000b48 <__aeabi_dcmpgt>
 8006522:	b9d0      	cbnz	r0, 800655a <_dtoa_r+0x6c2>
 8006524:	4642      	mov	r2, r8
 8006526:	464b      	mov	r3, r9
 8006528:	4630      	mov	r0, r6
 800652a:	4639      	mov	r1, r7
 800652c:	f7fa fae4 	bl	8000af8 <__aeabi_dcmpeq>
 8006530:	b110      	cbz	r0, 8006538 <_dtoa_r+0x6a0>
 8006532:	f01a 0f01 	tst.w	sl, #1
 8006536:	d110      	bne.n	800655a <_dtoa_r+0x6c2>
 8006538:	4620      	mov	r0, r4
 800653a:	ee18 1a10 	vmov	r1, s16
 800653e:	f000 fd25 	bl	8006f8c <_Bfree>
 8006542:	2300      	movs	r3, #0
 8006544:	9800      	ldr	r0, [sp, #0]
 8006546:	702b      	strb	r3, [r5, #0]
 8006548:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800654a:	3001      	adds	r0, #1
 800654c:	6018      	str	r0, [r3, #0]
 800654e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006550:	2b00      	cmp	r3, #0
 8006552:	f43f acf1 	beq.w	8005f38 <_dtoa_r+0xa0>
 8006556:	601d      	str	r5, [r3, #0]
 8006558:	e4ee      	b.n	8005f38 <_dtoa_r+0xa0>
 800655a:	9f00      	ldr	r7, [sp, #0]
 800655c:	462b      	mov	r3, r5
 800655e:	461d      	mov	r5, r3
 8006560:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006564:	2a39      	cmp	r2, #57	; 0x39
 8006566:	d106      	bne.n	8006576 <_dtoa_r+0x6de>
 8006568:	9a01      	ldr	r2, [sp, #4]
 800656a:	429a      	cmp	r2, r3
 800656c:	d1f7      	bne.n	800655e <_dtoa_r+0x6c6>
 800656e:	9901      	ldr	r1, [sp, #4]
 8006570:	2230      	movs	r2, #48	; 0x30
 8006572:	3701      	adds	r7, #1
 8006574:	700a      	strb	r2, [r1, #0]
 8006576:	781a      	ldrb	r2, [r3, #0]
 8006578:	3201      	adds	r2, #1
 800657a:	701a      	strb	r2, [r3, #0]
 800657c:	e790      	b.n	80064a0 <_dtoa_r+0x608>
 800657e:	4ba6      	ldr	r3, [pc, #664]	; (8006818 <_dtoa_r+0x980>)
 8006580:	2200      	movs	r2, #0
 8006582:	f7fa f851 	bl	8000628 <__aeabi_dmul>
 8006586:	2200      	movs	r2, #0
 8006588:	2300      	movs	r3, #0
 800658a:	4606      	mov	r6, r0
 800658c:	460f      	mov	r7, r1
 800658e:	f7fa fab3 	bl	8000af8 <__aeabi_dcmpeq>
 8006592:	2800      	cmp	r0, #0
 8006594:	d09d      	beq.n	80064d2 <_dtoa_r+0x63a>
 8006596:	e7cf      	b.n	8006538 <_dtoa_r+0x6a0>
 8006598:	9a08      	ldr	r2, [sp, #32]
 800659a:	2a00      	cmp	r2, #0
 800659c:	f000 80d7 	beq.w	800674e <_dtoa_r+0x8b6>
 80065a0:	9a06      	ldr	r2, [sp, #24]
 80065a2:	2a01      	cmp	r2, #1
 80065a4:	f300 80ba 	bgt.w	800671c <_dtoa_r+0x884>
 80065a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80065aa:	2a00      	cmp	r2, #0
 80065ac:	f000 80b2 	beq.w	8006714 <_dtoa_r+0x87c>
 80065b0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80065b4:	9e07      	ldr	r6, [sp, #28]
 80065b6:	9d04      	ldr	r5, [sp, #16]
 80065b8:	9a04      	ldr	r2, [sp, #16]
 80065ba:	441a      	add	r2, r3
 80065bc:	9204      	str	r2, [sp, #16]
 80065be:	9a05      	ldr	r2, [sp, #20]
 80065c0:	2101      	movs	r1, #1
 80065c2:	441a      	add	r2, r3
 80065c4:	4620      	mov	r0, r4
 80065c6:	9205      	str	r2, [sp, #20]
 80065c8:	f000 fd98 	bl	80070fc <__i2b>
 80065cc:	4607      	mov	r7, r0
 80065ce:	2d00      	cmp	r5, #0
 80065d0:	dd0c      	ble.n	80065ec <_dtoa_r+0x754>
 80065d2:	9b05      	ldr	r3, [sp, #20]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	dd09      	ble.n	80065ec <_dtoa_r+0x754>
 80065d8:	42ab      	cmp	r3, r5
 80065da:	9a04      	ldr	r2, [sp, #16]
 80065dc:	bfa8      	it	ge
 80065de:	462b      	movge	r3, r5
 80065e0:	1ad2      	subs	r2, r2, r3
 80065e2:	9204      	str	r2, [sp, #16]
 80065e4:	9a05      	ldr	r2, [sp, #20]
 80065e6:	1aed      	subs	r5, r5, r3
 80065e8:	1ad3      	subs	r3, r2, r3
 80065ea:	9305      	str	r3, [sp, #20]
 80065ec:	9b07      	ldr	r3, [sp, #28]
 80065ee:	b31b      	cbz	r3, 8006638 <_dtoa_r+0x7a0>
 80065f0:	9b08      	ldr	r3, [sp, #32]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	f000 80af 	beq.w	8006756 <_dtoa_r+0x8be>
 80065f8:	2e00      	cmp	r6, #0
 80065fa:	dd13      	ble.n	8006624 <_dtoa_r+0x78c>
 80065fc:	4639      	mov	r1, r7
 80065fe:	4632      	mov	r2, r6
 8006600:	4620      	mov	r0, r4
 8006602:	f000 fe3b 	bl	800727c <__pow5mult>
 8006606:	ee18 2a10 	vmov	r2, s16
 800660a:	4601      	mov	r1, r0
 800660c:	4607      	mov	r7, r0
 800660e:	4620      	mov	r0, r4
 8006610:	f000 fd8a 	bl	8007128 <__multiply>
 8006614:	ee18 1a10 	vmov	r1, s16
 8006618:	4680      	mov	r8, r0
 800661a:	4620      	mov	r0, r4
 800661c:	f000 fcb6 	bl	8006f8c <_Bfree>
 8006620:	ee08 8a10 	vmov	s16, r8
 8006624:	9b07      	ldr	r3, [sp, #28]
 8006626:	1b9a      	subs	r2, r3, r6
 8006628:	d006      	beq.n	8006638 <_dtoa_r+0x7a0>
 800662a:	ee18 1a10 	vmov	r1, s16
 800662e:	4620      	mov	r0, r4
 8006630:	f000 fe24 	bl	800727c <__pow5mult>
 8006634:	ee08 0a10 	vmov	s16, r0
 8006638:	2101      	movs	r1, #1
 800663a:	4620      	mov	r0, r4
 800663c:	f000 fd5e 	bl	80070fc <__i2b>
 8006640:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006642:	2b00      	cmp	r3, #0
 8006644:	4606      	mov	r6, r0
 8006646:	f340 8088 	ble.w	800675a <_dtoa_r+0x8c2>
 800664a:	461a      	mov	r2, r3
 800664c:	4601      	mov	r1, r0
 800664e:	4620      	mov	r0, r4
 8006650:	f000 fe14 	bl	800727c <__pow5mult>
 8006654:	9b06      	ldr	r3, [sp, #24]
 8006656:	2b01      	cmp	r3, #1
 8006658:	4606      	mov	r6, r0
 800665a:	f340 8081 	ble.w	8006760 <_dtoa_r+0x8c8>
 800665e:	f04f 0800 	mov.w	r8, #0
 8006662:	6933      	ldr	r3, [r6, #16]
 8006664:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006668:	6918      	ldr	r0, [r3, #16]
 800666a:	f000 fcf7 	bl	800705c <__hi0bits>
 800666e:	f1c0 0020 	rsb	r0, r0, #32
 8006672:	9b05      	ldr	r3, [sp, #20]
 8006674:	4418      	add	r0, r3
 8006676:	f010 001f 	ands.w	r0, r0, #31
 800667a:	f000 8092 	beq.w	80067a2 <_dtoa_r+0x90a>
 800667e:	f1c0 0320 	rsb	r3, r0, #32
 8006682:	2b04      	cmp	r3, #4
 8006684:	f340 808a 	ble.w	800679c <_dtoa_r+0x904>
 8006688:	f1c0 001c 	rsb	r0, r0, #28
 800668c:	9b04      	ldr	r3, [sp, #16]
 800668e:	4403      	add	r3, r0
 8006690:	9304      	str	r3, [sp, #16]
 8006692:	9b05      	ldr	r3, [sp, #20]
 8006694:	4403      	add	r3, r0
 8006696:	4405      	add	r5, r0
 8006698:	9305      	str	r3, [sp, #20]
 800669a:	9b04      	ldr	r3, [sp, #16]
 800669c:	2b00      	cmp	r3, #0
 800669e:	dd07      	ble.n	80066b0 <_dtoa_r+0x818>
 80066a0:	ee18 1a10 	vmov	r1, s16
 80066a4:	461a      	mov	r2, r3
 80066a6:	4620      	mov	r0, r4
 80066a8:	f000 fe42 	bl	8007330 <__lshift>
 80066ac:	ee08 0a10 	vmov	s16, r0
 80066b0:	9b05      	ldr	r3, [sp, #20]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	dd05      	ble.n	80066c2 <_dtoa_r+0x82a>
 80066b6:	4631      	mov	r1, r6
 80066b8:	461a      	mov	r2, r3
 80066ba:	4620      	mov	r0, r4
 80066bc:	f000 fe38 	bl	8007330 <__lshift>
 80066c0:	4606      	mov	r6, r0
 80066c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d06e      	beq.n	80067a6 <_dtoa_r+0x90e>
 80066c8:	ee18 0a10 	vmov	r0, s16
 80066cc:	4631      	mov	r1, r6
 80066ce:	f000 fe9f 	bl	8007410 <__mcmp>
 80066d2:	2800      	cmp	r0, #0
 80066d4:	da67      	bge.n	80067a6 <_dtoa_r+0x90e>
 80066d6:	9b00      	ldr	r3, [sp, #0]
 80066d8:	3b01      	subs	r3, #1
 80066da:	ee18 1a10 	vmov	r1, s16
 80066de:	9300      	str	r3, [sp, #0]
 80066e0:	220a      	movs	r2, #10
 80066e2:	2300      	movs	r3, #0
 80066e4:	4620      	mov	r0, r4
 80066e6:	f000 fc73 	bl	8006fd0 <__multadd>
 80066ea:	9b08      	ldr	r3, [sp, #32]
 80066ec:	ee08 0a10 	vmov	s16, r0
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	f000 81b1 	beq.w	8006a58 <_dtoa_r+0xbc0>
 80066f6:	2300      	movs	r3, #0
 80066f8:	4639      	mov	r1, r7
 80066fa:	220a      	movs	r2, #10
 80066fc:	4620      	mov	r0, r4
 80066fe:	f000 fc67 	bl	8006fd0 <__multadd>
 8006702:	9b02      	ldr	r3, [sp, #8]
 8006704:	2b00      	cmp	r3, #0
 8006706:	4607      	mov	r7, r0
 8006708:	f300 808e 	bgt.w	8006828 <_dtoa_r+0x990>
 800670c:	9b06      	ldr	r3, [sp, #24]
 800670e:	2b02      	cmp	r3, #2
 8006710:	dc51      	bgt.n	80067b6 <_dtoa_r+0x91e>
 8006712:	e089      	b.n	8006828 <_dtoa_r+0x990>
 8006714:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006716:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800671a:	e74b      	b.n	80065b4 <_dtoa_r+0x71c>
 800671c:	9b03      	ldr	r3, [sp, #12]
 800671e:	1e5e      	subs	r6, r3, #1
 8006720:	9b07      	ldr	r3, [sp, #28]
 8006722:	42b3      	cmp	r3, r6
 8006724:	bfbf      	itttt	lt
 8006726:	9b07      	ldrlt	r3, [sp, #28]
 8006728:	9607      	strlt	r6, [sp, #28]
 800672a:	1af2      	sublt	r2, r6, r3
 800672c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800672e:	bfb6      	itet	lt
 8006730:	189b      	addlt	r3, r3, r2
 8006732:	1b9e      	subge	r6, r3, r6
 8006734:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006736:	9b03      	ldr	r3, [sp, #12]
 8006738:	bfb8      	it	lt
 800673a:	2600      	movlt	r6, #0
 800673c:	2b00      	cmp	r3, #0
 800673e:	bfb7      	itett	lt
 8006740:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006744:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006748:	1a9d      	sublt	r5, r3, r2
 800674a:	2300      	movlt	r3, #0
 800674c:	e734      	b.n	80065b8 <_dtoa_r+0x720>
 800674e:	9e07      	ldr	r6, [sp, #28]
 8006750:	9d04      	ldr	r5, [sp, #16]
 8006752:	9f08      	ldr	r7, [sp, #32]
 8006754:	e73b      	b.n	80065ce <_dtoa_r+0x736>
 8006756:	9a07      	ldr	r2, [sp, #28]
 8006758:	e767      	b.n	800662a <_dtoa_r+0x792>
 800675a:	9b06      	ldr	r3, [sp, #24]
 800675c:	2b01      	cmp	r3, #1
 800675e:	dc18      	bgt.n	8006792 <_dtoa_r+0x8fa>
 8006760:	f1ba 0f00 	cmp.w	sl, #0
 8006764:	d115      	bne.n	8006792 <_dtoa_r+0x8fa>
 8006766:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800676a:	b993      	cbnz	r3, 8006792 <_dtoa_r+0x8fa>
 800676c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006770:	0d1b      	lsrs	r3, r3, #20
 8006772:	051b      	lsls	r3, r3, #20
 8006774:	b183      	cbz	r3, 8006798 <_dtoa_r+0x900>
 8006776:	9b04      	ldr	r3, [sp, #16]
 8006778:	3301      	adds	r3, #1
 800677a:	9304      	str	r3, [sp, #16]
 800677c:	9b05      	ldr	r3, [sp, #20]
 800677e:	3301      	adds	r3, #1
 8006780:	9305      	str	r3, [sp, #20]
 8006782:	f04f 0801 	mov.w	r8, #1
 8006786:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006788:	2b00      	cmp	r3, #0
 800678a:	f47f af6a 	bne.w	8006662 <_dtoa_r+0x7ca>
 800678e:	2001      	movs	r0, #1
 8006790:	e76f      	b.n	8006672 <_dtoa_r+0x7da>
 8006792:	f04f 0800 	mov.w	r8, #0
 8006796:	e7f6      	b.n	8006786 <_dtoa_r+0x8ee>
 8006798:	4698      	mov	r8, r3
 800679a:	e7f4      	b.n	8006786 <_dtoa_r+0x8ee>
 800679c:	f43f af7d 	beq.w	800669a <_dtoa_r+0x802>
 80067a0:	4618      	mov	r0, r3
 80067a2:	301c      	adds	r0, #28
 80067a4:	e772      	b.n	800668c <_dtoa_r+0x7f4>
 80067a6:	9b03      	ldr	r3, [sp, #12]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	dc37      	bgt.n	800681c <_dtoa_r+0x984>
 80067ac:	9b06      	ldr	r3, [sp, #24]
 80067ae:	2b02      	cmp	r3, #2
 80067b0:	dd34      	ble.n	800681c <_dtoa_r+0x984>
 80067b2:	9b03      	ldr	r3, [sp, #12]
 80067b4:	9302      	str	r3, [sp, #8]
 80067b6:	9b02      	ldr	r3, [sp, #8]
 80067b8:	b96b      	cbnz	r3, 80067d6 <_dtoa_r+0x93e>
 80067ba:	4631      	mov	r1, r6
 80067bc:	2205      	movs	r2, #5
 80067be:	4620      	mov	r0, r4
 80067c0:	f000 fc06 	bl	8006fd0 <__multadd>
 80067c4:	4601      	mov	r1, r0
 80067c6:	4606      	mov	r6, r0
 80067c8:	ee18 0a10 	vmov	r0, s16
 80067cc:	f000 fe20 	bl	8007410 <__mcmp>
 80067d0:	2800      	cmp	r0, #0
 80067d2:	f73f adbb 	bgt.w	800634c <_dtoa_r+0x4b4>
 80067d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067d8:	9d01      	ldr	r5, [sp, #4]
 80067da:	43db      	mvns	r3, r3
 80067dc:	9300      	str	r3, [sp, #0]
 80067de:	f04f 0800 	mov.w	r8, #0
 80067e2:	4631      	mov	r1, r6
 80067e4:	4620      	mov	r0, r4
 80067e6:	f000 fbd1 	bl	8006f8c <_Bfree>
 80067ea:	2f00      	cmp	r7, #0
 80067ec:	f43f aea4 	beq.w	8006538 <_dtoa_r+0x6a0>
 80067f0:	f1b8 0f00 	cmp.w	r8, #0
 80067f4:	d005      	beq.n	8006802 <_dtoa_r+0x96a>
 80067f6:	45b8      	cmp	r8, r7
 80067f8:	d003      	beq.n	8006802 <_dtoa_r+0x96a>
 80067fa:	4641      	mov	r1, r8
 80067fc:	4620      	mov	r0, r4
 80067fe:	f000 fbc5 	bl	8006f8c <_Bfree>
 8006802:	4639      	mov	r1, r7
 8006804:	4620      	mov	r0, r4
 8006806:	f000 fbc1 	bl	8006f8c <_Bfree>
 800680a:	e695      	b.n	8006538 <_dtoa_r+0x6a0>
 800680c:	2600      	movs	r6, #0
 800680e:	4637      	mov	r7, r6
 8006810:	e7e1      	b.n	80067d6 <_dtoa_r+0x93e>
 8006812:	9700      	str	r7, [sp, #0]
 8006814:	4637      	mov	r7, r6
 8006816:	e599      	b.n	800634c <_dtoa_r+0x4b4>
 8006818:	40240000 	.word	0x40240000
 800681c:	9b08      	ldr	r3, [sp, #32]
 800681e:	2b00      	cmp	r3, #0
 8006820:	f000 80ca 	beq.w	80069b8 <_dtoa_r+0xb20>
 8006824:	9b03      	ldr	r3, [sp, #12]
 8006826:	9302      	str	r3, [sp, #8]
 8006828:	2d00      	cmp	r5, #0
 800682a:	dd05      	ble.n	8006838 <_dtoa_r+0x9a0>
 800682c:	4639      	mov	r1, r7
 800682e:	462a      	mov	r2, r5
 8006830:	4620      	mov	r0, r4
 8006832:	f000 fd7d 	bl	8007330 <__lshift>
 8006836:	4607      	mov	r7, r0
 8006838:	f1b8 0f00 	cmp.w	r8, #0
 800683c:	d05b      	beq.n	80068f6 <_dtoa_r+0xa5e>
 800683e:	6879      	ldr	r1, [r7, #4]
 8006840:	4620      	mov	r0, r4
 8006842:	f000 fb63 	bl	8006f0c <_Balloc>
 8006846:	4605      	mov	r5, r0
 8006848:	b928      	cbnz	r0, 8006856 <_dtoa_r+0x9be>
 800684a:	4b87      	ldr	r3, [pc, #540]	; (8006a68 <_dtoa_r+0xbd0>)
 800684c:	4602      	mov	r2, r0
 800684e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006852:	f7ff bb3b 	b.w	8005ecc <_dtoa_r+0x34>
 8006856:	693a      	ldr	r2, [r7, #16]
 8006858:	3202      	adds	r2, #2
 800685a:	0092      	lsls	r2, r2, #2
 800685c:	f107 010c 	add.w	r1, r7, #12
 8006860:	300c      	adds	r0, #12
 8006862:	f000 fb45 	bl	8006ef0 <memcpy>
 8006866:	2201      	movs	r2, #1
 8006868:	4629      	mov	r1, r5
 800686a:	4620      	mov	r0, r4
 800686c:	f000 fd60 	bl	8007330 <__lshift>
 8006870:	9b01      	ldr	r3, [sp, #4]
 8006872:	f103 0901 	add.w	r9, r3, #1
 8006876:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800687a:	4413      	add	r3, r2
 800687c:	9305      	str	r3, [sp, #20]
 800687e:	f00a 0301 	and.w	r3, sl, #1
 8006882:	46b8      	mov	r8, r7
 8006884:	9304      	str	r3, [sp, #16]
 8006886:	4607      	mov	r7, r0
 8006888:	4631      	mov	r1, r6
 800688a:	ee18 0a10 	vmov	r0, s16
 800688e:	f7ff fa77 	bl	8005d80 <quorem>
 8006892:	4641      	mov	r1, r8
 8006894:	9002      	str	r0, [sp, #8]
 8006896:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800689a:	ee18 0a10 	vmov	r0, s16
 800689e:	f000 fdb7 	bl	8007410 <__mcmp>
 80068a2:	463a      	mov	r2, r7
 80068a4:	9003      	str	r0, [sp, #12]
 80068a6:	4631      	mov	r1, r6
 80068a8:	4620      	mov	r0, r4
 80068aa:	f000 fdcd 	bl	8007448 <__mdiff>
 80068ae:	68c2      	ldr	r2, [r0, #12]
 80068b0:	f109 3bff 	add.w	fp, r9, #4294967295
 80068b4:	4605      	mov	r5, r0
 80068b6:	bb02      	cbnz	r2, 80068fa <_dtoa_r+0xa62>
 80068b8:	4601      	mov	r1, r0
 80068ba:	ee18 0a10 	vmov	r0, s16
 80068be:	f000 fda7 	bl	8007410 <__mcmp>
 80068c2:	4602      	mov	r2, r0
 80068c4:	4629      	mov	r1, r5
 80068c6:	4620      	mov	r0, r4
 80068c8:	9207      	str	r2, [sp, #28]
 80068ca:	f000 fb5f 	bl	8006f8c <_Bfree>
 80068ce:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80068d2:	ea43 0102 	orr.w	r1, r3, r2
 80068d6:	9b04      	ldr	r3, [sp, #16]
 80068d8:	430b      	orrs	r3, r1
 80068da:	464d      	mov	r5, r9
 80068dc:	d10f      	bne.n	80068fe <_dtoa_r+0xa66>
 80068de:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80068e2:	d02a      	beq.n	800693a <_dtoa_r+0xaa2>
 80068e4:	9b03      	ldr	r3, [sp, #12]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	dd02      	ble.n	80068f0 <_dtoa_r+0xa58>
 80068ea:	9b02      	ldr	r3, [sp, #8]
 80068ec:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80068f0:	f88b a000 	strb.w	sl, [fp]
 80068f4:	e775      	b.n	80067e2 <_dtoa_r+0x94a>
 80068f6:	4638      	mov	r0, r7
 80068f8:	e7ba      	b.n	8006870 <_dtoa_r+0x9d8>
 80068fa:	2201      	movs	r2, #1
 80068fc:	e7e2      	b.n	80068c4 <_dtoa_r+0xa2c>
 80068fe:	9b03      	ldr	r3, [sp, #12]
 8006900:	2b00      	cmp	r3, #0
 8006902:	db04      	blt.n	800690e <_dtoa_r+0xa76>
 8006904:	9906      	ldr	r1, [sp, #24]
 8006906:	430b      	orrs	r3, r1
 8006908:	9904      	ldr	r1, [sp, #16]
 800690a:	430b      	orrs	r3, r1
 800690c:	d122      	bne.n	8006954 <_dtoa_r+0xabc>
 800690e:	2a00      	cmp	r2, #0
 8006910:	ddee      	ble.n	80068f0 <_dtoa_r+0xa58>
 8006912:	ee18 1a10 	vmov	r1, s16
 8006916:	2201      	movs	r2, #1
 8006918:	4620      	mov	r0, r4
 800691a:	f000 fd09 	bl	8007330 <__lshift>
 800691e:	4631      	mov	r1, r6
 8006920:	ee08 0a10 	vmov	s16, r0
 8006924:	f000 fd74 	bl	8007410 <__mcmp>
 8006928:	2800      	cmp	r0, #0
 800692a:	dc03      	bgt.n	8006934 <_dtoa_r+0xa9c>
 800692c:	d1e0      	bne.n	80068f0 <_dtoa_r+0xa58>
 800692e:	f01a 0f01 	tst.w	sl, #1
 8006932:	d0dd      	beq.n	80068f0 <_dtoa_r+0xa58>
 8006934:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006938:	d1d7      	bne.n	80068ea <_dtoa_r+0xa52>
 800693a:	2339      	movs	r3, #57	; 0x39
 800693c:	f88b 3000 	strb.w	r3, [fp]
 8006940:	462b      	mov	r3, r5
 8006942:	461d      	mov	r5, r3
 8006944:	3b01      	subs	r3, #1
 8006946:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800694a:	2a39      	cmp	r2, #57	; 0x39
 800694c:	d071      	beq.n	8006a32 <_dtoa_r+0xb9a>
 800694e:	3201      	adds	r2, #1
 8006950:	701a      	strb	r2, [r3, #0]
 8006952:	e746      	b.n	80067e2 <_dtoa_r+0x94a>
 8006954:	2a00      	cmp	r2, #0
 8006956:	dd07      	ble.n	8006968 <_dtoa_r+0xad0>
 8006958:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800695c:	d0ed      	beq.n	800693a <_dtoa_r+0xaa2>
 800695e:	f10a 0301 	add.w	r3, sl, #1
 8006962:	f88b 3000 	strb.w	r3, [fp]
 8006966:	e73c      	b.n	80067e2 <_dtoa_r+0x94a>
 8006968:	9b05      	ldr	r3, [sp, #20]
 800696a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800696e:	4599      	cmp	r9, r3
 8006970:	d047      	beq.n	8006a02 <_dtoa_r+0xb6a>
 8006972:	ee18 1a10 	vmov	r1, s16
 8006976:	2300      	movs	r3, #0
 8006978:	220a      	movs	r2, #10
 800697a:	4620      	mov	r0, r4
 800697c:	f000 fb28 	bl	8006fd0 <__multadd>
 8006980:	45b8      	cmp	r8, r7
 8006982:	ee08 0a10 	vmov	s16, r0
 8006986:	f04f 0300 	mov.w	r3, #0
 800698a:	f04f 020a 	mov.w	r2, #10
 800698e:	4641      	mov	r1, r8
 8006990:	4620      	mov	r0, r4
 8006992:	d106      	bne.n	80069a2 <_dtoa_r+0xb0a>
 8006994:	f000 fb1c 	bl	8006fd0 <__multadd>
 8006998:	4680      	mov	r8, r0
 800699a:	4607      	mov	r7, r0
 800699c:	f109 0901 	add.w	r9, r9, #1
 80069a0:	e772      	b.n	8006888 <_dtoa_r+0x9f0>
 80069a2:	f000 fb15 	bl	8006fd0 <__multadd>
 80069a6:	4639      	mov	r1, r7
 80069a8:	4680      	mov	r8, r0
 80069aa:	2300      	movs	r3, #0
 80069ac:	220a      	movs	r2, #10
 80069ae:	4620      	mov	r0, r4
 80069b0:	f000 fb0e 	bl	8006fd0 <__multadd>
 80069b4:	4607      	mov	r7, r0
 80069b6:	e7f1      	b.n	800699c <_dtoa_r+0xb04>
 80069b8:	9b03      	ldr	r3, [sp, #12]
 80069ba:	9302      	str	r3, [sp, #8]
 80069bc:	9d01      	ldr	r5, [sp, #4]
 80069be:	ee18 0a10 	vmov	r0, s16
 80069c2:	4631      	mov	r1, r6
 80069c4:	f7ff f9dc 	bl	8005d80 <quorem>
 80069c8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80069cc:	9b01      	ldr	r3, [sp, #4]
 80069ce:	f805 ab01 	strb.w	sl, [r5], #1
 80069d2:	1aea      	subs	r2, r5, r3
 80069d4:	9b02      	ldr	r3, [sp, #8]
 80069d6:	4293      	cmp	r3, r2
 80069d8:	dd09      	ble.n	80069ee <_dtoa_r+0xb56>
 80069da:	ee18 1a10 	vmov	r1, s16
 80069de:	2300      	movs	r3, #0
 80069e0:	220a      	movs	r2, #10
 80069e2:	4620      	mov	r0, r4
 80069e4:	f000 faf4 	bl	8006fd0 <__multadd>
 80069e8:	ee08 0a10 	vmov	s16, r0
 80069ec:	e7e7      	b.n	80069be <_dtoa_r+0xb26>
 80069ee:	9b02      	ldr	r3, [sp, #8]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	bfc8      	it	gt
 80069f4:	461d      	movgt	r5, r3
 80069f6:	9b01      	ldr	r3, [sp, #4]
 80069f8:	bfd8      	it	le
 80069fa:	2501      	movle	r5, #1
 80069fc:	441d      	add	r5, r3
 80069fe:	f04f 0800 	mov.w	r8, #0
 8006a02:	ee18 1a10 	vmov	r1, s16
 8006a06:	2201      	movs	r2, #1
 8006a08:	4620      	mov	r0, r4
 8006a0a:	f000 fc91 	bl	8007330 <__lshift>
 8006a0e:	4631      	mov	r1, r6
 8006a10:	ee08 0a10 	vmov	s16, r0
 8006a14:	f000 fcfc 	bl	8007410 <__mcmp>
 8006a18:	2800      	cmp	r0, #0
 8006a1a:	dc91      	bgt.n	8006940 <_dtoa_r+0xaa8>
 8006a1c:	d102      	bne.n	8006a24 <_dtoa_r+0xb8c>
 8006a1e:	f01a 0f01 	tst.w	sl, #1
 8006a22:	d18d      	bne.n	8006940 <_dtoa_r+0xaa8>
 8006a24:	462b      	mov	r3, r5
 8006a26:	461d      	mov	r5, r3
 8006a28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a2c:	2a30      	cmp	r2, #48	; 0x30
 8006a2e:	d0fa      	beq.n	8006a26 <_dtoa_r+0xb8e>
 8006a30:	e6d7      	b.n	80067e2 <_dtoa_r+0x94a>
 8006a32:	9a01      	ldr	r2, [sp, #4]
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d184      	bne.n	8006942 <_dtoa_r+0xaaa>
 8006a38:	9b00      	ldr	r3, [sp, #0]
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	9300      	str	r3, [sp, #0]
 8006a3e:	2331      	movs	r3, #49	; 0x31
 8006a40:	7013      	strb	r3, [r2, #0]
 8006a42:	e6ce      	b.n	80067e2 <_dtoa_r+0x94a>
 8006a44:	4b09      	ldr	r3, [pc, #36]	; (8006a6c <_dtoa_r+0xbd4>)
 8006a46:	f7ff ba95 	b.w	8005f74 <_dtoa_r+0xdc>
 8006a4a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	f47f aa6e 	bne.w	8005f2e <_dtoa_r+0x96>
 8006a52:	4b07      	ldr	r3, [pc, #28]	; (8006a70 <_dtoa_r+0xbd8>)
 8006a54:	f7ff ba8e 	b.w	8005f74 <_dtoa_r+0xdc>
 8006a58:	9b02      	ldr	r3, [sp, #8]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	dcae      	bgt.n	80069bc <_dtoa_r+0xb24>
 8006a5e:	9b06      	ldr	r3, [sp, #24]
 8006a60:	2b02      	cmp	r3, #2
 8006a62:	f73f aea8 	bgt.w	80067b6 <_dtoa_r+0x91e>
 8006a66:	e7a9      	b.n	80069bc <_dtoa_r+0xb24>
 8006a68:	08008651 	.word	0x08008651
 8006a6c:	08008414 	.word	0x08008414
 8006a70:	080085e9 	.word	0x080085e9

08006a74 <__sflush_r>:
 8006a74:	898a      	ldrh	r2, [r1, #12]
 8006a76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a7a:	4605      	mov	r5, r0
 8006a7c:	0710      	lsls	r0, r2, #28
 8006a7e:	460c      	mov	r4, r1
 8006a80:	d458      	bmi.n	8006b34 <__sflush_r+0xc0>
 8006a82:	684b      	ldr	r3, [r1, #4]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	dc05      	bgt.n	8006a94 <__sflush_r+0x20>
 8006a88:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	dc02      	bgt.n	8006a94 <__sflush_r+0x20>
 8006a8e:	2000      	movs	r0, #0
 8006a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a96:	2e00      	cmp	r6, #0
 8006a98:	d0f9      	beq.n	8006a8e <__sflush_r+0x1a>
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006aa0:	682f      	ldr	r7, [r5, #0]
 8006aa2:	602b      	str	r3, [r5, #0]
 8006aa4:	d032      	beq.n	8006b0c <__sflush_r+0x98>
 8006aa6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006aa8:	89a3      	ldrh	r3, [r4, #12]
 8006aaa:	075a      	lsls	r2, r3, #29
 8006aac:	d505      	bpl.n	8006aba <__sflush_r+0x46>
 8006aae:	6863      	ldr	r3, [r4, #4]
 8006ab0:	1ac0      	subs	r0, r0, r3
 8006ab2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006ab4:	b10b      	cbz	r3, 8006aba <__sflush_r+0x46>
 8006ab6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006ab8:	1ac0      	subs	r0, r0, r3
 8006aba:	2300      	movs	r3, #0
 8006abc:	4602      	mov	r2, r0
 8006abe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006ac0:	6a21      	ldr	r1, [r4, #32]
 8006ac2:	4628      	mov	r0, r5
 8006ac4:	47b0      	blx	r6
 8006ac6:	1c43      	adds	r3, r0, #1
 8006ac8:	89a3      	ldrh	r3, [r4, #12]
 8006aca:	d106      	bne.n	8006ada <__sflush_r+0x66>
 8006acc:	6829      	ldr	r1, [r5, #0]
 8006ace:	291d      	cmp	r1, #29
 8006ad0:	d82c      	bhi.n	8006b2c <__sflush_r+0xb8>
 8006ad2:	4a2a      	ldr	r2, [pc, #168]	; (8006b7c <__sflush_r+0x108>)
 8006ad4:	40ca      	lsrs	r2, r1
 8006ad6:	07d6      	lsls	r6, r2, #31
 8006ad8:	d528      	bpl.n	8006b2c <__sflush_r+0xb8>
 8006ada:	2200      	movs	r2, #0
 8006adc:	6062      	str	r2, [r4, #4]
 8006ade:	04d9      	lsls	r1, r3, #19
 8006ae0:	6922      	ldr	r2, [r4, #16]
 8006ae2:	6022      	str	r2, [r4, #0]
 8006ae4:	d504      	bpl.n	8006af0 <__sflush_r+0x7c>
 8006ae6:	1c42      	adds	r2, r0, #1
 8006ae8:	d101      	bne.n	8006aee <__sflush_r+0x7a>
 8006aea:	682b      	ldr	r3, [r5, #0]
 8006aec:	b903      	cbnz	r3, 8006af0 <__sflush_r+0x7c>
 8006aee:	6560      	str	r0, [r4, #84]	; 0x54
 8006af0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006af2:	602f      	str	r7, [r5, #0]
 8006af4:	2900      	cmp	r1, #0
 8006af6:	d0ca      	beq.n	8006a8e <__sflush_r+0x1a>
 8006af8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006afc:	4299      	cmp	r1, r3
 8006afe:	d002      	beq.n	8006b06 <__sflush_r+0x92>
 8006b00:	4628      	mov	r0, r5
 8006b02:	f000 fd9d 	bl	8007640 <_free_r>
 8006b06:	2000      	movs	r0, #0
 8006b08:	6360      	str	r0, [r4, #52]	; 0x34
 8006b0a:	e7c1      	b.n	8006a90 <__sflush_r+0x1c>
 8006b0c:	6a21      	ldr	r1, [r4, #32]
 8006b0e:	2301      	movs	r3, #1
 8006b10:	4628      	mov	r0, r5
 8006b12:	47b0      	blx	r6
 8006b14:	1c41      	adds	r1, r0, #1
 8006b16:	d1c7      	bne.n	8006aa8 <__sflush_r+0x34>
 8006b18:	682b      	ldr	r3, [r5, #0]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d0c4      	beq.n	8006aa8 <__sflush_r+0x34>
 8006b1e:	2b1d      	cmp	r3, #29
 8006b20:	d001      	beq.n	8006b26 <__sflush_r+0xb2>
 8006b22:	2b16      	cmp	r3, #22
 8006b24:	d101      	bne.n	8006b2a <__sflush_r+0xb6>
 8006b26:	602f      	str	r7, [r5, #0]
 8006b28:	e7b1      	b.n	8006a8e <__sflush_r+0x1a>
 8006b2a:	89a3      	ldrh	r3, [r4, #12]
 8006b2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b30:	81a3      	strh	r3, [r4, #12]
 8006b32:	e7ad      	b.n	8006a90 <__sflush_r+0x1c>
 8006b34:	690f      	ldr	r7, [r1, #16]
 8006b36:	2f00      	cmp	r7, #0
 8006b38:	d0a9      	beq.n	8006a8e <__sflush_r+0x1a>
 8006b3a:	0793      	lsls	r3, r2, #30
 8006b3c:	680e      	ldr	r6, [r1, #0]
 8006b3e:	bf08      	it	eq
 8006b40:	694b      	ldreq	r3, [r1, #20]
 8006b42:	600f      	str	r7, [r1, #0]
 8006b44:	bf18      	it	ne
 8006b46:	2300      	movne	r3, #0
 8006b48:	eba6 0807 	sub.w	r8, r6, r7
 8006b4c:	608b      	str	r3, [r1, #8]
 8006b4e:	f1b8 0f00 	cmp.w	r8, #0
 8006b52:	dd9c      	ble.n	8006a8e <__sflush_r+0x1a>
 8006b54:	6a21      	ldr	r1, [r4, #32]
 8006b56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006b58:	4643      	mov	r3, r8
 8006b5a:	463a      	mov	r2, r7
 8006b5c:	4628      	mov	r0, r5
 8006b5e:	47b0      	blx	r6
 8006b60:	2800      	cmp	r0, #0
 8006b62:	dc06      	bgt.n	8006b72 <__sflush_r+0xfe>
 8006b64:	89a3      	ldrh	r3, [r4, #12]
 8006b66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b6a:	81a3      	strh	r3, [r4, #12]
 8006b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b70:	e78e      	b.n	8006a90 <__sflush_r+0x1c>
 8006b72:	4407      	add	r7, r0
 8006b74:	eba8 0800 	sub.w	r8, r8, r0
 8006b78:	e7e9      	b.n	8006b4e <__sflush_r+0xda>
 8006b7a:	bf00      	nop
 8006b7c:	20400001 	.word	0x20400001

08006b80 <_fflush_r>:
 8006b80:	b538      	push	{r3, r4, r5, lr}
 8006b82:	690b      	ldr	r3, [r1, #16]
 8006b84:	4605      	mov	r5, r0
 8006b86:	460c      	mov	r4, r1
 8006b88:	b913      	cbnz	r3, 8006b90 <_fflush_r+0x10>
 8006b8a:	2500      	movs	r5, #0
 8006b8c:	4628      	mov	r0, r5
 8006b8e:	bd38      	pop	{r3, r4, r5, pc}
 8006b90:	b118      	cbz	r0, 8006b9a <_fflush_r+0x1a>
 8006b92:	6983      	ldr	r3, [r0, #24]
 8006b94:	b90b      	cbnz	r3, 8006b9a <_fflush_r+0x1a>
 8006b96:	f000 f887 	bl	8006ca8 <__sinit>
 8006b9a:	4b14      	ldr	r3, [pc, #80]	; (8006bec <_fflush_r+0x6c>)
 8006b9c:	429c      	cmp	r4, r3
 8006b9e:	d11b      	bne.n	8006bd8 <_fflush_r+0x58>
 8006ba0:	686c      	ldr	r4, [r5, #4]
 8006ba2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d0ef      	beq.n	8006b8a <_fflush_r+0xa>
 8006baa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006bac:	07d0      	lsls	r0, r2, #31
 8006bae:	d404      	bmi.n	8006bba <_fflush_r+0x3a>
 8006bb0:	0599      	lsls	r1, r3, #22
 8006bb2:	d402      	bmi.n	8006bba <_fflush_r+0x3a>
 8006bb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bb6:	f000 f92c 	bl	8006e12 <__retarget_lock_acquire_recursive>
 8006bba:	4628      	mov	r0, r5
 8006bbc:	4621      	mov	r1, r4
 8006bbe:	f7ff ff59 	bl	8006a74 <__sflush_r>
 8006bc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006bc4:	07da      	lsls	r2, r3, #31
 8006bc6:	4605      	mov	r5, r0
 8006bc8:	d4e0      	bmi.n	8006b8c <_fflush_r+0xc>
 8006bca:	89a3      	ldrh	r3, [r4, #12]
 8006bcc:	059b      	lsls	r3, r3, #22
 8006bce:	d4dd      	bmi.n	8006b8c <_fflush_r+0xc>
 8006bd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bd2:	f000 f91f 	bl	8006e14 <__retarget_lock_release_recursive>
 8006bd6:	e7d9      	b.n	8006b8c <_fflush_r+0xc>
 8006bd8:	4b05      	ldr	r3, [pc, #20]	; (8006bf0 <_fflush_r+0x70>)
 8006bda:	429c      	cmp	r4, r3
 8006bdc:	d101      	bne.n	8006be2 <_fflush_r+0x62>
 8006bde:	68ac      	ldr	r4, [r5, #8]
 8006be0:	e7df      	b.n	8006ba2 <_fflush_r+0x22>
 8006be2:	4b04      	ldr	r3, [pc, #16]	; (8006bf4 <_fflush_r+0x74>)
 8006be4:	429c      	cmp	r4, r3
 8006be6:	bf08      	it	eq
 8006be8:	68ec      	ldreq	r4, [r5, #12]
 8006bea:	e7da      	b.n	8006ba2 <_fflush_r+0x22>
 8006bec:	08008684 	.word	0x08008684
 8006bf0:	080086a4 	.word	0x080086a4
 8006bf4:	08008664 	.word	0x08008664

08006bf8 <std>:
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	b510      	push	{r4, lr}
 8006bfc:	4604      	mov	r4, r0
 8006bfe:	e9c0 3300 	strd	r3, r3, [r0]
 8006c02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c06:	6083      	str	r3, [r0, #8]
 8006c08:	8181      	strh	r1, [r0, #12]
 8006c0a:	6643      	str	r3, [r0, #100]	; 0x64
 8006c0c:	81c2      	strh	r2, [r0, #14]
 8006c0e:	6183      	str	r3, [r0, #24]
 8006c10:	4619      	mov	r1, r3
 8006c12:	2208      	movs	r2, #8
 8006c14:	305c      	adds	r0, #92	; 0x5c
 8006c16:	f7fe f909 	bl	8004e2c <memset>
 8006c1a:	4b05      	ldr	r3, [pc, #20]	; (8006c30 <std+0x38>)
 8006c1c:	6263      	str	r3, [r4, #36]	; 0x24
 8006c1e:	4b05      	ldr	r3, [pc, #20]	; (8006c34 <std+0x3c>)
 8006c20:	62a3      	str	r3, [r4, #40]	; 0x28
 8006c22:	4b05      	ldr	r3, [pc, #20]	; (8006c38 <std+0x40>)
 8006c24:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006c26:	4b05      	ldr	r3, [pc, #20]	; (8006c3c <std+0x44>)
 8006c28:	6224      	str	r4, [r4, #32]
 8006c2a:	6323      	str	r3, [r4, #48]	; 0x30
 8006c2c:	bd10      	pop	{r4, pc}
 8006c2e:	bf00      	nop
 8006c30:	08007b65 	.word	0x08007b65
 8006c34:	08007b87 	.word	0x08007b87
 8006c38:	08007bbf 	.word	0x08007bbf
 8006c3c:	08007be3 	.word	0x08007be3

08006c40 <_cleanup_r>:
 8006c40:	4901      	ldr	r1, [pc, #4]	; (8006c48 <_cleanup_r+0x8>)
 8006c42:	f000 b8c1 	b.w	8006dc8 <_fwalk_reent>
 8006c46:	bf00      	nop
 8006c48:	08006b81 	.word	0x08006b81

08006c4c <__sfmoreglue>:
 8006c4c:	b570      	push	{r4, r5, r6, lr}
 8006c4e:	2268      	movs	r2, #104	; 0x68
 8006c50:	1e4d      	subs	r5, r1, #1
 8006c52:	4355      	muls	r5, r2
 8006c54:	460e      	mov	r6, r1
 8006c56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006c5a:	f000 fd5d 	bl	8007718 <_malloc_r>
 8006c5e:	4604      	mov	r4, r0
 8006c60:	b140      	cbz	r0, 8006c74 <__sfmoreglue+0x28>
 8006c62:	2100      	movs	r1, #0
 8006c64:	e9c0 1600 	strd	r1, r6, [r0]
 8006c68:	300c      	adds	r0, #12
 8006c6a:	60a0      	str	r0, [r4, #8]
 8006c6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006c70:	f7fe f8dc 	bl	8004e2c <memset>
 8006c74:	4620      	mov	r0, r4
 8006c76:	bd70      	pop	{r4, r5, r6, pc}

08006c78 <__sfp_lock_acquire>:
 8006c78:	4801      	ldr	r0, [pc, #4]	; (8006c80 <__sfp_lock_acquire+0x8>)
 8006c7a:	f000 b8ca 	b.w	8006e12 <__retarget_lock_acquire_recursive>
 8006c7e:	bf00      	nop
 8006c80:	20000341 	.word	0x20000341

08006c84 <__sfp_lock_release>:
 8006c84:	4801      	ldr	r0, [pc, #4]	; (8006c8c <__sfp_lock_release+0x8>)
 8006c86:	f000 b8c5 	b.w	8006e14 <__retarget_lock_release_recursive>
 8006c8a:	bf00      	nop
 8006c8c:	20000341 	.word	0x20000341

08006c90 <__sinit_lock_acquire>:
 8006c90:	4801      	ldr	r0, [pc, #4]	; (8006c98 <__sinit_lock_acquire+0x8>)
 8006c92:	f000 b8be 	b.w	8006e12 <__retarget_lock_acquire_recursive>
 8006c96:	bf00      	nop
 8006c98:	20000342 	.word	0x20000342

08006c9c <__sinit_lock_release>:
 8006c9c:	4801      	ldr	r0, [pc, #4]	; (8006ca4 <__sinit_lock_release+0x8>)
 8006c9e:	f000 b8b9 	b.w	8006e14 <__retarget_lock_release_recursive>
 8006ca2:	bf00      	nop
 8006ca4:	20000342 	.word	0x20000342

08006ca8 <__sinit>:
 8006ca8:	b510      	push	{r4, lr}
 8006caa:	4604      	mov	r4, r0
 8006cac:	f7ff fff0 	bl	8006c90 <__sinit_lock_acquire>
 8006cb0:	69a3      	ldr	r3, [r4, #24]
 8006cb2:	b11b      	cbz	r3, 8006cbc <__sinit+0x14>
 8006cb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cb8:	f7ff bff0 	b.w	8006c9c <__sinit_lock_release>
 8006cbc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006cc0:	6523      	str	r3, [r4, #80]	; 0x50
 8006cc2:	4b13      	ldr	r3, [pc, #76]	; (8006d10 <__sinit+0x68>)
 8006cc4:	4a13      	ldr	r2, [pc, #76]	; (8006d14 <__sinit+0x6c>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	62a2      	str	r2, [r4, #40]	; 0x28
 8006cca:	42a3      	cmp	r3, r4
 8006ccc:	bf04      	itt	eq
 8006cce:	2301      	moveq	r3, #1
 8006cd0:	61a3      	streq	r3, [r4, #24]
 8006cd2:	4620      	mov	r0, r4
 8006cd4:	f000 f820 	bl	8006d18 <__sfp>
 8006cd8:	6060      	str	r0, [r4, #4]
 8006cda:	4620      	mov	r0, r4
 8006cdc:	f000 f81c 	bl	8006d18 <__sfp>
 8006ce0:	60a0      	str	r0, [r4, #8]
 8006ce2:	4620      	mov	r0, r4
 8006ce4:	f000 f818 	bl	8006d18 <__sfp>
 8006ce8:	2200      	movs	r2, #0
 8006cea:	60e0      	str	r0, [r4, #12]
 8006cec:	2104      	movs	r1, #4
 8006cee:	6860      	ldr	r0, [r4, #4]
 8006cf0:	f7ff ff82 	bl	8006bf8 <std>
 8006cf4:	68a0      	ldr	r0, [r4, #8]
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	2109      	movs	r1, #9
 8006cfa:	f7ff ff7d 	bl	8006bf8 <std>
 8006cfe:	68e0      	ldr	r0, [r4, #12]
 8006d00:	2202      	movs	r2, #2
 8006d02:	2112      	movs	r1, #18
 8006d04:	f7ff ff78 	bl	8006bf8 <std>
 8006d08:	2301      	movs	r3, #1
 8006d0a:	61a3      	str	r3, [r4, #24]
 8006d0c:	e7d2      	b.n	8006cb4 <__sinit+0xc>
 8006d0e:	bf00      	nop
 8006d10:	08008400 	.word	0x08008400
 8006d14:	08006c41 	.word	0x08006c41

08006d18 <__sfp>:
 8006d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d1a:	4607      	mov	r7, r0
 8006d1c:	f7ff ffac 	bl	8006c78 <__sfp_lock_acquire>
 8006d20:	4b1e      	ldr	r3, [pc, #120]	; (8006d9c <__sfp+0x84>)
 8006d22:	681e      	ldr	r6, [r3, #0]
 8006d24:	69b3      	ldr	r3, [r6, #24]
 8006d26:	b913      	cbnz	r3, 8006d2e <__sfp+0x16>
 8006d28:	4630      	mov	r0, r6
 8006d2a:	f7ff ffbd 	bl	8006ca8 <__sinit>
 8006d2e:	3648      	adds	r6, #72	; 0x48
 8006d30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006d34:	3b01      	subs	r3, #1
 8006d36:	d503      	bpl.n	8006d40 <__sfp+0x28>
 8006d38:	6833      	ldr	r3, [r6, #0]
 8006d3a:	b30b      	cbz	r3, 8006d80 <__sfp+0x68>
 8006d3c:	6836      	ldr	r6, [r6, #0]
 8006d3e:	e7f7      	b.n	8006d30 <__sfp+0x18>
 8006d40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006d44:	b9d5      	cbnz	r5, 8006d7c <__sfp+0x64>
 8006d46:	4b16      	ldr	r3, [pc, #88]	; (8006da0 <__sfp+0x88>)
 8006d48:	60e3      	str	r3, [r4, #12]
 8006d4a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006d4e:	6665      	str	r5, [r4, #100]	; 0x64
 8006d50:	f000 f85e 	bl	8006e10 <__retarget_lock_init_recursive>
 8006d54:	f7ff ff96 	bl	8006c84 <__sfp_lock_release>
 8006d58:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006d5c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006d60:	6025      	str	r5, [r4, #0]
 8006d62:	61a5      	str	r5, [r4, #24]
 8006d64:	2208      	movs	r2, #8
 8006d66:	4629      	mov	r1, r5
 8006d68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006d6c:	f7fe f85e 	bl	8004e2c <memset>
 8006d70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006d74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006d78:	4620      	mov	r0, r4
 8006d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d7c:	3468      	adds	r4, #104	; 0x68
 8006d7e:	e7d9      	b.n	8006d34 <__sfp+0x1c>
 8006d80:	2104      	movs	r1, #4
 8006d82:	4638      	mov	r0, r7
 8006d84:	f7ff ff62 	bl	8006c4c <__sfmoreglue>
 8006d88:	4604      	mov	r4, r0
 8006d8a:	6030      	str	r0, [r6, #0]
 8006d8c:	2800      	cmp	r0, #0
 8006d8e:	d1d5      	bne.n	8006d3c <__sfp+0x24>
 8006d90:	f7ff ff78 	bl	8006c84 <__sfp_lock_release>
 8006d94:	230c      	movs	r3, #12
 8006d96:	603b      	str	r3, [r7, #0]
 8006d98:	e7ee      	b.n	8006d78 <__sfp+0x60>
 8006d9a:	bf00      	nop
 8006d9c:	08008400 	.word	0x08008400
 8006da0:	ffff0001 	.word	0xffff0001

08006da4 <fiprintf>:
 8006da4:	b40e      	push	{r1, r2, r3}
 8006da6:	b503      	push	{r0, r1, lr}
 8006da8:	4601      	mov	r1, r0
 8006daa:	ab03      	add	r3, sp, #12
 8006dac:	4805      	ldr	r0, [pc, #20]	; (8006dc4 <fiprintf+0x20>)
 8006dae:	f853 2b04 	ldr.w	r2, [r3], #4
 8006db2:	6800      	ldr	r0, [r0, #0]
 8006db4:	9301      	str	r3, [sp, #4]
 8006db6:	f000 fd4d 	bl	8007854 <_vfiprintf_r>
 8006dba:	b002      	add	sp, #8
 8006dbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006dc0:	b003      	add	sp, #12
 8006dc2:	4770      	bx	lr
 8006dc4:	2000000c 	.word	0x2000000c

08006dc8 <_fwalk_reent>:
 8006dc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006dcc:	4606      	mov	r6, r0
 8006dce:	4688      	mov	r8, r1
 8006dd0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006dd4:	2700      	movs	r7, #0
 8006dd6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006dda:	f1b9 0901 	subs.w	r9, r9, #1
 8006dde:	d505      	bpl.n	8006dec <_fwalk_reent+0x24>
 8006de0:	6824      	ldr	r4, [r4, #0]
 8006de2:	2c00      	cmp	r4, #0
 8006de4:	d1f7      	bne.n	8006dd6 <_fwalk_reent+0xe>
 8006de6:	4638      	mov	r0, r7
 8006de8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dec:	89ab      	ldrh	r3, [r5, #12]
 8006dee:	2b01      	cmp	r3, #1
 8006df0:	d907      	bls.n	8006e02 <_fwalk_reent+0x3a>
 8006df2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006df6:	3301      	adds	r3, #1
 8006df8:	d003      	beq.n	8006e02 <_fwalk_reent+0x3a>
 8006dfa:	4629      	mov	r1, r5
 8006dfc:	4630      	mov	r0, r6
 8006dfe:	47c0      	blx	r8
 8006e00:	4307      	orrs	r7, r0
 8006e02:	3568      	adds	r5, #104	; 0x68
 8006e04:	e7e9      	b.n	8006dda <_fwalk_reent+0x12>
	...

08006e08 <_localeconv_r>:
 8006e08:	4800      	ldr	r0, [pc, #0]	; (8006e0c <_localeconv_r+0x4>)
 8006e0a:	4770      	bx	lr
 8006e0c:	20000160 	.word	0x20000160

08006e10 <__retarget_lock_init_recursive>:
 8006e10:	4770      	bx	lr

08006e12 <__retarget_lock_acquire_recursive>:
 8006e12:	4770      	bx	lr

08006e14 <__retarget_lock_release_recursive>:
 8006e14:	4770      	bx	lr

08006e16 <__swhatbuf_r>:
 8006e16:	b570      	push	{r4, r5, r6, lr}
 8006e18:	460e      	mov	r6, r1
 8006e1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e1e:	2900      	cmp	r1, #0
 8006e20:	b096      	sub	sp, #88	; 0x58
 8006e22:	4614      	mov	r4, r2
 8006e24:	461d      	mov	r5, r3
 8006e26:	da08      	bge.n	8006e3a <__swhatbuf_r+0x24>
 8006e28:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	602a      	str	r2, [r5, #0]
 8006e30:	061a      	lsls	r2, r3, #24
 8006e32:	d410      	bmi.n	8006e56 <__swhatbuf_r+0x40>
 8006e34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e38:	e00e      	b.n	8006e58 <__swhatbuf_r+0x42>
 8006e3a:	466a      	mov	r2, sp
 8006e3c:	f000 ff00 	bl	8007c40 <_fstat_r>
 8006e40:	2800      	cmp	r0, #0
 8006e42:	dbf1      	blt.n	8006e28 <__swhatbuf_r+0x12>
 8006e44:	9a01      	ldr	r2, [sp, #4]
 8006e46:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006e4a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006e4e:	425a      	negs	r2, r3
 8006e50:	415a      	adcs	r2, r3
 8006e52:	602a      	str	r2, [r5, #0]
 8006e54:	e7ee      	b.n	8006e34 <__swhatbuf_r+0x1e>
 8006e56:	2340      	movs	r3, #64	; 0x40
 8006e58:	2000      	movs	r0, #0
 8006e5a:	6023      	str	r3, [r4, #0]
 8006e5c:	b016      	add	sp, #88	; 0x58
 8006e5e:	bd70      	pop	{r4, r5, r6, pc}

08006e60 <__smakebuf_r>:
 8006e60:	898b      	ldrh	r3, [r1, #12]
 8006e62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006e64:	079d      	lsls	r5, r3, #30
 8006e66:	4606      	mov	r6, r0
 8006e68:	460c      	mov	r4, r1
 8006e6a:	d507      	bpl.n	8006e7c <__smakebuf_r+0x1c>
 8006e6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006e70:	6023      	str	r3, [r4, #0]
 8006e72:	6123      	str	r3, [r4, #16]
 8006e74:	2301      	movs	r3, #1
 8006e76:	6163      	str	r3, [r4, #20]
 8006e78:	b002      	add	sp, #8
 8006e7a:	bd70      	pop	{r4, r5, r6, pc}
 8006e7c:	ab01      	add	r3, sp, #4
 8006e7e:	466a      	mov	r2, sp
 8006e80:	f7ff ffc9 	bl	8006e16 <__swhatbuf_r>
 8006e84:	9900      	ldr	r1, [sp, #0]
 8006e86:	4605      	mov	r5, r0
 8006e88:	4630      	mov	r0, r6
 8006e8a:	f000 fc45 	bl	8007718 <_malloc_r>
 8006e8e:	b948      	cbnz	r0, 8006ea4 <__smakebuf_r+0x44>
 8006e90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e94:	059a      	lsls	r2, r3, #22
 8006e96:	d4ef      	bmi.n	8006e78 <__smakebuf_r+0x18>
 8006e98:	f023 0303 	bic.w	r3, r3, #3
 8006e9c:	f043 0302 	orr.w	r3, r3, #2
 8006ea0:	81a3      	strh	r3, [r4, #12]
 8006ea2:	e7e3      	b.n	8006e6c <__smakebuf_r+0xc>
 8006ea4:	4b0d      	ldr	r3, [pc, #52]	; (8006edc <__smakebuf_r+0x7c>)
 8006ea6:	62b3      	str	r3, [r6, #40]	; 0x28
 8006ea8:	89a3      	ldrh	r3, [r4, #12]
 8006eaa:	6020      	str	r0, [r4, #0]
 8006eac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006eb0:	81a3      	strh	r3, [r4, #12]
 8006eb2:	9b00      	ldr	r3, [sp, #0]
 8006eb4:	6163      	str	r3, [r4, #20]
 8006eb6:	9b01      	ldr	r3, [sp, #4]
 8006eb8:	6120      	str	r0, [r4, #16]
 8006eba:	b15b      	cbz	r3, 8006ed4 <__smakebuf_r+0x74>
 8006ebc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ec0:	4630      	mov	r0, r6
 8006ec2:	f000 fecf 	bl	8007c64 <_isatty_r>
 8006ec6:	b128      	cbz	r0, 8006ed4 <__smakebuf_r+0x74>
 8006ec8:	89a3      	ldrh	r3, [r4, #12]
 8006eca:	f023 0303 	bic.w	r3, r3, #3
 8006ece:	f043 0301 	orr.w	r3, r3, #1
 8006ed2:	81a3      	strh	r3, [r4, #12]
 8006ed4:	89a0      	ldrh	r0, [r4, #12]
 8006ed6:	4305      	orrs	r5, r0
 8006ed8:	81a5      	strh	r5, [r4, #12]
 8006eda:	e7cd      	b.n	8006e78 <__smakebuf_r+0x18>
 8006edc:	08006c41 	.word	0x08006c41

08006ee0 <malloc>:
 8006ee0:	4b02      	ldr	r3, [pc, #8]	; (8006eec <malloc+0xc>)
 8006ee2:	4601      	mov	r1, r0
 8006ee4:	6818      	ldr	r0, [r3, #0]
 8006ee6:	f000 bc17 	b.w	8007718 <_malloc_r>
 8006eea:	bf00      	nop
 8006eec:	2000000c 	.word	0x2000000c

08006ef0 <memcpy>:
 8006ef0:	440a      	add	r2, r1
 8006ef2:	4291      	cmp	r1, r2
 8006ef4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006ef8:	d100      	bne.n	8006efc <memcpy+0xc>
 8006efa:	4770      	bx	lr
 8006efc:	b510      	push	{r4, lr}
 8006efe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f06:	4291      	cmp	r1, r2
 8006f08:	d1f9      	bne.n	8006efe <memcpy+0xe>
 8006f0a:	bd10      	pop	{r4, pc}

08006f0c <_Balloc>:
 8006f0c:	b570      	push	{r4, r5, r6, lr}
 8006f0e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006f10:	4604      	mov	r4, r0
 8006f12:	460d      	mov	r5, r1
 8006f14:	b976      	cbnz	r6, 8006f34 <_Balloc+0x28>
 8006f16:	2010      	movs	r0, #16
 8006f18:	f7ff ffe2 	bl	8006ee0 <malloc>
 8006f1c:	4602      	mov	r2, r0
 8006f1e:	6260      	str	r0, [r4, #36]	; 0x24
 8006f20:	b920      	cbnz	r0, 8006f2c <_Balloc+0x20>
 8006f22:	4b18      	ldr	r3, [pc, #96]	; (8006f84 <_Balloc+0x78>)
 8006f24:	4818      	ldr	r0, [pc, #96]	; (8006f88 <_Balloc+0x7c>)
 8006f26:	2166      	movs	r1, #102	; 0x66
 8006f28:	f7fe ff0c 	bl	8005d44 <__assert_func>
 8006f2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f30:	6006      	str	r6, [r0, #0]
 8006f32:	60c6      	str	r6, [r0, #12]
 8006f34:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006f36:	68f3      	ldr	r3, [r6, #12]
 8006f38:	b183      	cbz	r3, 8006f5c <_Balloc+0x50>
 8006f3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f3c:	68db      	ldr	r3, [r3, #12]
 8006f3e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006f42:	b9b8      	cbnz	r0, 8006f74 <_Balloc+0x68>
 8006f44:	2101      	movs	r1, #1
 8006f46:	fa01 f605 	lsl.w	r6, r1, r5
 8006f4a:	1d72      	adds	r2, r6, #5
 8006f4c:	0092      	lsls	r2, r2, #2
 8006f4e:	4620      	mov	r0, r4
 8006f50:	f000 fb60 	bl	8007614 <_calloc_r>
 8006f54:	b160      	cbz	r0, 8006f70 <_Balloc+0x64>
 8006f56:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006f5a:	e00e      	b.n	8006f7a <_Balloc+0x6e>
 8006f5c:	2221      	movs	r2, #33	; 0x21
 8006f5e:	2104      	movs	r1, #4
 8006f60:	4620      	mov	r0, r4
 8006f62:	f000 fb57 	bl	8007614 <_calloc_r>
 8006f66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f68:	60f0      	str	r0, [r6, #12]
 8006f6a:	68db      	ldr	r3, [r3, #12]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d1e4      	bne.n	8006f3a <_Balloc+0x2e>
 8006f70:	2000      	movs	r0, #0
 8006f72:	bd70      	pop	{r4, r5, r6, pc}
 8006f74:	6802      	ldr	r2, [r0, #0]
 8006f76:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006f80:	e7f7      	b.n	8006f72 <_Balloc+0x66>
 8006f82:	bf00      	nop
 8006f84:	08008438 	.word	0x08008438
 8006f88:	080086c4 	.word	0x080086c4

08006f8c <_Bfree>:
 8006f8c:	b570      	push	{r4, r5, r6, lr}
 8006f8e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006f90:	4605      	mov	r5, r0
 8006f92:	460c      	mov	r4, r1
 8006f94:	b976      	cbnz	r6, 8006fb4 <_Bfree+0x28>
 8006f96:	2010      	movs	r0, #16
 8006f98:	f7ff ffa2 	bl	8006ee0 <malloc>
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	6268      	str	r0, [r5, #36]	; 0x24
 8006fa0:	b920      	cbnz	r0, 8006fac <_Bfree+0x20>
 8006fa2:	4b09      	ldr	r3, [pc, #36]	; (8006fc8 <_Bfree+0x3c>)
 8006fa4:	4809      	ldr	r0, [pc, #36]	; (8006fcc <_Bfree+0x40>)
 8006fa6:	218a      	movs	r1, #138	; 0x8a
 8006fa8:	f7fe fecc 	bl	8005d44 <__assert_func>
 8006fac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006fb0:	6006      	str	r6, [r0, #0]
 8006fb2:	60c6      	str	r6, [r0, #12]
 8006fb4:	b13c      	cbz	r4, 8006fc6 <_Bfree+0x3a>
 8006fb6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006fb8:	6862      	ldr	r2, [r4, #4]
 8006fba:	68db      	ldr	r3, [r3, #12]
 8006fbc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006fc0:	6021      	str	r1, [r4, #0]
 8006fc2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006fc6:	bd70      	pop	{r4, r5, r6, pc}
 8006fc8:	08008438 	.word	0x08008438
 8006fcc:	080086c4 	.word	0x080086c4

08006fd0 <__multadd>:
 8006fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fd4:	690d      	ldr	r5, [r1, #16]
 8006fd6:	4607      	mov	r7, r0
 8006fd8:	460c      	mov	r4, r1
 8006fda:	461e      	mov	r6, r3
 8006fdc:	f101 0c14 	add.w	ip, r1, #20
 8006fe0:	2000      	movs	r0, #0
 8006fe2:	f8dc 3000 	ldr.w	r3, [ip]
 8006fe6:	b299      	uxth	r1, r3
 8006fe8:	fb02 6101 	mla	r1, r2, r1, r6
 8006fec:	0c1e      	lsrs	r6, r3, #16
 8006fee:	0c0b      	lsrs	r3, r1, #16
 8006ff0:	fb02 3306 	mla	r3, r2, r6, r3
 8006ff4:	b289      	uxth	r1, r1
 8006ff6:	3001      	adds	r0, #1
 8006ff8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006ffc:	4285      	cmp	r5, r0
 8006ffe:	f84c 1b04 	str.w	r1, [ip], #4
 8007002:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007006:	dcec      	bgt.n	8006fe2 <__multadd+0x12>
 8007008:	b30e      	cbz	r6, 800704e <__multadd+0x7e>
 800700a:	68a3      	ldr	r3, [r4, #8]
 800700c:	42ab      	cmp	r3, r5
 800700e:	dc19      	bgt.n	8007044 <__multadd+0x74>
 8007010:	6861      	ldr	r1, [r4, #4]
 8007012:	4638      	mov	r0, r7
 8007014:	3101      	adds	r1, #1
 8007016:	f7ff ff79 	bl	8006f0c <_Balloc>
 800701a:	4680      	mov	r8, r0
 800701c:	b928      	cbnz	r0, 800702a <__multadd+0x5a>
 800701e:	4602      	mov	r2, r0
 8007020:	4b0c      	ldr	r3, [pc, #48]	; (8007054 <__multadd+0x84>)
 8007022:	480d      	ldr	r0, [pc, #52]	; (8007058 <__multadd+0x88>)
 8007024:	21b5      	movs	r1, #181	; 0xb5
 8007026:	f7fe fe8d 	bl	8005d44 <__assert_func>
 800702a:	6922      	ldr	r2, [r4, #16]
 800702c:	3202      	adds	r2, #2
 800702e:	f104 010c 	add.w	r1, r4, #12
 8007032:	0092      	lsls	r2, r2, #2
 8007034:	300c      	adds	r0, #12
 8007036:	f7ff ff5b 	bl	8006ef0 <memcpy>
 800703a:	4621      	mov	r1, r4
 800703c:	4638      	mov	r0, r7
 800703e:	f7ff ffa5 	bl	8006f8c <_Bfree>
 8007042:	4644      	mov	r4, r8
 8007044:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007048:	3501      	adds	r5, #1
 800704a:	615e      	str	r6, [r3, #20]
 800704c:	6125      	str	r5, [r4, #16]
 800704e:	4620      	mov	r0, r4
 8007050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007054:	08008651 	.word	0x08008651
 8007058:	080086c4 	.word	0x080086c4

0800705c <__hi0bits>:
 800705c:	0c03      	lsrs	r3, r0, #16
 800705e:	041b      	lsls	r3, r3, #16
 8007060:	b9d3      	cbnz	r3, 8007098 <__hi0bits+0x3c>
 8007062:	0400      	lsls	r0, r0, #16
 8007064:	2310      	movs	r3, #16
 8007066:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800706a:	bf04      	itt	eq
 800706c:	0200      	lsleq	r0, r0, #8
 800706e:	3308      	addeq	r3, #8
 8007070:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007074:	bf04      	itt	eq
 8007076:	0100      	lsleq	r0, r0, #4
 8007078:	3304      	addeq	r3, #4
 800707a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800707e:	bf04      	itt	eq
 8007080:	0080      	lsleq	r0, r0, #2
 8007082:	3302      	addeq	r3, #2
 8007084:	2800      	cmp	r0, #0
 8007086:	db05      	blt.n	8007094 <__hi0bits+0x38>
 8007088:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800708c:	f103 0301 	add.w	r3, r3, #1
 8007090:	bf08      	it	eq
 8007092:	2320      	moveq	r3, #32
 8007094:	4618      	mov	r0, r3
 8007096:	4770      	bx	lr
 8007098:	2300      	movs	r3, #0
 800709a:	e7e4      	b.n	8007066 <__hi0bits+0xa>

0800709c <__lo0bits>:
 800709c:	6803      	ldr	r3, [r0, #0]
 800709e:	f013 0207 	ands.w	r2, r3, #7
 80070a2:	4601      	mov	r1, r0
 80070a4:	d00b      	beq.n	80070be <__lo0bits+0x22>
 80070a6:	07da      	lsls	r2, r3, #31
 80070a8:	d423      	bmi.n	80070f2 <__lo0bits+0x56>
 80070aa:	0798      	lsls	r0, r3, #30
 80070ac:	bf49      	itett	mi
 80070ae:	085b      	lsrmi	r3, r3, #1
 80070b0:	089b      	lsrpl	r3, r3, #2
 80070b2:	2001      	movmi	r0, #1
 80070b4:	600b      	strmi	r3, [r1, #0]
 80070b6:	bf5c      	itt	pl
 80070b8:	600b      	strpl	r3, [r1, #0]
 80070ba:	2002      	movpl	r0, #2
 80070bc:	4770      	bx	lr
 80070be:	b298      	uxth	r0, r3
 80070c0:	b9a8      	cbnz	r0, 80070ee <__lo0bits+0x52>
 80070c2:	0c1b      	lsrs	r3, r3, #16
 80070c4:	2010      	movs	r0, #16
 80070c6:	b2da      	uxtb	r2, r3
 80070c8:	b90a      	cbnz	r2, 80070ce <__lo0bits+0x32>
 80070ca:	3008      	adds	r0, #8
 80070cc:	0a1b      	lsrs	r3, r3, #8
 80070ce:	071a      	lsls	r2, r3, #28
 80070d0:	bf04      	itt	eq
 80070d2:	091b      	lsreq	r3, r3, #4
 80070d4:	3004      	addeq	r0, #4
 80070d6:	079a      	lsls	r2, r3, #30
 80070d8:	bf04      	itt	eq
 80070da:	089b      	lsreq	r3, r3, #2
 80070dc:	3002      	addeq	r0, #2
 80070de:	07da      	lsls	r2, r3, #31
 80070e0:	d403      	bmi.n	80070ea <__lo0bits+0x4e>
 80070e2:	085b      	lsrs	r3, r3, #1
 80070e4:	f100 0001 	add.w	r0, r0, #1
 80070e8:	d005      	beq.n	80070f6 <__lo0bits+0x5a>
 80070ea:	600b      	str	r3, [r1, #0]
 80070ec:	4770      	bx	lr
 80070ee:	4610      	mov	r0, r2
 80070f0:	e7e9      	b.n	80070c6 <__lo0bits+0x2a>
 80070f2:	2000      	movs	r0, #0
 80070f4:	4770      	bx	lr
 80070f6:	2020      	movs	r0, #32
 80070f8:	4770      	bx	lr
	...

080070fc <__i2b>:
 80070fc:	b510      	push	{r4, lr}
 80070fe:	460c      	mov	r4, r1
 8007100:	2101      	movs	r1, #1
 8007102:	f7ff ff03 	bl	8006f0c <_Balloc>
 8007106:	4602      	mov	r2, r0
 8007108:	b928      	cbnz	r0, 8007116 <__i2b+0x1a>
 800710a:	4b05      	ldr	r3, [pc, #20]	; (8007120 <__i2b+0x24>)
 800710c:	4805      	ldr	r0, [pc, #20]	; (8007124 <__i2b+0x28>)
 800710e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007112:	f7fe fe17 	bl	8005d44 <__assert_func>
 8007116:	2301      	movs	r3, #1
 8007118:	6144      	str	r4, [r0, #20]
 800711a:	6103      	str	r3, [r0, #16]
 800711c:	bd10      	pop	{r4, pc}
 800711e:	bf00      	nop
 8007120:	08008651 	.word	0x08008651
 8007124:	080086c4 	.word	0x080086c4

08007128 <__multiply>:
 8007128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800712c:	4691      	mov	r9, r2
 800712e:	690a      	ldr	r2, [r1, #16]
 8007130:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007134:	429a      	cmp	r2, r3
 8007136:	bfb8      	it	lt
 8007138:	460b      	movlt	r3, r1
 800713a:	460c      	mov	r4, r1
 800713c:	bfbc      	itt	lt
 800713e:	464c      	movlt	r4, r9
 8007140:	4699      	movlt	r9, r3
 8007142:	6927      	ldr	r7, [r4, #16]
 8007144:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007148:	68a3      	ldr	r3, [r4, #8]
 800714a:	6861      	ldr	r1, [r4, #4]
 800714c:	eb07 060a 	add.w	r6, r7, sl
 8007150:	42b3      	cmp	r3, r6
 8007152:	b085      	sub	sp, #20
 8007154:	bfb8      	it	lt
 8007156:	3101      	addlt	r1, #1
 8007158:	f7ff fed8 	bl	8006f0c <_Balloc>
 800715c:	b930      	cbnz	r0, 800716c <__multiply+0x44>
 800715e:	4602      	mov	r2, r0
 8007160:	4b44      	ldr	r3, [pc, #272]	; (8007274 <__multiply+0x14c>)
 8007162:	4845      	ldr	r0, [pc, #276]	; (8007278 <__multiply+0x150>)
 8007164:	f240 115d 	movw	r1, #349	; 0x15d
 8007168:	f7fe fdec 	bl	8005d44 <__assert_func>
 800716c:	f100 0514 	add.w	r5, r0, #20
 8007170:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007174:	462b      	mov	r3, r5
 8007176:	2200      	movs	r2, #0
 8007178:	4543      	cmp	r3, r8
 800717a:	d321      	bcc.n	80071c0 <__multiply+0x98>
 800717c:	f104 0314 	add.w	r3, r4, #20
 8007180:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007184:	f109 0314 	add.w	r3, r9, #20
 8007188:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800718c:	9202      	str	r2, [sp, #8]
 800718e:	1b3a      	subs	r2, r7, r4
 8007190:	3a15      	subs	r2, #21
 8007192:	f022 0203 	bic.w	r2, r2, #3
 8007196:	3204      	adds	r2, #4
 8007198:	f104 0115 	add.w	r1, r4, #21
 800719c:	428f      	cmp	r7, r1
 800719e:	bf38      	it	cc
 80071a0:	2204      	movcc	r2, #4
 80071a2:	9201      	str	r2, [sp, #4]
 80071a4:	9a02      	ldr	r2, [sp, #8]
 80071a6:	9303      	str	r3, [sp, #12]
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d80c      	bhi.n	80071c6 <__multiply+0x9e>
 80071ac:	2e00      	cmp	r6, #0
 80071ae:	dd03      	ble.n	80071b8 <__multiply+0x90>
 80071b0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d05a      	beq.n	800726e <__multiply+0x146>
 80071b8:	6106      	str	r6, [r0, #16]
 80071ba:	b005      	add	sp, #20
 80071bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071c0:	f843 2b04 	str.w	r2, [r3], #4
 80071c4:	e7d8      	b.n	8007178 <__multiply+0x50>
 80071c6:	f8b3 a000 	ldrh.w	sl, [r3]
 80071ca:	f1ba 0f00 	cmp.w	sl, #0
 80071ce:	d024      	beq.n	800721a <__multiply+0xf2>
 80071d0:	f104 0e14 	add.w	lr, r4, #20
 80071d4:	46a9      	mov	r9, r5
 80071d6:	f04f 0c00 	mov.w	ip, #0
 80071da:	f85e 2b04 	ldr.w	r2, [lr], #4
 80071de:	f8d9 1000 	ldr.w	r1, [r9]
 80071e2:	fa1f fb82 	uxth.w	fp, r2
 80071e6:	b289      	uxth	r1, r1
 80071e8:	fb0a 110b 	mla	r1, sl, fp, r1
 80071ec:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80071f0:	f8d9 2000 	ldr.w	r2, [r9]
 80071f4:	4461      	add	r1, ip
 80071f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80071fa:	fb0a c20b 	mla	r2, sl, fp, ip
 80071fe:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007202:	b289      	uxth	r1, r1
 8007204:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007208:	4577      	cmp	r7, lr
 800720a:	f849 1b04 	str.w	r1, [r9], #4
 800720e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007212:	d8e2      	bhi.n	80071da <__multiply+0xb2>
 8007214:	9a01      	ldr	r2, [sp, #4]
 8007216:	f845 c002 	str.w	ip, [r5, r2]
 800721a:	9a03      	ldr	r2, [sp, #12]
 800721c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007220:	3304      	adds	r3, #4
 8007222:	f1b9 0f00 	cmp.w	r9, #0
 8007226:	d020      	beq.n	800726a <__multiply+0x142>
 8007228:	6829      	ldr	r1, [r5, #0]
 800722a:	f104 0c14 	add.w	ip, r4, #20
 800722e:	46ae      	mov	lr, r5
 8007230:	f04f 0a00 	mov.w	sl, #0
 8007234:	f8bc b000 	ldrh.w	fp, [ip]
 8007238:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800723c:	fb09 220b 	mla	r2, r9, fp, r2
 8007240:	4492      	add	sl, r2
 8007242:	b289      	uxth	r1, r1
 8007244:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007248:	f84e 1b04 	str.w	r1, [lr], #4
 800724c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007250:	f8be 1000 	ldrh.w	r1, [lr]
 8007254:	0c12      	lsrs	r2, r2, #16
 8007256:	fb09 1102 	mla	r1, r9, r2, r1
 800725a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800725e:	4567      	cmp	r7, ip
 8007260:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007264:	d8e6      	bhi.n	8007234 <__multiply+0x10c>
 8007266:	9a01      	ldr	r2, [sp, #4]
 8007268:	50a9      	str	r1, [r5, r2]
 800726a:	3504      	adds	r5, #4
 800726c:	e79a      	b.n	80071a4 <__multiply+0x7c>
 800726e:	3e01      	subs	r6, #1
 8007270:	e79c      	b.n	80071ac <__multiply+0x84>
 8007272:	bf00      	nop
 8007274:	08008651 	.word	0x08008651
 8007278:	080086c4 	.word	0x080086c4

0800727c <__pow5mult>:
 800727c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007280:	4615      	mov	r5, r2
 8007282:	f012 0203 	ands.w	r2, r2, #3
 8007286:	4606      	mov	r6, r0
 8007288:	460f      	mov	r7, r1
 800728a:	d007      	beq.n	800729c <__pow5mult+0x20>
 800728c:	4c25      	ldr	r4, [pc, #148]	; (8007324 <__pow5mult+0xa8>)
 800728e:	3a01      	subs	r2, #1
 8007290:	2300      	movs	r3, #0
 8007292:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007296:	f7ff fe9b 	bl	8006fd0 <__multadd>
 800729a:	4607      	mov	r7, r0
 800729c:	10ad      	asrs	r5, r5, #2
 800729e:	d03d      	beq.n	800731c <__pow5mult+0xa0>
 80072a0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80072a2:	b97c      	cbnz	r4, 80072c4 <__pow5mult+0x48>
 80072a4:	2010      	movs	r0, #16
 80072a6:	f7ff fe1b 	bl	8006ee0 <malloc>
 80072aa:	4602      	mov	r2, r0
 80072ac:	6270      	str	r0, [r6, #36]	; 0x24
 80072ae:	b928      	cbnz	r0, 80072bc <__pow5mult+0x40>
 80072b0:	4b1d      	ldr	r3, [pc, #116]	; (8007328 <__pow5mult+0xac>)
 80072b2:	481e      	ldr	r0, [pc, #120]	; (800732c <__pow5mult+0xb0>)
 80072b4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80072b8:	f7fe fd44 	bl	8005d44 <__assert_func>
 80072bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80072c0:	6004      	str	r4, [r0, #0]
 80072c2:	60c4      	str	r4, [r0, #12]
 80072c4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80072c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80072cc:	b94c      	cbnz	r4, 80072e2 <__pow5mult+0x66>
 80072ce:	f240 2171 	movw	r1, #625	; 0x271
 80072d2:	4630      	mov	r0, r6
 80072d4:	f7ff ff12 	bl	80070fc <__i2b>
 80072d8:	2300      	movs	r3, #0
 80072da:	f8c8 0008 	str.w	r0, [r8, #8]
 80072de:	4604      	mov	r4, r0
 80072e0:	6003      	str	r3, [r0, #0]
 80072e2:	f04f 0900 	mov.w	r9, #0
 80072e6:	07eb      	lsls	r3, r5, #31
 80072e8:	d50a      	bpl.n	8007300 <__pow5mult+0x84>
 80072ea:	4639      	mov	r1, r7
 80072ec:	4622      	mov	r2, r4
 80072ee:	4630      	mov	r0, r6
 80072f0:	f7ff ff1a 	bl	8007128 <__multiply>
 80072f4:	4639      	mov	r1, r7
 80072f6:	4680      	mov	r8, r0
 80072f8:	4630      	mov	r0, r6
 80072fa:	f7ff fe47 	bl	8006f8c <_Bfree>
 80072fe:	4647      	mov	r7, r8
 8007300:	106d      	asrs	r5, r5, #1
 8007302:	d00b      	beq.n	800731c <__pow5mult+0xa0>
 8007304:	6820      	ldr	r0, [r4, #0]
 8007306:	b938      	cbnz	r0, 8007318 <__pow5mult+0x9c>
 8007308:	4622      	mov	r2, r4
 800730a:	4621      	mov	r1, r4
 800730c:	4630      	mov	r0, r6
 800730e:	f7ff ff0b 	bl	8007128 <__multiply>
 8007312:	6020      	str	r0, [r4, #0]
 8007314:	f8c0 9000 	str.w	r9, [r0]
 8007318:	4604      	mov	r4, r0
 800731a:	e7e4      	b.n	80072e6 <__pow5mult+0x6a>
 800731c:	4638      	mov	r0, r7
 800731e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007322:	bf00      	nop
 8007324:	08008810 	.word	0x08008810
 8007328:	08008438 	.word	0x08008438
 800732c:	080086c4 	.word	0x080086c4

08007330 <__lshift>:
 8007330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007334:	460c      	mov	r4, r1
 8007336:	6849      	ldr	r1, [r1, #4]
 8007338:	6923      	ldr	r3, [r4, #16]
 800733a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800733e:	68a3      	ldr	r3, [r4, #8]
 8007340:	4607      	mov	r7, r0
 8007342:	4691      	mov	r9, r2
 8007344:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007348:	f108 0601 	add.w	r6, r8, #1
 800734c:	42b3      	cmp	r3, r6
 800734e:	db0b      	blt.n	8007368 <__lshift+0x38>
 8007350:	4638      	mov	r0, r7
 8007352:	f7ff fddb 	bl	8006f0c <_Balloc>
 8007356:	4605      	mov	r5, r0
 8007358:	b948      	cbnz	r0, 800736e <__lshift+0x3e>
 800735a:	4602      	mov	r2, r0
 800735c:	4b2a      	ldr	r3, [pc, #168]	; (8007408 <__lshift+0xd8>)
 800735e:	482b      	ldr	r0, [pc, #172]	; (800740c <__lshift+0xdc>)
 8007360:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007364:	f7fe fcee 	bl	8005d44 <__assert_func>
 8007368:	3101      	adds	r1, #1
 800736a:	005b      	lsls	r3, r3, #1
 800736c:	e7ee      	b.n	800734c <__lshift+0x1c>
 800736e:	2300      	movs	r3, #0
 8007370:	f100 0114 	add.w	r1, r0, #20
 8007374:	f100 0210 	add.w	r2, r0, #16
 8007378:	4618      	mov	r0, r3
 800737a:	4553      	cmp	r3, sl
 800737c:	db37      	blt.n	80073ee <__lshift+0xbe>
 800737e:	6920      	ldr	r0, [r4, #16]
 8007380:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007384:	f104 0314 	add.w	r3, r4, #20
 8007388:	f019 091f 	ands.w	r9, r9, #31
 800738c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007390:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007394:	d02f      	beq.n	80073f6 <__lshift+0xc6>
 8007396:	f1c9 0e20 	rsb	lr, r9, #32
 800739a:	468a      	mov	sl, r1
 800739c:	f04f 0c00 	mov.w	ip, #0
 80073a0:	681a      	ldr	r2, [r3, #0]
 80073a2:	fa02 f209 	lsl.w	r2, r2, r9
 80073a6:	ea42 020c 	orr.w	r2, r2, ip
 80073aa:	f84a 2b04 	str.w	r2, [sl], #4
 80073ae:	f853 2b04 	ldr.w	r2, [r3], #4
 80073b2:	4298      	cmp	r0, r3
 80073b4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80073b8:	d8f2      	bhi.n	80073a0 <__lshift+0x70>
 80073ba:	1b03      	subs	r3, r0, r4
 80073bc:	3b15      	subs	r3, #21
 80073be:	f023 0303 	bic.w	r3, r3, #3
 80073c2:	3304      	adds	r3, #4
 80073c4:	f104 0215 	add.w	r2, r4, #21
 80073c8:	4290      	cmp	r0, r2
 80073ca:	bf38      	it	cc
 80073cc:	2304      	movcc	r3, #4
 80073ce:	f841 c003 	str.w	ip, [r1, r3]
 80073d2:	f1bc 0f00 	cmp.w	ip, #0
 80073d6:	d001      	beq.n	80073dc <__lshift+0xac>
 80073d8:	f108 0602 	add.w	r6, r8, #2
 80073dc:	3e01      	subs	r6, #1
 80073de:	4638      	mov	r0, r7
 80073e0:	612e      	str	r6, [r5, #16]
 80073e2:	4621      	mov	r1, r4
 80073e4:	f7ff fdd2 	bl	8006f8c <_Bfree>
 80073e8:	4628      	mov	r0, r5
 80073ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073ee:	f842 0f04 	str.w	r0, [r2, #4]!
 80073f2:	3301      	adds	r3, #1
 80073f4:	e7c1      	b.n	800737a <__lshift+0x4a>
 80073f6:	3904      	subs	r1, #4
 80073f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80073fc:	f841 2f04 	str.w	r2, [r1, #4]!
 8007400:	4298      	cmp	r0, r3
 8007402:	d8f9      	bhi.n	80073f8 <__lshift+0xc8>
 8007404:	e7ea      	b.n	80073dc <__lshift+0xac>
 8007406:	bf00      	nop
 8007408:	08008651 	.word	0x08008651
 800740c:	080086c4 	.word	0x080086c4

08007410 <__mcmp>:
 8007410:	b530      	push	{r4, r5, lr}
 8007412:	6902      	ldr	r2, [r0, #16]
 8007414:	690c      	ldr	r4, [r1, #16]
 8007416:	1b12      	subs	r2, r2, r4
 8007418:	d10e      	bne.n	8007438 <__mcmp+0x28>
 800741a:	f100 0314 	add.w	r3, r0, #20
 800741e:	3114      	adds	r1, #20
 8007420:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007424:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007428:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800742c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007430:	42a5      	cmp	r5, r4
 8007432:	d003      	beq.n	800743c <__mcmp+0x2c>
 8007434:	d305      	bcc.n	8007442 <__mcmp+0x32>
 8007436:	2201      	movs	r2, #1
 8007438:	4610      	mov	r0, r2
 800743a:	bd30      	pop	{r4, r5, pc}
 800743c:	4283      	cmp	r3, r0
 800743e:	d3f3      	bcc.n	8007428 <__mcmp+0x18>
 8007440:	e7fa      	b.n	8007438 <__mcmp+0x28>
 8007442:	f04f 32ff 	mov.w	r2, #4294967295
 8007446:	e7f7      	b.n	8007438 <__mcmp+0x28>

08007448 <__mdiff>:
 8007448:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800744c:	460c      	mov	r4, r1
 800744e:	4606      	mov	r6, r0
 8007450:	4611      	mov	r1, r2
 8007452:	4620      	mov	r0, r4
 8007454:	4690      	mov	r8, r2
 8007456:	f7ff ffdb 	bl	8007410 <__mcmp>
 800745a:	1e05      	subs	r5, r0, #0
 800745c:	d110      	bne.n	8007480 <__mdiff+0x38>
 800745e:	4629      	mov	r1, r5
 8007460:	4630      	mov	r0, r6
 8007462:	f7ff fd53 	bl	8006f0c <_Balloc>
 8007466:	b930      	cbnz	r0, 8007476 <__mdiff+0x2e>
 8007468:	4b3a      	ldr	r3, [pc, #232]	; (8007554 <__mdiff+0x10c>)
 800746a:	4602      	mov	r2, r0
 800746c:	f240 2132 	movw	r1, #562	; 0x232
 8007470:	4839      	ldr	r0, [pc, #228]	; (8007558 <__mdiff+0x110>)
 8007472:	f7fe fc67 	bl	8005d44 <__assert_func>
 8007476:	2301      	movs	r3, #1
 8007478:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800747c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007480:	bfa4      	itt	ge
 8007482:	4643      	movge	r3, r8
 8007484:	46a0      	movge	r8, r4
 8007486:	4630      	mov	r0, r6
 8007488:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800748c:	bfa6      	itte	ge
 800748e:	461c      	movge	r4, r3
 8007490:	2500      	movge	r5, #0
 8007492:	2501      	movlt	r5, #1
 8007494:	f7ff fd3a 	bl	8006f0c <_Balloc>
 8007498:	b920      	cbnz	r0, 80074a4 <__mdiff+0x5c>
 800749a:	4b2e      	ldr	r3, [pc, #184]	; (8007554 <__mdiff+0x10c>)
 800749c:	4602      	mov	r2, r0
 800749e:	f44f 7110 	mov.w	r1, #576	; 0x240
 80074a2:	e7e5      	b.n	8007470 <__mdiff+0x28>
 80074a4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80074a8:	6926      	ldr	r6, [r4, #16]
 80074aa:	60c5      	str	r5, [r0, #12]
 80074ac:	f104 0914 	add.w	r9, r4, #20
 80074b0:	f108 0514 	add.w	r5, r8, #20
 80074b4:	f100 0e14 	add.w	lr, r0, #20
 80074b8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80074bc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80074c0:	f108 0210 	add.w	r2, r8, #16
 80074c4:	46f2      	mov	sl, lr
 80074c6:	2100      	movs	r1, #0
 80074c8:	f859 3b04 	ldr.w	r3, [r9], #4
 80074cc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80074d0:	fa1f f883 	uxth.w	r8, r3
 80074d4:	fa11 f18b 	uxtah	r1, r1, fp
 80074d8:	0c1b      	lsrs	r3, r3, #16
 80074da:	eba1 0808 	sub.w	r8, r1, r8
 80074de:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80074e2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80074e6:	fa1f f888 	uxth.w	r8, r8
 80074ea:	1419      	asrs	r1, r3, #16
 80074ec:	454e      	cmp	r6, r9
 80074ee:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80074f2:	f84a 3b04 	str.w	r3, [sl], #4
 80074f6:	d8e7      	bhi.n	80074c8 <__mdiff+0x80>
 80074f8:	1b33      	subs	r3, r6, r4
 80074fa:	3b15      	subs	r3, #21
 80074fc:	f023 0303 	bic.w	r3, r3, #3
 8007500:	3304      	adds	r3, #4
 8007502:	3415      	adds	r4, #21
 8007504:	42a6      	cmp	r6, r4
 8007506:	bf38      	it	cc
 8007508:	2304      	movcc	r3, #4
 800750a:	441d      	add	r5, r3
 800750c:	4473      	add	r3, lr
 800750e:	469e      	mov	lr, r3
 8007510:	462e      	mov	r6, r5
 8007512:	4566      	cmp	r6, ip
 8007514:	d30e      	bcc.n	8007534 <__mdiff+0xec>
 8007516:	f10c 0203 	add.w	r2, ip, #3
 800751a:	1b52      	subs	r2, r2, r5
 800751c:	f022 0203 	bic.w	r2, r2, #3
 8007520:	3d03      	subs	r5, #3
 8007522:	45ac      	cmp	ip, r5
 8007524:	bf38      	it	cc
 8007526:	2200      	movcc	r2, #0
 8007528:	441a      	add	r2, r3
 800752a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800752e:	b17b      	cbz	r3, 8007550 <__mdiff+0x108>
 8007530:	6107      	str	r7, [r0, #16]
 8007532:	e7a3      	b.n	800747c <__mdiff+0x34>
 8007534:	f856 8b04 	ldr.w	r8, [r6], #4
 8007538:	fa11 f288 	uxtah	r2, r1, r8
 800753c:	1414      	asrs	r4, r2, #16
 800753e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007542:	b292      	uxth	r2, r2
 8007544:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007548:	f84e 2b04 	str.w	r2, [lr], #4
 800754c:	1421      	asrs	r1, r4, #16
 800754e:	e7e0      	b.n	8007512 <__mdiff+0xca>
 8007550:	3f01      	subs	r7, #1
 8007552:	e7ea      	b.n	800752a <__mdiff+0xe2>
 8007554:	08008651 	.word	0x08008651
 8007558:	080086c4 	.word	0x080086c4

0800755c <__d2b>:
 800755c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007560:	4689      	mov	r9, r1
 8007562:	2101      	movs	r1, #1
 8007564:	ec57 6b10 	vmov	r6, r7, d0
 8007568:	4690      	mov	r8, r2
 800756a:	f7ff fccf 	bl	8006f0c <_Balloc>
 800756e:	4604      	mov	r4, r0
 8007570:	b930      	cbnz	r0, 8007580 <__d2b+0x24>
 8007572:	4602      	mov	r2, r0
 8007574:	4b25      	ldr	r3, [pc, #148]	; (800760c <__d2b+0xb0>)
 8007576:	4826      	ldr	r0, [pc, #152]	; (8007610 <__d2b+0xb4>)
 8007578:	f240 310a 	movw	r1, #778	; 0x30a
 800757c:	f7fe fbe2 	bl	8005d44 <__assert_func>
 8007580:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007584:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007588:	bb35      	cbnz	r5, 80075d8 <__d2b+0x7c>
 800758a:	2e00      	cmp	r6, #0
 800758c:	9301      	str	r3, [sp, #4]
 800758e:	d028      	beq.n	80075e2 <__d2b+0x86>
 8007590:	4668      	mov	r0, sp
 8007592:	9600      	str	r6, [sp, #0]
 8007594:	f7ff fd82 	bl	800709c <__lo0bits>
 8007598:	9900      	ldr	r1, [sp, #0]
 800759a:	b300      	cbz	r0, 80075de <__d2b+0x82>
 800759c:	9a01      	ldr	r2, [sp, #4]
 800759e:	f1c0 0320 	rsb	r3, r0, #32
 80075a2:	fa02 f303 	lsl.w	r3, r2, r3
 80075a6:	430b      	orrs	r3, r1
 80075a8:	40c2      	lsrs	r2, r0
 80075aa:	6163      	str	r3, [r4, #20]
 80075ac:	9201      	str	r2, [sp, #4]
 80075ae:	9b01      	ldr	r3, [sp, #4]
 80075b0:	61a3      	str	r3, [r4, #24]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	bf14      	ite	ne
 80075b6:	2202      	movne	r2, #2
 80075b8:	2201      	moveq	r2, #1
 80075ba:	6122      	str	r2, [r4, #16]
 80075bc:	b1d5      	cbz	r5, 80075f4 <__d2b+0x98>
 80075be:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80075c2:	4405      	add	r5, r0
 80075c4:	f8c9 5000 	str.w	r5, [r9]
 80075c8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80075cc:	f8c8 0000 	str.w	r0, [r8]
 80075d0:	4620      	mov	r0, r4
 80075d2:	b003      	add	sp, #12
 80075d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80075d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80075dc:	e7d5      	b.n	800758a <__d2b+0x2e>
 80075de:	6161      	str	r1, [r4, #20]
 80075e0:	e7e5      	b.n	80075ae <__d2b+0x52>
 80075e2:	a801      	add	r0, sp, #4
 80075e4:	f7ff fd5a 	bl	800709c <__lo0bits>
 80075e8:	9b01      	ldr	r3, [sp, #4]
 80075ea:	6163      	str	r3, [r4, #20]
 80075ec:	2201      	movs	r2, #1
 80075ee:	6122      	str	r2, [r4, #16]
 80075f0:	3020      	adds	r0, #32
 80075f2:	e7e3      	b.n	80075bc <__d2b+0x60>
 80075f4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80075f8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80075fc:	f8c9 0000 	str.w	r0, [r9]
 8007600:	6918      	ldr	r0, [r3, #16]
 8007602:	f7ff fd2b 	bl	800705c <__hi0bits>
 8007606:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800760a:	e7df      	b.n	80075cc <__d2b+0x70>
 800760c:	08008651 	.word	0x08008651
 8007610:	080086c4 	.word	0x080086c4

08007614 <_calloc_r>:
 8007614:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007616:	fba1 2402 	umull	r2, r4, r1, r2
 800761a:	b94c      	cbnz	r4, 8007630 <_calloc_r+0x1c>
 800761c:	4611      	mov	r1, r2
 800761e:	9201      	str	r2, [sp, #4]
 8007620:	f000 f87a 	bl	8007718 <_malloc_r>
 8007624:	9a01      	ldr	r2, [sp, #4]
 8007626:	4605      	mov	r5, r0
 8007628:	b930      	cbnz	r0, 8007638 <_calloc_r+0x24>
 800762a:	4628      	mov	r0, r5
 800762c:	b003      	add	sp, #12
 800762e:	bd30      	pop	{r4, r5, pc}
 8007630:	220c      	movs	r2, #12
 8007632:	6002      	str	r2, [r0, #0]
 8007634:	2500      	movs	r5, #0
 8007636:	e7f8      	b.n	800762a <_calloc_r+0x16>
 8007638:	4621      	mov	r1, r4
 800763a:	f7fd fbf7 	bl	8004e2c <memset>
 800763e:	e7f4      	b.n	800762a <_calloc_r+0x16>

08007640 <_free_r>:
 8007640:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007642:	2900      	cmp	r1, #0
 8007644:	d044      	beq.n	80076d0 <_free_r+0x90>
 8007646:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800764a:	9001      	str	r0, [sp, #4]
 800764c:	2b00      	cmp	r3, #0
 800764e:	f1a1 0404 	sub.w	r4, r1, #4
 8007652:	bfb8      	it	lt
 8007654:	18e4      	addlt	r4, r4, r3
 8007656:	f000 fb39 	bl	8007ccc <__malloc_lock>
 800765a:	4a1e      	ldr	r2, [pc, #120]	; (80076d4 <_free_r+0x94>)
 800765c:	9801      	ldr	r0, [sp, #4]
 800765e:	6813      	ldr	r3, [r2, #0]
 8007660:	b933      	cbnz	r3, 8007670 <_free_r+0x30>
 8007662:	6063      	str	r3, [r4, #4]
 8007664:	6014      	str	r4, [r2, #0]
 8007666:	b003      	add	sp, #12
 8007668:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800766c:	f000 bb34 	b.w	8007cd8 <__malloc_unlock>
 8007670:	42a3      	cmp	r3, r4
 8007672:	d908      	bls.n	8007686 <_free_r+0x46>
 8007674:	6825      	ldr	r5, [r4, #0]
 8007676:	1961      	adds	r1, r4, r5
 8007678:	428b      	cmp	r3, r1
 800767a:	bf01      	itttt	eq
 800767c:	6819      	ldreq	r1, [r3, #0]
 800767e:	685b      	ldreq	r3, [r3, #4]
 8007680:	1949      	addeq	r1, r1, r5
 8007682:	6021      	streq	r1, [r4, #0]
 8007684:	e7ed      	b.n	8007662 <_free_r+0x22>
 8007686:	461a      	mov	r2, r3
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	b10b      	cbz	r3, 8007690 <_free_r+0x50>
 800768c:	42a3      	cmp	r3, r4
 800768e:	d9fa      	bls.n	8007686 <_free_r+0x46>
 8007690:	6811      	ldr	r1, [r2, #0]
 8007692:	1855      	adds	r5, r2, r1
 8007694:	42a5      	cmp	r5, r4
 8007696:	d10b      	bne.n	80076b0 <_free_r+0x70>
 8007698:	6824      	ldr	r4, [r4, #0]
 800769a:	4421      	add	r1, r4
 800769c:	1854      	adds	r4, r2, r1
 800769e:	42a3      	cmp	r3, r4
 80076a0:	6011      	str	r1, [r2, #0]
 80076a2:	d1e0      	bne.n	8007666 <_free_r+0x26>
 80076a4:	681c      	ldr	r4, [r3, #0]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	6053      	str	r3, [r2, #4]
 80076aa:	4421      	add	r1, r4
 80076ac:	6011      	str	r1, [r2, #0]
 80076ae:	e7da      	b.n	8007666 <_free_r+0x26>
 80076b0:	d902      	bls.n	80076b8 <_free_r+0x78>
 80076b2:	230c      	movs	r3, #12
 80076b4:	6003      	str	r3, [r0, #0]
 80076b6:	e7d6      	b.n	8007666 <_free_r+0x26>
 80076b8:	6825      	ldr	r5, [r4, #0]
 80076ba:	1961      	adds	r1, r4, r5
 80076bc:	428b      	cmp	r3, r1
 80076be:	bf04      	itt	eq
 80076c0:	6819      	ldreq	r1, [r3, #0]
 80076c2:	685b      	ldreq	r3, [r3, #4]
 80076c4:	6063      	str	r3, [r4, #4]
 80076c6:	bf04      	itt	eq
 80076c8:	1949      	addeq	r1, r1, r5
 80076ca:	6021      	streq	r1, [r4, #0]
 80076cc:	6054      	str	r4, [r2, #4]
 80076ce:	e7ca      	b.n	8007666 <_free_r+0x26>
 80076d0:	b003      	add	sp, #12
 80076d2:	bd30      	pop	{r4, r5, pc}
 80076d4:	20000344 	.word	0x20000344

080076d8 <sbrk_aligned>:
 80076d8:	b570      	push	{r4, r5, r6, lr}
 80076da:	4e0e      	ldr	r6, [pc, #56]	; (8007714 <sbrk_aligned+0x3c>)
 80076dc:	460c      	mov	r4, r1
 80076de:	6831      	ldr	r1, [r6, #0]
 80076e0:	4605      	mov	r5, r0
 80076e2:	b911      	cbnz	r1, 80076ea <sbrk_aligned+0x12>
 80076e4:	f000 fa2e 	bl	8007b44 <_sbrk_r>
 80076e8:	6030      	str	r0, [r6, #0]
 80076ea:	4621      	mov	r1, r4
 80076ec:	4628      	mov	r0, r5
 80076ee:	f000 fa29 	bl	8007b44 <_sbrk_r>
 80076f2:	1c43      	adds	r3, r0, #1
 80076f4:	d00a      	beq.n	800770c <sbrk_aligned+0x34>
 80076f6:	1cc4      	adds	r4, r0, #3
 80076f8:	f024 0403 	bic.w	r4, r4, #3
 80076fc:	42a0      	cmp	r0, r4
 80076fe:	d007      	beq.n	8007710 <sbrk_aligned+0x38>
 8007700:	1a21      	subs	r1, r4, r0
 8007702:	4628      	mov	r0, r5
 8007704:	f000 fa1e 	bl	8007b44 <_sbrk_r>
 8007708:	3001      	adds	r0, #1
 800770a:	d101      	bne.n	8007710 <sbrk_aligned+0x38>
 800770c:	f04f 34ff 	mov.w	r4, #4294967295
 8007710:	4620      	mov	r0, r4
 8007712:	bd70      	pop	{r4, r5, r6, pc}
 8007714:	20000348 	.word	0x20000348

08007718 <_malloc_r>:
 8007718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800771c:	1ccd      	adds	r5, r1, #3
 800771e:	f025 0503 	bic.w	r5, r5, #3
 8007722:	3508      	adds	r5, #8
 8007724:	2d0c      	cmp	r5, #12
 8007726:	bf38      	it	cc
 8007728:	250c      	movcc	r5, #12
 800772a:	2d00      	cmp	r5, #0
 800772c:	4607      	mov	r7, r0
 800772e:	db01      	blt.n	8007734 <_malloc_r+0x1c>
 8007730:	42a9      	cmp	r1, r5
 8007732:	d905      	bls.n	8007740 <_malloc_r+0x28>
 8007734:	230c      	movs	r3, #12
 8007736:	603b      	str	r3, [r7, #0]
 8007738:	2600      	movs	r6, #0
 800773a:	4630      	mov	r0, r6
 800773c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007740:	4e2e      	ldr	r6, [pc, #184]	; (80077fc <_malloc_r+0xe4>)
 8007742:	f000 fac3 	bl	8007ccc <__malloc_lock>
 8007746:	6833      	ldr	r3, [r6, #0]
 8007748:	461c      	mov	r4, r3
 800774a:	bb34      	cbnz	r4, 800779a <_malloc_r+0x82>
 800774c:	4629      	mov	r1, r5
 800774e:	4638      	mov	r0, r7
 8007750:	f7ff ffc2 	bl	80076d8 <sbrk_aligned>
 8007754:	1c43      	adds	r3, r0, #1
 8007756:	4604      	mov	r4, r0
 8007758:	d14d      	bne.n	80077f6 <_malloc_r+0xde>
 800775a:	6834      	ldr	r4, [r6, #0]
 800775c:	4626      	mov	r6, r4
 800775e:	2e00      	cmp	r6, #0
 8007760:	d140      	bne.n	80077e4 <_malloc_r+0xcc>
 8007762:	6823      	ldr	r3, [r4, #0]
 8007764:	4631      	mov	r1, r6
 8007766:	4638      	mov	r0, r7
 8007768:	eb04 0803 	add.w	r8, r4, r3
 800776c:	f000 f9ea 	bl	8007b44 <_sbrk_r>
 8007770:	4580      	cmp	r8, r0
 8007772:	d13a      	bne.n	80077ea <_malloc_r+0xd2>
 8007774:	6821      	ldr	r1, [r4, #0]
 8007776:	3503      	adds	r5, #3
 8007778:	1a6d      	subs	r5, r5, r1
 800777a:	f025 0503 	bic.w	r5, r5, #3
 800777e:	3508      	adds	r5, #8
 8007780:	2d0c      	cmp	r5, #12
 8007782:	bf38      	it	cc
 8007784:	250c      	movcc	r5, #12
 8007786:	4629      	mov	r1, r5
 8007788:	4638      	mov	r0, r7
 800778a:	f7ff ffa5 	bl	80076d8 <sbrk_aligned>
 800778e:	3001      	adds	r0, #1
 8007790:	d02b      	beq.n	80077ea <_malloc_r+0xd2>
 8007792:	6823      	ldr	r3, [r4, #0]
 8007794:	442b      	add	r3, r5
 8007796:	6023      	str	r3, [r4, #0]
 8007798:	e00e      	b.n	80077b8 <_malloc_r+0xa0>
 800779a:	6822      	ldr	r2, [r4, #0]
 800779c:	1b52      	subs	r2, r2, r5
 800779e:	d41e      	bmi.n	80077de <_malloc_r+0xc6>
 80077a0:	2a0b      	cmp	r2, #11
 80077a2:	d916      	bls.n	80077d2 <_malloc_r+0xba>
 80077a4:	1961      	adds	r1, r4, r5
 80077a6:	42a3      	cmp	r3, r4
 80077a8:	6025      	str	r5, [r4, #0]
 80077aa:	bf18      	it	ne
 80077ac:	6059      	strne	r1, [r3, #4]
 80077ae:	6863      	ldr	r3, [r4, #4]
 80077b0:	bf08      	it	eq
 80077b2:	6031      	streq	r1, [r6, #0]
 80077b4:	5162      	str	r2, [r4, r5]
 80077b6:	604b      	str	r3, [r1, #4]
 80077b8:	4638      	mov	r0, r7
 80077ba:	f104 060b 	add.w	r6, r4, #11
 80077be:	f000 fa8b 	bl	8007cd8 <__malloc_unlock>
 80077c2:	f026 0607 	bic.w	r6, r6, #7
 80077c6:	1d23      	adds	r3, r4, #4
 80077c8:	1af2      	subs	r2, r6, r3
 80077ca:	d0b6      	beq.n	800773a <_malloc_r+0x22>
 80077cc:	1b9b      	subs	r3, r3, r6
 80077ce:	50a3      	str	r3, [r4, r2]
 80077d0:	e7b3      	b.n	800773a <_malloc_r+0x22>
 80077d2:	6862      	ldr	r2, [r4, #4]
 80077d4:	42a3      	cmp	r3, r4
 80077d6:	bf0c      	ite	eq
 80077d8:	6032      	streq	r2, [r6, #0]
 80077da:	605a      	strne	r2, [r3, #4]
 80077dc:	e7ec      	b.n	80077b8 <_malloc_r+0xa0>
 80077de:	4623      	mov	r3, r4
 80077e0:	6864      	ldr	r4, [r4, #4]
 80077e2:	e7b2      	b.n	800774a <_malloc_r+0x32>
 80077e4:	4634      	mov	r4, r6
 80077e6:	6876      	ldr	r6, [r6, #4]
 80077e8:	e7b9      	b.n	800775e <_malloc_r+0x46>
 80077ea:	230c      	movs	r3, #12
 80077ec:	603b      	str	r3, [r7, #0]
 80077ee:	4638      	mov	r0, r7
 80077f0:	f000 fa72 	bl	8007cd8 <__malloc_unlock>
 80077f4:	e7a1      	b.n	800773a <_malloc_r+0x22>
 80077f6:	6025      	str	r5, [r4, #0]
 80077f8:	e7de      	b.n	80077b8 <_malloc_r+0xa0>
 80077fa:	bf00      	nop
 80077fc:	20000344 	.word	0x20000344

08007800 <__sfputc_r>:
 8007800:	6893      	ldr	r3, [r2, #8]
 8007802:	3b01      	subs	r3, #1
 8007804:	2b00      	cmp	r3, #0
 8007806:	b410      	push	{r4}
 8007808:	6093      	str	r3, [r2, #8]
 800780a:	da08      	bge.n	800781e <__sfputc_r+0x1e>
 800780c:	6994      	ldr	r4, [r2, #24]
 800780e:	42a3      	cmp	r3, r4
 8007810:	db01      	blt.n	8007816 <__sfputc_r+0x16>
 8007812:	290a      	cmp	r1, #10
 8007814:	d103      	bne.n	800781e <__sfputc_r+0x1e>
 8007816:	f85d 4b04 	ldr.w	r4, [sp], #4
 800781a:	f7fe b9d3 	b.w	8005bc4 <__swbuf_r>
 800781e:	6813      	ldr	r3, [r2, #0]
 8007820:	1c58      	adds	r0, r3, #1
 8007822:	6010      	str	r0, [r2, #0]
 8007824:	7019      	strb	r1, [r3, #0]
 8007826:	4608      	mov	r0, r1
 8007828:	f85d 4b04 	ldr.w	r4, [sp], #4
 800782c:	4770      	bx	lr

0800782e <__sfputs_r>:
 800782e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007830:	4606      	mov	r6, r0
 8007832:	460f      	mov	r7, r1
 8007834:	4614      	mov	r4, r2
 8007836:	18d5      	adds	r5, r2, r3
 8007838:	42ac      	cmp	r4, r5
 800783a:	d101      	bne.n	8007840 <__sfputs_r+0x12>
 800783c:	2000      	movs	r0, #0
 800783e:	e007      	b.n	8007850 <__sfputs_r+0x22>
 8007840:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007844:	463a      	mov	r2, r7
 8007846:	4630      	mov	r0, r6
 8007848:	f7ff ffda 	bl	8007800 <__sfputc_r>
 800784c:	1c43      	adds	r3, r0, #1
 800784e:	d1f3      	bne.n	8007838 <__sfputs_r+0xa>
 8007850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007854 <_vfiprintf_r>:
 8007854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007858:	460d      	mov	r5, r1
 800785a:	b09d      	sub	sp, #116	; 0x74
 800785c:	4614      	mov	r4, r2
 800785e:	4698      	mov	r8, r3
 8007860:	4606      	mov	r6, r0
 8007862:	b118      	cbz	r0, 800786c <_vfiprintf_r+0x18>
 8007864:	6983      	ldr	r3, [r0, #24]
 8007866:	b90b      	cbnz	r3, 800786c <_vfiprintf_r+0x18>
 8007868:	f7ff fa1e 	bl	8006ca8 <__sinit>
 800786c:	4b89      	ldr	r3, [pc, #548]	; (8007a94 <_vfiprintf_r+0x240>)
 800786e:	429d      	cmp	r5, r3
 8007870:	d11b      	bne.n	80078aa <_vfiprintf_r+0x56>
 8007872:	6875      	ldr	r5, [r6, #4]
 8007874:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007876:	07d9      	lsls	r1, r3, #31
 8007878:	d405      	bmi.n	8007886 <_vfiprintf_r+0x32>
 800787a:	89ab      	ldrh	r3, [r5, #12]
 800787c:	059a      	lsls	r2, r3, #22
 800787e:	d402      	bmi.n	8007886 <_vfiprintf_r+0x32>
 8007880:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007882:	f7ff fac6 	bl	8006e12 <__retarget_lock_acquire_recursive>
 8007886:	89ab      	ldrh	r3, [r5, #12]
 8007888:	071b      	lsls	r3, r3, #28
 800788a:	d501      	bpl.n	8007890 <_vfiprintf_r+0x3c>
 800788c:	692b      	ldr	r3, [r5, #16]
 800788e:	b9eb      	cbnz	r3, 80078cc <_vfiprintf_r+0x78>
 8007890:	4629      	mov	r1, r5
 8007892:	4630      	mov	r0, r6
 8007894:	f7fe f9e8 	bl	8005c68 <__swsetup_r>
 8007898:	b1c0      	cbz	r0, 80078cc <_vfiprintf_r+0x78>
 800789a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800789c:	07dc      	lsls	r4, r3, #31
 800789e:	d50e      	bpl.n	80078be <_vfiprintf_r+0x6a>
 80078a0:	f04f 30ff 	mov.w	r0, #4294967295
 80078a4:	b01d      	add	sp, #116	; 0x74
 80078a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078aa:	4b7b      	ldr	r3, [pc, #492]	; (8007a98 <_vfiprintf_r+0x244>)
 80078ac:	429d      	cmp	r5, r3
 80078ae:	d101      	bne.n	80078b4 <_vfiprintf_r+0x60>
 80078b0:	68b5      	ldr	r5, [r6, #8]
 80078b2:	e7df      	b.n	8007874 <_vfiprintf_r+0x20>
 80078b4:	4b79      	ldr	r3, [pc, #484]	; (8007a9c <_vfiprintf_r+0x248>)
 80078b6:	429d      	cmp	r5, r3
 80078b8:	bf08      	it	eq
 80078ba:	68f5      	ldreq	r5, [r6, #12]
 80078bc:	e7da      	b.n	8007874 <_vfiprintf_r+0x20>
 80078be:	89ab      	ldrh	r3, [r5, #12]
 80078c0:	0598      	lsls	r0, r3, #22
 80078c2:	d4ed      	bmi.n	80078a0 <_vfiprintf_r+0x4c>
 80078c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80078c6:	f7ff faa5 	bl	8006e14 <__retarget_lock_release_recursive>
 80078ca:	e7e9      	b.n	80078a0 <_vfiprintf_r+0x4c>
 80078cc:	2300      	movs	r3, #0
 80078ce:	9309      	str	r3, [sp, #36]	; 0x24
 80078d0:	2320      	movs	r3, #32
 80078d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80078d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80078da:	2330      	movs	r3, #48	; 0x30
 80078dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007aa0 <_vfiprintf_r+0x24c>
 80078e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80078e4:	f04f 0901 	mov.w	r9, #1
 80078e8:	4623      	mov	r3, r4
 80078ea:	469a      	mov	sl, r3
 80078ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078f0:	b10a      	cbz	r2, 80078f6 <_vfiprintf_r+0xa2>
 80078f2:	2a25      	cmp	r2, #37	; 0x25
 80078f4:	d1f9      	bne.n	80078ea <_vfiprintf_r+0x96>
 80078f6:	ebba 0b04 	subs.w	fp, sl, r4
 80078fa:	d00b      	beq.n	8007914 <_vfiprintf_r+0xc0>
 80078fc:	465b      	mov	r3, fp
 80078fe:	4622      	mov	r2, r4
 8007900:	4629      	mov	r1, r5
 8007902:	4630      	mov	r0, r6
 8007904:	f7ff ff93 	bl	800782e <__sfputs_r>
 8007908:	3001      	adds	r0, #1
 800790a:	f000 80aa 	beq.w	8007a62 <_vfiprintf_r+0x20e>
 800790e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007910:	445a      	add	r2, fp
 8007912:	9209      	str	r2, [sp, #36]	; 0x24
 8007914:	f89a 3000 	ldrb.w	r3, [sl]
 8007918:	2b00      	cmp	r3, #0
 800791a:	f000 80a2 	beq.w	8007a62 <_vfiprintf_r+0x20e>
 800791e:	2300      	movs	r3, #0
 8007920:	f04f 32ff 	mov.w	r2, #4294967295
 8007924:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007928:	f10a 0a01 	add.w	sl, sl, #1
 800792c:	9304      	str	r3, [sp, #16]
 800792e:	9307      	str	r3, [sp, #28]
 8007930:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007934:	931a      	str	r3, [sp, #104]	; 0x68
 8007936:	4654      	mov	r4, sl
 8007938:	2205      	movs	r2, #5
 800793a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800793e:	4858      	ldr	r0, [pc, #352]	; (8007aa0 <_vfiprintf_r+0x24c>)
 8007940:	f7f8 fc66 	bl	8000210 <memchr>
 8007944:	9a04      	ldr	r2, [sp, #16]
 8007946:	b9d8      	cbnz	r0, 8007980 <_vfiprintf_r+0x12c>
 8007948:	06d1      	lsls	r1, r2, #27
 800794a:	bf44      	itt	mi
 800794c:	2320      	movmi	r3, #32
 800794e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007952:	0713      	lsls	r3, r2, #28
 8007954:	bf44      	itt	mi
 8007956:	232b      	movmi	r3, #43	; 0x2b
 8007958:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800795c:	f89a 3000 	ldrb.w	r3, [sl]
 8007960:	2b2a      	cmp	r3, #42	; 0x2a
 8007962:	d015      	beq.n	8007990 <_vfiprintf_r+0x13c>
 8007964:	9a07      	ldr	r2, [sp, #28]
 8007966:	4654      	mov	r4, sl
 8007968:	2000      	movs	r0, #0
 800796a:	f04f 0c0a 	mov.w	ip, #10
 800796e:	4621      	mov	r1, r4
 8007970:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007974:	3b30      	subs	r3, #48	; 0x30
 8007976:	2b09      	cmp	r3, #9
 8007978:	d94e      	bls.n	8007a18 <_vfiprintf_r+0x1c4>
 800797a:	b1b0      	cbz	r0, 80079aa <_vfiprintf_r+0x156>
 800797c:	9207      	str	r2, [sp, #28]
 800797e:	e014      	b.n	80079aa <_vfiprintf_r+0x156>
 8007980:	eba0 0308 	sub.w	r3, r0, r8
 8007984:	fa09 f303 	lsl.w	r3, r9, r3
 8007988:	4313      	orrs	r3, r2
 800798a:	9304      	str	r3, [sp, #16]
 800798c:	46a2      	mov	sl, r4
 800798e:	e7d2      	b.n	8007936 <_vfiprintf_r+0xe2>
 8007990:	9b03      	ldr	r3, [sp, #12]
 8007992:	1d19      	adds	r1, r3, #4
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	9103      	str	r1, [sp, #12]
 8007998:	2b00      	cmp	r3, #0
 800799a:	bfbb      	ittet	lt
 800799c:	425b      	neglt	r3, r3
 800799e:	f042 0202 	orrlt.w	r2, r2, #2
 80079a2:	9307      	strge	r3, [sp, #28]
 80079a4:	9307      	strlt	r3, [sp, #28]
 80079a6:	bfb8      	it	lt
 80079a8:	9204      	strlt	r2, [sp, #16]
 80079aa:	7823      	ldrb	r3, [r4, #0]
 80079ac:	2b2e      	cmp	r3, #46	; 0x2e
 80079ae:	d10c      	bne.n	80079ca <_vfiprintf_r+0x176>
 80079b0:	7863      	ldrb	r3, [r4, #1]
 80079b2:	2b2a      	cmp	r3, #42	; 0x2a
 80079b4:	d135      	bne.n	8007a22 <_vfiprintf_r+0x1ce>
 80079b6:	9b03      	ldr	r3, [sp, #12]
 80079b8:	1d1a      	adds	r2, r3, #4
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	9203      	str	r2, [sp, #12]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	bfb8      	it	lt
 80079c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80079c6:	3402      	adds	r4, #2
 80079c8:	9305      	str	r3, [sp, #20]
 80079ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007ab0 <_vfiprintf_r+0x25c>
 80079ce:	7821      	ldrb	r1, [r4, #0]
 80079d0:	2203      	movs	r2, #3
 80079d2:	4650      	mov	r0, sl
 80079d4:	f7f8 fc1c 	bl	8000210 <memchr>
 80079d8:	b140      	cbz	r0, 80079ec <_vfiprintf_r+0x198>
 80079da:	2340      	movs	r3, #64	; 0x40
 80079dc:	eba0 000a 	sub.w	r0, r0, sl
 80079e0:	fa03 f000 	lsl.w	r0, r3, r0
 80079e4:	9b04      	ldr	r3, [sp, #16]
 80079e6:	4303      	orrs	r3, r0
 80079e8:	3401      	adds	r4, #1
 80079ea:	9304      	str	r3, [sp, #16]
 80079ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079f0:	482c      	ldr	r0, [pc, #176]	; (8007aa4 <_vfiprintf_r+0x250>)
 80079f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80079f6:	2206      	movs	r2, #6
 80079f8:	f7f8 fc0a 	bl	8000210 <memchr>
 80079fc:	2800      	cmp	r0, #0
 80079fe:	d03f      	beq.n	8007a80 <_vfiprintf_r+0x22c>
 8007a00:	4b29      	ldr	r3, [pc, #164]	; (8007aa8 <_vfiprintf_r+0x254>)
 8007a02:	bb1b      	cbnz	r3, 8007a4c <_vfiprintf_r+0x1f8>
 8007a04:	9b03      	ldr	r3, [sp, #12]
 8007a06:	3307      	adds	r3, #7
 8007a08:	f023 0307 	bic.w	r3, r3, #7
 8007a0c:	3308      	adds	r3, #8
 8007a0e:	9303      	str	r3, [sp, #12]
 8007a10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a12:	443b      	add	r3, r7
 8007a14:	9309      	str	r3, [sp, #36]	; 0x24
 8007a16:	e767      	b.n	80078e8 <_vfiprintf_r+0x94>
 8007a18:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a1c:	460c      	mov	r4, r1
 8007a1e:	2001      	movs	r0, #1
 8007a20:	e7a5      	b.n	800796e <_vfiprintf_r+0x11a>
 8007a22:	2300      	movs	r3, #0
 8007a24:	3401      	adds	r4, #1
 8007a26:	9305      	str	r3, [sp, #20]
 8007a28:	4619      	mov	r1, r3
 8007a2a:	f04f 0c0a 	mov.w	ip, #10
 8007a2e:	4620      	mov	r0, r4
 8007a30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a34:	3a30      	subs	r2, #48	; 0x30
 8007a36:	2a09      	cmp	r2, #9
 8007a38:	d903      	bls.n	8007a42 <_vfiprintf_r+0x1ee>
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d0c5      	beq.n	80079ca <_vfiprintf_r+0x176>
 8007a3e:	9105      	str	r1, [sp, #20]
 8007a40:	e7c3      	b.n	80079ca <_vfiprintf_r+0x176>
 8007a42:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a46:	4604      	mov	r4, r0
 8007a48:	2301      	movs	r3, #1
 8007a4a:	e7f0      	b.n	8007a2e <_vfiprintf_r+0x1da>
 8007a4c:	ab03      	add	r3, sp, #12
 8007a4e:	9300      	str	r3, [sp, #0]
 8007a50:	462a      	mov	r2, r5
 8007a52:	4b16      	ldr	r3, [pc, #88]	; (8007aac <_vfiprintf_r+0x258>)
 8007a54:	a904      	add	r1, sp, #16
 8007a56:	4630      	mov	r0, r6
 8007a58:	f7fd fa90 	bl	8004f7c <_printf_float>
 8007a5c:	4607      	mov	r7, r0
 8007a5e:	1c78      	adds	r0, r7, #1
 8007a60:	d1d6      	bne.n	8007a10 <_vfiprintf_r+0x1bc>
 8007a62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a64:	07d9      	lsls	r1, r3, #31
 8007a66:	d405      	bmi.n	8007a74 <_vfiprintf_r+0x220>
 8007a68:	89ab      	ldrh	r3, [r5, #12]
 8007a6a:	059a      	lsls	r2, r3, #22
 8007a6c:	d402      	bmi.n	8007a74 <_vfiprintf_r+0x220>
 8007a6e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007a70:	f7ff f9d0 	bl	8006e14 <__retarget_lock_release_recursive>
 8007a74:	89ab      	ldrh	r3, [r5, #12]
 8007a76:	065b      	lsls	r3, r3, #25
 8007a78:	f53f af12 	bmi.w	80078a0 <_vfiprintf_r+0x4c>
 8007a7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007a7e:	e711      	b.n	80078a4 <_vfiprintf_r+0x50>
 8007a80:	ab03      	add	r3, sp, #12
 8007a82:	9300      	str	r3, [sp, #0]
 8007a84:	462a      	mov	r2, r5
 8007a86:	4b09      	ldr	r3, [pc, #36]	; (8007aac <_vfiprintf_r+0x258>)
 8007a88:	a904      	add	r1, sp, #16
 8007a8a:	4630      	mov	r0, r6
 8007a8c:	f7fd fd1a 	bl	80054c4 <_printf_i>
 8007a90:	e7e4      	b.n	8007a5c <_vfiprintf_r+0x208>
 8007a92:	bf00      	nop
 8007a94:	08008684 	.word	0x08008684
 8007a98:	080086a4 	.word	0x080086a4
 8007a9c:	08008664 	.word	0x08008664
 8007aa0:	0800881c 	.word	0x0800881c
 8007aa4:	08008826 	.word	0x08008826
 8007aa8:	08004f7d 	.word	0x08004f7d
 8007aac:	0800782f 	.word	0x0800782f
 8007ab0:	08008822 	.word	0x08008822

08007ab4 <_putc_r>:
 8007ab4:	b570      	push	{r4, r5, r6, lr}
 8007ab6:	460d      	mov	r5, r1
 8007ab8:	4614      	mov	r4, r2
 8007aba:	4606      	mov	r6, r0
 8007abc:	b118      	cbz	r0, 8007ac6 <_putc_r+0x12>
 8007abe:	6983      	ldr	r3, [r0, #24]
 8007ac0:	b90b      	cbnz	r3, 8007ac6 <_putc_r+0x12>
 8007ac2:	f7ff f8f1 	bl	8006ca8 <__sinit>
 8007ac6:	4b1c      	ldr	r3, [pc, #112]	; (8007b38 <_putc_r+0x84>)
 8007ac8:	429c      	cmp	r4, r3
 8007aca:	d124      	bne.n	8007b16 <_putc_r+0x62>
 8007acc:	6874      	ldr	r4, [r6, #4]
 8007ace:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ad0:	07d8      	lsls	r0, r3, #31
 8007ad2:	d405      	bmi.n	8007ae0 <_putc_r+0x2c>
 8007ad4:	89a3      	ldrh	r3, [r4, #12]
 8007ad6:	0599      	lsls	r1, r3, #22
 8007ad8:	d402      	bmi.n	8007ae0 <_putc_r+0x2c>
 8007ada:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007adc:	f7ff f999 	bl	8006e12 <__retarget_lock_acquire_recursive>
 8007ae0:	68a3      	ldr	r3, [r4, #8]
 8007ae2:	3b01      	subs	r3, #1
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	60a3      	str	r3, [r4, #8]
 8007ae8:	da05      	bge.n	8007af6 <_putc_r+0x42>
 8007aea:	69a2      	ldr	r2, [r4, #24]
 8007aec:	4293      	cmp	r3, r2
 8007aee:	db1c      	blt.n	8007b2a <_putc_r+0x76>
 8007af0:	b2eb      	uxtb	r3, r5
 8007af2:	2b0a      	cmp	r3, #10
 8007af4:	d019      	beq.n	8007b2a <_putc_r+0x76>
 8007af6:	6823      	ldr	r3, [r4, #0]
 8007af8:	1c5a      	adds	r2, r3, #1
 8007afa:	6022      	str	r2, [r4, #0]
 8007afc:	701d      	strb	r5, [r3, #0]
 8007afe:	b2ed      	uxtb	r5, r5
 8007b00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b02:	07da      	lsls	r2, r3, #31
 8007b04:	d405      	bmi.n	8007b12 <_putc_r+0x5e>
 8007b06:	89a3      	ldrh	r3, [r4, #12]
 8007b08:	059b      	lsls	r3, r3, #22
 8007b0a:	d402      	bmi.n	8007b12 <_putc_r+0x5e>
 8007b0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b0e:	f7ff f981 	bl	8006e14 <__retarget_lock_release_recursive>
 8007b12:	4628      	mov	r0, r5
 8007b14:	bd70      	pop	{r4, r5, r6, pc}
 8007b16:	4b09      	ldr	r3, [pc, #36]	; (8007b3c <_putc_r+0x88>)
 8007b18:	429c      	cmp	r4, r3
 8007b1a:	d101      	bne.n	8007b20 <_putc_r+0x6c>
 8007b1c:	68b4      	ldr	r4, [r6, #8]
 8007b1e:	e7d6      	b.n	8007ace <_putc_r+0x1a>
 8007b20:	4b07      	ldr	r3, [pc, #28]	; (8007b40 <_putc_r+0x8c>)
 8007b22:	429c      	cmp	r4, r3
 8007b24:	bf08      	it	eq
 8007b26:	68f4      	ldreq	r4, [r6, #12]
 8007b28:	e7d1      	b.n	8007ace <_putc_r+0x1a>
 8007b2a:	4629      	mov	r1, r5
 8007b2c:	4622      	mov	r2, r4
 8007b2e:	4630      	mov	r0, r6
 8007b30:	f7fe f848 	bl	8005bc4 <__swbuf_r>
 8007b34:	4605      	mov	r5, r0
 8007b36:	e7e3      	b.n	8007b00 <_putc_r+0x4c>
 8007b38:	08008684 	.word	0x08008684
 8007b3c:	080086a4 	.word	0x080086a4
 8007b40:	08008664 	.word	0x08008664

08007b44 <_sbrk_r>:
 8007b44:	b538      	push	{r3, r4, r5, lr}
 8007b46:	4d06      	ldr	r5, [pc, #24]	; (8007b60 <_sbrk_r+0x1c>)
 8007b48:	2300      	movs	r3, #0
 8007b4a:	4604      	mov	r4, r0
 8007b4c:	4608      	mov	r0, r1
 8007b4e:	602b      	str	r3, [r5, #0]
 8007b50:	f7f9 fef8 	bl	8001944 <_sbrk>
 8007b54:	1c43      	adds	r3, r0, #1
 8007b56:	d102      	bne.n	8007b5e <_sbrk_r+0x1a>
 8007b58:	682b      	ldr	r3, [r5, #0]
 8007b5a:	b103      	cbz	r3, 8007b5e <_sbrk_r+0x1a>
 8007b5c:	6023      	str	r3, [r4, #0]
 8007b5e:	bd38      	pop	{r3, r4, r5, pc}
 8007b60:	2000034c 	.word	0x2000034c

08007b64 <__sread>:
 8007b64:	b510      	push	{r4, lr}
 8007b66:	460c      	mov	r4, r1
 8007b68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b6c:	f000 f8ba 	bl	8007ce4 <_read_r>
 8007b70:	2800      	cmp	r0, #0
 8007b72:	bfab      	itete	ge
 8007b74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007b76:	89a3      	ldrhlt	r3, [r4, #12]
 8007b78:	181b      	addge	r3, r3, r0
 8007b7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007b7e:	bfac      	ite	ge
 8007b80:	6563      	strge	r3, [r4, #84]	; 0x54
 8007b82:	81a3      	strhlt	r3, [r4, #12]
 8007b84:	bd10      	pop	{r4, pc}

08007b86 <__swrite>:
 8007b86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b8a:	461f      	mov	r7, r3
 8007b8c:	898b      	ldrh	r3, [r1, #12]
 8007b8e:	05db      	lsls	r3, r3, #23
 8007b90:	4605      	mov	r5, r0
 8007b92:	460c      	mov	r4, r1
 8007b94:	4616      	mov	r6, r2
 8007b96:	d505      	bpl.n	8007ba4 <__swrite+0x1e>
 8007b98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b9c:	2302      	movs	r3, #2
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	f000 f870 	bl	8007c84 <_lseek_r>
 8007ba4:	89a3      	ldrh	r3, [r4, #12]
 8007ba6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007baa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007bae:	81a3      	strh	r3, [r4, #12]
 8007bb0:	4632      	mov	r2, r6
 8007bb2:	463b      	mov	r3, r7
 8007bb4:	4628      	mov	r0, r5
 8007bb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007bba:	f000 b817 	b.w	8007bec <_write_r>

08007bbe <__sseek>:
 8007bbe:	b510      	push	{r4, lr}
 8007bc0:	460c      	mov	r4, r1
 8007bc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bc6:	f000 f85d 	bl	8007c84 <_lseek_r>
 8007bca:	1c43      	adds	r3, r0, #1
 8007bcc:	89a3      	ldrh	r3, [r4, #12]
 8007bce:	bf15      	itete	ne
 8007bd0:	6560      	strne	r0, [r4, #84]	; 0x54
 8007bd2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007bd6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007bda:	81a3      	strheq	r3, [r4, #12]
 8007bdc:	bf18      	it	ne
 8007bde:	81a3      	strhne	r3, [r4, #12]
 8007be0:	bd10      	pop	{r4, pc}

08007be2 <__sclose>:
 8007be2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007be6:	f000 b81b 	b.w	8007c20 <_close_r>
	...

08007bec <_write_r>:
 8007bec:	b538      	push	{r3, r4, r5, lr}
 8007bee:	4d07      	ldr	r5, [pc, #28]	; (8007c0c <_write_r+0x20>)
 8007bf0:	4604      	mov	r4, r0
 8007bf2:	4608      	mov	r0, r1
 8007bf4:	4611      	mov	r1, r2
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	602a      	str	r2, [r5, #0]
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	f7f9 fe51 	bl	80018a2 <_write>
 8007c00:	1c43      	adds	r3, r0, #1
 8007c02:	d102      	bne.n	8007c0a <_write_r+0x1e>
 8007c04:	682b      	ldr	r3, [r5, #0]
 8007c06:	b103      	cbz	r3, 8007c0a <_write_r+0x1e>
 8007c08:	6023      	str	r3, [r4, #0]
 8007c0a:	bd38      	pop	{r3, r4, r5, pc}
 8007c0c:	2000034c 	.word	0x2000034c

08007c10 <abort>:
 8007c10:	b508      	push	{r3, lr}
 8007c12:	2006      	movs	r0, #6
 8007c14:	f000 f8a0 	bl	8007d58 <raise>
 8007c18:	2001      	movs	r0, #1
 8007c1a:	f7f9 fe1b 	bl	8001854 <_exit>
	...

08007c20 <_close_r>:
 8007c20:	b538      	push	{r3, r4, r5, lr}
 8007c22:	4d06      	ldr	r5, [pc, #24]	; (8007c3c <_close_r+0x1c>)
 8007c24:	2300      	movs	r3, #0
 8007c26:	4604      	mov	r4, r0
 8007c28:	4608      	mov	r0, r1
 8007c2a:	602b      	str	r3, [r5, #0]
 8007c2c:	f7f9 fe55 	bl	80018da <_close>
 8007c30:	1c43      	adds	r3, r0, #1
 8007c32:	d102      	bne.n	8007c3a <_close_r+0x1a>
 8007c34:	682b      	ldr	r3, [r5, #0]
 8007c36:	b103      	cbz	r3, 8007c3a <_close_r+0x1a>
 8007c38:	6023      	str	r3, [r4, #0]
 8007c3a:	bd38      	pop	{r3, r4, r5, pc}
 8007c3c:	2000034c 	.word	0x2000034c

08007c40 <_fstat_r>:
 8007c40:	b538      	push	{r3, r4, r5, lr}
 8007c42:	4d07      	ldr	r5, [pc, #28]	; (8007c60 <_fstat_r+0x20>)
 8007c44:	2300      	movs	r3, #0
 8007c46:	4604      	mov	r4, r0
 8007c48:	4608      	mov	r0, r1
 8007c4a:	4611      	mov	r1, r2
 8007c4c:	602b      	str	r3, [r5, #0]
 8007c4e:	f7f9 fe50 	bl	80018f2 <_fstat>
 8007c52:	1c43      	adds	r3, r0, #1
 8007c54:	d102      	bne.n	8007c5c <_fstat_r+0x1c>
 8007c56:	682b      	ldr	r3, [r5, #0]
 8007c58:	b103      	cbz	r3, 8007c5c <_fstat_r+0x1c>
 8007c5a:	6023      	str	r3, [r4, #0]
 8007c5c:	bd38      	pop	{r3, r4, r5, pc}
 8007c5e:	bf00      	nop
 8007c60:	2000034c 	.word	0x2000034c

08007c64 <_isatty_r>:
 8007c64:	b538      	push	{r3, r4, r5, lr}
 8007c66:	4d06      	ldr	r5, [pc, #24]	; (8007c80 <_isatty_r+0x1c>)
 8007c68:	2300      	movs	r3, #0
 8007c6a:	4604      	mov	r4, r0
 8007c6c:	4608      	mov	r0, r1
 8007c6e:	602b      	str	r3, [r5, #0]
 8007c70:	f7f9 fe4f 	bl	8001912 <_isatty>
 8007c74:	1c43      	adds	r3, r0, #1
 8007c76:	d102      	bne.n	8007c7e <_isatty_r+0x1a>
 8007c78:	682b      	ldr	r3, [r5, #0]
 8007c7a:	b103      	cbz	r3, 8007c7e <_isatty_r+0x1a>
 8007c7c:	6023      	str	r3, [r4, #0]
 8007c7e:	bd38      	pop	{r3, r4, r5, pc}
 8007c80:	2000034c 	.word	0x2000034c

08007c84 <_lseek_r>:
 8007c84:	b538      	push	{r3, r4, r5, lr}
 8007c86:	4d07      	ldr	r5, [pc, #28]	; (8007ca4 <_lseek_r+0x20>)
 8007c88:	4604      	mov	r4, r0
 8007c8a:	4608      	mov	r0, r1
 8007c8c:	4611      	mov	r1, r2
 8007c8e:	2200      	movs	r2, #0
 8007c90:	602a      	str	r2, [r5, #0]
 8007c92:	461a      	mov	r2, r3
 8007c94:	f7f9 fe48 	bl	8001928 <_lseek>
 8007c98:	1c43      	adds	r3, r0, #1
 8007c9a:	d102      	bne.n	8007ca2 <_lseek_r+0x1e>
 8007c9c:	682b      	ldr	r3, [r5, #0]
 8007c9e:	b103      	cbz	r3, 8007ca2 <_lseek_r+0x1e>
 8007ca0:	6023      	str	r3, [r4, #0]
 8007ca2:	bd38      	pop	{r3, r4, r5, pc}
 8007ca4:	2000034c 	.word	0x2000034c

08007ca8 <__ascii_mbtowc>:
 8007ca8:	b082      	sub	sp, #8
 8007caa:	b901      	cbnz	r1, 8007cae <__ascii_mbtowc+0x6>
 8007cac:	a901      	add	r1, sp, #4
 8007cae:	b142      	cbz	r2, 8007cc2 <__ascii_mbtowc+0x1a>
 8007cb0:	b14b      	cbz	r3, 8007cc6 <__ascii_mbtowc+0x1e>
 8007cb2:	7813      	ldrb	r3, [r2, #0]
 8007cb4:	600b      	str	r3, [r1, #0]
 8007cb6:	7812      	ldrb	r2, [r2, #0]
 8007cb8:	1e10      	subs	r0, r2, #0
 8007cba:	bf18      	it	ne
 8007cbc:	2001      	movne	r0, #1
 8007cbe:	b002      	add	sp, #8
 8007cc0:	4770      	bx	lr
 8007cc2:	4610      	mov	r0, r2
 8007cc4:	e7fb      	b.n	8007cbe <__ascii_mbtowc+0x16>
 8007cc6:	f06f 0001 	mvn.w	r0, #1
 8007cca:	e7f8      	b.n	8007cbe <__ascii_mbtowc+0x16>

08007ccc <__malloc_lock>:
 8007ccc:	4801      	ldr	r0, [pc, #4]	; (8007cd4 <__malloc_lock+0x8>)
 8007cce:	f7ff b8a0 	b.w	8006e12 <__retarget_lock_acquire_recursive>
 8007cd2:	bf00      	nop
 8007cd4:	20000340 	.word	0x20000340

08007cd8 <__malloc_unlock>:
 8007cd8:	4801      	ldr	r0, [pc, #4]	; (8007ce0 <__malloc_unlock+0x8>)
 8007cda:	f7ff b89b 	b.w	8006e14 <__retarget_lock_release_recursive>
 8007cde:	bf00      	nop
 8007ce0:	20000340 	.word	0x20000340

08007ce4 <_read_r>:
 8007ce4:	b538      	push	{r3, r4, r5, lr}
 8007ce6:	4d07      	ldr	r5, [pc, #28]	; (8007d04 <_read_r+0x20>)
 8007ce8:	4604      	mov	r4, r0
 8007cea:	4608      	mov	r0, r1
 8007cec:	4611      	mov	r1, r2
 8007cee:	2200      	movs	r2, #0
 8007cf0:	602a      	str	r2, [r5, #0]
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	f7f9 fdb8 	bl	8001868 <_read>
 8007cf8:	1c43      	adds	r3, r0, #1
 8007cfa:	d102      	bne.n	8007d02 <_read_r+0x1e>
 8007cfc:	682b      	ldr	r3, [r5, #0]
 8007cfe:	b103      	cbz	r3, 8007d02 <_read_r+0x1e>
 8007d00:	6023      	str	r3, [r4, #0]
 8007d02:	bd38      	pop	{r3, r4, r5, pc}
 8007d04:	2000034c 	.word	0x2000034c

08007d08 <_raise_r>:
 8007d08:	291f      	cmp	r1, #31
 8007d0a:	b538      	push	{r3, r4, r5, lr}
 8007d0c:	4604      	mov	r4, r0
 8007d0e:	460d      	mov	r5, r1
 8007d10:	d904      	bls.n	8007d1c <_raise_r+0x14>
 8007d12:	2316      	movs	r3, #22
 8007d14:	6003      	str	r3, [r0, #0]
 8007d16:	f04f 30ff 	mov.w	r0, #4294967295
 8007d1a:	bd38      	pop	{r3, r4, r5, pc}
 8007d1c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007d1e:	b112      	cbz	r2, 8007d26 <_raise_r+0x1e>
 8007d20:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007d24:	b94b      	cbnz	r3, 8007d3a <_raise_r+0x32>
 8007d26:	4620      	mov	r0, r4
 8007d28:	f000 f830 	bl	8007d8c <_getpid_r>
 8007d2c:	462a      	mov	r2, r5
 8007d2e:	4601      	mov	r1, r0
 8007d30:	4620      	mov	r0, r4
 8007d32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d36:	f000 b817 	b.w	8007d68 <_kill_r>
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	d00a      	beq.n	8007d54 <_raise_r+0x4c>
 8007d3e:	1c59      	adds	r1, r3, #1
 8007d40:	d103      	bne.n	8007d4a <_raise_r+0x42>
 8007d42:	2316      	movs	r3, #22
 8007d44:	6003      	str	r3, [r0, #0]
 8007d46:	2001      	movs	r0, #1
 8007d48:	e7e7      	b.n	8007d1a <_raise_r+0x12>
 8007d4a:	2400      	movs	r4, #0
 8007d4c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007d50:	4628      	mov	r0, r5
 8007d52:	4798      	blx	r3
 8007d54:	2000      	movs	r0, #0
 8007d56:	e7e0      	b.n	8007d1a <_raise_r+0x12>

08007d58 <raise>:
 8007d58:	4b02      	ldr	r3, [pc, #8]	; (8007d64 <raise+0xc>)
 8007d5a:	4601      	mov	r1, r0
 8007d5c:	6818      	ldr	r0, [r3, #0]
 8007d5e:	f7ff bfd3 	b.w	8007d08 <_raise_r>
 8007d62:	bf00      	nop
 8007d64:	2000000c 	.word	0x2000000c

08007d68 <_kill_r>:
 8007d68:	b538      	push	{r3, r4, r5, lr}
 8007d6a:	4d07      	ldr	r5, [pc, #28]	; (8007d88 <_kill_r+0x20>)
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	4604      	mov	r4, r0
 8007d70:	4608      	mov	r0, r1
 8007d72:	4611      	mov	r1, r2
 8007d74:	602b      	str	r3, [r5, #0]
 8007d76:	f7f9 fd5d 	bl	8001834 <_kill>
 8007d7a:	1c43      	adds	r3, r0, #1
 8007d7c:	d102      	bne.n	8007d84 <_kill_r+0x1c>
 8007d7e:	682b      	ldr	r3, [r5, #0]
 8007d80:	b103      	cbz	r3, 8007d84 <_kill_r+0x1c>
 8007d82:	6023      	str	r3, [r4, #0]
 8007d84:	bd38      	pop	{r3, r4, r5, pc}
 8007d86:	bf00      	nop
 8007d88:	2000034c 	.word	0x2000034c

08007d8c <_getpid_r>:
 8007d8c:	f7f9 bd4a 	b.w	8001824 <_getpid>

08007d90 <__ascii_wctomb>:
 8007d90:	b149      	cbz	r1, 8007da6 <__ascii_wctomb+0x16>
 8007d92:	2aff      	cmp	r2, #255	; 0xff
 8007d94:	bf85      	ittet	hi
 8007d96:	238a      	movhi	r3, #138	; 0x8a
 8007d98:	6003      	strhi	r3, [r0, #0]
 8007d9a:	700a      	strbls	r2, [r1, #0]
 8007d9c:	f04f 30ff 	movhi.w	r0, #4294967295
 8007da0:	bf98      	it	ls
 8007da2:	2001      	movls	r0, #1
 8007da4:	4770      	bx	lr
 8007da6:	4608      	mov	r0, r1
 8007da8:	4770      	bx	lr
	...

08007dac <_init>:
 8007dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dae:	bf00      	nop
 8007db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007db2:	bc08      	pop	{r3}
 8007db4:	469e      	mov	lr, r3
 8007db6:	4770      	bx	lr

08007db8 <_fini>:
 8007db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dba:	bf00      	nop
 8007dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dbe:	bc08      	pop	{r3}
 8007dc0:	469e      	mov	lr, r3
 8007dc2:	4770      	bx	lr
