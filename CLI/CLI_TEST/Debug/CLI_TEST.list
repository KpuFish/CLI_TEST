
CLI_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08020000  08020000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .tag          00000000  08010000  08010000  000201e0  2**0
                  CONTENTS
  2 .text         00007c14  080201a0  080201a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a10  08027db8  08027db8  00017db8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  080287c8  080287c8  000201e0  2**0
                  CONTENTS
  5 .ARM          00000008  080287c8  080287c8  000187c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  080287d0  080287d0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  080287d0  080287d0  000187d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  080287d4  080287d4  000187d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000001e0  20000000  080287d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000174  200001e0  080289b8  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000c04  20000354  080289b8  00020354  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012a50  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003152  00000000  00000000  00032c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fe8  00000000  00000000  00035db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e90  00000000  00000000  00036da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018d77  00000000  00000000  00037c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000142a7  00000000  00000000  000509a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009086a  00000000  00000000  00064c4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000f54b8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005348  00000000  00000000  000f5508  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080201a0 <__do_global_dtors_aux>:
 80201a0:	b510      	push	{r4, lr}
 80201a2:	4c05      	ldr	r4, [pc, #20]	; (80201b8 <__do_global_dtors_aux+0x18>)
 80201a4:	7823      	ldrb	r3, [r4, #0]
 80201a6:	b933      	cbnz	r3, 80201b6 <__do_global_dtors_aux+0x16>
 80201a8:	4b04      	ldr	r3, [pc, #16]	; (80201bc <__do_global_dtors_aux+0x1c>)
 80201aa:	b113      	cbz	r3, 80201b2 <__do_global_dtors_aux+0x12>
 80201ac:	4804      	ldr	r0, [pc, #16]	; (80201c0 <__do_global_dtors_aux+0x20>)
 80201ae:	f3af 8000 	nop.w
 80201b2:	2301      	movs	r3, #1
 80201b4:	7023      	strb	r3, [r4, #0]
 80201b6:	bd10      	pop	{r4, pc}
 80201b8:	200001e0 	.word	0x200001e0
 80201bc:	00000000 	.word	0x00000000
 80201c0:	08027d9c 	.word	0x08027d9c

080201c4 <frame_dummy>:
 80201c4:	b508      	push	{r3, lr}
 80201c6:	4b03      	ldr	r3, [pc, #12]	; (80201d4 <frame_dummy+0x10>)
 80201c8:	b11b      	cbz	r3, 80201d2 <frame_dummy+0xe>
 80201ca:	4903      	ldr	r1, [pc, #12]	; (80201d8 <frame_dummy+0x14>)
 80201cc:	4803      	ldr	r0, [pc, #12]	; (80201dc <frame_dummy+0x18>)
 80201ce:	f3af 8000 	nop.w
 80201d2:	bd08      	pop	{r3, pc}
 80201d4:	00000000 	.word	0x00000000
 80201d8:	200001e4 	.word	0x200001e4
 80201dc:	08027d9c 	.word	0x08027d9c

080201e0 <strcmp>:
 80201e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80201e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80201e8:	2a01      	cmp	r2, #1
 80201ea:	bf28      	it	cs
 80201ec:	429a      	cmpcs	r2, r3
 80201ee:	d0f7      	beq.n	80201e0 <strcmp>
 80201f0:	1ad0      	subs	r0, r2, r3
 80201f2:	4770      	bx	lr

080201f4 <strlen>:
 80201f4:	4603      	mov	r3, r0
 80201f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80201fa:	2a00      	cmp	r2, #0
 80201fc:	d1fb      	bne.n	80201f6 <strlen+0x2>
 80201fe:	1a18      	subs	r0, r3, r0
 8020200:	3801      	subs	r0, #1
 8020202:	4770      	bx	lr
	...

08020210 <memchr>:
 8020210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8020214:	2a10      	cmp	r2, #16
 8020216:	db2b      	blt.n	8020270 <memchr+0x60>
 8020218:	f010 0f07 	tst.w	r0, #7
 802021c:	d008      	beq.n	8020230 <memchr+0x20>
 802021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020222:	3a01      	subs	r2, #1
 8020224:	428b      	cmp	r3, r1
 8020226:	d02d      	beq.n	8020284 <memchr+0x74>
 8020228:	f010 0f07 	tst.w	r0, #7
 802022c:	b342      	cbz	r2, 8020280 <memchr+0x70>
 802022e:	d1f6      	bne.n	802021e <memchr+0xe>
 8020230:	b4f0      	push	{r4, r5, r6, r7}
 8020232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8020236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 802023a:	f022 0407 	bic.w	r4, r2, #7
 802023e:	f07f 0700 	mvns.w	r7, #0
 8020242:	2300      	movs	r3, #0
 8020244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8020248:	3c08      	subs	r4, #8
 802024a:	ea85 0501 	eor.w	r5, r5, r1
 802024e:	ea86 0601 	eor.w	r6, r6, r1
 8020252:	fa85 f547 	uadd8	r5, r5, r7
 8020256:	faa3 f587 	sel	r5, r3, r7
 802025a:	fa86 f647 	uadd8	r6, r6, r7
 802025e:	faa5 f687 	sel	r6, r5, r7
 8020262:	b98e      	cbnz	r6, 8020288 <memchr+0x78>
 8020264:	d1ee      	bne.n	8020244 <memchr+0x34>
 8020266:	bcf0      	pop	{r4, r5, r6, r7}
 8020268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 802026c:	f002 0207 	and.w	r2, r2, #7
 8020270:	b132      	cbz	r2, 8020280 <memchr+0x70>
 8020272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8020276:	3a01      	subs	r2, #1
 8020278:	ea83 0301 	eor.w	r3, r3, r1
 802027c:	b113      	cbz	r3, 8020284 <memchr+0x74>
 802027e:	d1f8      	bne.n	8020272 <memchr+0x62>
 8020280:	2000      	movs	r0, #0
 8020282:	4770      	bx	lr
 8020284:	3801      	subs	r0, #1
 8020286:	4770      	bx	lr
 8020288:	2d00      	cmp	r5, #0
 802028a:	bf06      	itte	eq
 802028c:	4635      	moveq	r5, r6
 802028e:	3803      	subeq	r0, #3
 8020290:	3807      	subne	r0, #7
 8020292:	f015 0f01 	tst.w	r5, #1
 8020296:	d107      	bne.n	80202a8 <memchr+0x98>
 8020298:	3001      	adds	r0, #1
 802029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 802029e:	bf02      	ittt	eq
 80202a0:	3001      	addeq	r0, #1
 80202a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80202a6:	3001      	addeq	r0, #1
 80202a8:	bcf0      	pop	{r4, r5, r6, r7}
 80202aa:	3801      	subs	r0, #1
 80202ac:	4770      	bx	lr
 80202ae:	bf00      	nop

080202b0 <__aeabi_drsub>:
 80202b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80202b4:	e002      	b.n	80202bc <__adddf3>
 80202b6:	bf00      	nop

080202b8 <__aeabi_dsub>:
 80202b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080202bc <__adddf3>:
 80202bc:	b530      	push	{r4, r5, lr}
 80202be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80202c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80202c6:	ea94 0f05 	teq	r4, r5
 80202ca:	bf08      	it	eq
 80202cc:	ea90 0f02 	teqeq	r0, r2
 80202d0:	bf1f      	itttt	ne
 80202d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80202d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80202da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80202de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80202e2:	f000 80e2 	beq.w	80204aa <__adddf3+0x1ee>
 80202e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80202ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80202ee:	bfb8      	it	lt
 80202f0:	426d      	neglt	r5, r5
 80202f2:	dd0c      	ble.n	802030e <__adddf3+0x52>
 80202f4:	442c      	add	r4, r5
 80202f6:	ea80 0202 	eor.w	r2, r0, r2
 80202fa:	ea81 0303 	eor.w	r3, r1, r3
 80202fe:	ea82 0000 	eor.w	r0, r2, r0
 8020302:	ea83 0101 	eor.w	r1, r3, r1
 8020306:	ea80 0202 	eor.w	r2, r0, r2
 802030a:	ea81 0303 	eor.w	r3, r1, r3
 802030e:	2d36      	cmp	r5, #54	; 0x36
 8020310:	bf88      	it	hi
 8020312:	bd30      	pophi	{r4, r5, pc}
 8020314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8020318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 802031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8020320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8020324:	d002      	beq.n	802032c <__adddf3+0x70>
 8020326:	4240      	negs	r0, r0
 8020328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 802032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8020330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8020334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8020338:	d002      	beq.n	8020340 <__adddf3+0x84>
 802033a:	4252      	negs	r2, r2
 802033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8020340:	ea94 0f05 	teq	r4, r5
 8020344:	f000 80a7 	beq.w	8020496 <__adddf3+0x1da>
 8020348:	f1a4 0401 	sub.w	r4, r4, #1
 802034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8020350:	db0d      	blt.n	802036e <__adddf3+0xb2>
 8020352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8020356:	fa22 f205 	lsr.w	r2, r2, r5
 802035a:	1880      	adds	r0, r0, r2
 802035c:	f141 0100 	adc.w	r1, r1, #0
 8020360:	fa03 f20e 	lsl.w	r2, r3, lr
 8020364:	1880      	adds	r0, r0, r2
 8020366:	fa43 f305 	asr.w	r3, r3, r5
 802036a:	4159      	adcs	r1, r3
 802036c:	e00e      	b.n	802038c <__adddf3+0xd0>
 802036e:	f1a5 0520 	sub.w	r5, r5, #32
 8020372:	f10e 0e20 	add.w	lr, lr, #32
 8020376:	2a01      	cmp	r2, #1
 8020378:	fa03 fc0e 	lsl.w	ip, r3, lr
 802037c:	bf28      	it	cs
 802037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8020382:	fa43 f305 	asr.w	r3, r3, r5
 8020386:	18c0      	adds	r0, r0, r3
 8020388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 802038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8020390:	d507      	bpl.n	80203a2 <__adddf3+0xe6>
 8020392:	f04f 0e00 	mov.w	lr, #0
 8020396:	f1dc 0c00 	rsbs	ip, ip, #0
 802039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 802039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80203a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80203a6:	d31b      	bcc.n	80203e0 <__adddf3+0x124>
 80203a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80203ac:	d30c      	bcc.n	80203c8 <__adddf3+0x10c>
 80203ae:	0849      	lsrs	r1, r1, #1
 80203b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80203b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80203b8:	f104 0401 	add.w	r4, r4, #1
 80203bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80203c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80203c4:	f080 809a 	bcs.w	80204fc <__adddf3+0x240>
 80203c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80203cc:	bf08      	it	eq
 80203ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80203d2:	f150 0000 	adcs.w	r0, r0, #0
 80203d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80203da:	ea41 0105 	orr.w	r1, r1, r5
 80203de:	bd30      	pop	{r4, r5, pc}
 80203e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80203e4:	4140      	adcs	r0, r0
 80203e6:	eb41 0101 	adc.w	r1, r1, r1
 80203ea:	3c01      	subs	r4, #1
 80203ec:	bf28      	it	cs
 80203ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80203f2:	d2e9      	bcs.n	80203c8 <__adddf3+0x10c>
 80203f4:	f091 0f00 	teq	r1, #0
 80203f8:	bf04      	itt	eq
 80203fa:	4601      	moveq	r1, r0
 80203fc:	2000      	moveq	r0, #0
 80203fe:	fab1 f381 	clz	r3, r1
 8020402:	bf08      	it	eq
 8020404:	3320      	addeq	r3, #32
 8020406:	f1a3 030b 	sub.w	r3, r3, #11
 802040a:	f1b3 0220 	subs.w	r2, r3, #32
 802040e:	da0c      	bge.n	802042a <__adddf3+0x16e>
 8020410:	320c      	adds	r2, #12
 8020412:	dd08      	ble.n	8020426 <__adddf3+0x16a>
 8020414:	f102 0c14 	add.w	ip, r2, #20
 8020418:	f1c2 020c 	rsb	r2, r2, #12
 802041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8020420:	fa21 f102 	lsr.w	r1, r1, r2
 8020424:	e00c      	b.n	8020440 <__adddf3+0x184>
 8020426:	f102 0214 	add.w	r2, r2, #20
 802042a:	bfd8      	it	le
 802042c:	f1c2 0c20 	rsble	ip, r2, #32
 8020430:	fa01 f102 	lsl.w	r1, r1, r2
 8020434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8020438:	bfdc      	itt	le
 802043a:	ea41 010c 	orrle.w	r1, r1, ip
 802043e:	4090      	lslle	r0, r2
 8020440:	1ae4      	subs	r4, r4, r3
 8020442:	bfa2      	ittt	ge
 8020444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8020448:	4329      	orrge	r1, r5
 802044a:	bd30      	popge	{r4, r5, pc}
 802044c:	ea6f 0404 	mvn.w	r4, r4
 8020450:	3c1f      	subs	r4, #31
 8020452:	da1c      	bge.n	802048e <__adddf3+0x1d2>
 8020454:	340c      	adds	r4, #12
 8020456:	dc0e      	bgt.n	8020476 <__adddf3+0x1ba>
 8020458:	f104 0414 	add.w	r4, r4, #20
 802045c:	f1c4 0220 	rsb	r2, r4, #32
 8020460:	fa20 f004 	lsr.w	r0, r0, r4
 8020464:	fa01 f302 	lsl.w	r3, r1, r2
 8020468:	ea40 0003 	orr.w	r0, r0, r3
 802046c:	fa21 f304 	lsr.w	r3, r1, r4
 8020470:	ea45 0103 	orr.w	r1, r5, r3
 8020474:	bd30      	pop	{r4, r5, pc}
 8020476:	f1c4 040c 	rsb	r4, r4, #12
 802047a:	f1c4 0220 	rsb	r2, r4, #32
 802047e:	fa20 f002 	lsr.w	r0, r0, r2
 8020482:	fa01 f304 	lsl.w	r3, r1, r4
 8020486:	ea40 0003 	orr.w	r0, r0, r3
 802048a:	4629      	mov	r1, r5
 802048c:	bd30      	pop	{r4, r5, pc}
 802048e:	fa21 f004 	lsr.w	r0, r1, r4
 8020492:	4629      	mov	r1, r5
 8020494:	bd30      	pop	{r4, r5, pc}
 8020496:	f094 0f00 	teq	r4, #0
 802049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 802049e:	bf06      	itte	eq
 80204a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80204a4:	3401      	addeq	r4, #1
 80204a6:	3d01      	subne	r5, #1
 80204a8:	e74e      	b.n	8020348 <__adddf3+0x8c>
 80204aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80204ae:	bf18      	it	ne
 80204b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80204b4:	d029      	beq.n	802050a <__adddf3+0x24e>
 80204b6:	ea94 0f05 	teq	r4, r5
 80204ba:	bf08      	it	eq
 80204bc:	ea90 0f02 	teqeq	r0, r2
 80204c0:	d005      	beq.n	80204ce <__adddf3+0x212>
 80204c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80204c6:	bf04      	itt	eq
 80204c8:	4619      	moveq	r1, r3
 80204ca:	4610      	moveq	r0, r2
 80204cc:	bd30      	pop	{r4, r5, pc}
 80204ce:	ea91 0f03 	teq	r1, r3
 80204d2:	bf1e      	ittt	ne
 80204d4:	2100      	movne	r1, #0
 80204d6:	2000      	movne	r0, #0
 80204d8:	bd30      	popne	{r4, r5, pc}
 80204da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80204de:	d105      	bne.n	80204ec <__adddf3+0x230>
 80204e0:	0040      	lsls	r0, r0, #1
 80204e2:	4149      	adcs	r1, r1
 80204e4:	bf28      	it	cs
 80204e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80204ea:	bd30      	pop	{r4, r5, pc}
 80204ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80204f0:	bf3c      	itt	cc
 80204f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80204f6:	bd30      	popcc	{r4, r5, pc}
 80204f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80204fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8020500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8020504:	f04f 0000 	mov.w	r0, #0
 8020508:	bd30      	pop	{r4, r5, pc}
 802050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 802050e:	bf1a      	itte	ne
 8020510:	4619      	movne	r1, r3
 8020512:	4610      	movne	r0, r2
 8020514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8020518:	bf1c      	itt	ne
 802051a:	460b      	movne	r3, r1
 802051c:	4602      	movne	r2, r0
 802051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8020522:	bf06      	itte	eq
 8020524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8020528:	ea91 0f03 	teqeq	r1, r3
 802052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8020530:	bd30      	pop	{r4, r5, pc}
 8020532:	bf00      	nop

08020534 <__aeabi_ui2d>:
 8020534:	f090 0f00 	teq	r0, #0
 8020538:	bf04      	itt	eq
 802053a:	2100      	moveq	r1, #0
 802053c:	4770      	bxeq	lr
 802053e:	b530      	push	{r4, r5, lr}
 8020540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8020544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8020548:	f04f 0500 	mov.w	r5, #0
 802054c:	f04f 0100 	mov.w	r1, #0
 8020550:	e750      	b.n	80203f4 <__adddf3+0x138>
 8020552:	bf00      	nop

08020554 <__aeabi_i2d>:
 8020554:	f090 0f00 	teq	r0, #0
 8020558:	bf04      	itt	eq
 802055a:	2100      	moveq	r1, #0
 802055c:	4770      	bxeq	lr
 802055e:	b530      	push	{r4, r5, lr}
 8020560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8020564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8020568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 802056c:	bf48      	it	mi
 802056e:	4240      	negmi	r0, r0
 8020570:	f04f 0100 	mov.w	r1, #0
 8020574:	e73e      	b.n	80203f4 <__adddf3+0x138>
 8020576:	bf00      	nop

08020578 <__aeabi_f2d>:
 8020578:	0042      	lsls	r2, r0, #1
 802057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 802057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8020582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8020586:	bf1f      	itttt	ne
 8020588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 802058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8020590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8020594:	4770      	bxne	lr
 8020596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 802059a:	bf08      	it	eq
 802059c:	4770      	bxeq	lr
 802059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80205a2:	bf04      	itt	eq
 80205a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80205a8:	4770      	bxeq	lr
 80205aa:	b530      	push	{r4, r5, lr}
 80205ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80205b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80205b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80205b8:	e71c      	b.n	80203f4 <__adddf3+0x138>
 80205ba:	bf00      	nop

080205bc <__aeabi_ul2d>:
 80205bc:	ea50 0201 	orrs.w	r2, r0, r1
 80205c0:	bf08      	it	eq
 80205c2:	4770      	bxeq	lr
 80205c4:	b530      	push	{r4, r5, lr}
 80205c6:	f04f 0500 	mov.w	r5, #0
 80205ca:	e00a      	b.n	80205e2 <__aeabi_l2d+0x16>

080205cc <__aeabi_l2d>:
 80205cc:	ea50 0201 	orrs.w	r2, r0, r1
 80205d0:	bf08      	it	eq
 80205d2:	4770      	bxeq	lr
 80205d4:	b530      	push	{r4, r5, lr}
 80205d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80205da:	d502      	bpl.n	80205e2 <__aeabi_l2d+0x16>
 80205dc:	4240      	negs	r0, r0
 80205de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80205e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80205e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80205ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80205ee:	f43f aed8 	beq.w	80203a2 <__adddf3+0xe6>
 80205f2:	f04f 0203 	mov.w	r2, #3
 80205f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80205fa:	bf18      	it	ne
 80205fc:	3203      	addne	r2, #3
 80205fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8020602:	bf18      	it	ne
 8020604:	3203      	addne	r2, #3
 8020606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 802060a:	f1c2 0320 	rsb	r3, r2, #32
 802060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8020612:	fa20 f002 	lsr.w	r0, r0, r2
 8020616:	fa01 fe03 	lsl.w	lr, r1, r3
 802061a:	ea40 000e 	orr.w	r0, r0, lr
 802061e:	fa21 f102 	lsr.w	r1, r1, r2
 8020622:	4414      	add	r4, r2
 8020624:	e6bd      	b.n	80203a2 <__adddf3+0xe6>
 8020626:	bf00      	nop

08020628 <__aeabi_dmul>:
 8020628:	b570      	push	{r4, r5, r6, lr}
 802062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 802062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8020632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8020636:	bf1d      	ittte	ne
 8020638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 802063c:	ea94 0f0c 	teqne	r4, ip
 8020640:	ea95 0f0c 	teqne	r5, ip
 8020644:	f000 f8de 	bleq	8020804 <__aeabi_dmul+0x1dc>
 8020648:	442c      	add	r4, r5
 802064a:	ea81 0603 	eor.w	r6, r1, r3
 802064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8020652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8020656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 802065a:	bf18      	it	ne
 802065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8020660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8020664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8020668:	d038      	beq.n	80206dc <__aeabi_dmul+0xb4>
 802066a:	fba0 ce02 	umull	ip, lr, r0, r2
 802066e:	f04f 0500 	mov.w	r5, #0
 8020672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8020676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 802067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 802067e:	f04f 0600 	mov.w	r6, #0
 8020682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8020686:	f09c 0f00 	teq	ip, #0
 802068a:	bf18      	it	ne
 802068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8020690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8020694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8020698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 802069c:	d204      	bcs.n	80206a8 <__aeabi_dmul+0x80>
 802069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80206a2:	416d      	adcs	r5, r5
 80206a4:	eb46 0606 	adc.w	r6, r6, r6
 80206a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80206ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80206b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80206b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80206b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80206bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80206c0:	bf88      	it	hi
 80206c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80206c6:	d81e      	bhi.n	8020706 <__aeabi_dmul+0xde>
 80206c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80206cc:	bf08      	it	eq
 80206ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80206d2:	f150 0000 	adcs.w	r0, r0, #0
 80206d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80206da:	bd70      	pop	{r4, r5, r6, pc}
 80206dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80206e0:	ea46 0101 	orr.w	r1, r6, r1
 80206e4:	ea40 0002 	orr.w	r0, r0, r2
 80206e8:	ea81 0103 	eor.w	r1, r1, r3
 80206ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80206f0:	bfc2      	ittt	gt
 80206f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80206f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80206fa:	bd70      	popgt	{r4, r5, r6, pc}
 80206fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8020700:	f04f 0e00 	mov.w	lr, #0
 8020704:	3c01      	subs	r4, #1
 8020706:	f300 80ab 	bgt.w	8020860 <__aeabi_dmul+0x238>
 802070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 802070e:	bfde      	ittt	le
 8020710:	2000      	movle	r0, #0
 8020712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8020716:	bd70      	pople	{r4, r5, r6, pc}
 8020718:	f1c4 0400 	rsb	r4, r4, #0
 802071c:	3c20      	subs	r4, #32
 802071e:	da35      	bge.n	802078c <__aeabi_dmul+0x164>
 8020720:	340c      	adds	r4, #12
 8020722:	dc1b      	bgt.n	802075c <__aeabi_dmul+0x134>
 8020724:	f104 0414 	add.w	r4, r4, #20
 8020728:	f1c4 0520 	rsb	r5, r4, #32
 802072c:	fa00 f305 	lsl.w	r3, r0, r5
 8020730:	fa20 f004 	lsr.w	r0, r0, r4
 8020734:	fa01 f205 	lsl.w	r2, r1, r5
 8020738:	ea40 0002 	orr.w	r0, r0, r2
 802073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8020740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8020744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8020748:	fa21 f604 	lsr.w	r6, r1, r4
 802074c:	eb42 0106 	adc.w	r1, r2, r6
 8020750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8020754:	bf08      	it	eq
 8020756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 802075a:	bd70      	pop	{r4, r5, r6, pc}
 802075c:	f1c4 040c 	rsb	r4, r4, #12
 8020760:	f1c4 0520 	rsb	r5, r4, #32
 8020764:	fa00 f304 	lsl.w	r3, r0, r4
 8020768:	fa20 f005 	lsr.w	r0, r0, r5
 802076c:	fa01 f204 	lsl.w	r2, r1, r4
 8020770:	ea40 0002 	orr.w	r0, r0, r2
 8020774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8020778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 802077c:	f141 0100 	adc.w	r1, r1, #0
 8020780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8020784:	bf08      	it	eq
 8020786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 802078a:	bd70      	pop	{r4, r5, r6, pc}
 802078c:	f1c4 0520 	rsb	r5, r4, #32
 8020790:	fa00 f205 	lsl.w	r2, r0, r5
 8020794:	ea4e 0e02 	orr.w	lr, lr, r2
 8020798:	fa20 f304 	lsr.w	r3, r0, r4
 802079c:	fa01 f205 	lsl.w	r2, r1, r5
 80207a0:	ea43 0302 	orr.w	r3, r3, r2
 80207a4:	fa21 f004 	lsr.w	r0, r1, r4
 80207a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80207ac:	fa21 f204 	lsr.w	r2, r1, r4
 80207b0:	ea20 0002 	bic.w	r0, r0, r2
 80207b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80207b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80207bc:	bf08      	it	eq
 80207be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80207c2:	bd70      	pop	{r4, r5, r6, pc}
 80207c4:	f094 0f00 	teq	r4, #0
 80207c8:	d10f      	bne.n	80207ea <__aeabi_dmul+0x1c2>
 80207ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80207ce:	0040      	lsls	r0, r0, #1
 80207d0:	eb41 0101 	adc.w	r1, r1, r1
 80207d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80207d8:	bf08      	it	eq
 80207da:	3c01      	subeq	r4, #1
 80207dc:	d0f7      	beq.n	80207ce <__aeabi_dmul+0x1a6>
 80207de:	ea41 0106 	orr.w	r1, r1, r6
 80207e2:	f095 0f00 	teq	r5, #0
 80207e6:	bf18      	it	ne
 80207e8:	4770      	bxne	lr
 80207ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80207ee:	0052      	lsls	r2, r2, #1
 80207f0:	eb43 0303 	adc.w	r3, r3, r3
 80207f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80207f8:	bf08      	it	eq
 80207fa:	3d01      	subeq	r5, #1
 80207fc:	d0f7      	beq.n	80207ee <__aeabi_dmul+0x1c6>
 80207fe:	ea43 0306 	orr.w	r3, r3, r6
 8020802:	4770      	bx	lr
 8020804:	ea94 0f0c 	teq	r4, ip
 8020808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 802080c:	bf18      	it	ne
 802080e:	ea95 0f0c 	teqne	r5, ip
 8020812:	d00c      	beq.n	802082e <__aeabi_dmul+0x206>
 8020814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8020818:	bf18      	it	ne
 802081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 802081e:	d1d1      	bne.n	80207c4 <__aeabi_dmul+0x19c>
 8020820:	ea81 0103 	eor.w	r1, r1, r3
 8020824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8020828:	f04f 0000 	mov.w	r0, #0
 802082c:	bd70      	pop	{r4, r5, r6, pc}
 802082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8020832:	bf06      	itte	eq
 8020834:	4610      	moveq	r0, r2
 8020836:	4619      	moveq	r1, r3
 8020838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 802083c:	d019      	beq.n	8020872 <__aeabi_dmul+0x24a>
 802083e:	ea94 0f0c 	teq	r4, ip
 8020842:	d102      	bne.n	802084a <__aeabi_dmul+0x222>
 8020844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8020848:	d113      	bne.n	8020872 <__aeabi_dmul+0x24a>
 802084a:	ea95 0f0c 	teq	r5, ip
 802084e:	d105      	bne.n	802085c <__aeabi_dmul+0x234>
 8020850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8020854:	bf1c      	itt	ne
 8020856:	4610      	movne	r0, r2
 8020858:	4619      	movne	r1, r3
 802085a:	d10a      	bne.n	8020872 <__aeabi_dmul+0x24a>
 802085c:	ea81 0103 	eor.w	r1, r1, r3
 8020860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8020864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8020868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 802086c:	f04f 0000 	mov.w	r0, #0
 8020870:	bd70      	pop	{r4, r5, r6, pc}
 8020872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8020876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 802087a:	bd70      	pop	{r4, r5, r6, pc}

0802087c <__aeabi_ddiv>:
 802087c:	b570      	push	{r4, r5, r6, lr}
 802087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8020882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8020886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 802088a:	bf1d      	ittte	ne
 802088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8020890:	ea94 0f0c 	teqne	r4, ip
 8020894:	ea95 0f0c 	teqne	r5, ip
 8020898:	f000 f8a7 	bleq	80209ea <__aeabi_ddiv+0x16e>
 802089c:	eba4 0405 	sub.w	r4, r4, r5
 80208a0:	ea81 0e03 	eor.w	lr, r1, r3
 80208a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80208a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80208ac:	f000 8088 	beq.w	80209c0 <__aeabi_ddiv+0x144>
 80208b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80208b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80208b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80208bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80208c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80208c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80208c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80208cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80208d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80208d4:	429d      	cmp	r5, r3
 80208d6:	bf08      	it	eq
 80208d8:	4296      	cmpeq	r6, r2
 80208da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80208de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80208e2:	d202      	bcs.n	80208ea <__aeabi_ddiv+0x6e>
 80208e4:	085b      	lsrs	r3, r3, #1
 80208e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80208ea:	1ab6      	subs	r6, r6, r2
 80208ec:	eb65 0503 	sbc.w	r5, r5, r3
 80208f0:	085b      	lsrs	r3, r3, #1
 80208f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80208f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80208fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80208fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8020902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8020906:	bf22      	ittt	cs
 8020908:	1ab6      	subcs	r6, r6, r2
 802090a:	4675      	movcs	r5, lr
 802090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8020910:	085b      	lsrs	r3, r3, #1
 8020912:	ea4f 0232 	mov.w	r2, r2, rrx
 8020916:	ebb6 0e02 	subs.w	lr, r6, r2
 802091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 802091e:	bf22      	ittt	cs
 8020920:	1ab6      	subcs	r6, r6, r2
 8020922:	4675      	movcs	r5, lr
 8020924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8020928:	085b      	lsrs	r3, r3, #1
 802092a:	ea4f 0232 	mov.w	r2, r2, rrx
 802092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8020932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8020936:	bf22      	ittt	cs
 8020938:	1ab6      	subcs	r6, r6, r2
 802093a:	4675      	movcs	r5, lr
 802093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8020940:	085b      	lsrs	r3, r3, #1
 8020942:	ea4f 0232 	mov.w	r2, r2, rrx
 8020946:	ebb6 0e02 	subs.w	lr, r6, r2
 802094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 802094e:	bf22      	ittt	cs
 8020950:	1ab6      	subcs	r6, r6, r2
 8020952:	4675      	movcs	r5, lr
 8020954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8020958:	ea55 0e06 	orrs.w	lr, r5, r6
 802095c:	d018      	beq.n	8020990 <__aeabi_ddiv+0x114>
 802095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8020962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8020966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 802096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 802096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8020972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8020976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 802097a:	d1c0      	bne.n	80208fe <__aeabi_ddiv+0x82>
 802097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020980:	d10b      	bne.n	802099a <__aeabi_ddiv+0x11e>
 8020982:	ea41 0100 	orr.w	r1, r1, r0
 8020986:	f04f 0000 	mov.w	r0, #0
 802098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 802098e:	e7b6      	b.n	80208fe <__aeabi_ddiv+0x82>
 8020990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8020994:	bf04      	itt	eq
 8020996:	4301      	orreq	r1, r0
 8020998:	2000      	moveq	r0, #0
 802099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 802099e:	bf88      	it	hi
 80209a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80209a4:	f63f aeaf 	bhi.w	8020706 <__aeabi_dmul+0xde>
 80209a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80209ac:	bf04      	itt	eq
 80209ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80209b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80209b6:	f150 0000 	adcs.w	r0, r0, #0
 80209ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80209be:	bd70      	pop	{r4, r5, r6, pc}
 80209c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80209c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80209c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80209cc:	bfc2      	ittt	gt
 80209ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80209d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80209d6:	bd70      	popgt	{r4, r5, r6, pc}
 80209d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80209dc:	f04f 0e00 	mov.w	lr, #0
 80209e0:	3c01      	subs	r4, #1
 80209e2:	e690      	b.n	8020706 <__aeabi_dmul+0xde>
 80209e4:	ea45 0e06 	orr.w	lr, r5, r6
 80209e8:	e68d      	b.n	8020706 <__aeabi_dmul+0xde>
 80209ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80209ee:	ea94 0f0c 	teq	r4, ip
 80209f2:	bf08      	it	eq
 80209f4:	ea95 0f0c 	teqeq	r5, ip
 80209f8:	f43f af3b 	beq.w	8020872 <__aeabi_dmul+0x24a>
 80209fc:	ea94 0f0c 	teq	r4, ip
 8020a00:	d10a      	bne.n	8020a18 <__aeabi_ddiv+0x19c>
 8020a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8020a06:	f47f af34 	bne.w	8020872 <__aeabi_dmul+0x24a>
 8020a0a:	ea95 0f0c 	teq	r5, ip
 8020a0e:	f47f af25 	bne.w	802085c <__aeabi_dmul+0x234>
 8020a12:	4610      	mov	r0, r2
 8020a14:	4619      	mov	r1, r3
 8020a16:	e72c      	b.n	8020872 <__aeabi_dmul+0x24a>
 8020a18:	ea95 0f0c 	teq	r5, ip
 8020a1c:	d106      	bne.n	8020a2c <__aeabi_ddiv+0x1b0>
 8020a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8020a22:	f43f aefd 	beq.w	8020820 <__aeabi_dmul+0x1f8>
 8020a26:	4610      	mov	r0, r2
 8020a28:	4619      	mov	r1, r3
 8020a2a:	e722      	b.n	8020872 <__aeabi_dmul+0x24a>
 8020a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8020a30:	bf18      	it	ne
 8020a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8020a36:	f47f aec5 	bne.w	80207c4 <__aeabi_dmul+0x19c>
 8020a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8020a3e:	f47f af0d 	bne.w	802085c <__aeabi_dmul+0x234>
 8020a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8020a46:	f47f aeeb 	bne.w	8020820 <__aeabi_dmul+0x1f8>
 8020a4a:	e712      	b.n	8020872 <__aeabi_dmul+0x24a>

08020a4c <__gedf2>:
 8020a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8020a50:	e006      	b.n	8020a60 <__cmpdf2+0x4>
 8020a52:	bf00      	nop

08020a54 <__ledf2>:
 8020a54:	f04f 0c01 	mov.w	ip, #1
 8020a58:	e002      	b.n	8020a60 <__cmpdf2+0x4>
 8020a5a:	bf00      	nop

08020a5c <__cmpdf2>:
 8020a5c:	f04f 0c01 	mov.w	ip, #1
 8020a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8020a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020a70:	bf18      	it	ne
 8020a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8020a76:	d01b      	beq.n	8020ab0 <__cmpdf2+0x54>
 8020a78:	b001      	add	sp, #4
 8020a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8020a7e:	bf0c      	ite	eq
 8020a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8020a84:	ea91 0f03 	teqne	r1, r3
 8020a88:	bf02      	ittt	eq
 8020a8a:	ea90 0f02 	teqeq	r0, r2
 8020a8e:	2000      	moveq	r0, #0
 8020a90:	4770      	bxeq	lr
 8020a92:	f110 0f00 	cmn.w	r0, #0
 8020a96:	ea91 0f03 	teq	r1, r3
 8020a9a:	bf58      	it	pl
 8020a9c:	4299      	cmppl	r1, r3
 8020a9e:	bf08      	it	eq
 8020aa0:	4290      	cmpeq	r0, r2
 8020aa2:	bf2c      	ite	cs
 8020aa4:	17d8      	asrcs	r0, r3, #31
 8020aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8020aaa:	f040 0001 	orr.w	r0, r0, #1
 8020aae:	4770      	bx	lr
 8020ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020ab8:	d102      	bne.n	8020ac0 <__cmpdf2+0x64>
 8020aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8020abe:	d107      	bne.n	8020ad0 <__cmpdf2+0x74>
 8020ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020ac8:	d1d6      	bne.n	8020a78 <__cmpdf2+0x1c>
 8020aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8020ace:	d0d3      	beq.n	8020a78 <__cmpdf2+0x1c>
 8020ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8020ad4:	4770      	bx	lr
 8020ad6:	bf00      	nop

08020ad8 <__aeabi_cdrcmple>:
 8020ad8:	4684      	mov	ip, r0
 8020ada:	4610      	mov	r0, r2
 8020adc:	4662      	mov	r2, ip
 8020ade:	468c      	mov	ip, r1
 8020ae0:	4619      	mov	r1, r3
 8020ae2:	4663      	mov	r3, ip
 8020ae4:	e000      	b.n	8020ae8 <__aeabi_cdcmpeq>
 8020ae6:	bf00      	nop

08020ae8 <__aeabi_cdcmpeq>:
 8020ae8:	b501      	push	{r0, lr}
 8020aea:	f7ff ffb7 	bl	8020a5c <__cmpdf2>
 8020aee:	2800      	cmp	r0, #0
 8020af0:	bf48      	it	mi
 8020af2:	f110 0f00 	cmnmi.w	r0, #0
 8020af6:	bd01      	pop	{r0, pc}

08020af8 <__aeabi_dcmpeq>:
 8020af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020afc:	f7ff fff4 	bl	8020ae8 <__aeabi_cdcmpeq>
 8020b00:	bf0c      	ite	eq
 8020b02:	2001      	moveq	r0, #1
 8020b04:	2000      	movne	r0, #0
 8020b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8020b0a:	bf00      	nop

08020b0c <__aeabi_dcmplt>:
 8020b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020b10:	f7ff ffea 	bl	8020ae8 <__aeabi_cdcmpeq>
 8020b14:	bf34      	ite	cc
 8020b16:	2001      	movcc	r0, #1
 8020b18:	2000      	movcs	r0, #0
 8020b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8020b1e:	bf00      	nop

08020b20 <__aeabi_dcmple>:
 8020b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020b24:	f7ff ffe0 	bl	8020ae8 <__aeabi_cdcmpeq>
 8020b28:	bf94      	ite	ls
 8020b2a:	2001      	movls	r0, #1
 8020b2c:	2000      	movhi	r0, #0
 8020b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8020b32:	bf00      	nop

08020b34 <__aeabi_dcmpge>:
 8020b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020b38:	f7ff ffce 	bl	8020ad8 <__aeabi_cdrcmple>
 8020b3c:	bf94      	ite	ls
 8020b3e:	2001      	movls	r0, #1
 8020b40:	2000      	movhi	r0, #0
 8020b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8020b46:	bf00      	nop

08020b48 <__aeabi_dcmpgt>:
 8020b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8020b4c:	f7ff ffc4 	bl	8020ad8 <__aeabi_cdrcmple>
 8020b50:	bf34      	ite	cc
 8020b52:	2001      	movcc	r0, #1
 8020b54:	2000      	movcs	r0, #0
 8020b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8020b5a:	bf00      	nop

08020b5c <__aeabi_dcmpun>:
 8020b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8020b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020b64:	d102      	bne.n	8020b6c <__aeabi_dcmpun+0x10>
 8020b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8020b6a:	d10a      	bne.n	8020b82 <__aeabi_dcmpun+0x26>
 8020b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8020b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8020b74:	d102      	bne.n	8020b7c <__aeabi_dcmpun+0x20>
 8020b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8020b7a:	d102      	bne.n	8020b82 <__aeabi_dcmpun+0x26>
 8020b7c:	f04f 0000 	mov.w	r0, #0
 8020b80:	4770      	bx	lr
 8020b82:	f04f 0001 	mov.w	r0, #1
 8020b86:	4770      	bx	lr

08020b88 <__aeabi_d2iz>:
 8020b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8020b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8020b90:	d215      	bcs.n	8020bbe <__aeabi_d2iz+0x36>
 8020b92:	d511      	bpl.n	8020bb8 <__aeabi_d2iz+0x30>
 8020b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8020b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8020b9c:	d912      	bls.n	8020bc4 <__aeabi_d2iz+0x3c>
 8020b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8020ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8020ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8020baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8020bae:	fa23 f002 	lsr.w	r0, r3, r2
 8020bb2:	bf18      	it	ne
 8020bb4:	4240      	negne	r0, r0
 8020bb6:	4770      	bx	lr
 8020bb8:	f04f 0000 	mov.w	r0, #0
 8020bbc:	4770      	bx	lr
 8020bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8020bc2:	d105      	bne.n	8020bd0 <__aeabi_d2iz+0x48>
 8020bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8020bc8:	bf08      	it	eq
 8020bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8020bce:	4770      	bx	lr
 8020bd0:	f04f 0000 	mov.w	r0, #0
 8020bd4:	4770      	bx	lr
 8020bd6:	bf00      	nop

08020bd8 <__aeabi_uldivmod>:
 8020bd8:	b953      	cbnz	r3, 8020bf0 <__aeabi_uldivmod+0x18>
 8020bda:	b94a      	cbnz	r2, 8020bf0 <__aeabi_uldivmod+0x18>
 8020bdc:	2900      	cmp	r1, #0
 8020bde:	bf08      	it	eq
 8020be0:	2800      	cmpeq	r0, #0
 8020be2:	bf1c      	itt	ne
 8020be4:	f04f 31ff 	movne.w	r1, #4294967295
 8020be8:	f04f 30ff 	movne.w	r0, #4294967295
 8020bec:	f000 b974 	b.w	8020ed8 <__aeabi_idiv0>
 8020bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8020bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8020bf8:	f000 f806 	bl	8020c08 <__udivmoddi4>
 8020bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8020c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8020c04:	b004      	add	sp, #16
 8020c06:	4770      	bx	lr

08020c08 <__udivmoddi4>:
 8020c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020c0c:	9d08      	ldr	r5, [sp, #32]
 8020c0e:	4604      	mov	r4, r0
 8020c10:	468e      	mov	lr, r1
 8020c12:	2b00      	cmp	r3, #0
 8020c14:	d14d      	bne.n	8020cb2 <__udivmoddi4+0xaa>
 8020c16:	428a      	cmp	r2, r1
 8020c18:	4694      	mov	ip, r2
 8020c1a:	d969      	bls.n	8020cf0 <__udivmoddi4+0xe8>
 8020c1c:	fab2 f282 	clz	r2, r2
 8020c20:	b152      	cbz	r2, 8020c38 <__udivmoddi4+0x30>
 8020c22:	fa01 f302 	lsl.w	r3, r1, r2
 8020c26:	f1c2 0120 	rsb	r1, r2, #32
 8020c2a:	fa20 f101 	lsr.w	r1, r0, r1
 8020c2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8020c32:	ea41 0e03 	orr.w	lr, r1, r3
 8020c36:	4094      	lsls	r4, r2
 8020c38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8020c3c:	0c21      	lsrs	r1, r4, #16
 8020c3e:	fbbe f6f8 	udiv	r6, lr, r8
 8020c42:	fa1f f78c 	uxth.w	r7, ip
 8020c46:	fb08 e316 	mls	r3, r8, r6, lr
 8020c4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8020c4e:	fb06 f107 	mul.w	r1, r6, r7
 8020c52:	4299      	cmp	r1, r3
 8020c54:	d90a      	bls.n	8020c6c <__udivmoddi4+0x64>
 8020c56:	eb1c 0303 	adds.w	r3, ip, r3
 8020c5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8020c5e:	f080 811f 	bcs.w	8020ea0 <__udivmoddi4+0x298>
 8020c62:	4299      	cmp	r1, r3
 8020c64:	f240 811c 	bls.w	8020ea0 <__udivmoddi4+0x298>
 8020c68:	3e02      	subs	r6, #2
 8020c6a:	4463      	add	r3, ip
 8020c6c:	1a5b      	subs	r3, r3, r1
 8020c6e:	b2a4      	uxth	r4, r4
 8020c70:	fbb3 f0f8 	udiv	r0, r3, r8
 8020c74:	fb08 3310 	mls	r3, r8, r0, r3
 8020c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8020c7c:	fb00 f707 	mul.w	r7, r0, r7
 8020c80:	42a7      	cmp	r7, r4
 8020c82:	d90a      	bls.n	8020c9a <__udivmoddi4+0x92>
 8020c84:	eb1c 0404 	adds.w	r4, ip, r4
 8020c88:	f100 33ff 	add.w	r3, r0, #4294967295
 8020c8c:	f080 810a 	bcs.w	8020ea4 <__udivmoddi4+0x29c>
 8020c90:	42a7      	cmp	r7, r4
 8020c92:	f240 8107 	bls.w	8020ea4 <__udivmoddi4+0x29c>
 8020c96:	4464      	add	r4, ip
 8020c98:	3802      	subs	r0, #2
 8020c9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8020c9e:	1be4      	subs	r4, r4, r7
 8020ca0:	2600      	movs	r6, #0
 8020ca2:	b11d      	cbz	r5, 8020cac <__udivmoddi4+0xa4>
 8020ca4:	40d4      	lsrs	r4, r2
 8020ca6:	2300      	movs	r3, #0
 8020ca8:	e9c5 4300 	strd	r4, r3, [r5]
 8020cac:	4631      	mov	r1, r6
 8020cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020cb2:	428b      	cmp	r3, r1
 8020cb4:	d909      	bls.n	8020cca <__udivmoddi4+0xc2>
 8020cb6:	2d00      	cmp	r5, #0
 8020cb8:	f000 80ef 	beq.w	8020e9a <__udivmoddi4+0x292>
 8020cbc:	2600      	movs	r6, #0
 8020cbe:	e9c5 0100 	strd	r0, r1, [r5]
 8020cc2:	4630      	mov	r0, r6
 8020cc4:	4631      	mov	r1, r6
 8020cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020cca:	fab3 f683 	clz	r6, r3
 8020cce:	2e00      	cmp	r6, #0
 8020cd0:	d14a      	bne.n	8020d68 <__udivmoddi4+0x160>
 8020cd2:	428b      	cmp	r3, r1
 8020cd4:	d302      	bcc.n	8020cdc <__udivmoddi4+0xd4>
 8020cd6:	4282      	cmp	r2, r0
 8020cd8:	f200 80f9 	bhi.w	8020ece <__udivmoddi4+0x2c6>
 8020cdc:	1a84      	subs	r4, r0, r2
 8020cde:	eb61 0303 	sbc.w	r3, r1, r3
 8020ce2:	2001      	movs	r0, #1
 8020ce4:	469e      	mov	lr, r3
 8020ce6:	2d00      	cmp	r5, #0
 8020ce8:	d0e0      	beq.n	8020cac <__udivmoddi4+0xa4>
 8020cea:	e9c5 4e00 	strd	r4, lr, [r5]
 8020cee:	e7dd      	b.n	8020cac <__udivmoddi4+0xa4>
 8020cf0:	b902      	cbnz	r2, 8020cf4 <__udivmoddi4+0xec>
 8020cf2:	deff      	udf	#255	; 0xff
 8020cf4:	fab2 f282 	clz	r2, r2
 8020cf8:	2a00      	cmp	r2, #0
 8020cfa:	f040 8092 	bne.w	8020e22 <__udivmoddi4+0x21a>
 8020cfe:	eba1 010c 	sub.w	r1, r1, ip
 8020d02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8020d06:	fa1f fe8c 	uxth.w	lr, ip
 8020d0a:	2601      	movs	r6, #1
 8020d0c:	0c20      	lsrs	r0, r4, #16
 8020d0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8020d12:	fb07 1113 	mls	r1, r7, r3, r1
 8020d16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8020d1a:	fb0e f003 	mul.w	r0, lr, r3
 8020d1e:	4288      	cmp	r0, r1
 8020d20:	d908      	bls.n	8020d34 <__udivmoddi4+0x12c>
 8020d22:	eb1c 0101 	adds.w	r1, ip, r1
 8020d26:	f103 38ff 	add.w	r8, r3, #4294967295
 8020d2a:	d202      	bcs.n	8020d32 <__udivmoddi4+0x12a>
 8020d2c:	4288      	cmp	r0, r1
 8020d2e:	f200 80cb 	bhi.w	8020ec8 <__udivmoddi4+0x2c0>
 8020d32:	4643      	mov	r3, r8
 8020d34:	1a09      	subs	r1, r1, r0
 8020d36:	b2a4      	uxth	r4, r4
 8020d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8020d3c:	fb07 1110 	mls	r1, r7, r0, r1
 8020d40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8020d44:	fb0e fe00 	mul.w	lr, lr, r0
 8020d48:	45a6      	cmp	lr, r4
 8020d4a:	d908      	bls.n	8020d5e <__udivmoddi4+0x156>
 8020d4c:	eb1c 0404 	adds.w	r4, ip, r4
 8020d50:	f100 31ff 	add.w	r1, r0, #4294967295
 8020d54:	d202      	bcs.n	8020d5c <__udivmoddi4+0x154>
 8020d56:	45a6      	cmp	lr, r4
 8020d58:	f200 80bb 	bhi.w	8020ed2 <__udivmoddi4+0x2ca>
 8020d5c:	4608      	mov	r0, r1
 8020d5e:	eba4 040e 	sub.w	r4, r4, lr
 8020d62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8020d66:	e79c      	b.n	8020ca2 <__udivmoddi4+0x9a>
 8020d68:	f1c6 0720 	rsb	r7, r6, #32
 8020d6c:	40b3      	lsls	r3, r6
 8020d6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8020d72:	ea4c 0c03 	orr.w	ip, ip, r3
 8020d76:	fa20 f407 	lsr.w	r4, r0, r7
 8020d7a:	fa01 f306 	lsl.w	r3, r1, r6
 8020d7e:	431c      	orrs	r4, r3
 8020d80:	40f9      	lsrs	r1, r7
 8020d82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8020d86:	fa00 f306 	lsl.w	r3, r0, r6
 8020d8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8020d8e:	0c20      	lsrs	r0, r4, #16
 8020d90:	fa1f fe8c 	uxth.w	lr, ip
 8020d94:	fb09 1118 	mls	r1, r9, r8, r1
 8020d98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8020d9c:	fb08 f00e 	mul.w	r0, r8, lr
 8020da0:	4288      	cmp	r0, r1
 8020da2:	fa02 f206 	lsl.w	r2, r2, r6
 8020da6:	d90b      	bls.n	8020dc0 <__udivmoddi4+0x1b8>
 8020da8:	eb1c 0101 	adds.w	r1, ip, r1
 8020dac:	f108 3aff 	add.w	sl, r8, #4294967295
 8020db0:	f080 8088 	bcs.w	8020ec4 <__udivmoddi4+0x2bc>
 8020db4:	4288      	cmp	r0, r1
 8020db6:	f240 8085 	bls.w	8020ec4 <__udivmoddi4+0x2bc>
 8020dba:	f1a8 0802 	sub.w	r8, r8, #2
 8020dbe:	4461      	add	r1, ip
 8020dc0:	1a09      	subs	r1, r1, r0
 8020dc2:	b2a4      	uxth	r4, r4
 8020dc4:	fbb1 f0f9 	udiv	r0, r1, r9
 8020dc8:	fb09 1110 	mls	r1, r9, r0, r1
 8020dcc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8020dd0:	fb00 fe0e 	mul.w	lr, r0, lr
 8020dd4:	458e      	cmp	lr, r1
 8020dd6:	d908      	bls.n	8020dea <__udivmoddi4+0x1e2>
 8020dd8:	eb1c 0101 	adds.w	r1, ip, r1
 8020ddc:	f100 34ff 	add.w	r4, r0, #4294967295
 8020de0:	d26c      	bcs.n	8020ebc <__udivmoddi4+0x2b4>
 8020de2:	458e      	cmp	lr, r1
 8020de4:	d96a      	bls.n	8020ebc <__udivmoddi4+0x2b4>
 8020de6:	3802      	subs	r0, #2
 8020de8:	4461      	add	r1, ip
 8020dea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8020dee:	fba0 9402 	umull	r9, r4, r0, r2
 8020df2:	eba1 010e 	sub.w	r1, r1, lr
 8020df6:	42a1      	cmp	r1, r4
 8020df8:	46c8      	mov	r8, r9
 8020dfa:	46a6      	mov	lr, r4
 8020dfc:	d356      	bcc.n	8020eac <__udivmoddi4+0x2a4>
 8020dfe:	d053      	beq.n	8020ea8 <__udivmoddi4+0x2a0>
 8020e00:	b15d      	cbz	r5, 8020e1a <__udivmoddi4+0x212>
 8020e02:	ebb3 0208 	subs.w	r2, r3, r8
 8020e06:	eb61 010e 	sbc.w	r1, r1, lr
 8020e0a:	fa01 f707 	lsl.w	r7, r1, r7
 8020e0e:	fa22 f306 	lsr.w	r3, r2, r6
 8020e12:	40f1      	lsrs	r1, r6
 8020e14:	431f      	orrs	r7, r3
 8020e16:	e9c5 7100 	strd	r7, r1, [r5]
 8020e1a:	2600      	movs	r6, #0
 8020e1c:	4631      	mov	r1, r6
 8020e1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020e22:	f1c2 0320 	rsb	r3, r2, #32
 8020e26:	40d8      	lsrs	r0, r3
 8020e28:	fa0c fc02 	lsl.w	ip, ip, r2
 8020e2c:	fa21 f303 	lsr.w	r3, r1, r3
 8020e30:	4091      	lsls	r1, r2
 8020e32:	4301      	orrs	r1, r0
 8020e34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8020e38:	fa1f fe8c 	uxth.w	lr, ip
 8020e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8020e40:	fb07 3610 	mls	r6, r7, r0, r3
 8020e44:	0c0b      	lsrs	r3, r1, #16
 8020e46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8020e4a:	fb00 f60e 	mul.w	r6, r0, lr
 8020e4e:	429e      	cmp	r6, r3
 8020e50:	fa04 f402 	lsl.w	r4, r4, r2
 8020e54:	d908      	bls.n	8020e68 <__udivmoddi4+0x260>
 8020e56:	eb1c 0303 	adds.w	r3, ip, r3
 8020e5a:	f100 38ff 	add.w	r8, r0, #4294967295
 8020e5e:	d22f      	bcs.n	8020ec0 <__udivmoddi4+0x2b8>
 8020e60:	429e      	cmp	r6, r3
 8020e62:	d92d      	bls.n	8020ec0 <__udivmoddi4+0x2b8>
 8020e64:	3802      	subs	r0, #2
 8020e66:	4463      	add	r3, ip
 8020e68:	1b9b      	subs	r3, r3, r6
 8020e6a:	b289      	uxth	r1, r1
 8020e6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8020e70:	fb07 3316 	mls	r3, r7, r6, r3
 8020e74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8020e78:	fb06 f30e 	mul.w	r3, r6, lr
 8020e7c:	428b      	cmp	r3, r1
 8020e7e:	d908      	bls.n	8020e92 <__udivmoddi4+0x28a>
 8020e80:	eb1c 0101 	adds.w	r1, ip, r1
 8020e84:	f106 38ff 	add.w	r8, r6, #4294967295
 8020e88:	d216      	bcs.n	8020eb8 <__udivmoddi4+0x2b0>
 8020e8a:	428b      	cmp	r3, r1
 8020e8c:	d914      	bls.n	8020eb8 <__udivmoddi4+0x2b0>
 8020e8e:	3e02      	subs	r6, #2
 8020e90:	4461      	add	r1, ip
 8020e92:	1ac9      	subs	r1, r1, r3
 8020e94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8020e98:	e738      	b.n	8020d0c <__udivmoddi4+0x104>
 8020e9a:	462e      	mov	r6, r5
 8020e9c:	4628      	mov	r0, r5
 8020e9e:	e705      	b.n	8020cac <__udivmoddi4+0xa4>
 8020ea0:	4606      	mov	r6, r0
 8020ea2:	e6e3      	b.n	8020c6c <__udivmoddi4+0x64>
 8020ea4:	4618      	mov	r0, r3
 8020ea6:	e6f8      	b.n	8020c9a <__udivmoddi4+0x92>
 8020ea8:	454b      	cmp	r3, r9
 8020eaa:	d2a9      	bcs.n	8020e00 <__udivmoddi4+0x1f8>
 8020eac:	ebb9 0802 	subs.w	r8, r9, r2
 8020eb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8020eb4:	3801      	subs	r0, #1
 8020eb6:	e7a3      	b.n	8020e00 <__udivmoddi4+0x1f8>
 8020eb8:	4646      	mov	r6, r8
 8020eba:	e7ea      	b.n	8020e92 <__udivmoddi4+0x28a>
 8020ebc:	4620      	mov	r0, r4
 8020ebe:	e794      	b.n	8020dea <__udivmoddi4+0x1e2>
 8020ec0:	4640      	mov	r0, r8
 8020ec2:	e7d1      	b.n	8020e68 <__udivmoddi4+0x260>
 8020ec4:	46d0      	mov	r8, sl
 8020ec6:	e77b      	b.n	8020dc0 <__udivmoddi4+0x1b8>
 8020ec8:	3b02      	subs	r3, #2
 8020eca:	4461      	add	r1, ip
 8020ecc:	e732      	b.n	8020d34 <__udivmoddi4+0x12c>
 8020ece:	4630      	mov	r0, r6
 8020ed0:	e709      	b.n	8020ce6 <__udivmoddi4+0xde>
 8020ed2:	4464      	add	r4, ip
 8020ed4:	3802      	subs	r0, #2
 8020ed6:	e742      	b.n	8020d5e <__udivmoddi4+0x156>

08020ed8 <__aeabi_idiv0>:
 8020ed8:	4770      	bx	lr
 8020eda:	bf00      	nop

08020edc <__io_putchar>:
}
#endif

#if 1
int __io_putchar(int ch)
{
 8020edc:	b580      	push	{r7, lr}
 8020ede:	b082      	sub	sp, #8
 8020ee0:	af00      	add	r7, sp, #0
 8020ee2:	6078      	str	r0, [r7, #4]
    #if USE_TX_DMA
	HAL_UART_Transmit_DMA( &huart2, (uint8_t *)&ch, 1);
    #else
    HAL_UART_Transmit( &huart2, (uint8_t *)&ch, 1, 100);
 8020ee4:	1d39      	adds	r1, r7, #4
 8020ee6:	2364      	movs	r3, #100	; 0x64
 8020ee8:	2201      	movs	r2, #1
 8020eea:	4804      	ldr	r0, [pc, #16]	; (8020efc <__io_putchar+0x20>)
 8020eec:	f002 fccd 	bl	802388a <HAL_UART_Transmit>
    #endif
	return ch;
 8020ef0:	687b      	ldr	r3, [r7, #4]
}
 8020ef2:	4618      	mov	r0, r3
 8020ef4:	3708      	adds	r7, #8
 8020ef6:	46bd      	mov	sp, r7
 8020ef8:	bd80      	pop	{r7, pc}
 8020efa:	bf00      	nop
 8020efc:	200002d0 	.word	0x200002d0

08020f00 <Convert_Char>:
//----------------------------------------
// CLI UART CALLBACK for stm32f
//----------------------------------------
/* USER CODE BEGIN 1 */
void Convert_Char(uint8_t *byte)
{
 8020f00:	b480      	push	{r7}
 8020f02:	b083      	sub	sp, #12
 8020f04:	af00      	add	r7, sp, #0
 8020f06:	6078      	str	r0, [r7, #4]
    #if 1 // LOW to UP
    if ((*byte >= LOWER_A) && (*byte <= LOWER_Z)) {
 8020f08:	687b      	ldr	r3, [r7, #4]
 8020f0a:	781b      	ldrb	r3, [r3, #0]
 8020f0c:	2b60      	cmp	r3, #96	; 0x60
 8020f0e:	d909      	bls.n	8020f24 <Convert_Char+0x24>
 8020f10:	687b      	ldr	r3, [r7, #4]
 8020f12:	781b      	ldrb	r3, [r3, #0]
 8020f14:	2b7a      	cmp	r3, #122	; 0x7a
 8020f16:	d805      	bhi.n	8020f24 <Convert_Char+0x24>
        *byte -= CONVERT_CHAR_OFFSET;
 8020f18:	687b      	ldr	r3, [r7, #4]
 8020f1a:	781b      	ldrb	r3, [r3, #0]
 8020f1c:	3b20      	subs	r3, #32
 8020f1e:	b2da      	uxtb	r2, r3
 8020f20:	687b      	ldr	r3, [r7, #4]
 8020f22:	701a      	strb	r2, [r3, #0]
    #else
    if ((*byte >= UPPER_A) && (*byte <= UPPER_Z)) {
        *byte += CONVERT_CHAR_OFFSET;
    }
    #endif
}
 8020f24:	bf00      	nop
 8020f26:	370c      	adds	r7, #12
 8020f28:	46bd      	mov	sp, r7
 8020f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f2e:	4770      	bx	lr

08020f30 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8020f30:	b580      	push	{r7, lr}
 8020f32:	b082      	sub	sp, #8
 8020f34:	af00      	add	r7, sp, #0
 8020f36:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART2)
 8020f38:	687b      	ldr	r3, [r7, #4]
 8020f3a:	681b      	ldr	r3, [r3, #0]
 8020f3c:	4a29      	ldr	r2, [pc, #164]	; (8020fe4 <HAL_UART_RxCpltCallback+0xb4>)
 8020f3e:	4293      	cmp	r3, r2
 8020f40:	d14c      	bne.n	8020fdc <HAL_UART_RxCpltCallback+0xac>
  {
        // echo back test
        //HAL_UART_Transmit(&huart2, &uart_rx_byte, UART_BYTE, UART_TIME_OUT);
        if (uart_rx_byte == ASCII_LF || uart_rx_byte == ASCII_CR) {
 8020f42:	4b29      	ldr	r3, [pc, #164]	; (8020fe8 <HAL_UART_RxCpltCallback+0xb8>)
 8020f44:	781b      	ldrb	r3, [r3, #0]
 8020f46:	2b0a      	cmp	r3, #10
 8020f48:	d003      	beq.n	8020f52 <HAL_UART_RxCpltCallback+0x22>
 8020f4a:	4b27      	ldr	r3, [pc, #156]	; (8020fe8 <HAL_UART_RxCpltCallback+0xb8>)
 8020f4c:	781b      	ldrb	r3, [r3, #0]
 8020f4e:	2b0d      	cmp	r3, #13
 8020f50:	d104      	bne.n	8020f5c <HAL_UART_RxCpltCallback+0x2c>
            cli.rx_done  = CLI_READY;
 8020f52:	4b26      	ldr	r3, [pc, #152]	; (8020fec <HAL_UART_RxCpltCallback+0xbc>)
 8020f54:	2201      	movs	r2, #1
 8020f56:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
 8020f5a:	e03a      	b.n	8020fd2 <HAL_UART_RxCpltCallback+0xa2>
        }
         else if (uart_rx_byte == ASCII_BACKSPACE) {
 8020f5c:	4b22      	ldr	r3, [pc, #136]	; (8020fe8 <HAL_UART_RxCpltCallback+0xb8>)
 8020f5e:	781b      	ldrb	r3, [r3, #0]
 8020f60:	2b08      	cmp	r3, #8
 8020f62:	d11c      	bne.n	8020f9e <HAL_UART_RxCpltCallback+0x6e>
            if (cli.rx_index > 0) {
 8020f64:	4b21      	ldr	r3, [pc, #132]	; (8020fec <HAL_UART_RxCpltCallback+0xbc>)
 8020f66:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8020f6a:	2b00      	cmp	r3, #0
 8020f6c:	d013      	beq.n	8020f96 <HAL_UART_RxCpltCallback+0x66>
                cli.buffer[--cli.rx_index] = 0;
 8020f6e:	4b1f      	ldr	r3, [pc, #124]	; (8020fec <HAL_UART_RxCpltCallback+0xbc>)
 8020f70:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8020f74:	3b01      	subs	r3, #1
 8020f76:	b2da      	uxtb	r2, r3
 8020f78:	4b1c      	ldr	r3, [pc, #112]	; (8020fec <HAL_UART_RxCpltCallback+0xbc>)
 8020f7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8020f7e:	4b1b      	ldr	r3, [pc, #108]	; (8020fec <HAL_UART_RxCpltCallback+0xbc>)
 8020f80:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8020f84:	461a      	mov	r2, r3
 8020f86:	4b19      	ldr	r3, [pc, #100]	; (8020fec <HAL_UART_RxCpltCallback+0xbc>)
 8020f88:	2100      	movs	r1, #0
 8020f8a:	5499      	strb	r1, [r3, r2]
                printf(" %c",  ASCII_BACKSPACE);
 8020f8c:	2108      	movs	r1, #8
 8020f8e:	4818      	ldr	r0, [pc, #96]	; (8020ff0 <HAL_UART_RxCpltCallback+0xc0>)
 8020f90:	f004 fbb6 	bl	8025700 <iprintf>
 8020f94:	e01d      	b.n	8020fd2 <HAL_UART_RxCpltCallback+0xa2>
            } else {
                printf(" ");
 8020f96:	2020      	movs	r0, #32
 8020f98:	f004 fbca 	bl	8025730 <putchar>
 8020f9c:	e019      	b.n	8020fd2 <HAL_UART_RxCpltCallback+0xa2>
            }
        }
         else {
            Convert_Char(&uart_rx_byte);
 8020f9e:	4812      	ldr	r0, [pc, #72]	; (8020fe8 <HAL_UART_RxCpltCallback+0xb8>)
 8020fa0:	f7ff ffae 	bl	8020f00 <Convert_Char>
            cli.buffer[cli.rx_index] = uart_rx_byte;
 8020fa4:	4b11      	ldr	r3, [pc, #68]	; (8020fec <HAL_UART_RxCpltCallback+0xbc>)
 8020fa6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8020faa:	461a      	mov	r2, r3
 8020fac:	4b0e      	ldr	r3, [pc, #56]	; (8020fe8 <HAL_UART_RxCpltCallback+0xb8>)
 8020fae:	7819      	ldrb	r1, [r3, #0]
 8020fb0:	4b0e      	ldr	r3, [pc, #56]	; (8020fec <HAL_UART_RxCpltCallback+0xbc>)
 8020fb2:	5499      	strb	r1, [r3, r2]
            cli.rx_index = (cli.rx_index + 1) % UART_BUF_MAX;
 8020fb4:	4b0d      	ldr	r3, [pc, #52]	; (8020fec <HAL_UART_RxCpltCallback+0xbc>)
 8020fb6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8020fba:	3301      	adds	r3, #1
 8020fbc:	425a      	negs	r2, r3
 8020fbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8020fc2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8020fc6:	bf58      	it	pl
 8020fc8:	4253      	negpl	r3, r2
 8020fca:	b2da      	uxtb	r2, r3
 8020fcc:	4b07      	ldr	r3, [pc, #28]	; (8020fec <HAL_UART_RxCpltCallback+0xbc>)
 8020fce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
        }
        // uart rxne pending clear
        HAL_UART_Receive_IT(&huart2, &uart_rx_byte, UART_BYTE);
 8020fd2:	2201      	movs	r2, #1
 8020fd4:	4904      	ldr	r1, [pc, #16]	; (8020fe8 <HAL_UART_RxCpltCallback+0xb8>)
 8020fd6:	4807      	ldr	r0, [pc, #28]	; (8020ff4 <HAL_UART_RxCpltCallback+0xc4>)
 8020fd8:	f002 fce9 	bl	80239ae <HAL_UART_Receive_IT>
  }
}
 8020fdc:	bf00      	nop
 8020fde:	3708      	adds	r7, #8
 8020fe0:	46bd      	mov	sp, r7
 8020fe2:	bd80      	pop	{r7, pc}
 8020fe4:	40004400 	.word	0x40004400
 8020fe8:	200001fc 	.word	0x200001fc
 8020fec:	20000200 	.word	0x20000200
 8020ff0:	08027dfc 	.word	0x08027dfc
 8020ff4:	200002d0 	.word	0x200002d0

08020ff8 <parser>:
//----------------------------------------


/* CLI PARSER */
int parser(char *cmd)
{
 8020ff8:	b590      	push	{r4, r7, lr}
 8020ffa:	b099      	sub	sp, #100	; 0x64
 8020ffc:	af00      	add	r7, sp, #0
 8020ffe:	6078      	str	r0, [r7, #4]
    int    argc = 0;
 8021000:	2300      	movs	r3, #0
 8021002:	65fb      	str	r3, [r7, #92]	; 0x5c
    
#if USE_LAST_CMD
    static char *last_cmd;
#endif

    if (cmd == NULL) {
 8021004:	687b      	ldr	r3, [r7, #4]
 8021006:	2b00      	cmp	r3, #0
 8021008:	d102      	bne.n	8021010 <parser+0x18>
        printf("CMD Error\r\n");
 802100a:	482b      	ldr	r0, [pc, #172]	; (80210b8 <parser+0xc0>)
 802100c:	f004 fc14 	bl	8025838 <puts>
    }
    
	//----------------------------------------
    // SPLIT THE UART RX STRING
    //----------------------------------------
    argv[argc++] = strtok(cmd, D_DELIMITER);
 8021010:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8021012:	1c63      	adds	r3, r4, #1
 8021014:	65fb      	str	r3, [r7, #92]	; 0x5c
 8021016:	4929      	ldr	r1, [pc, #164]	; (80210bc <parser+0xc4>)
 8021018:	6878      	ldr	r0, [r7, #4]
 802101a:	f004 fce3 	bl	80259e4 <strtok>
 802101e:	4602      	mov	r2, r0
 8021020:	00a3      	lsls	r3, r4, #2
 8021022:	3360      	adds	r3, #96	; 0x60
 8021024:	443b      	add	r3, r7
 8021026:	f843 2c58 	str.w	r2, [r3, #-88]

    while (1) {
        argv[argc] = strtok(NULL, D_DELIMITER);
 802102a:	4924      	ldr	r1, [pc, #144]	; (80210bc <parser+0xc4>)
 802102c:	2000      	movs	r0, #0
 802102e:	f004 fcd9 	bl	80259e4 <strtok>
 8021032:	4602      	mov	r2, r0
 8021034:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8021036:	009b      	lsls	r3, r3, #2
 8021038:	3360      	adds	r3, #96	; 0x60
 802103a:	443b      	add	r3, r7
 802103c:	f843 2c58 	str.w	r2, [r3, #-88]
        
        if (argv[argc] == NULL) {
 8021040:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8021042:	009b      	lsls	r3, r3, #2
 8021044:	3360      	adds	r3, #96	; 0x60
 8021046:	443b      	add	r3, r7
 8021048:	f853 3c58 	ldr.w	r3, [r3, #-88]
 802104c:	2b00      	cmp	r3, #0
 802104e:	d003      	beq.n	8021058 <parser+0x60>
            break;
        }
        argc++;
 8021050:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8021052:	3301      	adds	r3, #1
 8021054:	65fb      	str	r3, [r7, #92]	; 0x5c
        argv[argc] = strtok(NULL, D_DELIMITER);
 8021056:	e7e8      	b.n	802102a <parser+0x32>
            break;
 8021058:	bf00      	nop
#endif

    //----------------------------------------
    // FIND THE MATCHED STRING
    //----------------------------------------
    for (int cnt = 0; cmd_list[cnt].name != NULL; cnt++) {
 802105a:	2300      	movs	r3, #0
 802105c:	65bb      	str	r3, [r7, #88]	; 0x58
 802105e:	e018      	b.n	8021092 <parser+0x9a>
        if (strcmp(cmd_list[cnt].name, argv[0]) == CLI_MATCH) {
 8021060:	4a17      	ldr	r2, [pc, #92]	; (80210c0 <parser+0xc8>)
 8021062:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8021064:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8021068:	68ba      	ldr	r2, [r7, #8]
 802106a:	4611      	mov	r1, r2
 802106c:	4618      	mov	r0, r3
 802106e:	f7ff f8b7 	bl	80201e0 <strcmp>
 8021072:	4603      	mov	r3, r0
 8021074:	2b00      	cmp	r3, #0
 8021076:	d109      	bne.n	802108c <parser+0x94>
            cmd_list[cnt].func(argc, argv);
 8021078:	4a11      	ldr	r2, [pc, #68]	; (80210c0 <parser+0xc8>)
 802107a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802107c:	00db      	lsls	r3, r3, #3
 802107e:	4413      	add	r3, r2
 8021080:	685b      	ldr	r3, [r3, #4]
 8021082:	f107 0208 	add.w	r2, r7, #8
 8021086:	4611      	mov	r1, r2
 8021088:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 802108a:	4798      	blx	r3
    for (int cnt = 0; cmd_list[cnt].name != NULL; cnt++) {
 802108c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 802108e:	3301      	adds	r3, #1
 8021090:	65bb      	str	r3, [r7, #88]	; 0x58
 8021092:	4a0b      	ldr	r2, [pc, #44]	; (80210c0 <parser+0xc8>)
 8021094:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8021096:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 802109a:	2b00      	cmp	r3, #0
 802109c:	d1e0      	bne.n	8021060 <parser+0x68>
#if USE_LAST_CMD
    // Last Commad Copy
    strcpy(last_cmd, argv[0]);
#endif

    memset(&cli, 0x0, sizeof(CLI_t));
 802109e:	2282      	movs	r2, #130	; 0x82
 80210a0:	2100      	movs	r1, #0
 80210a2:	4808      	ldr	r0, [pc, #32]	; (80210c4 <parser+0xcc>)
 80210a4:	f003 feba 	bl	8024e1c <memset>
    printf(" $Fish >> ");
 80210a8:	4807      	ldr	r0, [pc, #28]	; (80210c8 <parser+0xd0>)
 80210aa:	f004 fb29 	bl	8025700 <iprintf>
    if (strcmp(last_command, LAST_CMD) == CLI_MATCH) {
        printf("%s", last_command);
    }
#endif

    return LIST_NOT_FOUND;
 80210ae:	2301      	movs	r3, #1
}
 80210b0:	4618      	mov	r0, r3
 80210b2:	3764      	adds	r7, #100	; 0x64
 80210b4:	46bd      	mov	sp, r7
 80210b6:	bd90      	pop	{r4, r7, pc}
 80210b8:	08027e00 	.word	0x08027e00
 80210bc:	08027e0c 	.word	0x08027e0c
 80210c0:	0802811c 	.word	0x0802811c
 80210c4:	20000200 	.word	0x20000200
 80210c8:	08027e10 	.word	0x08027e10

080210cc <cbf_boot_logo>:

//----------------------------------------
// CALL BACK FUNCTION
//----------------------------------------
int cbf_boot_logo(int argc, char *argv[])
{
 80210cc:	b580      	push	{r7, lr}
 80210ce:	b082      	sub	sp, #8
 80210d0:	af00      	add	r7, sp, #0
 80210d2:	6078      	str	r0, [r7, #4]
 80210d4:	6039      	str	r1, [r7, #0]
    CONSOLE_SPLIT;
 80210d6:	4814      	ldr	r0, [pc, #80]	; (8021128 <cbf_boot_logo+0x5c>)
 80210d8:	f004 fbae 	bl	8025838 <puts>
    #if 1 // TYPE 1
    printf("╭━━━╮///╭╮/////\r\n");
 80210dc:	4813      	ldr	r0, [pc, #76]	; (802112c <cbf_boot_logo+0x60>)
 80210de:	f004 fbab 	bl	8025838 <puts>
    printf("┃╭━━╯///┃┃/////\r\n");
 80210e2:	4813      	ldr	r0, [pc, #76]	; (8021130 <cbf_boot_logo+0x64>)
 80210e4:	f004 fba8 	bl	8025838 <puts>
    printf("┃╰━━┳┳━━┫╰━╮///\r\n");
 80210e8:	4812      	ldr	r0, [pc, #72]	; (8021134 <cbf_boot_logo+0x68>)
 80210ea:	f004 fba5 	bl	8025838 <puts>
    printf("┃╭━━╋┫━━┫╭╮┃///*%s\r\n", tag->fw_name);
 80210ee:	4b12      	ldr	r3, [pc, #72]	; (8021138 <cbf_boot_logo+0x6c>)
 80210f0:	681b      	ldr	r3, [r3, #0]
 80210f2:	681b      	ldr	r3, [r3, #0]
 80210f4:	4619      	mov	r1, r3
 80210f6:	4811      	ldr	r0, [pc, #68]	; (802113c <cbf_boot_logo+0x70>)
 80210f8:	f004 fb02 	bl	8025700 <iprintf>
    printf("┃┃//┃┣━━┃┃┃┃///*%s\r\n", tag->fw_date);
 80210fc:	4b0e      	ldr	r3, [pc, #56]	; (8021138 <cbf_boot_logo+0x6c>)
 80210fe:	681b      	ldr	r3, [r3, #0]
 8021100:	685b      	ldr	r3, [r3, #4]
 8021102:	4619      	mov	r1, r3
 8021104:	480e      	ldr	r0, [pc, #56]	; (8021140 <cbf_boot_logo+0x74>)
 8021106:	f004 fafb 	bl	8025700 <iprintf>
    printf("╰╯//╰┻━━┻╯╰╯\r\n");
 802110a:	480e      	ldr	r0, [pc, #56]	; (8021144 <cbf_boot_logo+0x78>)
 802110c:	f004 fb94 	bl	8025838 <puts>

    #else // TYPE 2
    printf("  *%s\r\n", tag->fw_name);
    printf("  *%s\r\n", tag->fw_date);
    #endif
    CONSOLE_SPLIT;
 8021110:	4805      	ldr	r0, [pc, #20]	; (8021128 <cbf_boot_logo+0x5c>)
 8021112:	f004 fb91 	bl	8025838 <puts>
    printf(" $Fish >> ");
 8021116:	480c      	ldr	r0, [pc, #48]	; (8021148 <cbf_boot_logo+0x7c>)
 8021118:	f004 faf2 	bl	8025700 <iprintf>
    return 0;
 802111c:	2300      	movs	r3, #0
}
 802111e:	4618      	mov	r0, r3
 8021120:	3708      	adds	r7, #8
 8021122:	46bd      	mov	sp, r7
 8021124:	bd80      	pop	{r7, pc}
 8021126:	bf00      	nop
 8021128:	08027e1c 	.word	0x08027e1c
 802112c:	08027e64 	.word	0x08027e64
 8021130:	08027e84 	.word	0x08027e84
 8021134:	08027ea4 	.word	0x08027ea4
 8021138:	20000000 	.word	0x20000000
 802113c:	08027ed0 	.word	0x08027ed0
 8021140:	08027f00 	.word	0x08027f00
 8021144:	08027f2c 	.word	0x08027f2c
 8021148:	08027e10 	.word	0x08027e10

0802114c <cbf_sn>:

int cbf_sn(int argc, char *argv[])
{
 802114c:	b580      	push	{r7, lr}
 802114e:	b082      	sub	sp, #8
 8021150:	af00      	add	r7, sp, #0
 8021152:	6078      	str	r0, [r7, #4]
 8021154:	6039      	str	r1, [r7, #0]
    printf("SN : %06d\r\n", (int)tag->fw_sn);
 8021156:	4b06      	ldr	r3, [pc, #24]	; (8021170 <cbf_sn+0x24>)
 8021158:	681b      	ldr	r3, [r3, #0]
 802115a:	689b      	ldr	r3, [r3, #8]
 802115c:	4619      	mov	r1, r3
 802115e:	4805      	ldr	r0, [pc, #20]	; (8021174 <cbf_sn+0x28>)
 8021160:	f004 face 	bl	8025700 <iprintf>
    return 0;
 8021164:	2300      	movs	r3, #0
}
 8021166:	4618      	mov	r0, r3
 8021168:	3708      	adds	r7, #8
 802116a:	46bd      	mov	sp, r7
 802116c:	bd80      	pop	{r7, pc}
 802116e:	bf00      	nop
 8021170:	20000000 	.word	0x20000000
 8021174:	08027f50 	.word	0x08027f50

08021178 <cbf_help>:

int cbf_help(int argc, char *argv[])
{
 8021178:	b580      	push	{r7, lr}
 802117a:	b084      	sub	sp, #16
 802117c:	af00      	add	r7, sp, #0
 802117e:	6078      	str	r0, [r7, #4]
 8021180:	6039      	str	r1, [r7, #0]
    CONSOLE_SPLIT;
 8021182:	4811      	ldr	r0, [pc, #68]	; (80211c8 <cbf_help+0x50>)
 8021184:	f004 fb58 	bl	8025838 <puts>
    printf("Command List \r\n");
 8021188:	4810      	ldr	r0, [pc, #64]	; (80211cc <cbf_help+0x54>)
 802118a:	f004 fb55 	bl	8025838 <puts>
    CONSOLE_SPLIT;
 802118e:	480e      	ldr	r0, [pc, #56]	; (80211c8 <cbf_help+0x50>)
 8021190:	f004 fb52 	bl	8025838 <puts>
    for (int cnt = 0; cmd_list[cnt].name != NULL; cnt++) {
 8021194:	2300      	movs	r3, #0
 8021196:	60fb      	str	r3, [r7, #12]
 8021198:	e00a      	b.n	80211b0 <cbf_help+0x38>
        printf("%s \r\n", cmd_list[cnt].name);
 802119a:	4a0d      	ldr	r2, [pc, #52]	; (80211d0 <cbf_help+0x58>)
 802119c:	68fb      	ldr	r3, [r7, #12]
 802119e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80211a2:	4619      	mov	r1, r3
 80211a4:	480b      	ldr	r0, [pc, #44]	; (80211d4 <cbf_help+0x5c>)
 80211a6:	f004 faab 	bl	8025700 <iprintf>
    for (int cnt = 0; cmd_list[cnt].name != NULL; cnt++) {
 80211aa:	68fb      	ldr	r3, [r7, #12]
 80211ac:	3301      	adds	r3, #1
 80211ae:	60fb      	str	r3, [r7, #12]
 80211b0:	4a07      	ldr	r2, [pc, #28]	; (80211d0 <cbf_help+0x58>)
 80211b2:	68fb      	ldr	r3, [r7, #12]
 80211b4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80211b8:	2b00      	cmp	r3, #0
 80211ba:	d1ee      	bne.n	802119a <cbf_help+0x22>
    }
    return 0;
 80211bc:	2300      	movs	r3, #0
}
 80211be:	4618      	mov	r0, r3
 80211c0:	3710      	adds	r7, #16
 80211c2:	46bd      	mov	sp, r7
 80211c4:	bd80      	pop	{r7, pc}
 80211c6:	bf00      	nop
 80211c8:	08027e1c 	.word	0x08027e1c
 80211cc:	08027f5c 	.word	0x08027f5c
 80211d0:	0802811c 	.word	0x0802811c
 80211d4:	08027f6c 	.word	0x08027f6c

080211d8 <cbf_reset>:

int cbf_reset(int argc, char *argv[])
{
 80211d8:	b580      	push	{r7, lr}
 80211da:	b082      	sub	sp, #8
 80211dc:	af00      	add	r7, sp, #0
 80211de:	6078      	str	r0, [r7, #4]
 80211e0:	6039      	str	r1, [r7, #0]
    // software reset
    HAL_NVIC_SystemReset();
 80211e2:	f000 fe84 	bl	8021eee <HAL_NVIC_SystemReset>
    return 0;
 80211e6:	2300      	movs	r3, #0
}
 80211e8:	4618      	mov	r0, r3
 80211ea:	3708      	adds	r7, #8
 80211ec:	46bd      	mov	sp, r7
 80211ee:	bd80      	pop	{r7, pc}

080211f0 <cbf_test>:

int cbf_test(int argc, char *argv[])
{
 80211f0:	b580      	push	{r7, lr}
 80211f2:	b082      	sub	sp, #8
 80211f4:	af00      	add	r7, sp, #0
 80211f6:	6078      	str	r0, [r7, #4]
 80211f8:	6039      	str	r1, [r7, #0]
	printf("argv : %s \r\n", argv[0]);
 80211fa:	683b      	ldr	r3, [r7, #0]
 80211fc:	681b      	ldr	r3, [r3, #0]
 80211fe:	4619      	mov	r1, r3
 8021200:	4805      	ldr	r0, [pc, #20]	; (8021218 <cbf_test+0x28>)
 8021202:	f004 fa7d 	bl	8025700 <iprintf>
	//printf("argc : %d , argv : %s \r\n", argc, argv[1]);
	printf("TEST \r\n");
 8021206:	4805      	ldr	r0, [pc, #20]	; (802121c <cbf_test+0x2c>)
 8021208:	f004 fb16 	bl	8025838 <puts>
	return 0;
 802120c:	2300      	movs	r3, #0
}
 802120e:	4618      	mov	r0, r3
 8021210:	3708      	adds	r7, #8
 8021212:	46bd      	mov	sp, r7
 8021214:	bd80      	pop	{r7, pc}
 8021216:	bf00      	nop
 8021218:	08027f74 	.word	0x08027f74
 802121c:	08027f84 	.word	0x08027f84

08021220 <cbf_xmodem>:


int cbf_xmodem(int argc, char *argv[])
{
 8021220:	b580      	push	{r7, lr}
 8021222:	b084      	sub	sp, #16
 8021224:	af00      	add	r7, sp, #0
 8021226:	6078      	str	r0, [r7, #4]
 8021228:	6039      	str	r1, [r7, #0]
    uint32_t x_modem_size = 0;
 802122a:	2300      	movs	r3, #0
 802122c:	60bb      	str	r3, [r7, #8]
    // f/w update using uart polling
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 802122e:	2026      	movs	r0, #38	; 0x26
 8021230:	f000 fe4f 	bl	8021ed2 <HAL_NVIC_DisableIRQ>
        return 0;
    }

    FLASH_If_Init();
    #else
    FLASH_If_Erase(FLASH_BASE_MAIN_APP);
 8021234:	4817      	ldr	r0, [pc, #92]	; (8021294 <cbf_xmodem+0x74>)
 8021236:	f003 fb7b 	bl	8024930 <FLASH_If_Erase>
    #endif

    // entering x-modem ...
    uint8_t ret = XMODEM_Rx((uint32_t*)&x_modem_size, (uint32_t *)FLASH_BASE_MAIN_APP);
 802123a:	f107 0308 	add.w	r3, r7, #8
 802123e:	4915      	ldr	r1, [pc, #84]	; (8021294 <cbf_xmodem+0x74>)
 8021240:	4618      	mov	r0, r3
 8021242:	f003 fcff 	bl	8024c44 <XMODEM_Rx>
 8021246:	4603      	mov	r3, r0
 8021248:	73fb      	strb	r3, [r7, #15]
    
    HAL_FLASH_Lock();
 802124a:	f000 ff5d 	bl	8022108 <HAL_FLASH_Lock>

    printf("\r\n");
 802124e:	4812      	ldr	r0, [pc, #72]	; (8021298 <cbf_xmodem+0x78>)
 8021250:	f004 faf2 	bl	8025838 <puts>
    CONSOLE_SPLIT;
 8021254:	4811      	ldr	r0, [pc, #68]	; (802129c <cbf_xmodem+0x7c>)
 8021256:	f004 faef 	bl	8025838 <puts>
    if (ret == FALSE) {
 802125a:	7bfb      	ldrb	r3, [r7, #15]
 802125c:	2b00      	cmp	r3, #0
 802125e:	d103      	bne.n	8021268 <cbf_xmodem+0x48>
        printf("X-Modem Failed\r\n");
 8021260:	480f      	ldr	r0, [pc, #60]	; (80212a0 <cbf_xmodem+0x80>)
 8021262:	f004 fae9 	bl	8025838 <puts>
 8021266:	e004      	b.n	8021272 <cbf_xmodem+0x52>

    } else {
        printf("X-Modem Completed size : %d byte\r\n", (int)x_modem_size);
 8021268:	68bb      	ldr	r3, [r7, #8]
 802126a:	4619      	mov	r1, r3
 802126c:	480d      	ldr	r0, [pc, #52]	; (80212a4 <cbf_xmodem+0x84>)
 802126e:	f004 fa47 	bl	8025700 <iprintf>
    }
    CONSOLE_SPLIT;
 8021272:	480a      	ldr	r0, [pc, #40]	; (802129c <cbf_xmodem+0x7c>)
 8021274:	f004 fae0 	bl	8025838 <puts>

    // resetting uart isr
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8021278:	2200      	movs	r2, #0
 802127a:	2100      	movs	r1, #0
 802127c:	2026      	movs	r0, #38	; 0x26
 802127e:	f000 fdfe 	bl	8021e7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8021282:	2026      	movs	r0, #38	; 0x26
 8021284:	f000 fe17 	bl	8021eb6 <HAL_NVIC_EnableIRQ>
    return 0;
 8021288:	2300      	movs	r3, #0
}
 802128a:	4618      	mov	r0, r3
 802128c:	3710      	adds	r7, #16
 802128e:	46bd      	mov	sp, r7
 8021290:	bd80      	pop	{r7, pc}
 8021292:	bf00      	nop
 8021294:	08020000 	.word	0x08020000
 8021298:	08027f8c 	.word	0x08027f8c
 802129c:	08027e1c 	.word	0x08027e1c
 80212a0:	08027f90 	.word	0x08027f90
 80212a4:	08027fa0 	.word	0x08027fa0

080212a8 <cbf_dump>:
#define CHAR_SPACE          ' '
#define CHAR_z              'z'
#define CHAR_dot            '.'
#define ASCII_CHAR_DUMP     0
int cbf_dump(int argc, char *argv[])
{
 80212a8:	b580      	push	{r7, lr}
 80212aa:	b086      	sub	sp, #24
 80212ac:	af00      	add	r7, sp, #0
 80212ae:	6078      	str	r0, [r7, #4]
 80212b0:	6039      	str	r1, [r7, #0]
    uint32_t size  = atoi(argv[2]);
 80212b2:	683b      	ldr	r3, [r7, #0]
 80212b4:	3308      	adds	r3, #8
 80212b6:	681b      	ldr	r3, [r3, #0]
 80212b8:	4618      	mov	r0, r3
 80212ba:	f003 fd81 	bl	8024dc0 <atoi>
 80212be:	4603      	mov	r3, r0
 80212c0:	60fb      	str	r3, [r7, #12]
    volatile uint32_t *addr = (volatile uint32_t *) strtol(argv[1], NULL, 16);
 80212c2:	683b      	ldr	r3, [r7, #0]
 80212c4:	3304      	adds	r3, #4
 80212c6:	681b      	ldr	r3, [r3, #0]
 80212c8:	2210      	movs	r2, #16
 80212ca:	2100      	movs	r1, #0
 80212cc:	4618      	mov	r0, r3
 80212ce:	f004 fc67 	bl	8025ba0 <strtol>
 80212d2:	4603      	mov	r3, r0
 80212d4:	617b      	str	r3, [r7, #20]

    #if ASCII_CHAR_DUMP
    uint8_t buffer[LINE] = { 0, };
    #endif

    if (addr < (uint32_t*)FLASH_RANGE_START || addr > (uint32_t*)FLASH_RANGE_END) {
 80212d6:	697b      	ldr	r3, [r7, #20]
 80212d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80212dc:	d303      	bcc.n	80212e6 <cbf_dump+0x3e>
 80212de:	697b      	ldr	r3, [r7, #20]
 80212e0:	4a1f      	ldr	r2, [pc, #124]	; (8021360 <cbf_dump+0xb8>)
 80212e2:	4293      	cmp	r3, r2
 80212e4:	d907      	bls.n	80212f6 <cbf_dump+0x4e>
        printf("Flash Range is 0x%08x ~ 0x%08x\r\n", FLASH_RANGE_START, FLASH_RANGE_END);
 80212e6:	4a1e      	ldr	r2, [pc, #120]	; (8021360 <cbf_dump+0xb8>)
 80212e8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80212ec:	481d      	ldr	r0, [pc, #116]	; (8021364 <cbf_dump+0xbc>)
 80212ee:	f004 fa07 	bl	8025700 <iprintf>
        return 0;
 80212f2:	2300      	movs	r3, #0
 80212f4:	e02f      	b.n	8021356 <cbf_dump+0xae>
    }

    CONSOLE_SPLIT;
 80212f6:	481c      	ldr	r0, [pc, #112]	; (8021368 <cbf_dump+0xc0>)
 80212f8:	f004 fa9e 	bl	8025838 <puts>
    printf("Base Addrr // dump data ... \n");
 80212fc:	481b      	ldr	r0, [pc, #108]	; (802136c <cbf_dump+0xc4>)
 80212fe:	f004 fa9b 	bl	8025838 <puts>
    CONSOLE_SPLIT;
 8021302:	4819      	ldr	r0, [pc, #100]	; (8021368 <cbf_dump+0xc0>)
 8021304:	f004 fa98 	bl	8025838 <puts>
    printf("0x%08x : ", (uint32_t *)addr);
 8021308:	6979      	ldr	r1, [r7, #20]
 802130a:	4819      	ldr	r0, [pc, #100]	; (8021370 <cbf_dump+0xc8>)
 802130c:	f004 f9f8 	bl	8025700 <iprintf>
    
    for (uint16_t range = 1; range <= size; range++) {
 8021310:	2301      	movs	r3, #1
 8021312:	827b      	strh	r3, [r7, #18]
 8021314:	e017      	b.n	8021346 <cbf_dump+0x9e>
        } else { 
            buffer[range - 1] = CHAR_dot;
        }
        #endif

        printf("%04x\t",  *(uint32_t *)addr++);
 8021316:	697b      	ldr	r3, [r7, #20]
 8021318:	1d1a      	adds	r2, r3, #4
 802131a:	617a      	str	r2, [r7, #20]
 802131c:	681b      	ldr	r3, [r3, #0]
 802131e:	4619      	mov	r1, r3
 8021320:	4814      	ldr	r0, [pc, #80]	; (8021374 <cbf_dump+0xcc>)
 8021322:	f004 f9ed 	bl	8025700 <iprintf>
        if (range % LINE == 0) {
 8021326:	8a7b      	ldrh	r3, [r7, #18]
 8021328:	f003 0303 	and.w	r3, r3, #3
 802132c:	b29b      	uxth	r3, r3
 802132e:	2b00      	cmp	r3, #0
 8021330:	d106      	bne.n	8021340 <cbf_dump+0x98>
            #if ASCII_CHAR_DUMP
            printf("\t: %s", buffer);
            #endif
            printf("\r\n");
 8021332:	4811      	ldr	r0, [pc, #68]	; (8021378 <cbf_dump+0xd0>)
 8021334:	f004 fa80 	bl	8025838 <puts>
            printf("0x%08x : ", (uint32_t *)addr);
 8021338:	6979      	ldr	r1, [r7, #20]
 802133a:	480d      	ldr	r0, [pc, #52]	; (8021370 <cbf_dump+0xc8>)
 802133c:	f004 f9e0 	bl	8025700 <iprintf>
    for (uint16_t range = 1; range <= size; range++) {
 8021340:	8a7b      	ldrh	r3, [r7, #18]
 8021342:	3301      	adds	r3, #1
 8021344:	827b      	strh	r3, [r7, #18]
 8021346:	8a7b      	ldrh	r3, [r7, #18]
 8021348:	68fa      	ldr	r2, [r7, #12]
 802134a:	429a      	cmp	r2, r3
 802134c:	d2e3      	bcs.n	8021316 <cbf_dump+0x6e>
        }
    }
    printf("\r\n");
 802134e:	480a      	ldr	r0, [pc, #40]	; (8021378 <cbf_dump+0xd0>)
 8021350:	f004 fa72 	bl	8025838 <puts>
    return 0;
 8021354:	2300      	movs	r3, #0
}
 8021356:	4618      	mov	r0, r3
 8021358:	3718      	adds	r7, #24
 802135a:	46bd      	mov	sp, r7
 802135c:	bd80      	pop	{r7, pc}
 802135e:	bf00      	nop
 8021360:	080f0000 	.word	0x080f0000
 8021364:	08027fc4 	.word	0x08027fc4
 8021368:	08027e1c 	.word	0x08027e1c
 802136c:	08027fe8 	.word	0x08027fe8
 8021370:	08028008 	.word	0x08028008
 8021374:	08028014 	.word	0x08028014
 8021378:	08027f8c 	.word	0x08027f8c

0802137c <cbf_flash_test>:

int cbf_flash_test(int argc, char *argv[])
{
 802137c:	b5b0      	push	{r4, r5, r7, lr}
 802137e:	b086      	sub	sp, #24
 8021380:	af00      	add	r7, sp, #0
 8021382:	6078      	str	r0, [r7, #4]
 8021384:	6039      	str	r1, [r7, #0]
    volatile uint32_t *flash_addr = (volatile uint32_t *) strtol(argv[1], NULL, 16);
 8021386:	683b      	ldr	r3, [r7, #0]
 8021388:	3304      	adds	r3, #4
 802138a:	681b      	ldr	r3, [r3, #0]
 802138c:	2210      	movs	r2, #16
 802138e:	2100      	movs	r1, #0
 8021390:	4618      	mov	r0, r3
 8021392:	f004 fc05 	bl	8025ba0 <strtol>
 8021396:	4603      	mov	r3, r0
 8021398:	617b      	str	r3, [r7, #20]
    uint32_t addr = flash_addr;
 802139a:	697b      	ldr	r3, [r7, #20]
 802139c:	613b      	str	r3, [r7, #16]
    uint32_t data = atoi(argv[2]);
 802139e:	683b      	ldr	r3, [r7, #0]
 80213a0:	3308      	adds	r3, #8
 80213a2:	681b      	ldr	r3, [r3, #0]
 80213a4:	4618      	mov	r0, r3
 80213a6:	f003 fd0b 	bl	8024dc0 <atoi>
 80213aa:	4603      	mov	r3, r0
 80213ac:	60fb      	str	r3, [r7, #12]
        return 0;
    }

    FLASH_If_Init();
    #else
    FLASH_If_Erase(addr);
 80213ae:	6938      	ldr	r0, [r7, #16]
 80213b0:	f003 fabe 	bl	8024930 <FLASH_If_Erase>
    #endif

    #if 1
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flash_addr, data);
 80213b4:	6979      	ldr	r1, [r7, #20]
 80213b6:	68fb      	ldr	r3, [r7, #12]
 80213b8:	2200      	movs	r2, #0
 80213ba:	461c      	mov	r4, r3
 80213bc:	4615      	mov	r5, r2
 80213be:	4622      	mov	r2, r4
 80213c0:	462b      	mov	r3, r5
 80213c2:	2002      	movs	r0, #2
 80213c4:	f000 fe2a 	bl	802201c <HAL_FLASH_Program>
    #else
    *flash_addr = data;
    #endif

    HAL_FLASH_Lock();
 80213c8:	f000 fe9e 	bl	8022108 <HAL_FLASH_Lock>
    
    printf("0x%08x - 0x%08x\r\n", flash_addr, *flash_addr);
 80213cc:	697b      	ldr	r3, [r7, #20]
 80213ce:	681b      	ldr	r3, [r3, #0]
 80213d0:	461a      	mov	r2, r3
 80213d2:	6979      	ldr	r1, [r7, #20]
 80213d4:	4803      	ldr	r0, [pc, #12]	; (80213e4 <cbf_flash_test+0x68>)
 80213d6:	f004 f993 	bl	8025700 <iprintf>
    return 0;
 80213da:	2300      	movs	r3, #0
}
 80213dc:	4618      	mov	r0, r3
 80213de:	3718      	adds	r7, #24
 80213e0:	46bd      	mov	sp, r7
 80213e2:	bdb0      	pop	{r4, r5, r7, pc}
 80213e4:	0802801c 	.word	0x0802801c

080213e8 <cbf_app_fw_jump>:

#define VCCTOR_TABLE_OFFSET     4
int cbf_app_fw_jump(int argc, char *argv[])
{
 80213e8:	b580      	push	{r7, lr}
 80213ea:	b086      	sub	sp, #24
 80213ec:	af00      	add	r7, sp, #0
 80213ee:	6078      	str	r0, [r7, #4]
 80213f0:	6039      	str	r1, [r7, #0]
    printf("Start...\r\n");
 80213f2:	480b      	ldr	r0, [pc, #44]	; (8021420 <cbf_app_fw_jump+0x38>)
 80213f4:	f004 fa20 	bl	8025838 <puts>
    pFunction Jump_To_Application;

    volatile uint32_t JumpAddress = *(__IO uint32_t*) (FLASH_BASE_MAIN_APP + VCCTOR_TABLE_OFFSET);
 80213f8:	4b0a      	ldr	r3, [pc, #40]	; (8021424 <cbf_app_fw_jump+0x3c>)
 80213fa:	681b      	ldr	r3, [r3, #0]
 80213fc:	60fb      	str	r3, [r7, #12]
    /* Jump to user application */
    Jump_To_Application = (pFunction) JumpAddress;
 80213fe:	68fb      	ldr	r3, [r7, #12]
 8021400:	617b      	str	r3, [r7, #20]
    /* Initialize user application's Stack Pointer */
    __set_MSP(*(__IO uint32_t*) FLASH_BASE_MAIN_APP);
 8021402:	4b09      	ldr	r3, [pc, #36]	; (8021428 <cbf_app_fw_jump+0x40>)
 8021404:	681b      	ldr	r3, [r3, #0]
 8021406:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8021408:	693b      	ldr	r3, [r7, #16]
 802140a:	f383 8808 	msr	MSP, r3
}
 802140e:	bf00      	nop
    Jump_To_Application(); 
 8021410:	697b      	ldr	r3, [r7, #20]
 8021412:	4798      	blx	r3
    return 0;
 8021414:	2300      	movs	r3, #0
}
 8021416:	4618      	mov	r0, r3
 8021418:	3718      	adds	r7, #24
 802141a:	46bd      	mov	sp, r7
 802141c:	bd80      	pop	{r7, pc}
 802141e:	bf00      	nop
 8021420:	08028030 	.word	0x08028030
 8021424:	08020004 	.word	0x08020004
 8021428:	08020000 	.word	0x08020000

0802142c <cbf_tag>:

int cbf_tag(int argc, char *argv[])
{
 802142c:	b580      	push	{r7, lr}
 802142e:	b082      	sub	sp, #8
 8021430:	af00      	add	r7, sp, #0
 8021432:	6078      	str	r0, [r7, #4]
 8021434:	6039      	str	r1, [r7, #0]
    CONSOLE_SPLIT;
 8021436:	481a      	ldr	r0, [pc, #104]	; (80214a0 <cbf_tag+0x74>)
 8021438:	f004 f9fe 	bl	8025838 <puts>
    printf("FW Info\t\t\t%s\r\n", tag->fw_name);
 802143c:	4b19      	ldr	r3, [pc, #100]	; (80214a4 <cbf_tag+0x78>)
 802143e:	681b      	ldr	r3, [r3, #0]
 8021440:	681b      	ldr	r3, [r3, #0]
 8021442:	4619      	mov	r1, r3
 8021444:	4818      	ldr	r0, [pc, #96]	; (80214a8 <cbf_tag+0x7c>)
 8021446:	f004 f95b 	bl	8025700 <iprintf>
    printf("FW Date\t\t\t%s\r\n", tag->fw_date);
 802144a:	4b16      	ldr	r3, [pc, #88]	; (80214a4 <cbf_tag+0x78>)
 802144c:	681b      	ldr	r3, [r3, #0]
 802144e:	685b      	ldr	r3, [r3, #4]
 8021450:	4619      	mov	r1, r3
 8021452:	4816      	ldr	r0, [pc, #88]	; (80214ac <cbf_tag+0x80>)
 8021454:	f004 f954 	bl	8025700 <iprintf>
    printf("FW SN\t\t\t%s\r\n", tag->fw_sn );
 8021458:	4b12      	ldr	r3, [pc, #72]	; (80214a4 <cbf_tag+0x78>)
 802145a:	681b      	ldr	r3, [r3, #0]
 802145c:	689b      	ldr	r3, [r3, #8]
 802145e:	4619      	mov	r1, r3
 8021460:	4813      	ldr	r0, [pc, #76]	; (80214b0 <cbf_tag+0x84>)
 8021462:	f004 f94d 	bl	8025700 <iprintf>
    printf("FW Version\t\t%s\r\n", tag->fw_version );
 8021466:	4b0f      	ldr	r3, [pc, #60]	; (80214a4 <cbf_tag+0x78>)
 8021468:	681b      	ldr	r3, [r3, #0]
 802146a:	68db      	ldr	r3, [r3, #12]
 802146c:	4619      	mov	r1, r3
 802146e:	4811      	ldr	r0, [pc, #68]	; (80214b4 <cbf_tag+0x88>)
 8021470:	f004 f946 	bl	8025700 <iprintf>
    printf("FW Compiled date\t%s\r\n", tag->fw_compile_data);
 8021474:	4b0b      	ldr	r3, [pc, #44]	; (80214a4 <cbf_tag+0x78>)
 8021476:	681b      	ldr	r3, [r3, #0]
 8021478:	691b      	ldr	r3, [r3, #16]
 802147a:	4619      	mov	r1, r3
 802147c:	480e      	ldr	r0, [pc, #56]	; (80214b8 <cbf_tag+0x8c>)
 802147e:	f004 f93f 	bl	8025700 <iprintf>
    printf("FW Compiled time\t%s\r\n", tag->fw_compile_time);
 8021482:	4b08      	ldr	r3, [pc, #32]	; (80214a4 <cbf_tag+0x78>)
 8021484:	681b      	ldr	r3, [r3, #0]
 8021486:	695b      	ldr	r3, [r3, #20]
 8021488:	4619      	mov	r1, r3
 802148a:	480c      	ldr	r0, [pc, #48]	; (80214bc <cbf_tag+0x90>)
 802148c:	f004 f938 	bl	8025700 <iprintf>
    CONSOLE_SPLIT;
 8021490:	4803      	ldr	r0, [pc, #12]	; (80214a0 <cbf_tag+0x74>)
 8021492:	f004 f9d1 	bl	8025838 <puts>
    return 0;
 8021496:	2300      	movs	r3, #0
}
 8021498:	4618      	mov	r0, r3
 802149a:	3708      	adds	r7, #8
 802149c:	46bd      	mov	sp, r7
 802149e:	bd80      	pop	{r7, pc}
 80214a0:	08027e1c 	.word	0x08027e1c
 80214a4:	20000000 	.word	0x20000000
 80214a8:	0802803c 	.word	0x0802803c
 80214ac:	0802804c 	.word	0x0802804c
 80214b0:	0802805c 	.word	0x0802805c
 80214b4:	0802806c 	.word	0x0802806c
 80214b8:	08028080 	.word	0x08028080
 80214bc:	08028098 	.word	0x08028098

080214c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80214c0:	b580      	push	{r7, lr}
 80214c2:	b08a      	sub	sp, #40	; 0x28
 80214c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80214c6:	f107 0314 	add.w	r3, r7, #20
 80214ca:	2200      	movs	r2, #0
 80214cc:	601a      	str	r2, [r3, #0]
 80214ce:	605a      	str	r2, [r3, #4]
 80214d0:	609a      	str	r2, [r3, #8]
 80214d2:	60da      	str	r2, [r3, #12]
 80214d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80214d6:	2300      	movs	r3, #0
 80214d8:	613b      	str	r3, [r7, #16]
 80214da:	4b2d      	ldr	r3, [pc, #180]	; (8021590 <MX_GPIO_Init+0xd0>)
 80214dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80214de:	4a2c      	ldr	r2, [pc, #176]	; (8021590 <MX_GPIO_Init+0xd0>)
 80214e0:	f043 0304 	orr.w	r3, r3, #4
 80214e4:	6313      	str	r3, [r2, #48]	; 0x30
 80214e6:	4b2a      	ldr	r3, [pc, #168]	; (8021590 <MX_GPIO_Init+0xd0>)
 80214e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80214ea:	f003 0304 	and.w	r3, r3, #4
 80214ee:	613b      	str	r3, [r7, #16]
 80214f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80214f2:	2300      	movs	r3, #0
 80214f4:	60fb      	str	r3, [r7, #12]
 80214f6:	4b26      	ldr	r3, [pc, #152]	; (8021590 <MX_GPIO_Init+0xd0>)
 80214f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80214fa:	4a25      	ldr	r2, [pc, #148]	; (8021590 <MX_GPIO_Init+0xd0>)
 80214fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8021500:	6313      	str	r3, [r2, #48]	; 0x30
 8021502:	4b23      	ldr	r3, [pc, #140]	; (8021590 <MX_GPIO_Init+0xd0>)
 8021504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021506:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802150a:	60fb      	str	r3, [r7, #12]
 802150c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 802150e:	2300      	movs	r3, #0
 8021510:	60bb      	str	r3, [r7, #8]
 8021512:	4b1f      	ldr	r3, [pc, #124]	; (8021590 <MX_GPIO_Init+0xd0>)
 8021514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021516:	4a1e      	ldr	r2, [pc, #120]	; (8021590 <MX_GPIO_Init+0xd0>)
 8021518:	f043 0301 	orr.w	r3, r3, #1
 802151c:	6313      	str	r3, [r2, #48]	; 0x30
 802151e:	4b1c      	ldr	r3, [pc, #112]	; (8021590 <MX_GPIO_Init+0xd0>)
 8021520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021522:	f003 0301 	and.w	r3, r3, #1
 8021526:	60bb      	str	r3, [r7, #8]
 8021528:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 802152a:	2300      	movs	r3, #0
 802152c:	607b      	str	r3, [r7, #4]
 802152e:	4b18      	ldr	r3, [pc, #96]	; (8021590 <MX_GPIO_Init+0xd0>)
 8021530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021532:	4a17      	ldr	r2, [pc, #92]	; (8021590 <MX_GPIO_Init+0xd0>)
 8021534:	f043 0302 	orr.w	r3, r3, #2
 8021538:	6313      	str	r3, [r2, #48]	; 0x30
 802153a:	4b15      	ldr	r3, [pc, #84]	; (8021590 <MX_GPIO_Init+0xd0>)
 802153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802153e:	f003 0302 	and.w	r3, r3, #2
 8021542:	607b      	str	r3, [r7, #4]
 8021544:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8021546:	2200      	movs	r2, #0
 8021548:	2120      	movs	r1, #32
 802154a:	4812      	ldr	r0, [pc, #72]	; (8021594 <MX_GPIO_Init+0xd4>)
 802154c:	f001 f9d2 	bl	80228f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8021550:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8021554:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8021556:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 802155a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 802155c:	2300      	movs	r3, #0
 802155e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8021560:	f107 0314 	add.w	r3, r7, #20
 8021564:	4619      	mov	r1, r3
 8021566:	480c      	ldr	r0, [pc, #48]	; (8021598 <MX_GPIO_Init+0xd8>)
 8021568:	f001 f840 	bl	80225ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 802156c:	2320      	movs	r3, #32
 802156e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8021570:	2301      	movs	r3, #1
 8021572:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021574:	2300      	movs	r3, #0
 8021576:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021578:	2300      	movs	r3, #0
 802157a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 802157c:	f107 0314 	add.w	r3, r7, #20
 8021580:	4619      	mov	r1, r3
 8021582:	4804      	ldr	r0, [pc, #16]	; (8021594 <MX_GPIO_Init+0xd4>)
 8021584:	f001 f832 	bl	80225ec <HAL_GPIO_Init>

}
 8021588:	bf00      	nop
 802158a:	3728      	adds	r7, #40	; 0x28
 802158c:	46bd      	mov	sp, r7
 802158e:	bd80      	pop	{r7, pc}
 8021590:	40023800 	.word	0x40023800
 8021594:	40020000 	.word	0x40020000
 8021598:	40020800 	.word	0x40020800

0802159c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 802159c:	b580      	push	{r7, lr}
 802159e:	b082      	sub	sp, #8
 80215a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80215a2:	f000 fb37 	bl	8021c14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80215a6:	f000 f9f7 	bl	8021998 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80215aa:	f7ff ff89 	bl	80214c0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80215ae:	f000 fa8d 	bl	8021acc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, (uint8_t*) &uart_rx_byte, UART_BYTE);
 80215b2:	2201      	movs	r2, #1
 80215b4:	4921      	ldr	r1, [pc, #132]	; (802163c <main+0xa0>)
 80215b6:	4822      	ldr	r0, [pc, #136]	; (8021640 <main+0xa4>)
 80215b8:	f002 f9f9 	bl	80239ae <HAL_UART_Receive_IT>
  
  setbuf(stdin, NULL);
 80215bc:	4b21      	ldr	r3, [pc, #132]	; (8021644 <main+0xa8>)
 80215be:	681b      	ldr	r3, [r3, #0]
 80215c0:	685b      	ldr	r3, [r3, #4]
 80215c2:	2100      	movs	r1, #0
 80215c4:	4618      	mov	r0, r3
 80215c6:	f004 f93f 	bl	8025848 <setbuf>
  setbuf(stdout,NULL); 
 80215ca:	4b1e      	ldr	r3, [pc, #120]	; (8021644 <main+0xa8>)
 80215cc:	681b      	ldr	r3, [r3, #0]
 80215ce:	689b      	ldr	r3, [r3, #8]
 80215d0:	2100      	movs	r1, #0
 80215d2:	4618      	mov	r0, r3
 80215d4:	f004 f938 	bl	8025848 <setbuf>

  cbf_boot_logo(0, NULL);
 80215d8:	2100      	movs	r1, #0
 80215da:	2000      	movs	r0, #0
 80215dc:	f7ff fd76 	bl	80210cc <cbf_boot_logo>
  CONSOLE_SPLIT;
  printf("if you don't want this, press any key\r\n");
  printf("entering main fw... \r\n");
  CONSOLE_SPLIT;
  #else
  CONSOLE_SPLIT;
 80215e0:	4819      	ldr	r0, [pc, #100]	; (8021648 <main+0xac>)
 80215e2:	f004 f929 	bl	8025838 <puts>
  printf("Main App Jumped addr @0x0802 0000\r\n");
 80215e6:	4819      	ldr	r0, [pc, #100]	; (802164c <main+0xb0>)
 80215e8:	f004 f926 	bl	8025838 <puts>
  CONSOLE_SPLIT;
 80215ec:	4816      	ldr	r0, [pc, #88]	; (8021648 <main+0xac>)
 80215ee:	f004 f923 	bl	8025838 <puts>
  #endif
  
  uint16_t sec = 3, time = 0;
 80215f2:	2303      	movs	r3, #3
 80215f4:	80bb      	strh	r3, [r7, #4]
 80215f6:	2300      	movs	r3, #0
 80215f8:	80fb      	strh	r3, [r7, #6]
  time = HAL_GetTick();
 80215fa:	f000 fb41 	bl	8021c80 <HAL_GetTick>
 80215fe:	4603      	mov	r3, r0
 8021600:	80fb      	strh	r3, [r7, #6]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
      if (cli.rx_done == CLI_READY) {
 8021602:	4b13      	ldr	r3, [pc, #76]	; (8021650 <main+0xb4>)
 8021604:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8021608:	2b01      	cmp	r3, #1
 802160a:	d106      	bne.n	802161a <main+0x7e>
          cli.rx_done = CLI_CLEAR;
 802160c:	4b10      	ldr	r3, [pc, #64]	; (8021650 <main+0xb4>)
 802160e:	2200      	movs	r2, #0
 8021610:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          parser((char *) &cli.buffer[0]);
 8021614:	480e      	ldr	r0, [pc, #56]	; (8021650 <main+0xb4>)
 8021616:	f7ff fcef 	bl	8020ff8 <parser>
      }

      #if MAIN_APP
      // for checking main app fw
      if (HAL_GetTick() - time >= 1000) {
 802161a:	f000 fb31 	bl	8021c80 <HAL_GetTick>
 802161e:	4602      	mov	r2, r0
 8021620:	88fb      	ldrh	r3, [r7, #6]
 8021622:	1ad3      	subs	r3, r2, r3
 8021624:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8021628:	d3eb      	bcc.n	8021602 <main+0x66>
        time = HAL_GetTick();
 802162a:	f000 fb29 	bl	8021c80 <HAL_GetTick>
 802162e:	4603      	mov	r3, r0
 8021630:	80fb      	strh	r3, [r7, #6]
        #if DBG_LED
        HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8021632:	2120      	movs	r1, #32
 8021634:	4807      	ldr	r0, [pc, #28]	; (8021654 <main+0xb8>)
 8021636:	f001 f976 	bl	8022926 <HAL_GPIO_TogglePin>
      if (cli.rx_done == CLI_READY) {
 802163a:	e7e2      	b.n	8021602 <main+0x66>
 802163c:	200001fc 	.word	0x200001fc
 8021640:	200002d0 	.word	0x200002d0
 8021644:	20000010 	.word	0x20000010
 8021648:	080280b0 	.word	0x080280b0
 802164c:	080280f8 	.word	0x080280f8
 8021650:	20000200 	.word	0x20000200
 8021654:	40020000 	.word	0x40020000

08021658 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8021658:	b580      	push	{r7, lr}
 802165a:	b082      	sub	sp, #8
 802165c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 802165e:	2300      	movs	r3, #0
 8021660:	607b      	str	r3, [r7, #4]
 8021662:	4b10      	ldr	r3, [pc, #64]	; (80216a4 <HAL_MspInit+0x4c>)
 8021664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021666:	4a0f      	ldr	r2, [pc, #60]	; (80216a4 <HAL_MspInit+0x4c>)
 8021668:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 802166c:	6453      	str	r3, [r2, #68]	; 0x44
 802166e:	4b0d      	ldr	r3, [pc, #52]	; (80216a4 <HAL_MspInit+0x4c>)
 8021670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8021672:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8021676:	607b      	str	r3, [r7, #4]
 8021678:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 802167a:	2300      	movs	r3, #0
 802167c:	603b      	str	r3, [r7, #0]
 802167e:	4b09      	ldr	r3, [pc, #36]	; (80216a4 <HAL_MspInit+0x4c>)
 8021680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021682:	4a08      	ldr	r2, [pc, #32]	; (80216a4 <HAL_MspInit+0x4c>)
 8021684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8021688:	6413      	str	r3, [r2, #64]	; 0x40
 802168a:	4b06      	ldr	r3, [pc, #24]	; (80216a4 <HAL_MspInit+0x4c>)
 802168c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 802168e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8021692:	603b      	str	r3, [r7, #0]
 8021694:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8021696:	2007      	movs	r0, #7
 8021698:	f000 fbe6 	bl	8021e68 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 802169c:	bf00      	nop
 802169e:	3708      	adds	r7, #8
 80216a0:	46bd      	mov	sp, r7
 80216a2:	bd80      	pop	{r7, pc}
 80216a4:	40023800 	.word	0x40023800

080216a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80216a8:	b580      	push	{r7, lr}
 80216aa:	b08c      	sub	sp, #48	; 0x30
 80216ac:	af00      	add	r7, sp, #0
 80216ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80216b0:	2300      	movs	r3, #0
 80216b2:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 80216b4:	2300      	movs	r3, #0
 80216b6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80216b8:	2300      	movs	r3, #0
 80216ba:	60bb      	str	r3, [r7, #8]
 80216bc:	4b2e      	ldr	r3, [pc, #184]	; (8021778 <HAL_InitTick+0xd0>)
 80216be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80216c0:	4a2d      	ldr	r2, [pc, #180]	; (8021778 <HAL_InitTick+0xd0>)
 80216c2:	f043 0301 	orr.w	r3, r3, #1
 80216c6:	6453      	str	r3, [r2, #68]	; 0x44
 80216c8:	4b2b      	ldr	r3, [pc, #172]	; (8021778 <HAL_InitTick+0xd0>)
 80216ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80216cc:	f003 0301 	and.w	r3, r3, #1
 80216d0:	60bb      	str	r3, [r7, #8]
 80216d2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80216d4:	f107 020c 	add.w	r2, r7, #12
 80216d8:	f107 0310 	add.w	r3, r7, #16
 80216dc:	4611      	mov	r1, r2
 80216de:	4618      	mov	r0, r3
 80216e0:	f001 fdd4 	bl	802328c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80216e4:	f001 fdbe 	bl	8023264 <HAL_RCC_GetPCLK2Freq>
 80216e8:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80216ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80216ec:	4a23      	ldr	r2, [pc, #140]	; (802177c <HAL_InitTick+0xd4>)
 80216ee:	fba2 2303 	umull	r2, r3, r2, r3
 80216f2:	0c9b      	lsrs	r3, r3, #18
 80216f4:	3b01      	subs	r3, #1
 80216f6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80216f8:	4b21      	ldr	r3, [pc, #132]	; (8021780 <HAL_InitTick+0xd8>)
 80216fa:	4a22      	ldr	r2, [pc, #136]	; (8021784 <HAL_InitTick+0xdc>)
 80216fc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80216fe:	4b20      	ldr	r3, [pc, #128]	; (8021780 <HAL_InitTick+0xd8>)
 8021700:	f240 32e7 	movw	r2, #999	; 0x3e7
 8021704:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8021706:	4a1e      	ldr	r2, [pc, #120]	; (8021780 <HAL_InitTick+0xd8>)
 8021708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802170a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 802170c:	4b1c      	ldr	r3, [pc, #112]	; (8021780 <HAL_InitTick+0xd8>)
 802170e:	2200      	movs	r2, #0
 8021710:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8021712:	4b1b      	ldr	r3, [pc, #108]	; (8021780 <HAL_InitTick+0xd8>)
 8021714:	2200      	movs	r2, #0
 8021716:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8021718:	4b19      	ldr	r3, [pc, #100]	; (8021780 <HAL_InitTick+0xd8>)
 802171a:	2200      	movs	r2, #0
 802171c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 802171e:	4818      	ldr	r0, [pc, #96]	; (8021780 <HAL_InitTick+0xd8>)
 8021720:	f001 fde6 	bl	80232f0 <HAL_TIM_Base_Init>
 8021724:	4603      	mov	r3, r0
 8021726:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 802172a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 802172e:	2b00      	cmp	r3, #0
 8021730:	d11b      	bne.n	802176a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8021732:	4813      	ldr	r0, [pc, #76]	; (8021780 <HAL_InitTick+0xd8>)
 8021734:	f001 fe36 	bl	80233a4 <HAL_TIM_Base_Start_IT>
 8021738:	4603      	mov	r3, r0
 802173a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 802173e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8021742:	2b00      	cmp	r3, #0
 8021744:	d111      	bne.n	802176a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8021746:	2019      	movs	r0, #25
 8021748:	f000 fbb5 	bl	8021eb6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 802174c:	687b      	ldr	r3, [r7, #4]
 802174e:	2b0f      	cmp	r3, #15
 8021750:	d808      	bhi.n	8021764 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8021752:	2200      	movs	r2, #0
 8021754:	6879      	ldr	r1, [r7, #4]
 8021756:	2019      	movs	r0, #25
 8021758:	f000 fb91 	bl	8021e7e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 802175c:	4a0a      	ldr	r2, [pc, #40]	; (8021788 <HAL_InitTick+0xe0>)
 802175e:	687b      	ldr	r3, [r7, #4]
 8021760:	6013      	str	r3, [r2, #0]
 8021762:	e002      	b.n	802176a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8021764:	2301      	movs	r3, #1
 8021766:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 802176a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 802176e:	4618      	mov	r0, r3
 8021770:	3730      	adds	r7, #48	; 0x30
 8021772:	46bd      	mov	sp, r7
 8021774:	bd80      	pop	{r7, pc}
 8021776:	bf00      	nop
 8021778:	40023800 	.word	0x40023800
 802177c:	431bde83 	.word	0x431bde83
 8021780:	20000284 	.word	0x20000284
 8021784:	40010000 	.word	0x40010000
 8021788:	20000008 	.word	0x20000008

0802178c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 802178c:	b480      	push	{r7}
 802178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8021790:	e7fe      	b.n	8021790 <NMI_Handler+0x4>

08021792 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8021792:	b480      	push	{r7}
 8021794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8021796:	e7fe      	b.n	8021796 <HardFault_Handler+0x4>

08021798 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8021798:	b480      	push	{r7}
 802179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 802179c:	e7fe      	b.n	802179c <MemManage_Handler+0x4>

0802179e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 802179e:	b480      	push	{r7}
 80217a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80217a2:	e7fe      	b.n	80217a2 <BusFault_Handler+0x4>

080217a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80217a4:	b480      	push	{r7}
 80217a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80217a8:	e7fe      	b.n	80217a8 <UsageFault_Handler+0x4>

080217aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80217aa:	b480      	push	{r7}
 80217ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80217ae:	bf00      	nop
 80217b0:	46bd      	mov	sp, r7
 80217b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80217b6:	4770      	bx	lr

080217b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80217b8:	b480      	push	{r7}
 80217ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80217bc:	bf00      	nop
 80217be:	46bd      	mov	sp, r7
 80217c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80217c4:	4770      	bx	lr

080217c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80217c6:	b480      	push	{r7}
 80217c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80217ca:	bf00      	nop
 80217cc:	46bd      	mov	sp, r7
 80217ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80217d2:	4770      	bx	lr

080217d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80217d4:	b480      	push	{r7}
 80217d6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80217d8:	bf00      	nop
 80217da:	46bd      	mov	sp, r7
 80217dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80217e0:	4770      	bx	lr
	...

080217e4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80217e4:	b580      	push	{r7, lr}
 80217e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80217e8:	4802      	ldr	r0, [pc, #8]	; (80217f4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80217ea:	f001 fe3d 	bl	8023468 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80217ee:	bf00      	nop
 80217f0:	bd80      	pop	{r7, pc}
 80217f2:	bf00      	nop
 80217f4:	20000284 	.word	0x20000284

080217f8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80217f8:	b580      	push	{r7, lr}
 80217fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80217fc:	4802      	ldr	r0, [pc, #8]	; (8021808 <USART2_IRQHandler+0x10>)
 80217fe:	f002 f907 	bl	8023a10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8021802:	bf00      	nop
 8021804:	bd80      	pop	{r7, pc}
 8021806:	bf00      	nop
 8021808:	200002d0 	.word	0x200002d0

0802180c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 802180c:	b480      	push	{r7}
 802180e:	af00      	add	r7, sp, #0
  return 1;
 8021810:	2301      	movs	r3, #1
}
 8021812:	4618      	mov	r0, r3
 8021814:	46bd      	mov	sp, r7
 8021816:	f85d 7b04 	ldr.w	r7, [sp], #4
 802181a:	4770      	bx	lr

0802181c <_kill>:

int _kill(int pid, int sig)
{
 802181c:	b580      	push	{r7, lr}
 802181e:	b082      	sub	sp, #8
 8021820:	af00      	add	r7, sp, #0
 8021822:	6078      	str	r0, [r7, #4]
 8021824:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8021826:	f003 facf 	bl	8024dc8 <__errno>
 802182a:	4603      	mov	r3, r0
 802182c:	2216      	movs	r2, #22
 802182e:	601a      	str	r2, [r3, #0]
  return -1;
 8021830:	f04f 33ff 	mov.w	r3, #4294967295
}
 8021834:	4618      	mov	r0, r3
 8021836:	3708      	adds	r7, #8
 8021838:	46bd      	mov	sp, r7
 802183a:	bd80      	pop	{r7, pc}

0802183c <_exit>:

void _exit (int status)
{
 802183c:	b580      	push	{r7, lr}
 802183e:	b082      	sub	sp, #8
 8021840:	af00      	add	r7, sp, #0
 8021842:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8021844:	f04f 31ff 	mov.w	r1, #4294967295
 8021848:	6878      	ldr	r0, [r7, #4]
 802184a:	f7ff ffe7 	bl	802181c <_kill>
  while (1) {}    /* Make sure we hang here */
 802184e:	e7fe      	b.n	802184e <_exit+0x12>

08021850 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8021850:	b580      	push	{r7, lr}
 8021852:	b086      	sub	sp, #24
 8021854:	af00      	add	r7, sp, #0
 8021856:	60f8      	str	r0, [r7, #12]
 8021858:	60b9      	str	r1, [r7, #8]
 802185a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 802185c:	2300      	movs	r3, #0
 802185e:	617b      	str	r3, [r7, #20]
 8021860:	e00a      	b.n	8021878 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8021862:	f3af 8000 	nop.w
 8021866:	4601      	mov	r1, r0
 8021868:	68bb      	ldr	r3, [r7, #8]
 802186a:	1c5a      	adds	r2, r3, #1
 802186c:	60ba      	str	r2, [r7, #8]
 802186e:	b2ca      	uxtb	r2, r1
 8021870:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8021872:	697b      	ldr	r3, [r7, #20]
 8021874:	3301      	adds	r3, #1
 8021876:	617b      	str	r3, [r7, #20]
 8021878:	697a      	ldr	r2, [r7, #20]
 802187a:	687b      	ldr	r3, [r7, #4]
 802187c:	429a      	cmp	r2, r3
 802187e:	dbf0      	blt.n	8021862 <_read+0x12>
  }

  return len;
 8021880:	687b      	ldr	r3, [r7, #4]
}
 8021882:	4618      	mov	r0, r3
 8021884:	3718      	adds	r7, #24
 8021886:	46bd      	mov	sp, r7
 8021888:	bd80      	pop	{r7, pc}

0802188a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 802188a:	b580      	push	{r7, lr}
 802188c:	b086      	sub	sp, #24
 802188e:	af00      	add	r7, sp, #0
 8021890:	60f8      	str	r0, [r7, #12]
 8021892:	60b9      	str	r1, [r7, #8]
 8021894:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8021896:	2300      	movs	r3, #0
 8021898:	617b      	str	r3, [r7, #20]
 802189a:	e009      	b.n	80218b0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 802189c:	68bb      	ldr	r3, [r7, #8]
 802189e:	1c5a      	adds	r2, r3, #1
 80218a0:	60ba      	str	r2, [r7, #8]
 80218a2:	781b      	ldrb	r3, [r3, #0]
 80218a4:	4618      	mov	r0, r3
 80218a6:	f7ff fb19 	bl	8020edc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80218aa:	697b      	ldr	r3, [r7, #20]
 80218ac:	3301      	adds	r3, #1
 80218ae:	617b      	str	r3, [r7, #20]
 80218b0:	697a      	ldr	r2, [r7, #20]
 80218b2:	687b      	ldr	r3, [r7, #4]
 80218b4:	429a      	cmp	r2, r3
 80218b6:	dbf1      	blt.n	802189c <_write+0x12>
  }
  return len;
 80218b8:	687b      	ldr	r3, [r7, #4]
}
 80218ba:	4618      	mov	r0, r3
 80218bc:	3718      	adds	r7, #24
 80218be:	46bd      	mov	sp, r7
 80218c0:	bd80      	pop	{r7, pc}

080218c2 <_close>:

int _close(int file)
{
 80218c2:	b480      	push	{r7}
 80218c4:	b083      	sub	sp, #12
 80218c6:	af00      	add	r7, sp, #0
 80218c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80218ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80218ce:	4618      	mov	r0, r3
 80218d0:	370c      	adds	r7, #12
 80218d2:	46bd      	mov	sp, r7
 80218d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80218d8:	4770      	bx	lr

080218da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80218da:	b480      	push	{r7}
 80218dc:	b083      	sub	sp, #12
 80218de:	af00      	add	r7, sp, #0
 80218e0:	6078      	str	r0, [r7, #4]
 80218e2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80218e4:	683b      	ldr	r3, [r7, #0]
 80218e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80218ea:	605a      	str	r2, [r3, #4]
  return 0;
 80218ec:	2300      	movs	r3, #0
}
 80218ee:	4618      	mov	r0, r3
 80218f0:	370c      	adds	r7, #12
 80218f2:	46bd      	mov	sp, r7
 80218f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80218f8:	4770      	bx	lr

080218fa <_isatty>:

int _isatty(int file)
{
 80218fa:	b480      	push	{r7}
 80218fc:	b083      	sub	sp, #12
 80218fe:	af00      	add	r7, sp, #0
 8021900:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8021902:	2301      	movs	r3, #1
}
 8021904:	4618      	mov	r0, r3
 8021906:	370c      	adds	r7, #12
 8021908:	46bd      	mov	sp, r7
 802190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802190e:	4770      	bx	lr

08021910 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8021910:	b480      	push	{r7}
 8021912:	b085      	sub	sp, #20
 8021914:	af00      	add	r7, sp, #0
 8021916:	60f8      	str	r0, [r7, #12]
 8021918:	60b9      	str	r1, [r7, #8]
 802191a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 802191c:	2300      	movs	r3, #0
}
 802191e:	4618      	mov	r0, r3
 8021920:	3714      	adds	r7, #20
 8021922:	46bd      	mov	sp, r7
 8021924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021928:	4770      	bx	lr
	...

0802192c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 802192c:	b580      	push	{r7, lr}
 802192e:	b086      	sub	sp, #24
 8021930:	af00      	add	r7, sp, #0
 8021932:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8021934:	4a14      	ldr	r2, [pc, #80]	; (8021988 <_sbrk+0x5c>)
 8021936:	4b15      	ldr	r3, [pc, #84]	; (802198c <_sbrk+0x60>)
 8021938:	1ad3      	subs	r3, r2, r3
 802193a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 802193c:	697b      	ldr	r3, [r7, #20]
 802193e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8021940:	4b13      	ldr	r3, [pc, #76]	; (8021990 <_sbrk+0x64>)
 8021942:	681b      	ldr	r3, [r3, #0]
 8021944:	2b00      	cmp	r3, #0
 8021946:	d102      	bne.n	802194e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8021948:	4b11      	ldr	r3, [pc, #68]	; (8021990 <_sbrk+0x64>)
 802194a:	4a12      	ldr	r2, [pc, #72]	; (8021994 <_sbrk+0x68>)
 802194c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 802194e:	4b10      	ldr	r3, [pc, #64]	; (8021990 <_sbrk+0x64>)
 8021950:	681a      	ldr	r2, [r3, #0]
 8021952:	687b      	ldr	r3, [r7, #4]
 8021954:	4413      	add	r3, r2
 8021956:	693a      	ldr	r2, [r7, #16]
 8021958:	429a      	cmp	r2, r3
 802195a:	d207      	bcs.n	802196c <_sbrk+0x40>
  {
    errno = ENOMEM;
 802195c:	f003 fa34 	bl	8024dc8 <__errno>
 8021960:	4603      	mov	r3, r0
 8021962:	220c      	movs	r2, #12
 8021964:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8021966:	f04f 33ff 	mov.w	r3, #4294967295
 802196a:	e009      	b.n	8021980 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 802196c:	4b08      	ldr	r3, [pc, #32]	; (8021990 <_sbrk+0x64>)
 802196e:	681b      	ldr	r3, [r3, #0]
 8021970:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8021972:	4b07      	ldr	r3, [pc, #28]	; (8021990 <_sbrk+0x64>)
 8021974:	681a      	ldr	r2, [r3, #0]
 8021976:	687b      	ldr	r3, [r7, #4]
 8021978:	4413      	add	r3, r2
 802197a:	4a05      	ldr	r2, [pc, #20]	; (8021990 <_sbrk+0x64>)
 802197c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 802197e:	68fb      	ldr	r3, [r7, #12]
}
 8021980:	4618      	mov	r0, r3
 8021982:	3718      	adds	r7, #24
 8021984:	46bd      	mov	sp, r7
 8021986:	bd80      	pop	{r7, pc}
 8021988:	20018000 	.word	0x20018000
 802198c:	00000800 	.word	0x00000800
 8021990:	200002cc 	.word	0x200002cc
 8021994:	20000358 	.word	0x20000358

08021998 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8021998:	b580      	push	{r7, lr}
 802199a:	b094      	sub	sp, #80	; 0x50
 802199c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 802199e:	f107 0320 	add.w	r3, r7, #32
 80219a2:	2230      	movs	r2, #48	; 0x30
 80219a4:	2100      	movs	r1, #0
 80219a6:	4618      	mov	r0, r3
 80219a8:	f003 fa38 	bl	8024e1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80219ac:	f107 030c 	add.w	r3, r7, #12
 80219b0:	2200      	movs	r2, #0
 80219b2:	601a      	str	r2, [r3, #0]
 80219b4:	605a      	str	r2, [r3, #4]
 80219b6:	609a      	str	r2, [r3, #8]
 80219b8:	60da      	str	r2, [r3, #12]
 80219ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80219bc:	2300      	movs	r3, #0
 80219be:	60bb      	str	r3, [r7, #8]
 80219c0:	4b29      	ldr	r3, [pc, #164]	; (8021a68 <SystemClock_Config+0xd0>)
 80219c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80219c4:	4a28      	ldr	r2, [pc, #160]	; (8021a68 <SystemClock_Config+0xd0>)
 80219c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80219ca:	6413      	str	r3, [r2, #64]	; 0x40
 80219cc:	4b26      	ldr	r3, [pc, #152]	; (8021a68 <SystemClock_Config+0xd0>)
 80219ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80219d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80219d4:	60bb      	str	r3, [r7, #8]
 80219d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80219d8:	2300      	movs	r3, #0
 80219da:	607b      	str	r3, [r7, #4]
 80219dc:	4b23      	ldr	r3, [pc, #140]	; (8021a6c <SystemClock_Config+0xd4>)
 80219de:	681b      	ldr	r3, [r3, #0]
 80219e0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80219e4:	4a21      	ldr	r2, [pc, #132]	; (8021a6c <SystemClock_Config+0xd4>)
 80219e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80219ea:	6013      	str	r3, [r2, #0]
 80219ec:	4b1f      	ldr	r3, [pc, #124]	; (8021a6c <SystemClock_Config+0xd4>)
 80219ee:	681b      	ldr	r3, [r3, #0]
 80219f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80219f4:	607b      	str	r3, [r7, #4]
 80219f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80219f8:	2302      	movs	r3, #2
 80219fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80219fc:	2301      	movs	r3, #1
 80219fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8021a00:	2310      	movs	r3, #16
 8021a02:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8021a04:	2302      	movs	r3, #2
 8021a06:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8021a08:	2300      	movs	r3, #0
 8021a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8021a0c:	2310      	movs	r3, #16
 8021a0e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8021a10:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8021a14:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8021a16:	2304      	movs	r3, #4
 8021a18:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8021a1a:	2307      	movs	r3, #7
 8021a1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8021a1e:	f107 0320 	add.w	r3, r7, #32
 8021a22:	4618      	mov	r0, r3
 8021a24:	f000 ff9a 	bl	802295c <HAL_RCC_OscConfig>
 8021a28:	4603      	mov	r3, r0
 8021a2a:	2b00      	cmp	r3, #0
 8021a2c:	d001      	beq.n	8021a32 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8021a2e:	f000 f831 	bl	8021a94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8021a32:	230f      	movs	r3, #15
 8021a34:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8021a36:	2302      	movs	r3, #2
 8021a38:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8021a3a:	2300      	movs	r3, #0
 8021a3c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8021a3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8021a42:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8021a44:	2300      	movs	r3, #0
 8021a46:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8021a48:	f107 030c 	add.w	r3, r7, #12
 8021a4c:	2102      	movs	r1, #2
 8021a4e:	4618      	mov	r0, r3
 8021a50:	f001 f9fc 	bl	8022e4c <HAL_RCC_ClockConfig>
 8021a54:	4603      	mov	r3, r0
 8021a56:	2b00      	cmp	r3, #0
 8021a58:	d001      	beq.n	8021a5e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8021a5a:	f000 f81b 	bl	8021a94 <Error_Handler>
  }
}
 8021a5e:	bf00      	nop
 8021a60:	3750      	adds	r7, #80	; 0x50
 8021a62:	46bd      	mov	sp, r7
 8021a64:	bd80      	pop	{r7, pc}
 8021a66:	bf00      	nop
 8021a68:	40023800 	.word	0x40023800
 8021a6c:	40007000 	.word	0x40007000

08021a70 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8021a70:	b580      	push	{r7, lr}
 8021a72:	b082      	sub	sp, #8
 8021a74:	af00      	add	r7, sp, #0
 8021a76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8021a78:	687b      	ldr	r3, [r7, #4]
 8021a7a:	681b      	ldr	r3, [r3, #0]
 8021a7c:	4a04      	ldr	r2, [pc, #16]	; (8021a90 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8021a7e:	4293      	cmp	r3, r2
 8021a80:	d101      	bne.n	8021a86 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8021a82:	f000 f8e9 	bl	8021c58 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8021a86:	bf00      	nop
 8021a88:	3708      	adds	r7, #8
 8021a8a:	46bd      	mov	sp, r7
 8021a8c:	bd80      	pop	{r7, pc}
 8021a8e:	bf00      	nop
 8021a90:	40010000 	.word	0x40010000

08021a94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8021a94:	b480      	push	{r7}
 8021a96:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8021a98:	b672      	cpsid	i
}
 8021a9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8021a9c:	e7fe      	b.n	8021a9c <Error_Handler+0x8>
	...

08021aa0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8021aa0:	b480      	push	{r7}
 8021aa2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8021aa4:	4b07      	ldr	r3, [pc, #28]	; (8021ac4 <SystemInit+0x24>)
 8021aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8021aaa:	4a06      	ldr	r2, [pc, #24]	; (8021ac4 <SystemInit+0x24>)
 8021aac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8021ab0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 8021ab4:	4b03      	ldr	r3, [pc, #12]	; (8021ac4 <SystemInit+0x24>)
 8021ab6:	4a04      	ldr	r2, [pc, #16]	; (8021ac8 <SystemInit+0x28>)
 8021ab8:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8021aba:	bf00      	nop
 8021abc:	46bd      	mov	sp, r7
 8021abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021ac2:	4770      	bx	lr
 8021ac4:	e000ed00 	.word	0xe000ed00
 8021ac8:	08020000 	.word	0x08020000

08021acc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8021acc:	b580      	push	{r7, lr}
 8021ace:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8021ad0:	4b11      	ldr	r3, [pc, #68]	; (8021b18 <MX_USART2_UART_Init+0x4c>)
 8021ad2:	4a12      	ldr	r2, [pc, #72]	; (8021b1c <MX_USART2_UART_Init+0x50>)
 8021ad4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8021ad6:	4b10      	ldr	r3, [pc, #64]	; (8021b18 <MX_USART2_UART_Init+0x4c>)
 8021ad8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8021adc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8021ade:	4b0e      	ldr	r3, [pc, #56]	; (8021b18 <MX_USART2_UART_Init+0x4c>)
 8021ae0:	2200      	movs	r2, #0
 8021ae2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8021ae4:	4b0c      	ldr	r3, [pc, #48]	; (8021b18 <MX_USART2_UART_Init+0x4c>)
 8021ae6:	2200      	movs	r2, #0
 8021ae8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8021aea:	4b0b      	ldr	r3, [pc, #44]	; (8021b18 <MX_USART2_UART_Init+0x4c>)
 8021aec:	2200      	movs	r2, #0
 8021aee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8021af0:	4b09      	ldr	r3, [pc, #36]	; (8021b18 <MX_USART2_UART_Init+0x4c>)
 8021af2:	220c      	movs	r2, #12
 8021af4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8021af6:	4b08      	ldr	r3, [pc, #32]	; (8021b18 <MX_USART2_UART_Init+0x4c>)
 8021af8:	2200      	movs	r2, #0
 8021afa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8021afc:	4b06      	ldr	r3, [pc, #24]	; (8021b18 <MX_USART2_UART_Init+0x4c>)
 8021afe:	2200      	movs	r2, #0
 8021b00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8021b02:	4805      	ldr	r0, [pc, #20]	; (8021b18 <MX_USART2_UART_Init+0x4c>)
 8021b04:	f001 fe74 	bl	80237f0 <HAL_UART_Init>
 8021b08:	4603      	mov	r3, r0
 8021b0a:	2b00      	cmp	r3, #0
 8021b0c:	d001      	beq.n	8021b12 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8021b0e:	f7ff ffc1 	bl	8021a94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8021b12:	bf00      	nop
 8021b14:	bd80      	pop	{r7, pc}
 8021b16:	bf00      	nop
 8021b18:	200002d0 	.word	0x200002d0
 8021b1c:	40004400 	.word	0x40004400

08021b20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8021b20:	b580      	push	{r7, lr}
 8021b22:	b08a      	sub	sp, #40	; 0x28
 8021b24:	af00      	add	r7, sp, #0
 8021b26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8021b28:	f107 0314 	add.w	r3, r7, #20
 8021b2c:	2200      	movs	r2, #0
 8021b2e:	601a      	str	r2, [r3, #0]
 8021b30:	605a      	str	r2, [r3, #4]
 8021b32:	609a      	str	r2, [r3, #8]
 8021b34:	60da      	str	r2, [r3, #12]
 8021b36:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8021b38:	687b      	ldr	r3, [r7, #4]
 8021b3a:	681b      	ldr	r3, [r3, #0]
 8021b3c:	4a1d      	ldr	r2, [pc, #116]	; (8021bb4 <HAL_UART_MspInit+0x94>)
 8021b3e:	4293      	cmp	r3, r2
 8021b40:	d133      	bne.n	8021baa <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8021b42:	2300      	movs	r3, #0
 8021b44:	613b      	str	r3, [r7, #16]
 8021b46:	4b1c      	ldr	r3, [pc, #112]	; (8021bb8 <HAL_UART_MspInit+0x98>)
 8021b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021b4a:	4a1b      	ldr	r2, [pc, #108]	; (8021bb8 <HAL_UART_MspInit+0x98>)
 8021b4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8021b50:	6413      	str	r3, [r2, #64]	; 0x40
 8021b52:	4b19      	ldr	r3, [pc, #100]	; (8021bb8 <HAL_UART_MspInit+0x98>)
 8021b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8021b5a:	613b      	str	r3, [r7, #16]
 8021b5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8021b5e:	2300      	movs	r3, #0
 8021b60:	60fb      	str	r3, [r7, #12]
 8021b62:	4b15      	ldr	r3, [pc, #84]	; (8021bb8 <HAL_UART_MspInit+0x98>)
 8021b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021b66:	4a14      	ldr	r2, [pc, #80]	; (8021bb8 <HAL_UART_MspInit+0x98>)
 8021b68:	f043 0301 	orr.w	r3, r3, #1
 8021b6c:	6313      	str	r3, [r2, #48]	; 0x30
 8021b6e:	4b12      	ldr	r3, [pc, #72]	; (8021bb8 <HAL_UART_MspInit+0x98>)
 8021b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8021b72:	f003 0301 	and.w	r3, r3, #1
 8021b76:	60fb      	str	r3, [r7, #12]
 8021b78:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8021b7a:	230c      	movs	r3, #12
 8021b7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021b7e:	2302      	movs	r3, #2
 8021b80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021b82:	2300      	movs	r3, #0
 8021b84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8021b86:	2300      	movs	r3, #0
 8021b88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8021b8a:	2307      	movs	r3, #7
 8021b8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8021b8e:	f107 0314 	add.w	r3, r7, #20
 8021b92:	4619      	mov	r1, r3
 8021b94:	4809      	ldr	r0, [pc, #36]	; (8021bbc <HAL_UART_MspInit+0x9c>)
 8021b96:	f000 fd29 	bl	80225ec <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8021b9a:	2200      	movs	r2, #0
 8021b9c:	2100      	movs	r1, #0
 8021b9e:	2026      	movs	r0, #38	; 0x26
 8021ba0:	f000 f96d 	bl	8021e7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8021ba4:	2026      	movs	r0, #38	; 0x26
 8021ba6:	f000 f986 	bl	8021eb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8021baa:	bf00      	nop
 8021bac:	3728      	adds	r7, #40	; 0x28
 8021bae:	46bd      	mov	sp, r7
 8021bb0:	bd80      	pop	{r7, pc}
 8021bb2:	bf00      	nop
 8021bb4:	40004400 	.word	0x40004400
 8021bb8:	40023800 	.word	0x40023800
 8021bbc:	40020000 	.word	0x40020000

08021bc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8021bc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8021bf8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8021bc4:	480d      	ldr	r0, [pc, #52]	; (8021bfc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8021bc6:	490e      	ldr	r1, [pc, #56]	; (8021c00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8021bc8:	4a0e      	ldr	r2, [pc, #56]	; (8021c04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8021bca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8021bcc:	e002      	b.n	8021bd4 <LoopCopyDataInit>

08021bce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8021bce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8021bd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8021bd2:	3304      	adds	r3, #4

08021bd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8021bd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8021bd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8021bd8:	d3f9      	bcc.n	8021bce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8021bda:	4a0b      	ldr	r2, [pc, #44]	; (8021c08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8021bdc:	4c0b      	ldr	r4, [pc, #44]	; (8021c0c <LoopFillZerobss+0x26>)
  movs r3, #0
 8021bde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8021be0:	e001      	b.n	8021be6 <LoopFillZerobss>

08021be2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8021be2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8021be4:	3204      	adds	r2, #4

08021be6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8021be6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8021be8:	d3fb      	bcc.n	8021be2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8021bea:	f7ff ff59 	bl	8021aa0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8021bee:	f003 f8f1 	bl	8024dd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8021bf2:	f7ff fcd3 	bl	802159c <main>
  bx  lr    
 8021bf6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8021bf8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8021bfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8021c00:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8021c04:	080287d8 	.word	0x080287d8
  ldr r2, =_sbss
 8021c08:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8021c0c:	20000354 	.word	0x20000354

08021c10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8021c10:	e7fe      	b.n	8021c10 <ADC_IRQHandler>
	...

08021c14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8021c14:	b580      	push	{r7, lr}
 8021c16:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8021c18:	4b0e      	ldr	r3, [pc, #56]	; (8021c54 <HAL_Init+0x40>)
 8021c1a:	681b      	ldr	r3, [r3, #0]
 8021c1c:	4a0d      	ldr	r2, [pc, #52]	; (8021c54 <HAL_Init+0x40>)
 8021c1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8021c22:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8021c24:	4b0b      	ldr	r3, [pc, #44]	; (8021c54 <HAL_Init+0x40>)
 8021c26:	681b      	ldr	r3, [r3, #0]
 8021c28:	4a0a      	ldr	r2, [pc, #40]	; (8021c54 <HAL_Init+0x40>)
 8021c2a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8021c2e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8021c30:	4b08      	ldr	r3, [pc, #32]	; (8021c54 <HAL_Init+0x40>)
 8021c32:	681b      	ldr	r3, [r3, #0]
 8021c34:	4a07      	ldr	r2, [pc, #28]	; (8021c54 <HAL_Init+0x40>)
 8021c36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8021c3a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8021c3c:	2003      	movs	r0, #3
 8021c3e:	f000 f913 	bl	8021e68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8021c42:	2000      	movs	r0, #0
 8021c44:	f7ff fd30 	bl	80216a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8021c48:	f7ff fd06 	bl	8021658 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8021c4c:	2300      	movs	r3, #0
}
 8021c4e:	4618      	mov	r0, r3
 8021c50:	bd80      	pop	{r7, pc}
 8021c52:	bf00      	nop
 8021c54:	40023c00 	.word	0x40023c00

08021c58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8021c58:	b480      	push	{r7}
 8021c5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8021c5c:	4b06      	ldr	r3, [pc, #24]	; (8021c78 <HAL_IncTick+0x20>)
 8021c5e:	781b      	ldrb	r3, [r3, #0]
 8021c60:	461a      	mov	r2, r3
 8021c62:	4b06      	ldr	r3, [pc, #24]	; (8021c7c <HAL_IncTick+0x24>)
 8021c64:	681b      	ldr	r3, [r3, #0]
 8021c66:	4413      	add	r3, r2
 8021c68:	4a04      	ldr	r2, [pc, #16]	; (8021c7c <HAL_IncTick+0x24>)
 8021c6a:	6013      	str	r3, [r2, #0]
}
 8021c6c:	bf00      	nop
 8021c6e:	46bd      	mov	sp, r7
 8021c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c74:	4770      	bx	lr
 8021c76:	bf00      	nop
 8021c78:	2000000c 	.word	0x2000000c
 8021c7c:	20000314 	.word	0x20000314

08021c80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8021c80:	b480      	push	{r7}
 8021c82:	af00      	add	r7, sp, #0
  return uwTick;
 8021c84:	4b03      	ldr	r3, [pc, #12]	; (8021c94 <HAL_GetTick+0x14>)
 8021c86:	681b      	ldr	r3, [r3, #0]
}
 8021c88:	4618      	mov	r0, r3
 8021c8a:	46bd      	mov	sp, r7
 8021c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021c90:	4770      	bx	lr
 8021c92:	bf00      	nop
 8021c94:	20000314 	.word	0x20000314

08021c98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8021c98:	b480      	push	{r7}
 8021c9a:	b085      	sub	sp, #20
 8021c9c:	af00      	add	r7, sp, #0
 8021c9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8021ca0:	687b      	ldr	r3, [r7, #4]
 8021ca2:	f003 0307 	and.w	r3, r3, #7
 8021ca6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8021ca8:	4b0c      	ldr	r3, [pc, #48]	; (8021cdc <__NVIC_SetPriorityGrouping+0x44>)
 8021caa:	68db      	ldr	r3, [r3, #12]
 8021cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8021cae:	68ba      	ldr	r2, [r7, #8]
 8021cb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8021cb4:	4013      	ands	r3, r2
 8021cb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8021cb8:	68fb      	ldr	r3, [r7, #12]
 8021cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8021cbc:	68bb      	ldr	r3, [r7, #8]
 8021cbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8021cc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8021cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8021cc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8021cca:	4a04      	ldr	r2, [pc, #16]	; (8021cdc <__NVIC_SetPriorityGrouping+0x44>)
 8021ccc:	68bb      	ldr	r3, [r7, #8]
 8021cce:	60d3      	str	r3, [r2, #12]
}
 8021cd0:	bf00      	nop
 8021cd2:	3714      	adds	r7, #20
 8021cd4:	46bd      	mov	sp, r7
 8021cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021cda:	4770      	bx	lr
 8021cdc:	e000ed00 	.word	0xe000ed00

08021ce0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8021ce0:	b480      	push	{r7}
 8021ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8021ce4:	4b04      	ldr	r3, [pc, #16]	; (8021cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8021ce6:	68db      	ldr	r3, [r3, #12]
 8021ce8:	0a1b      	lsrs	r3, r3, #8
 8021cea:	f003 0307 	and.w	r3, r3, #7
}
 8021cee:	4618      	mov	r0, r3
 8021cf0:	46bd      	mov	sp, r7
 8021cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021cf6:	4770      	bx	lr
 8021cf8:	e000ed00 	.word	0xe000ed00

08021cfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8021cfc:	b480      	push	{r7}
 8021cfe:	b083      	sub	sp, #12
 8021d00:	af00      	add	r7, sp, #0
 8021d02:	4603      	mov	r3, r0
 8021d04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8021d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8021d0a:	2b00      	cmp	r3, #0
 8021d0c:	db0b      	blt.n	8021d26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8021d0e:	79fb      	ldrb	r3, [r7, #7]
 8021d10:	f003 021f 	and.w	r2, r3, #31
 8021d14:	4907      	ldr	r1, [pc, #28]	; (8021d34 <__NVIC_EnableIRQ+0x38>)
 8021d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8021d1a:	095b      	lsrs	r3, r3, #5
 8021d1c:	2001      	movs	r0, #1
 8021d1e:	fa00 f202 	lsl.w	r2, r0, r2
 8021d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8021d26:	bf00      	nop
 8021d28:	370c      	adds	r7, #12
 8021d2a:	46bd      	mov	sp, r7
 8021d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d30:	4770      	bx	lr
 8021d32:	bf00      	nop
 8021d34:	e000e100 	.word	0xe000e100

08021d38 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8021d38:	b480      	push	{r7}
 8021d3a:	b083      	sub	sp, #12
 8021d3c:	af00      	add	r7, sp, #0
 8021d3e:	4603      	mov	r3, r0
 8021d40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8021d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8021d46:	2b00      	cmp	r3, #0
 8021d48:	db12      	blt.n	8021d70 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8021d4a:	79fb      	ldrb	r3, [r7, #7]
 8021d4c:	f003 021f 	and.w	r2, r3, #31
 8021d50:	490a      	ldr	r1, [pc, #40]	; (8021d7c <__NVIC_DisableIRQ+0x44>)
 8021d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8021d56:	095b      	lsrs	r3, r3, #5
 8021d58:	2001      	movs	r0, #1
 8021d5a:	fa00 f202 	lsl.w	r2, r0, r2
 8021d5e:	3320      	adds	r3, #32
 8021d60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8021d64:	f3bf 8f4f 	dsb	sy
}
 8021d68:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8021d6a:	f3bf 8f6f 	isb	sy
}
 8021d6e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8021d70:	bf00      	nop
 8021d72:	370c      	adds	r7, #12
 8021d74:	46bd      	mov	sp, r7
 8021d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021d7a:	4770      	bx	lr
 8021d7c:	e000e100 	.word	0xe000e100

08021d80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8021d80:	b480      	push	{r7}
 8021d82:	b083      	sub	sp, #12
 8021d84:	af00      	add	r7, sp, #0
 8021d86:	4603      	mov	r3, r0
 8021d88:	6039      	str	r1, [r7, #0]
 8021d8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8021d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8021d90:	2b00      	cmp	r3, #0
 8021d92:	db0a      	blt.n	8021daa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8021d94:	683b      	ldr	r3, [r7, #0]
 8021d96:	b2da      	uxtb	r2, r3
 8021d98:	490c      	ldr	r1, [pc, #48]	; (8021dcc <__NVIC_SetPriority+0x4c>)
 8021d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8021d9e:	0112      	lsls	r2, r2, #4
 8021da0:	b2d2      	uxtb	r2, r2
 8021da2:	440b      	add	r3, r1
 8021da4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8021da8:	e00a      	b.n	8021dc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8021daa:	683b      	ldr	r3, [r7, #0]
 8021dac:	b2da      	uxtb	r2, r3
 8021dae:	4908      	ldr	r1, [pc, #32]	; (8021dd0 <__NVIC_SetPriority+0x50>)
 8021db0:	79fb      	ldrb	r3, [r7, #7]
 8021db2:	f003 030f 	and.w	r3, r3, #15
 8021db6:	3b04      	subs	r3, #4
 8021db8:	0112      	lsls	r2, r2, #4
 8021dba:	b2d2      	uxtb	r2, r2
 8021dbc:	440b      	add	r3, r1
 8021dbe:	761a      	strb	r2, [r3, #24]
}
 8021dc0:	bf00      	nop
 8021dc2:	370c      	adds	r7, #12
 8021dc4:	46bd      	mov	sp, r7
 8021dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021dca:	4770      	bx	lr
 8021dcc:	e000e100 	.word	0xe000e100
 8021dd0:	e000ed00 	.word	0xe000ed00

08021dd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8021dd4:	b480      	push	{r7}
 8021dd6:	b089      	sub	sp, #36	; 0x24
 8021dd8:	af00      	add	r7, sp, #0
 8021dda:	60f8      	str	r0, [r7, #12]
 8021ddc:	60b9      	str	r1, [r7, #8]
 8021dde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8021de0:	68fb      	ldr	r3, [r7, #12]
 8021de2:	f003 0307 	and.w	r3, r3, #7
 8021de6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8021de8:	69fb      	ldr	r3, [r7, #28]
 8021dea:	f1c3 0307 	rsb	r3, r3, #7
 8021dee:	2b04      	cmp	r3, #4
 8021df0:	bf28      	it	cs
 8021df2:	2304      	movcs	r3, #4
 8021df4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8021df6:	69fb      	ldr	r3, [r7, #28]
 8021df8:	3304      	adds	r3, #4
 8021dfa:	2b06      	cmp	r3, #6
 8021dfc:	d902      	bls.n	8021e04 <NVIC_EncodePriority+0x30>
 8021dfe:	69fb      	ldr	r3, [r7, #28]
 8021e00:	3b03      	subs	r3, #3
 8021e02:	e000      	b.n	8021e06 <NVIC_EncodePriority+0x32>
 8021e04:	2300      	movs	r3, #0
 8021e06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8021e08:	f04f 32ff 	mov.w	r2, #4294967295
 8021e0c:	69bb      	ldr	r3, [r7, #24]
 8021e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8021e12:	43da      	mvns	r2, r3
 8021e14:	68bb      	ldr	r3, [r7, #8]
 8021e16:	401a      	ands	r2, r3
 8021e18:	697b      	ldr	r3, [r7, #20]
 8021e1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8021e1c:	f04f 31ff 	mov.w	r1, #4294967295
 8021e20:	697b      	ldr	r3, [r7, #20]
 8021e22:	fa01 f303 	lsl.w	r3, r1, r3
 8021e26:	43d9      	mvns	r1, r3
 8021e28:	687b      	ldr	r3, [r7, #4]
 8021e2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8021e2c:	4313      	orrs	r3, r2
         );
}
 8021e2e:	4618      	mov	r0, r3
 8021e30:	3724      	adds	r7, #36	; 0x24
 8021e32:	46bd      	mov	sp, r7
 8021e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021e38:	4770      	bx	lr
	...

08021e3c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8021e3c:	b480      	push	{r7}
 8021e3e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8021e40:	f3bf 8f4f 	dsb	sy
}
 8021e44:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8021e46:	4b06      	ldr	r3, [pc, #24]	; (8021e60 <__NVIC_SystemReset+0x24>)
 8021e48:	68db      	ldr	r3, [r3, #12]
 8021e4a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8021e4e:	4904      	ldr	r1, [pc, #16]	; (8021e60 <__NVIC_SystemReset+0x24>)
 8021e50:	4b04      	ldr	r3, [pc, #16]	; (8021e64 <__NVIC_SystemReset+0x28>)
 8021e52:	4313      	orrs	r3, r2
 8021e54:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8021e56:	f3bf 8f4f 	dsb	sy
}
 8021e5a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8021e5c:	bf00      	nop
 8021e5e:	e7fd      	b.n	8021e5c <__NVIC_SystemReset+0x20>
 8021e60:	e000ed00 	.word	0xe000ed00
 8021e64:	05fa0004 	.word	0x05fa0004

08021e68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8021e68:	b580      	push	{r7, lr}
 8021e6a:	b082      	sub	sp, #8
 8021e6c:	af00      	add	r7, sp, #0
 8021e6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8021e70:	6878      	ldr	r0, [r7, #4]
 8021e72:	f7ff ff11 	bl	8021c98 <__NVIC_SetPriorityGrouping>
}
 8021e76:	bf00      	nop
 8021e78:	3708      	adds	r7, #8
 8021e7a:	46bd      	mov	sp, r7
 8021e7c:	bd80      	pop	{r7, pc}

08021e7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8021e7e:	b580      	push	{r7, lr}
 8021e80:	b086      	sub	sp, #24
 8021e82:	af00      	add	r7, sp, #0
 8021e84:	4603      	mov	r3, r0
 8021e86:	60b9      	str	r1, [r7, #8]
 8021e88:	607a      	str	r2, [r7, #4]
 8021e8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8021e8c:	2300      	movs	r3, #0
 8021e8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8021e90:	f7ff ff26 	bl	8021ce0 <__NVIC_GetPriorityGrouping>
 8021e94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8021e96:	687a      	ldr	r2, [r7, #4]
 8021e98:	68b9      	ldr	r1, [r7, #8]
 8021e9a:	6978      	ldr	r0, [r7, #20]
 8021e9c:	f7ff ff9a 	bl	8021dd4 <NVIC_EncodePriority>
 8021ea0:	4602      	mov	r2, r0
 8021ea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8021ea6:	4611      	mov	r1, r2
 8021ea8:	4618      	mov	r0, r3
 8021eaa:	f7ff ff69 	bl	8021d80 <__NVIC_SetPriority>
}
 8021eae:	bf00      	nop
 8021eb0:	3718      	adds	r7, #24
 8021eb2:	46bd      	mov	sp, r7
 8021eb4:	bd80      	pop	{r7, pc}

08021eb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8021eb6:	b580      	push	{r7, lr}
 8021eb8:	b082      	sub	sp, #8
 8021eba:	af00      	add	r7, sp, #0
 8021ebc:	4603      	mov	r3, r0
 8021ebe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8021ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8021ec4:	4618      	mov	r0, r3
 8021ec6:	f7ff ff19 	bl	8021cfc <__NVIC_EnableIRQ>
}
 8021eca:	bf00      	nop
 8021ecc:	3708      	adds	r7, #8
 8021ece:	46bd      	mov	sp, r7
 8021ed0:	bd80      	pop	{r7, pc}

08021ed2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8021ed2:	b580      	push	{r7, lr}
 8021ed4:	b082      	sub	sp, #8
 8021ed6:	af00      	add	r7, sp, #0
 8021ed8:	4603      	mov	r3, r0
 8021eda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8021edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8021ee0:	4618      	mov	r0, r3
 8021ee2:	f7ff ff29 	bl	8021d38 <__NVIC_DisableIRQ>
}
 8021ee6:	bf00      	nop
 8021ee8:	3708      	adds	r7, #8
 8021eea:	46bd      	mov	sp, r7
 8021eec:	bd80      	pop	{r7, pc}

08021eee <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8021eee:	b580      	push	{r7, lr}
 8021ef0:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8021ef2:	f7ff ffa3 	bl	8021e3c <__NVIC_SystemReset>

08021ef6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8021ef6:	b580      	push	{r7, lr}
 8021ef8:	b084      	sub	sp, #16
 8021efa:	af00      	add	r7, sp, #0
 8021efc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8021efe:	687b      	ldr	r3, [r7, #4]
 8021f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8021f02:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8021f04:	f7ff febc 	bl	8021c80 <HAL_GetTick>
 8021f08:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8021f0a:	687b      	ldr	r3, [r7, #4]
 8021f0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8021f10:	b2db      	uxtb	r3, r3
 8021f12:	2b02      	cmp	r3, #2
 8021f14:	d008      	beq.n	8021f28 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8021f16:	687b      	ldr	r3, [r7, #4]
 8021f18:	2280      	movs	r2, #128	; 0x80
 8021f1a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8021f1c:	687b      	ldr	r3, [r7, #4]
 8021f1e:	2200      	movs	r2, #0
 8021f20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8021f24:	2301      	movs	r3, #1
 8021f26:	e052      	b.n	8021fce <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8021f28:	687b      	ldr	r3, [r7, #4]
 8021f2a:	681b      	ldr	r3, [r3, #0]
 8021f2c:	681a      	ldr	r2, [r3, #0]
 8021f2e:	687b      	ldr	r3, [r7, #4]
 8021f30:	681b      	ldr	r3, [r3, #0]
 8021f32:	f022 0216 	bic.w	r2, r2, #22
 8021f36:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8021f38:	687b      	ldr	r3, [r7, #4]
 8021f3a:	681b      	ldr	r3, [r3, #0]
 8021f3c:	695a      	ldr	r2, [r3, #20]
 8021f3e:	687b      	ldr	r3, [r7, #4]
 8021f40:	681b      	ldr	r3, [r3, #0]
 8021f42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8021f46:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8021f48:	687b      	ldr	r3, [r7, #4]
 8021f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8021f4c:	2b00      	cmp	r3, #0
 8021f4e:	d103      	bne.n	8021f58 <HAL_DMA_Abort+0x62>
 8021f50:	687b      	ldr	r3, [r7, #4]
 8021f52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8021f54:	2b00      	cmp	r3, #0
 8021f56:	d007      	beq.n	8021f68 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8021f58:	687b      	ldr	r3, [r7, #4]
 8021f5a:	681b      	ldr	r3, [r3, #0]
 8021f5c:	681a      	ldr	r2, [r3, #0]
 8021f5e:	687b      	ldr	r3, [r7, #4]
 8021f60:	681b      	ldr	r3, [r3, #0]
 8021f62:	f022 0208 	bic.w	r2, r2, #8
 8021f66:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8021f68:	687b      	ldr	r3, [r7, #4]
 8021f6a:	681b      	ldr	r3, [r3, #0]
 8021f6c:	681a      	ldr	r2, [r3, #0]
 8021f6e:	687b      	ldr	r3, [r7, #4]
 8021f70:	681b      	ldr	r3, [r3, #0]
 8021f72:	f022 0201 	bic.w	r2, r2, #1
 8021f76:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8021f78:	e013      	b.n	8021fa2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8021f7a:	f7ff fe81 	bl	8021c80 <HAL_GetTick>
 8021f7e:	4602      	mov	r2, r0
 8021f80:	68bb      	ldr	r3, [r7, #8]
 8021f82:	1ad3      	subs	r3, r2, r3
 8021f84:	2b05      	cmp	r3, #5
 8021f86:	d90c      	bls.n	8021fa2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8021f88:	687b      	ldr	r3, [r7, #4]
 8021f8a:	2220      	movs	r2, #32
 8021f8c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8021f8e:	687b      	ldr	r3, [r7, #4]
 8021f90:	2203      	movs	r2, #3
 8021f92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8021f96:	687b      	ldr	r3, [r7, #4]
 8021f98:	2200      	movs	r2, #0
 8021f9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8021f9e:	2303      	movs	r3, #3
 8021fa0:	e015      	b.n	8021fce <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8021fa2:	687b      	ldr	r3, [r7, #4]
 8021fa4:	681b      	ldr	r3, [r3, #0]
 8021fa6:	681b      	ldr	r3, [r3, #0]
 8021fa8:	f003 0301 	and.w	r3, r3, #1
 8021fac:	2b00      	cmp	r3, #0
 8021fae:	d1e4      	bne.n	8021f7a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8021fb0:	687b      	ldr	r3, [r7, #4]
 8021fb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8021fb4:	223f      	movs	r2, #63	; 0x3f
 8021fb6:	409a      	lsls	r2, r3
 8021fb8:	68fb      	ldr	r3, [r7, #12]
 8021fba:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8021fbc:	687b      	ldr	r3, [r7, #4]
 8021fbe:	2201      	movs	r2, #1
 8021fc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8021fc4:	687b      	ldr	r3, [r7, #4]
 8021fc6:	2200      	movs	r2, #0
 8021fc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8021fcc:	2300      	movs	r3, #0
}
 8021fce:	4618      	mov	r0, r3
 8021fd0:	3710      	adds	r7, #16
 8021fd2:	46bd      	mov	sp, r7
 8021fd4:	bd80      	pop	{r7, pc}

08021fd6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8021fd6:	b480      	push	{r7}
 8021fd8:	b083      	sub	sp, #12
 8021fda:	af00      	add	r7, sp, #0
 8021fdc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8021fde:	687b      	ldr	r3, [r7, #4]
 8021fe0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8021fe4:	b2db      	uxtb	r3, r3
 8021fe6:	2b02      	cmp	r3, #2
 8021fe8:	d004      	beq.n	8021ff4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8021fea:	687b      	ldr	r3, [r7, #4]
 8021fec:	2280      	movs	r2, #128	; 0x80
 8021fee:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8021ff0:	2301      	movs	r3, #1
 8021ff2:	e00c      	b.n	802200e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8021ff4:	687b      	ldr	r3, [r7, #4]
 8021ff6:	2205      	movs	r2, #5
 8021ff8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8021ffc:	687b      	ldr	r3, [r7, #4]
 8021ffe:	681b      	ldr	r3, [r3, #0]
 8022000:	681a      	ldr	r2, [r3, #0]
 8022002:	687b      	ldr	r3, [r7, #4]
 8022004:	681b      	ldr	r3, [r3, #0]
 8022006:	f022 0201 	bic.w	r2, r2, #1
 802200a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 802200c:	2300      	movs	r3, #0
}
 802200e:	4618      	mov	r0, r3
 8022010:	370c      	adds	r7, #12
 8022012:	46bd      	mov	sp, r7
 8022014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022018:	4770      	bx	lr
	...

0802201c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 802201c:	b580      	push	{r7, lr}
 802201e:	b086      	sub	sp, #24
 8022020:	af00      	add	r7, sp, #0
 8022022:	60f8      	str	r0, [r7, #12]
 8022024:	60b9      	str	r1, [r7, #8]
 8022026:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 802202a:	2301      	movs	r3, #1
 802202c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 802202e:	4b23      	ldr	r3, [pc, #140]	; (80220bc <HAL_FLASH_Program+0xa0>)
 8022030:	7e1b      	ldrb	r3, [r3, #24]
 8022032:	2b01      	cmp	r3, #1
 8022034:	d101      	bne.n	802203a <HAL_FLASH_Program+0x1e>
 8022036:	2302      	movs	r3, #2
 8022038:	e03b      	b.n	80220b2 <HAL_FLASH_Program+0x96>
 802203a:	4b20      	ldr	r3, [pc, #128]	; (80220bc <HAL_FLASH_Program+0xa0>)
 802203c:	2201      	movs	r2, #1
 802203e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8022040:	f24c 3050 	movw	r0, #50000	; 0xc350
 8022044:	f000 f870 	bl	8022128 <FLASH_WaitForLastOperation>
 8022048:	4603      	mov	r3, r0
 802204a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 802204c:	7dfb      	ldrb	r3, [r7, #23]
 802204e:	2b00      	cmp	r3, #0
 8022050:	d12b      	bne.n	80220aa <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8022052:	68fb      	ldr	r3, [r7, #12]
 8022054:	2b00      	cmp	r3, #0
 8022056:	d105      	bne.n	8022064 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8022058:	783b      	ldrb	r3, [r7, #0]
 802205a:	4619      	mov	r1, r3
 802205c:	68b8      	ldr	r0, [r7, #8]
 802205e:	f000 f91b 	bl	8022298 <FLASH_Program_Byte>
 8022062:	e016      	b.n	8022092 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8022064:	68fb      	ldr	r3, [r7, #12]
 8022066:	2b01      	cmp	r3, #1
 8022068:	d105      	bne.n	8022076 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 802206a:	883b      	ldrh	r3, [r7, #0]
 802206c:	4619      	mov	r1, r3
 802206e:	68b8      	ldr	r0, [r7, #8]
 8022070:	f000 f8ee 	bl	8022250 <FLASH_Program_HalfWord>
 8022074:	e00d      	b.n	8022092 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8022076:	68fb      	ldr	r3, [r7, #12]
 8022078:	2b02      	cmp	r3, #2
 802207a:	d105      	bne.n	8022088 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 802207c:	683b      	ldr	r3, [r7, #0]
 802207e:	4619      	mov	r1, r3
 8022080:	68b8      	ldr	r0, [r7, #8]
 8022082:	f000 f8c3 	bl	802220c <FLASH_Program_Word>
 8022086:	e004      	b.n	8022092 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8022088:	e9d7 2300 	ldrd	r2, r3, [r7]
 802208c:	68b8      	ldr	r0, [r7, #8]
 802208e:	f000 f88b 	bl	80221a8 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8022092:	f24c 3050 	movw	r0, #50000	; 0xc350
 8022096:	f000 f847 	bl	8022128 <FLASH_WaitForLastOperation>
 802209a:	4603      	mov	r3, r0
 802209c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 802209e:	4b08      	ldr	r3, [pc, #32]	; (80220c0 <HAL_FLASH_Program+0xa4>)
 80220a0:	691b      	ldr	r3, [r3, #16]
 80220a2:	4a07      	ldr	r2, [pc, #28]	; (80220c0 <HAL_FLASH_Program+0xa4>)
 80220a4:	f023 0301 	bic.w	r3, r3, #1
 80220a8:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80220aa:	4b04      	ldr	r3, [pc, #16]	; (80220bc <HAL_FLASH_Program+0xa0>)
 80220ac:	2200      	movs	r2, #0
 80220ae:	761a      	strb	r2, [r3, #24]
  
  return status;
 80220b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80220b2:	4618      	mov	r0, r3
 80220b4:	3718      	adds	r7, #24
 80220b6:	46bd      	mov	sp, r7
 80220b8:	bd80      	pop	{r7, pc}
 80220ba:	bf00      	nop
 80220bc:	20000318 	.word	0x20000318
 80220c0:	40023c00 	.word	0x40023c00

080220c4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80220c4:	b480      	push	{r7}
 80220c6:	b083      	sub	sp, #12
 80220c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80220ca:	2300      	movs	r3, #0
 80220cc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80220ce:	4b0b      	ldr	r3, [pc, #44]	; (80220fc <HAL_FLASH_Unlock+0x38>)
 80220d0:	691b      	ldr	r3, [r3, #16]
 80220d2:	2b00      	cmp	r3, #0
 80220d4:	da0b      	bge.n	80220ee <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80220d6:	4b09      	ldr	r3, [pc, #36]	; (80220fc <HAL_FLASH_Unlock+0x38>)
 80220d8:	4a09      	ldr	r2, [pc, #36]	; (8022100 <HAL_FLASH_Unlock+0x3c>)
 80220da:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80220dc:	4b07      	ldr	r3, [pc, #28]	; (80220fc <HAL_FLASH_Unlock+0x38>)
 80220de:	4a09      	ldr	r2, [pc, #36]	; (8022104 <HAL_FLASH_Unlock+0x40>)
 80220e0:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80220e2:	4b06      	ldr	r3, [pc, #24]	; (80220fc <HAL_FLASH_Unlock+0x38>)
 80220e4:	691b      	ldr	r3, [r3, #16]
 80220e6:	2b00      	cmp	r3, #0
 80220e8:	da01      	bge.n	80220ee <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80220ea:	2301      	movs	r3, #1
 80220ec:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80220ee:	79fb      	ldrb	r3, [r7, #7]
}
 80220f0:	4618      	mov	r0, r3
 80220f2:	370c      	adds	r7, #12
 80220f4:	46bd      	mov	sp, r7
 80220f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80220fa:	4770      	bx	lr
 80220fc:	40023c00 	.word	0x40023c00
 8022100:	45670123 	.word	0x45670123
 8022104:	cdef89ab 	.word	0xcdef89ab

08022108 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8022108:	b480      	push	{r7}
 802210a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 802210c:	4b05      	ldr	r3, [pc, #20]	; (8022124 <HAL_FLASH_Lock+0x1c>)
 802210e:	691b      	ldr	r3, [r3, #16]
 8022110:	4a04      	ldr	r2, [pc, #16]	; (8022124 <HAL_FLASH_Lock+0x1c>)
 8022112:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8022116:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8022118:	2300      	movs	r3, #0
}
 802211a:	4618      	mov	r0, r3
 802211c:	46bd      	mov	sp, r7
 802211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022122:	4770      	bx	lr
 8022124:	40023c00 	.word	0x40023c00

08022128 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8022128:	b580      	push	{r7, lr}
 802212a:	b084      	sub	sp, #16
 802212c:	af00      	add	r7, sp, #0
 802212e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8022130:	2300      	movs	r3, #0
 8022132:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8022134:	4b1a      	ldr	r3, [pc, #104]	; (80221a0 <FLASH_WaitForLastOperation+0x78>)
 8022136:	2200      	movs	r2, #0
 8022138:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 802213a:	f7ff fda1 	bl	8021c80 <HAL_GetTick>
 802213e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8022140:	e010      	b.n	8022164 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8022142:	687b      	ldr	r3, [r7, #4]
 8022144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8022148:	d00c      	beq.n	8022164 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 802214a:	687b      	ldr	r3, [r7, #4]
 802214c:	2b00      	cmp	r3, #0
 802214e:	d007      	beq.n	8022160 <FLASH_WaitForLastOperation+0x38>
 8022150:	f7ff fd96 	bl	8021c80 <HAL_GetTick>
 8022154:	4602      	mov	r2, r0
 8022156:	68fb      	ldr	r3, [r7, #12]
 8022158:	1ad3      	subs	r3, r2, r3
 802215a:	687a      	ldr	r2, [r7, #4]
 802215c:	429a      	cmp	r2, r3
 802215e:	d201      	bcs.n	8022164 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8022160:	2303      	movs	r3, #3
 8022162:	e019      	b.n	8022198 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8022164:	4b0f      	ldr	r3, [pc, #60]	; (80221a4 <FLASH_WaitForLastOperation+0x7c>)
 8022166:	68db      	ldr	r3, [r3, #12]
 8022168:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802216c:	2b00      	cmp	r3, #0
 802216e:	d1e8      	bne.n	8022142 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8022170:	4b0c      	ldr	r3, [pc, #48]	; (80221a4 <FLASH_WaitForLastOperation+0x7c>)
 8022172:	68db      	ldr	r3, [r3, #12]
 8022174:	f003 0301 	and.w	r3, r3, #1
 8022178:	2b00      	cmp	r3, #0
 802217a:	d002      	beq.n	8022182 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 802217c:	4b09      	ldr	r3, [pc, #36]	; (80221a4 <FLASH_WaitForLastOperation+0x7c>)
 802217e:	2201      	movs	r2, #1
 8022180:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8022182:	4b08      	ldr	r3, [pc, #32]	; (80221a4 <FLASH_WaitForLastOperation+0x7c>)
 8022184:	68db      	ldr	r3, [r3, #12]
 8022186:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 802218a:	2b00      	cmp	r3, #0
 802218c:	d003      	beq.n	8022196 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 802218e:	f000 f8a5 	bl	80222dc <FLASH_SetErrorCode>
    return HAL_ERROR;
 8022192:	2301      	movs	r3, #1
 8022194:	e000      	b.n	8022198 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8022196:	2300      	movs	r3, #0
  
}  
 8022198:	4618      	mov	r0, r3
 802219a:	3710      	adds	r7, #16
 802219c:	46bd      	mov	sp, r7
 802219e:	bd80      	pop	{r7, pc}
 80221a0:	20000318 	.word	0x20000318
 80221a4:	40023c00 	.word	0x40023c00

080221a8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80221a8:	b480      	push	{r7}
 80221aa:	b085      	sub	sp, #20
 80221ac:	af00      	add	r7, sp, #0
 80221ae:	60f8      	str	r0, [r7, #12]
 80221b0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80221b4:	4b14      	ldr	r3, [pc, #80]	; (8022208 <FLASH_Program_DoubleWord+0x60>)
 80221b6:	691b      	ldr	r3, [r3, #16]
 80221b8:	4a13      	ldr	r2, [pc, #76]	; (8022208 <FLASH_Program_DoubleWord+0x60>)
 80221ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80221be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80221c0:	4b11      	ldr	r3, [pc, #68]	; (8022208 <FLASH_Program_DoubleWord+0x60>)
 80221c2:	691b      	ldr	r3, [r3, #16]
 80221c4:	4a10      	ldr	r2, [pc, #64]	; (8022208 <FLASH_Program_DoubleWord+0x60>)
 80221c6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80221ca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80221cc:	4b0e      	ldr	r3, [pc, #56]	; (8022208 <FLASH_Program_DoubleWord+0x60>)
 80221ce:	691b      	ldr	r3, [r3, #16]
 80221d0:	4a0d      	ldr	r2, [pc, #52]	; (8022208 <FLASH_Program_DoubleWord+0x60>)
 80221d2:	f043 0301 	orr.w	r3, r3, #1
 80221d6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80221d8:	68fb      	ldr	r3, [r7, #12]
 80221da:	683a      	ldr	r2, [r7, #0]
 80221dc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80221de:	f3bf 8f6f 	isb	sy
}
 80221e2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80221e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80221e8:	f04f 0200 	mov.w	r2, #0
 80221ec:	f04f 0300 	mov.w	r3, #0
 80221f0:	000a      	movs	r2, r1
 80221f2:	2300      	movs	r3, #0
 80221f4:	68f9      	ldr	r1, [r7, #12]
 80221f6:	3104      	adds	r1, #4
 80221f8:	4613      	mov	r3, r2
 80221fa:	600b      	str	r3, [r1, #0]
}
 80221fc:	bf00      	nop
 80221fe:	3714      	adds	r7, #20
 8022200:	46bd      	mov	sp, r7
 8022202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022206:	4770      	bx	lr
 8022208:	40023c00 	.word	0x40023c00

0802220c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 802220c:	b480      	push	{r7}
 802220e:	b083      	sub	sp, #12
 8022210:	af00      	add	r7, sp, #0
 8022212:	6078      	str	r0, [r7, #4]
 8022214:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8022216:	4b0d      	ldr	r3, [pc, #52]	; (802224c <FLASH_Program_Word+0x40>)
 8022218:	691b      	ldr	r3, [r3, #16]
 802221a:	4a0c      	ldr	r2, [pc, #48]	; (802224c <FLASH_Program_Word+0x40>)
 802221c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8022220:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8022222:	4b0a      	ldr	r3, [pc, #40]	; (802224c <FLASH_Program_Word+0x40>)
 8022224:	691b      	ldr	r3, [r3, #16]
 8022226:	4a09      	ldr	r2, [pc, #36]	; (802224c <FLASH_Program_Word+0x40>)
 8022228:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 802222c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 802222e:	4b07      	ldr	r3, [pc, #28]	; (802224c <FLASH_Program_Word+0x40>)
 8022230:	691b      	ldr	r3, [r3, #16]
 8022232:	4a06      	ldr	r2, [pc, #24]	; (802224c <FLASH_Program_Word+0x40>)
 8022234:	f043 0301 	orr.w	r3, r3, #1
 8022238:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 802223a:	687b      	ldr	r3, [r7, #4]
 802223c:	683a      	ldr	r2, [r7, #0]
 802223e:	601a      	str	r2, [r3, #0]
}
 8022240:	bf00      	nop
 8022242:	370c      	adds	r7, #12
 8022244:	46bd      	mov	sp, r7
 8022246:	f85d 7b04 	ldr.w	r7, [sp], #4
 802224a:	4770      	bx	lr
 802224c:	40023c00 	.word	0x40023c00

08022250 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8022250:	b480      	push	{r7}
 8022252:	b083      	sub	sp, #12
 8022254:	af00      	add	r7, sp, #0
 8022256:	6078      	str	r0, [r7, #4]
 8022258:	460b      	mov	r3, r1
 802225a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 802225c:	4b0d      	ldr	r3, [pc, #52]	; (8022294 <FLASH_Program_HalfWord+0x44>)
 802225e:	691b      	ldr	r3, [r3, #16]
 8022260:	4a0c      	ldr	r2, [pc, #48]	; (8022294 <FLASH_Program_HalfWord+0x44>)
 8022262:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8022266:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8022268:	4b0a      	ldr	r3, [pc, #40]	; (8022294 <FLASH_Program_HalfWord+0x44>)
 802226a:	691b      	ldr	r3, [r3, #16]
 802226c:	4a09      	ldr	r2, [pc, #36]	; (8022294 <FLASH_Program_HalfWord+0x44>)
 802226e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8022272:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8022274:	4b07      	ldr	r3, [pc, #28]	; (8022294 <FLASH_Program_HalfWord+0x44>)
 8022276:	691b      	ldr	r3, [r3, #16]
 8022278:	4a06      	ldr	r2, [pc, #24]	; (8022294 <FLASH_Program_HalfWord+0x44>)
 802227a:	f043 0301 	orr.w	r3, r3, #1
 802227e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8022280:	687b      	ldr	r3, [r7, #4]
 8022282:	887a      	ldrh	r2, [r7, #2]
 8022284:	801a      	strh	r2, [r3, #0]
}
 8022286:	bf00      	nop
 8022288:	370c      	adds	r7, #12
 802228a:	46bd      	mov	sp, r7
 802228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022290:	4770      	bx	lr
 8022292:	bf00      	nop
 8022294:	40023c00 	.word	0x40023c00

08022298 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8022298:	b480      	push	{r7}
 802229a:	b083      	sub	sp, #12
 802229c:	af00      	add	r7, sp, #0
 802229e:	6078      	str	r0, [r7, #4]
 80222a0:	460b      	mov	r3, r1
 80222a2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80222a4:	4b0c      	ldr	r3, [pc, #48]	; (80222d8 <FLASH_Program_Byte+0x40>)
 80222a6:	691b      	ldr	r3, [r3, #16]
 80222a8:	4a0b      	ldr	r2, [pc, #44]	; (80222d8 <FLASH_Program_Byte+0x40>)
 80222aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80222ae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80222b0:	4b09      	ldr	r3, [pc, #36]	; (80222d8 <FLASH_Program_Byte+0x40>)
 80222b2:	4a09      	ldr	r2, [pc, #36]	; (80222d8 <FLASH_Program_Byte+0x40>)
 80222b4:	691b      	ldr	r3, [r3, #16]
 80222b6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80222b8:	4b07      	ldr	r3, [pc, #28]	; (80222d8 <FLASH_Program_Byte+0x40>)
 80222ba:	691b      	ldr	r3, [r3, #16]
 80222bc:	4a06      	ldr	r2, [pc, #24]	; (80222d8 <FLASH_Program_Byte+0x40>)
 80222be:	f043 0301 	orr.w	r3, r3, #1
 80222c2:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80222c4:	687b      	ldr	r3, [r7, #4]
 80222c6:	78fa      	ldrb	r2, [r7, #3]
 80222c8:	701a      	strb	r2, [r3, #0]
}
 80222ca:	bf00      	nop
 80222cc:	370c      	adds	r7, #12
 80222ce:	46bd      	mov	sp, r7
 80222d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80222d4:	4770      	bx	lr
 80222d6:	bf00      	nop
 80222d8:	40023c00 	.word	0x40023c00

080222dc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80222dc:	b480      	push	{r7}
 80222de:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80222e0:	4b2f      	ldr	r3, [pc, #188]	; (80223a0 <FLASH_SetErrorCode+0xc4>)
 80222e2:	68db      	ldr	r3, [r3, #12]
 80222e4:	f003 0310 	and.w	r3, r3, #16
 80222e8:	2b00      	cmp	r3, #0
 80222ea:	d008      	beq.n	80222fe <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80222ec:	4b2d      	ldr	r3, [pc, #180]	; (80223a4 <FLASH_SetErrorCode+0xc8>)
 80222ee:	69db      	ldr	r3, [r3, #28]
 80222f0:	f043 0310 	orr.w	r3, r3, #16
 80222f4:	4a2b      	ldr	r2, [pc, #172]	; (80223a4 <FLASH_SetErrorCode+0xc8>)
 80222f6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80222f8:	4b29      	ldr	r3, [pc, #164]	; (80223a0 <FLASH_SetErrorCode+0xc4>)
 80222fa:	2210      	movs	r2, #16
 80222fc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80222fe:	4b28      	ldr	r3, [pc, #160]	; (80223a0 <FLASH_SetErrorCode+0xc4>)
 8022300:	68db      	ldr	r3, [r3, #12]
 8022302:	f003 0320 	and.w	r3, r3, #32
 8022306:	2b00      	cmp	r3, #0
 8022308:	d008      	beq.n	802231c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 802230a:	4b26      	ldr	r3, [pc, #152]	; (80223a4 <FLASH_SetErrorCode+0xc8>)
 802230c:	69db      	ldr	r3, [r3, #28]
 802230e:	f043 0308 	orr.w	r3, r3, #8
 8022312:	4a24      	ldr	r2, [pc, #144]	; (80223a4 <FLASH_SetErrorCode+0xc8>)
 8022314:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8022316:	4b22      	ldr	r3, [pc, #136]	; (80223a0 <FLASH_SetErrorCode+0xc4>)
 8022318:	2220      	movs	r2, #32
 802231a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 802231c:	4b20      	ldr	r3, [pc, #128]	; (80223a0 <FLASH_SetErrorCode+0xc4>)
 802231e:	68db      	ldr	r3, [r3, #12]
 8022320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8022324:	2b00      	cmp	r3, #0
 8022326:	d008      	beq.n	802233a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8022328:	4b1e      	ldr	r3, [pc, #120]	; (80223a4 <FLASH_SetErrorCode+0xc8>)
 802232a:	69db      	ldr	r3, [r3, #28]
 802232c:	f043 0304 	orr.w	r3, r3, #4
 8022330:	4a1c      	ldr	r2, [pc, #112]	; (80223a4 <FLASH_SetErrorCode+0xc8>)
 8022332:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8022334:	4b1a      	ldr	r3, [pc, #104]	; (80223a0 <FLASH_SetErrorCode+0xc4>)
 8022336:	2240      	movs	r2, #64	; 0x40
 8022338:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 802233a:	4b19      	ldr	r3, [pc, #100]	; (80223a0 <FLASH_SetErrorCode+0xc4>)
 802233c:	68db      	ldr	r3, [r3, #12]
 802233e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8022342:	2b00      	cmp	r3, #0
 8022344:	d008      	beq.n	8022358 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8022346:	4b17      	ldr	r3, [pc, #92]	; (80223a4 <FLASH_SetErrorCode+0xc8>)
 8022348:	69db      	ldr	r3, [r3, #28]
 802234a:	f043 0302 	orr.w	r3, r3, #2
 802234e:	4a15      	ldr	r2, [pc, #84]	; (80223a4 <FLASH_SetErrorCode+0xc8>)
 8022350:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8022352:	4b13      	ldr	r3, [pc, #76]	; (80223a0 <FLASH_SetErrorCode+0xc4>)
 8022354:	2280      	movs	r2, #128	; 0x80
 8022356:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8022358:	4b11      	ldr	r3, [pc, #68]	; (80223a0 <FLASH_SetErrorCode+0xc4>)
 802235a:	68db      	ldr	r3, [r3, #12]
 802235c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8022360:	2b00      	cmp	r3, #0
 8022362:	d009      	beq.n	8022378 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8022364:	4b0f      	ldr	r3, [pc, #60]	; (80223a4 <FLASH_SetErrorCode+0xc8>)
 8022366:	69db      	ldr	r3, [r3, #28]
 8022368:	f043 0301 	orr.w	r3, r3, #1
 802236c:	4a0d      	ldr	r2, [pc, #52]	; (80223a4 <FLASH_SetErrorCode+0xc8>)
 802236e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8022370:	4b0b      	ldr	r3, [pc, #44]	; (80223a0 <FLASH_SetErrorCode+0xc4>)
 8022372:	f44f 7280 	mov.w	r2, #256	; 0x100
 8022376:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8022378:	4b09      	ldr	r3, [pc, #36]	; (80223a0 <FLASH_SetErrorCode+0xc4>)
 802237a:	68db      	ldr	r3, [r3, #12]
 802237c:	f003 0302 	and.w	r3, r3, #2
 8022380:	2b00      	cmp	r3, #0
 8022382:	d008      	beq.n	8022396 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8022384:	4b07      	ldr	r3, [pc, #28]	; (80223a4 <FLASH_SetErrorCode+0xc8>)
 8022386:	69db      	ldr	r3, [r3, #28]
 8022388:	f043 0320 	orr.w	r3, r3, #32
 802238c:	4a05      	ldr	r2, [pc, #20]	; (80223a4 <FLASH_SetErrorCode+0xc8>)
 802238e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8022390:	4b03      	ldr	r3, [pc, #12]	; (80223a0 <FLASH_SetErrorCode+0xc4>)
 8022392:	2202      	movs	r2, #2
 8022394:	60da      	str	r2, [r3, #12]
  }
}
 8022396:	bf00      	nop
 8022398:	46bd      	mov	sp, r7
 802239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802239e:	4770      	bx	lr
 80223a0:	40023c00 	.word	0x40023c00
 80223a4:	20000318 	.word	0x20000318

080223a8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80223a8:	b580      	push	{r7, lr}
 80223aa:	b084      	sub	sp, #16
 80223ac:	af00      	add	r7, sp, #0
 80223ae:	6078      	str	r0, [r7, #4]
 80223b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80223b2:	2301      	movs	r3, #1
 80223b4:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80223b6:	2300      	movs	r3, #0
 80223b8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80223ba:	4b31      	ldr	r3, [pc, #196]	; (8022480 <HAL_FLASHEx_Erase+0xd8>)
 80223bc:	7e1b      	ldrb	r3, [r3, #24]
 80223be:	2b01      	cmp	r3, #1
 80223c0:	d101      	bne.n	80223c6 <HAL_FLASHEx_Erase+0x1e>
 80223c2:	2302      	movs	r3, #2
 80223c4:	e058      	b.n	8022478 <HAL_FLASHEx_Erase+0xd0>
 80223c6:	4b2e      	ldr	r3, [pc, #184]	; (8022480 <HAL_FLASHEx_Erase+0xd8>)
 80223c8:	2201      	movs	r2, #1
 80223ca:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80223cc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80223d0:	f7ff feaa 	bl	8022128 <FLASH_WaitForLastOperation>
 80223d4:	4603      	mov	r3, r0
 80223d6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80223d8:	7bfb      	ldrb	r3, [r7, #15]
 80223da:	2b00      	cmp	r3, #0
 80223dc:	d148      	bne.n	8022470 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80223de:	683b      	ldr	r3, [r7, #0]
 80223e0:	f04f 32ff 	mov.w	r2, #4294967295
 80223e4:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80223e6:	687b      	ldr	r3, [r7, #4]
 80223e8:	681b      	ldr	r3, [r3, #0]
 80223ea:	2b01      	cmp	r3, #1
 80223ec:	d115      	bne.n	802241a <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80223ee:	687b      	ldr	r3, [r7, #4]
 80223f0:	691b      	ldr	r3, [r3, #16]
 80223f2:	b2da      	uxtb	r2, r3
 80223f4:	687b      	ldr	r3, [r7, #4]
 80223f6:	685b      	ldr	r3, [r3, #4]
 80223f8:	4619      	mov	r1, r3
 80223fa:	4610      	mov	r0, r2
 80223fc:	f000 f844 	bl	8022488 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8022400:	f24c 3050 	movw	r0, #50000	; 0xc350
 8022404:	f7ff fe90 	bl	8022128 <FLASH_WaitForLastOperation>
 8022408:	4603      	mov	r3, r0
 802240a:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 802240c:	4b1d      	ldr	r3, [pc, #116]	; (8022484 <HAL_FLASHEx_Erase+0xdc>)
 802240e:	691b      	ldr	r3, [r3, #16]
 8022410:	4a1c      	ldr	r2, [pc, #112]	; (8022484 <HAL_FLASHEx_Erase+0xdc>)
 8022412:	f023 0304 	bic.w	r3, r3, #4
 8022416:	6113      	str	r3, [r2, #16]
 8022418:	e028      	b.n	802246c <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 802241a:	687b      	ldr	r3, [r7, #4]
 802241c:	689b      	ldr	r3, [r3, #8]
 802241e:	60bb      	str	r3, [r7, #8]
 8022420:	e01c      	b.n	802245c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8022422:	687b      	ldr	r3, [r7, #4]
 8022424:	691b      	ldr	r3, [r3, #16]
 8022426:	b2db      	uxtb	r3, r3
 8022428:	4619      	mov	r1, r3
 802242a:	68b8      	ldr	r0, [r7, #8]
 802242c:	f000 f850 	bl	80224d0 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8022430:	f24c 3050 	movw	r0, #50000	; 0xc350
 8022434:	f7ff fe78 	bl	8022128 <FLASH_WaitForLastOperation>
 8022438:	4603      	mov	r3, r0
 802243a:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 802243c:	4b11      	ldr	r3, [pc, #68]	; (8022484 <HAL_FLASHEx_Erase+0xdc>)
 802243e:	691b      	ldr	r3, [r3, #16]
 8022440:	4a10      	ldr	r2, [pc, #64]	; (8022484 <HAL_FLASHEx_Erase+0xdc>)
 8022442:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8022446:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8022448:	7bfb      	ldrb	r3, [r7, #15]
 802244a:	2b00      	cmp	r3, #0
 802244c:	d003      	beq.n	8022456 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 802244e:	683b      	ldr	r3, [r7, #0]
 8022450:	68ba      	ldr	r2, [r7, #8]
 8022452:	601a      	str	r2, [r3, #0]
          break;
 8022454:	e00a      	b.n	802246c <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8022456:	68bb      	ldr	r3, [r7, #8]
 8022458:	3301      	adds	r3, #1
 802245a:	60bb      	str	r3, [r7, #8]
 802245c:	687b      	ldr	r3, [r7, #4]
 802245e:	68da      	ldr	r2, [r3, #12]
 8022460:	687b      	ldr	r3, [r7, #4]
 8022462:	689b      	ldr	r3, [r3, #8]
 8022464:	4413      	add	r3, r2
 8022466:	68ba      	ldr	r2, [r7, #8]
 8022468:	429a      	cmp	r2, r3
 802246a:	d3da      	bcc.n	8022422 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 802246c:	f000 f878 	bl	8022560 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8022470:	4b03      	ldr	r3, [pc, #12]	; (8022480 <HAL_FLASHEx_Erase+0xd8>)
 8022472:	2200      	movs	r2, #0
 8022474:	761a      	strb	r2, [r3, #24]

  return status;
 8022476:	7bfb      	ldrb	r3, [r7, #15]
}
 8022478:	4618      	mov	r0, r3
 802247a:	3710      	adds	r7, #16
 802247c:	46bd      	mov	sp, r7
 802247e:	bd80      	pop	{r7, pc}
 8022480:	20000318 	.word	0x20000318
 8022484:	40023c00 	.word	0x40023c00

08022488 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8022488:	b480      	push	{r7}
 802248a:	b083      	sub	sp, #12
 802248c:	af00      	add	r7, sp, #0
 802248e:	4603      	mov	r3, r0
 8022490:	6039      	str	r1, [r7, #0]
 8022492:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8022494:	4b0d      	ldr	r3, [pc, #52]	; (80224cc <FLASH_MassErase+0x44>)
 8022496:	691b      	ldr	r3, [r3, #16]
 8022498:	4a0c      	ldr	r2, [pc, #48]	; (80224cc <FLASH_MassErase+0x44>)
 802249a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 802249e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80224a0:	4b0a      	ldr	r3, [pc, #40]	; (80224cc <FLASH_MassErase+0x44>)
 80224a2:	691b      	ldr	r3, [r3, #16]
 80224a4:	4a09      	ldr	r2, [pc, #36]	; (80224cc <FLASH_MassErase+0x44>)
 80224a6:	f043 0304 	orr.w	r3, r3, #4
 80224aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80224ac:	4b07      	ldr	r3, [pc, #28]	; (80224cc <FLASH_MassErase+0x44>)
 80224ae:	691a      	ldr	r2, [r3, #16]
 80224b0:	79fb      	ldrb	r3, [r7, #7]
 80224b2:	021b      	lsls	r3, r3, #8
 80224b4:	4313      	orrs	r3, r2
 80224b6:	4a05      	ldr	r2, [pc, #20]	; (80224cc <FLASH_MassErase+0x44>)
 80224b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80224bc:	6113      	str	r3, [r2, #16]
}
 80224be:	bf00      	nop
 80224c0:	370c      	adds	r7, #12
 80224c2:	46bd      	mov	sp, r7
 80224c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80224c8:	4770      	bx	lr
 80224ca:	bf00      	nop
 80224cc:	40023c00 	.word	0x40023c00

080224d0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80224d0:	b480      	push	{r7}
 80224d2:	b085      	sub	sp, #20
 80224d4:	af00      	add	r7, sp, #0
 80224d6:	6078      	str	r0, [r7, #4]
 80224d8:	460b      	mov	r3, r1
 80224da:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80224dc:	2300      	movs	r3, #0
 80224de:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80224e0:	78fb      	ldrb	r3, [r7, #3]
 80224e2:	2b00      	cmp	r3, #0
 80224e4:	d102      	bne.n	80224ec <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80224e6:	2300      	movs	r3, #0
 80224e8:	60fb      	str	r3, [r7, #12]
 80224ea:	e010      	b.n	802250e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80224ec:	78fb      	ldrb	r3, [r7, #3]
 80224ee:	2b01      	cmp	r3, #1
 80224f0:	d103      	bne.n	80224fa <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80224f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80224f6:	60fb      	str	r3, [r7, #12]
 80224f8:	e009      	b.n	802250e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80224fa:	78fb      	ldrb	r3, [r7, #3]
 80224fc:	2b02      	cmp	r3, #2
 80224fe:	d103      	bne.n	8022508 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8022500:	f44f 7300 	mov.w	r3, #512	; 0x200
 8022504:	60fb      	str	r3, [r7, #12]
 8022506:	e002      	b.n	802250e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8022508:	f44f 7340 	mov.w	r3, #768	; 0x300
 802250c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 802250e:	4b13      	ldr	r3, [pc, #76]	; (802255c <FLASH_Erase_Sector+0x8c>)
 8022510:	691b      	ldr	r3, [r3, #16]
 8022512:	4a12      	ldr	r2, [pc, #72]	; (802255c <FLASH_Erase_Sector+0x8c>)
 8022514:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8022518:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 802251a:	4b10      	ldr	r3, [pc, #64]	; (802255c <FLASH_Erase_Sector+0x8c>)
 802251c:	691a      	ldr	r2, [r3, #16]
 802251e:	490f      	ldr	r1, [pc, #60]	; (802255c <FLASH_Erase_Sector+0x8c>)
 8022520:	68fb      	ldr	r3, [r7, #12]
 8022522:	4313      	orrs	r3, r2
 8022524:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8022526:	4b0d      	ldr	r3, [pc, #52]	; (802255c <FLASH_Erase_Sector+0x8c>)
 8022528:	691b      	ldr	r3, [r3, #16]
 802252a:	4a0c      	ldr	r2, [pc, #48]	; (802255c <FLASH_Erase_Sector+0x8c>)
 802252c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8022530:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8022532:	4b0a      	ldr	r3, [pc, #40]	; (802255c <FLASH_Erase_Sector+0x8c>)
 8022534:	691a      	ldr	r2, [r3, #16]
 8022536:	687b      	ldr	r3, [r7, #4]
 8022538:	00db      	lsls	r3, r3, #3
 802253a:	4313      	orrs	r3, r2
 802253c:	4a07      	ldr	r2, [pc, #28]	; (802255c <FLASH_Erase_Sector+0x8c>)
 802253e:	f043 0302 	orr.w	r3, r3, #2
 8022542:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8022544:	4b05      	ldr	r3, [pc, #20]	; (802255c <FLASH_Erase_Sector+0x8c>)
 8022546:	691b      	ldr	r3, [r3, #16]
 8022548:	4a04      	ldr	r2, [pc, #16]	; (802255c <FLASH_Erase_Sector+0x8c>)
 802254a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 802254e:	6113      	str	r3, [r2, #16]
}
 8022550:	bf00      	nop
 8022552:	3714      	adds	r7, #20
 8022554:	46bd      	mov	sp, r7
 8022556:	f85d 7b04 	ldr.w	r7, [sp], #4
 802255a:	4770      	bx	lr
 802255c:	40023c00 	.word	0x40023c00

08022560 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8022560:	b480      	push	{r7}
 8022562:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8022564:	4b20      	ldr	r3, [pc, #128]	; (80225e8 <FLASH_FlushCaches+0x88>)
 8022566:	681b      	ldr	r3, [r3, #0]
 8022568:	f403 7300 	and.w	r3, r3, #512	; 0x200
 802256c:	2b00      	cmp	r3, #0
 802256e:	d017      	beq.n	80225a0 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8022570:	4b1d      	ldr	r3, [pc, #116]	; (80225e8 <FLASH_FlushCaches+0x88>)
 8022572:	681b      	ldr	r3, [r3, #0]
 8022574:	4a1c      	ldr	r2, [pc, #112]	; (80225e8 <FLASH_FlushCaches+0x88>)
 8022576:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 802257a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 802257c:	4b1a      	ldr	r3, [pc, #104]	; (80225e8 <FLASH_FlushCaches+0x88>)
 802257e:	681b      	ldr	r3, [r3, #0]
 8022580:	4a19      	ldr	r2, [pc, #100]	; (80225e8 <FLASH_FlushCaches+0x88>)
 8022582:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8022586:	6013      	str	r3, [r2, #0]
 8022588:	4b17      	ldr	r3, [pc, #92]	; (80225e8 <FLASH_FlushCaches+0x88>)
 802258a:	681b      	ldr	r3, [r3, #0]
 802258c:	4a16      	ldr	r2, [pc, #88]	; (80225e8 <FLASH_FlushCaches+0x88>)
 802258e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8022592:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8022594:	4b14      	ldr	r3, [pc, #80]	; (80225e8 <FLASH_FlushCaches+0x88>)
 8022596:	681b      	ldr	r3, [r3, #0]
 8022598:	4a13      	ldr	r2, [pc, #76]	; (80225e8 <FLASH_FlushCaches+0x88>)
 802259a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 802259e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80225a0:	4b11      	ldr	r3, [pc, #68]	; (80225e8 <FLASH_FlushCaches+0x88>)
 80225a2:	681b      	ldr	r3, [r3, #0]
 80225a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80225a8:	2b00      	cmp	r3, #0
 80225aa:	d017      	beq.n	80225dc <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80225ac:	4b0e      	ldr	r3, [pc, #56]	; (80225e8 <FLASH_FlushCaches+0x88>)
 80225ae:	681b      	ldr	r3, [r3, #0]
 80225b0:	4a0d      	ldr	r2, [pc, #52]	; (80225e8 <FLASH_FlushCaches+0x88>)
 80225b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80225b6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80225b8:	4b0b      	ldr	r3, [pc, #44]	; (80225e8 <FLASH_FlushCaches+0x88>)
 80225ba:	681b      	ldr	r3, [r3, #0]
 80225bc:	4a0a      	ldr	r2, [pc, #40]	; (80225e8 <FLASH_FlushCaches+0x88>)
 80225be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80225c2:	6013      	str	r3, [r2, #0]
 80225c4:	4b08      	ldr	r3, [pc, #32]	; (80225e8 <FLASH_FlushCaches+0x88>)
 80225c6:	681b      	ldr	r3, [r3, #0]
 80225c8:	4a07      	ldr	r2, [pc, #28]	; (80225e8 <FLASH_FlushCaches+0x88>)
 80225ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80225ce:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80225d0:	4b05      	ldr	r3, [pc, #20]	; (80225e8 <FLASH_FlushCaches+0x88>)
 80225d2:	681b      	ldr	r3, [r3, #0]
 80225d4:	4a04      	ldr	r2, [pc, #16]	; (80225e8 <FLASH_FlushCaches+0x88>)
 80225d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80225da:	6013      	str	r3, [r2, #0]
  }
}
 80225dc:	bf00      	nop
 80225de:	46bd      	mov	sp, r7
 80225e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80225e4:	4770      	bx	lr
 80225e6:	bf00      	nop
 80225e8:	40023c00 	.word	0x40023c00

080225ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80225ec:	b480      	push	{r7}
 80225ee:	b089      	sub	sp, #36	; 0x24
 80225f0:	af00      	add	r7, sp, #0
 80225f2:	6078      	str	r0, [r7, #4]
 80225f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80225f6:	2300      	movs	r3, #0
 80225f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80225fa:	2300      	movs	r3, #0
 80225fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80225fe:	2300      	movs	r3, #0
 8022600:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8022602:	2300      	movs	r3, #0
 8022604:	61fb      	str	r3, [r7, #28]
 8022606:	e159      	b.n	80228bc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8022608:	2201      	movs	r2, #1
 802260a:	69fb      	ldr	r3, [r7, #28]
 802260c:	fa02 f303 	lsl.w	r3, r2, r3
 8022610:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8022612:	683b      	ldr	r3, [r7, #0]
 8022614:	681b      	ldr	r3, [r3, #0]
 8022616:	697a      	ldr	r2, [r7, #20]
 8022618:	4013      	ands	r3, r2
 802261a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 802261c:	693a      	ldr	r2, [r7, #16]
 802261e:	697b      	ldr	r3, [r7, #20]
 8022620:	429a      	cmp	r2, r3
 8022622:	f040 8148 	bne.w	80228b6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8022626:	683b      	ldr	r3, [r7, #0]
 8022628:	685b      	ldr	r3, [r3, #4]
 802262a:	f003 0303 	and.w	r3, r3, #3
 802262e:	2b01      	cmp	r3, #1
 8022630:	d005      	beq.n	802263e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8022632:	683b      	ldr	r3, [r7, #0]
 8022634:	685b      	ldr	r3, [r3, #4]
 8022636:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 802263a:	2b02      	cmp	r3, #2
 802263c:	d130      	bne.n	80226a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 802263e:	687b      	ldr	r3, [r7, #4]
 8022640:	689b      	ldr	r3, [r3, #8]
 8022642:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8022644:	69fb      	ldr	r3, [r7, #28]
 8022646:	005b      	lsls	r3, r3, #1
 8022648:	2203      	movs	r2, #3
 802264a:	fa02 f303 	lsl.w	r3, r2, r3
 802264e:	43db      	mvns	r3, r3
 8022650:	69ba      	ldr	r2, [r7, #24]
 8022652:	4013      	ands	r3, r2
 8022654:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8022656:	683b      	ldr	r3, [r7, #0]
 8022658:	68da      	ldr	r2, [r3, #12]
 802265a:	69fb      	ldr	r3, [r7, #28]
 802265c:	005b      	lsls	r3, r3, #1
 802265e:	fa02 f303 	lsl.w	r3, r2, r3
 8022662:	69ba      	ldr	r2, [r7, #24]
 8022664:	4313      	orrs	r3, r2
 8022666:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8022668:	687b      	ldr	r3, [r7, #4]
 802266a:	69ba      	ldr	r2, [r7, #24]
 802266c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 802266e:	687b      	ldr	r3, [r7, #4]
 8022670:	685b      	ldr	r3, [r3, #4]
 8022672:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8022674:	2201      	movs	r2, #1
 8022676:	69fb      	ldr	r3, [r7, #28]
 8022678:	fa02 f303 	lsl.w	r3, r2, r3
 802267c:	43db      	mvns	r3, r3
 802267e:	69ba      	ldr	r2, [r7, #24]
 8022680:	4013      	ands	r3, r2
 8022682:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8022684:	683b      	ldr	r3, [r7, #0]
 8022686:	685b      	ldr	r3, [r3, #4]
 8022688:	091b      	lsrs	r3, r3, #4
 802268a:	f003 0201 	and.w	r2, r3, #1
 802268e:	69fb      	ldr	r3, [r7, #28]
 8022690:	fa02 f303 	lsl.w	r3, r2, r3
 8022694:	69ba      	ldr	r2, [r7, #24]
 8022696:	4313      	orrs	r3, r2
 8022698:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 802269a:	687b      	ldr	r3, [r7, #4]
 802269c:	69ba      	ldr	r2, [r7, #24]
 802269e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80226a0:	683b      	ldr	r3, [r7, #0]
 80226a2:	685b      	ldr	r3, [r3, #4]
 80226a4:	f003 0303 	and.w	r3, r3, #3
 80226a8:	2b03      	cmp	r3, #3
 80226aa:	d017      	beq.n	80226dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80226ac:	687b      	ldr	r3, [r7, #4]
 80226ae:	68db      	ldr	r3, [r3, #12]
 80226b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80226b2:	69fb      	ldr	r3, [r7, #28]
 80226b4:	005b      	lsls	r3, r3, #1
 80226b6:	2203      	movs	r2, #3
 80226b8:	fa02 f303 	lsl.w	r3, r2, r3
 80226bc:	43db      	mvns	r3, r3
 80226be:	69ba      	ldr	r2, [r7, #24]
 80226c0:	4013      	ands	r3, r2
 80226c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80226c4:	683b      	ldr	r3, [r7, #0]
 80226c6:	689a      	ldr	r2, [r3, #8]
 80226c8:	69fb      	ldr	r3, [r7, #28]
 80226ca:	005b      	lsls	r3, r3, #1
 80226cc:	fa02 f303 	lsl.w	r3, r2, r3
 80226d0:	69ba      	ldr	r2, [r7, #24]
 80226d2:	4313      	orrs	r3, r2
 80226d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80226d6:	687b      	ldr	r3, [r7, #4]
 80226d8:	69ba      	ldr	r2, [r7, #24]
 80226da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80226dc:	683b      	ldr	r3, [r7, #0]
 80226de:	685b      	ldr	r3, [r3, #4]
 80226e0:	f003 0303 	and.w	r3, r3, #3
 80226e4:	2b02      	cmp	r3, #2
 80226e6:	d123      	bne.n	8022730 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80226e8:	69fb      	ldr	r3, [r7, #28]
 80226ea:	08da      	lsrs	r2, r3, #3
 80226ec:	687b      	ldr	r3, [r7, #4]
 80226ee:	3208      	adds	r2, #8
 80226f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80226f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80226f6:	69fb      	ldr	r3, [r7, #28]
 80226f8:	f003 0307 	and.w	r3, r3, #7
 80226fc:	009b      	lsls	r3, r3, #2
 80226fe:	220f      	movs	r2, #15
 8022700:	fa02 f303 	lsl.w	r3, r2, r3
 8022704:	43db      	mvns	r3, r3
 8022706:	69ba      	ldr	r2, [r7, #24]
 8022708:	4013      	ands	r3, r2
 802270a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 802270c:	683b      	ldr	r3, [r7, #0]
 802270e:	691a      	ldr	r2, [r3, #16]
 8022710:	69fb      	ldr	r3, [r7, #28]
 8022712:	f003 0307 	and.w	r3, r3, #7
 8022716:	009b      	lsls	r3, r3, #2
 8022718:	fa02 f303 	lsl.w	r3, r2, r3
 802271c:	69ba      	ldr	r2, [r7, #24]
 802271e:	4313      	orrs	r3, r2
 8022720:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8022722:	69fb      	ldr	r3, [r7, #28]
 8022724:	08da      	lsrs	r2, r3, #3
 8022726:	687b      	ldr	r3, [r7, #4]
 8022728:	3208      	adds	r2, #8
 802272a:	69b9      	ldr	r1, [r7, #24]
 802272c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8022730:	687b      	ldr	r3, [r7, #4]
 8022732:	681b      	ldr	r3, [r3, #0]
 8022734:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8022736:	69fb      	ldr	r3, [r7, #28]
 8022738:	005b      	lsls	r3, r3, #1
 802273a:	2203      	movs	r2, #3
 802273c:	fa02 f303 	lsl.w	r3, r2, r3
 8022740:	43db      	mvns	r3, r3
 8022742:	69ba      	ldr	r2, [r7, #24]
 8022744:	4013      	ands	r3, r2
 8022746:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8022748:	683b      	ldr	r3, [r7, #0]
 802274a:	685b      	ldr	r3, [r3, #4]
 802274c:	f003 0203 	and.w	r2, r3, #3
 8022750:	69fb      	ldr	r3, [r7, #28]
 8022752:	005b      	lsls	r3, r3, #1
 8022754:	fa02 f303 	lsl.w	r3, r2, r3
 8022758:	69ba      	ldr	r2, [r7, #24]
 802275a:	4313      	orrs	r3, r2
 802275c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 802275e:	687b      	ldr	r3, [r7, #4]
 8022760:	69ba      	ldr	r2, [r7, #24]
 8022762:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8022764:	683b      	ldr	r3, [r7, #0]
 8022766:	685b      	ldr	r3, [r3, #4]
 8022768:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 802276c:	2b00      	cmp	r3, #0
 802276e:	f000 80a2 	beq.w	80228b6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8022772:	2300      	movs	r3, #0
 8022774:	60fb      	str	r3, [r7, #12]
 8022776:	4b57      	ldr	r3, [pc, #348]	; (80228d4 <HAL_GPIO_Init+0x2e8>)
 8022778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 802277a:	4a56      	ldr	r2, [pc, #344]	; (80228d4 <HAL_GPIO_Init+0x2e8>)
 802277c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8022780:	6453      	str	r3, [r2, #68]	; 0x44
 8022782:	4b54      	ldr	r3, [pc, #336]	; (80228d4 <HAL_GPIO_Init+0x2e8>)
 8022784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8022786:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 802278a:	60fb      	str	r3, [r7, #12]
 802278c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 802278e:	4a52      	ldr	r2, [pc, #328]	; (80228d8 <HAL_GPIO_Init+0x2ec>)
 8022790:	69fb      	ldr	r3, [r7, #28]
 8022792:	089b      	lsrs	r3, r3, #2
 8022794:	3302      	adds	r3, #2
 8022796:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 802279a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 802279c:	69fb      	ldr	r3, [r7, #28]
 802279e:	f003 0303 	and.w	r3, r3, #3
 80227a2:	009b      	lsls	r3, r3, #2
 80227a4:	220f      	movs	r2, #15
 80227a6:	fa02 f303 	lsl.w	r3, r2, r3
 80227aa:	43db      	mvns	r3, r3
 80227ac:	69ba      	ldr	r2, [r7, #24]
 80227ae:	4013      	ands	r3, r2
 80227b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80227b2:	687b      	ldr	r3, [r7, #4]
 80227b4:	4a49      	ldr	r2, [pc, #292]	; (80228dc <HAL_GPIO_Init+0x2f0>)
 80227b6:	4293      	cmp	r3, r2
 80227b8:	d019      	beq.n	80227ee <HAL_GPIO_Init+0x202>
 80227ba:	687b      	ldr	r3, [r7, #4]
 80227bc:	4a48      	ldr	r2, [pc, #288]	; (80228e0 <HAL_GPIO_Init+0x2f4>)
 80227be:	4293      	cmp	r3, r2
 80227c0:	d013      	beq.n	80227ea <HAL_GPIO_Init+0x1fe>
 80227c2:	687b      	ldr	r3, [r7, #4]
 80227c4:	4a47      	ldr	r2, [pc, #284]	; (80228e4 <HAL_GPIO_Init+0x2f8>)
 80227c6:	4293      	cmp	r3, r2
 80227c8:	d00d      	beq.n	80227e6 <HAL_GPIO_Init+0x1fa>
 80227ca:	687b      	ldr	r3, [r7, #4]
 80227cc:	4a46      	ldr	r2, [pc, #280]	; (80228e8 <HAL_GPIO_Init+0x2fc>)
 80227ce:	4293      	cmp	r3, r2
 80227d0:	d007      	beq.n	80227e2 <HAL_GPIO_Init+0x1f6>
 80227d2:	687b      	ldr	r3, [r7, #4]
 80227d4:	4a45      	ldr	r2, [pc, #276]	; (80228ec <HAL_GPIO_Init+0x300>)
 80227d6:	4293      	cmp	r3, r2
 80227d8:	d101      	bne.n	80227de <HAL_GPIO_Init+0x1f2>
 80227da:	2304      	movs	r3, #4
 80227dc:	e008      	b.n	80227f0 <HAL_GPIO_Init+0x204>
 80227de:	2307      	movs	r3, #7
 80227e0:	e006      	b.n	80227f0 <HAL_GPIO_Init+0x204>
 80227e2:	2303      	movs	r3, #3
 80227e4:	e004      	b.n	80227f0 <HAL_GPIO_Init+0x204>
 80227e6:	2302      	movs	r3, #2
 80227e8:	e002      	b.n	80227f0 <HAL_GPIO_Init+0x204>
 80227ea:	2301      	movs	r3, #1
 80227ec:	e000      	b.n	80227f0 <HAL_GPIO_Init+0x204>
 80227ee:	2300      	movs	r3, #0
 80227f0:	69fa      	ldr	r2, [r7, #28]
 80227f2:	f002 0203 	and.w	r2, r2, #3
 80227f6:	0092      	lsls	r2, r2, #2
 80227f8:	4093      	lsls	r3, r2
 80227fa:	69ba      	ldr	r2, [r7, #24]
 80227fc:	4313      	orrs	r3, r2
 80227fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8022800:	4935      	ldr	r1, [pc, #212]	; (80228d8 <HAL_GPIO_Init+0x2ec>)
 8022802:	69fb      	ldr	r3, [r7, #28]
 8022804:	089b      	lsrs	r3, r3, #2
 8022806:	3302      	adds	r3, #2
 8022808:	69ba      	ldr	r2, [r7, #24]
 802280a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 802280e:	4b38      	ldr	r3, [pc, #224]	; (80228f0 <HAL_GPIO_Init+0x304>)
 8022810:	689b      	ldr	r3, [r3, #8]
 8022812:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8022814:	693b      	ldr	r3, [r7, #16]
 8022816:	43db      	mvns	r3, r3
 8022818:	69ba      	ldr	r2, [r7, #24]
 802281a:	4013      	ands	r3, r2
 802281c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 802281e:	683b      	ldr	r3, [r7, #0]
 8022820:	685b      	ldr	r3, [r3, #4]
 8022822:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8022826:	2b00      	cmp	r3, #0
 8022828:	d003      	beq.n	8022832 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 802282a:	69ba      	ldr	r2, [r7, #24]
 802282c:	693b      	ldr	r3, [r7, #16]
 802282e:	4313      	orrs	r3, r2
 8022830:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8022832:	4a2f      	ldr	r2, [pc, #188]	; (80228f0 <HAL_GPIO_Init+0x304>)
 8022834:	69bb      	ldr	r3, [r7, #24]
 8022836:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8022838:	4b2d      	ldr	r3, [pc, #180]	; (80228f0 <HAL_GPIO_Init+0x304>)
 802283a:	68db      	ldr	r3, [r3, #12]
 802283c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 802283e:	693b      	ldr	r3, [r7, #16]
 8022840:	43db      	mvns	r3, r3
 8022842:	69ba      	ldr	r2, [r7, #24]
 8022844:	4013      	ands	r3, r2
 8022846:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8022848:	683b      	ldr	r3, [r7, #0]
 802284a:	685b      	ldr	r3, [r3, #4]
 802284c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8022850:	2b00      	cmp	r3, #0
 8022852:	d003      	beq.n	802285c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8022854:	69ba      	ldr	r2, [r7, #24]
 8022856:	693b      	ldr	r3, [r7, #16]
 8022858:	4313      	orrs	r3, r2
 802285a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 802285c:	4a24      	ldr	r2, [pc, #144]	; (80228f0 <HAL_GPIO_Init+0x304>)
 802285e:	69bb      	ldr	r3, [r7, #24]
 8022860:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8022862:	4b23      	ldr	r3, [pc, #140]	; (80228f0 <HAL_GPIO_Init+0x304>)
 8022864:	685b      	ldr	r3, [r3, #4]
 8022866:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8022868:	693b      	ldr	r3, [r7, #16]
 802286a:	43db      	mvns	r3, r3
 802286c:	69ba      	ldr	r2, [r7, #24]
 802286e:	4013      	ands	r3, r2
 8022870:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8022872:	683b      	ldr	r3, [r7, #0]
 8022874:	685b      	ldr	r3, [r3, #4]
 8022876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 802287a:	2b00      	cmp	r3, #0
 802287c:	d003      	beq.n	8022886 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 802287e:	69ba      	ldr	r2, [r7, #24]
 8022880:	693b      	ldr	r3, [r7, #16]
 8022882:	4313      	orrs	r3, r2
 8022884:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8022886:	4a1a      	ldr	r2, [pc, #104]	; (80228f0 <HAL_GPIO_Init+0x304>)
 8022888:	69bb      	ldr	r3, [r7, #24]
 802288a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 802288c:	4b18      	ldr	r3, [pc, #96]	; (80228f0 <HAL_GPIO_Init+0x304>)
 802288e:	681b      	ldr	r3, [r3, #0]
 8022890:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8022892:	693b      	ldr	r3, [r7, #16]
 8022894:	43db      	mvns	r3, r3
 8022896:	69ba      	ldr	r2, [r7, #24]
 8022898:	4013      	ands	r3, r2
 802289a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 802289c:	683b      	ldr	r3, [r7, #0]
 802289e:	685b      	ldr	r3, [r3, #4]
 80228a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80228a4:	2b00      	cmp	r3, #0
 80228a6:	d003      	beq.n	80228b0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80228a8:	69ba      	ldr	r2, [r7, #24]
 80228aa:	693b      	ldr	r3, [r7, #16]
 80228ac:	4313      	orrs	r3, r2
 80228ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80228b0:	4a0f      	ldr	r2, [pc, #60]	; (80228f0 <HAL_GPIO_Init+0x304>)
 80228b2:	69bb      	ldr	r3, [r7, #24]
 80228b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80228b6:	69fb      	ldr	r3, [r7, #28]
 80228b8:	3301      	adds	r3, #1
 80228ba:	61fb      	str	r3, [r7, #28]
 80228bc:	69fb      	ldr	r3, [r7, #28]
 80228be:	2b0f      	cmp	r3, #15
 80228c0:	f67f aea2 	bls.w	8022608 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80228c4:	bf00      	nop
 80228c6:	bf00      	nop
 80228c8:	3724      	adds	r7, #36	; 0x24
 80228ca:	46bd      	mov	sp, r7
 80228cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80228d0:	4770      	bx	lr
 80228d2:	bf00      	nop
 80228d4:	40023800 	.word	0x40023800
 80228d8:	40013800 	.word	0x40013800
 80228dc:	40020000 	.word	0x40020000
 80228e0:	40020400 	.word	0x40020400
 80228e4:	40020800 	.word	0x40020800
 80228e8:	40020c00 	.word	0x40020c00
 80228ec:	40021000 	.word	0x40021000
 80228f0:	40013c00 	.word	0x40013c00

080228f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80228f4:	b480      	push	{r7}
 80228f6:	b083      	sub	sp, #12
 80228f8:	af00      	add	r7, sp, #0
 80228fa:	6078      	str	r0, [r7, #4]
 80228fc:	460b      	mov	r3, r1
 80228fe:	807b      	strh	r3, [r7, #2]
 8022900:	4613      	mov	r3, r2
 8022902:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8022904:	787b      	ldrb	r3, [r7, #1]
 8022906:	2b00      	cmp	r3, #0
 8022908:	d003      	beq.n	8022912 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 802290a:	887a      	ldrh	r2, [r7, #2]
 802290c:	687b      	ldr	r3, [r7, #4]
 802290e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8022910:	e003      	b.n	802291a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8022912:	887b      	ldrh	r3, [r7, #2]
 8022914:	041a      	lsls	r2, r3, #16
 8022916:	687b      	ldr	r3, [r7, #4]
 8022918:	619a      	str	r2, [r3, #24]
}
 802291a:	bf00      	nop
 802291c:	370c      	adds	r7, #12
 802291e:	46bd      	mov	sp, r7
 8022920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022924:	4770      	bx	lr

08022926 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8022926:	b480      	push	{r7}
 8022928:	b085      	sub	sp, #20
 802292a:	af00      	add	r7, sp, #0
 802292c:	6078      	str	r0, [r7, #4]
 802292e:	460b      	mov	r3, r1
 8022930:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8022932:	687b      	ldr	r3, [r7, #4]
 8022934:	695b      	ldr	r3, [r3, #20]
 8022936:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8022938:	887a      	ldrh	r2, [r7, #2]
 802293a:	68fb      	ldr	r3, [r7, #12]
 802293c:	4013      	ands	r3, r2
 802293e:	041a      	lsls	r2, r3, #16
 8022940:	68fb      	ldr	r3, [r7, #12]
 8022942:	43d9      	mvns	r1, r3
 8022944:	887b      	ldrh	r3, [r7, #2]
 8022946:	400b      	ands	r3, r1
 8022948:	431a      	orrs	r2, r3
 802294a:	687b      	ldr	r3, [r7, #4]
 802294c:	619a      	str	r2, [r3, #24]
}
 802294e:	bf00      	nop
 8022950:	3714      	adds	r7, #20
 8022952:	46bd      	mov	sp, r7
 8022954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022958:	4770      	bx	lr
	...

0802295c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 802295c:	b580      	push	{r7, lr}
 802295e:	b086      	sub	sp, #24
 8022960:	af00      	add	r7, sp, #0
 8022962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8022964:	687b      	ldr	r3, [r7, #4]
 8022966:	2b00      	cmp	r3, #0
 8022968:	d101      	bne.n	802296e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 802296a:	2301      	movs	r3, #1
 802296c:	e267      	b.n	8022e3e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 802296e:	687b      	ldr	r3, [r7, #4]
 8022970:	681b      	ldr	r3, [r3, #0]
 8022972:	f003 0301 	and.w	r3, r3, #1
 8022976:	2b00      	cmp	r3, #0
 8022978:	d075      	beq.n	8022a66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 802297a:	4b88      	ldr	r3, [pc, #544]	; (8022b9c <HAL_RCC_OscConfig+0x240>)
 802297c:	689b      	ldr	r3, [r3, #8]
 802297e:	f003 030c 	and.w	r3, r3, #12
 8022982:	2b04      	cmp	r3, #4
 8022984:	d00c      	beq.n	80229a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8022986:	4b85      	ldr	r3, [pc, #532]	; (8022b9c <HAL_RCC_OscConfig+0x240>)
 8022988:	689b      	ldr	r3, [r3, #8]
 802298a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 802298e:	2b08      	cmp	r3, #8
 8022990:	d112      	bne.n	80229b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8022992:	4b82      	ldr	r3, [pc, #520]	; (8022b9c <HAL_RCC_OscConfig+0x240>)
 8022994:	685b      	ldr	r3, [r3, #4]
 8022996:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802299a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 802299e:	d10b      	bne.n	80229b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80229a0:	4b7e      	ldr	r3, [pc, #504]	; (8022b9c <HAL_RCC_OscConfig+0x240>)
 80229a2:	681b      	ldr	r3, [r3, #0]
 80229a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80229a8:	2b00      	cmp	r3, #0
 80229aa:	d05b      	beq.n	8022a64 <HAL_RCC_OscConfig+0x108>
 80229ac:	687b      	ldr	r3, [r7, #4]
 80229ae:	685b      	ldr	r3, [r3, #4]
 80229b0:	2b00      	cmp	r3, #0
 80229b2:	d157      	bne.n	8022a64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80229b4:	2301      	movs	r3, #1
 80229b6:	e242      	b.n	8022e3e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80229b8:	687b      	ldr	r3, [r7, #4]
 80229ba:	685b      	ldr	r3, [r3, #4]
 80229bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80229c0:	d106      	bne.n	80229d0 <HAL_RCC_OscConfig+0x74>
 80229c2:	4b76      	ldr	r3, [pc, #472]	; (8022b9c <HAL_RCC_OscConfig+0x240>)
 80229c4:	681b      	ldr	r3, [r3, #0]
 80229c6:	4a75      	ldr	r2, [pc, #468]	; (8022b9c <HAL_RCC_OscConfig+0x240>)
 80229c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80229cc:	6013      	str	r3, [r2, #0]
 80229ce:	e01d      	b.n	8022a0c <HAL_RCC_OscConfig+0xb0>
 80229d0:	687b      	ldr	r3, [r7, #4]
 80229d2:	685b      	ldr	r3, [r3, #4]
 80229d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80229d8:	d10c      	bne.n	80229f4 <HAL_RCC_OscConfig+0x98>
 80229da:	4b70      	ldr	r3, [pc, #448]	; (8022b9c <HAL_RCC_OscConfig+0x240>)
 80229dc:	681b      	ldr	r3, [r3, #0]
 80229de:	4a6f      	ldr	r2, [pc, #444]	; (8022b9c <HAL_RCC_OscConfig+0x240>)
 80229e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80229e4:	6013      	str	r3, [r2, #0]
 80229e6:	4b6d      	ldr	r3, [pc, #436]	; (8022b9c <HAL_RCC_OscConfig+0x240>)
 80229e8:	681b      	ldr	r3, [r3, #0]
 80229ea:	4a6c      	ldr	r2, [pc, #432]	; (8022b9c <HAL_RCC_OscConfig+0x240>)
 80229ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80229f0:	6013      	str	r3, [r2, #0]
 80229f2:	e00b      	b.n	8022a0c <HAL_RCC_OscConfig+0xb0>
 80229f4:	4b69      	ldr	r3, [pc, #420]	; (8022b9c <HAL_RCC_OscConfig+0x240>)
 80229f6:	681b      	ldr	r3, [r3, #0]
 80229f8:	4a68      	ldr	r2, [pc, #416]	; (8022b9c <HAL_RCC_OscConfig+0x240>)
 80229fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80229fe:	6013      	str	r3, [r2, #0]
 8022a00:	4b66      	ldr	r3, [pc, #408]	; (8022b9c <HAL_RCC_OscConfig+0x240>)
 8022a02:	681b      	ldr	r3, [r3, #0]
 8022a04:	4a65      	ldr	r2, [pc, #404]	; (8022b9c <HAL_RCC_OscConfig+0x240>)
 8022a06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8022a0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8022a0c:	687b      	ldr	r3, [r7, #4]
 8022a0e:	685b      	ldr	r3, [r3, #4]
 8022a10:	2b00      	cmp	r3, #0
 8022a12:	d013      	beq.n	8022a3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8022a14:	f7ff f934 	bl	8021c80 <HAL_GetTick>
 8022a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8022a1a:	e008      	b.n	8022a2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8022a1c:	f7ff f930 	bl	8021c80 <HAL_GetTick>
 8022a20:	4602      	mov	r2, r0
 8022a22:	693b      	ldr	r3, [r7, #16]
 8022a24:	1ad3      	subs	r3, r2, r3
 8022a26:	2b64      	cmp	r3, #100	; 0x64
 8022a28:	d901      	bls.n	8022a2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8022a2a:	2303      	movs	r3, #3
 8022a2c:	e207      	b.n	8022e3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8022a2e:	4b5b      	ldr	r3, [pc, #364]	; (8022b9c <HAL_RCC_OscConfig+0x240>)
 8022a30:	681b      	ldr	r3, [r3, #0]
 8022a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8022a36:	2b00      	cmp	r3, #0
 8022a38:	d0f0      	beq.n	8022a1c <HAL_RCC_OscConfig+0xc0>
 8022a3a:	e014      	b.n	8022a66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8022a3c:	f7ff f920 	bl	8021c80 <HAL_GetTick>
 8022a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8022a42:	e008      	b.n	8022a56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8022a44:	f7ff f91c 	bl	8021c80 <HAL_GetTick>
 8022a48:	4602      	mov	r2, r0
 8022a4a:	693b      	ldr	r3, [r7, #16]
 8022a4c:	1ad3      	subs	r3, r2, r3
 8022a4e:	2b64      	cmp	r3, #100	; 0x64
 8022a50:	d901      	bls.n	8022a56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8022a52:	2303      	movs	r3, #3
 8022a54:	e1f3      	b.n	8022e3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8022a56:	4b51      	ldr	r3, [pc, #324]	; (8022b9c <HAL_RCC_OscConfig+0x240>)
 8022a58:	681b      	ldr	r3, [r3, #0]
 8022a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8022a5e:	2b00      	cmp	r3, #0
 8022a60:	d1f0      	bne.n	8022a44 <HAL_RCC_OscConfig+0xe8>
 8022a62:	e000      	b.n	8022a66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8022a64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8022a66:	687b      	ldr	r3, [r7, #4]
 8022a68:	681b      	ldr	r3, [r3, #0]
 8022a6a:	f003 0302 	and.w	r3, r3, #2
 8022a6e:	2b00      	cmp	r3, #0
 8022a70:	d063      	beq.n	8022b3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8022a72:	4b4a      	ldr	r3, [pc, #296]	; (8022b9c <HAL_RCC_OscConfig+0x240>)
 8022a74:	689b      	ldr	r3, [r3, #8]
 8022a76:	f003 030c 	and.w	r3, r3, #12
 8022a7a:	2b00      	cmp	r3, #0
 8022a7c:	d00b      	beq.n	8022a96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8022a7e:	4b47      	ldr	r3, [pc, #284]	; (8022b9c <HAL_RCC_OscConfig+0x240>)
 8022a80:	689b      	ldr	r3, [r3, #8]
 8022a82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8022a86:	2b08      	cmp	r3, #8
 8022a88:	d11c      	bne.n	8022ac4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8022a8a:	4b44      	ldr	r3, [pc, #272]	; (8022b9c <HAL_RCC_OscConfig+0x240>)
 8022a8c:	685b      	ldr	r3, [r3, #4]
 8022a8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8022a92:	2b00      	cmp	r3, #0
 8022a94:	d116      	bne.n	8022ac4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8022a96:	4b41      	ldr	r3, [pc, #260]	; (8022b9c <HAL_RCC_OscConfig+0x240>)
 8022a98:	681b      	ldr	r3, [r3, #0]
 8022a9a:	f003 0302 	and.w	r3, r3, #2
 8022a9e:	2b00      	cmp	r3, #0
 8022aa0:	d005      	beq.n	8022aae <HAL_RCC_OscConfig+0x152>
 8022aa2:	687b      	ldr	r3, [r7, #4]
 8022aa4:	68db      	ldr	r3, [r3, #12]
 8022aa6:	2b01      	cmp	r3, #1
 8022aa8:	d001      	beq.n	8022aae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8022aaa:	2301      	movs	r3, #1
 8022aac:	e1c7      	b.n	8022e3e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8022aae:	4b3b      	ldr	r3, [pc, #236]	; (8022b9c <HAL_RCC_OscConfig+0x240>)
 8022ab0:	681b      	ldr	r3, [r3, #0]
 8022ab2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8022ab6:	687b      	ldr	r3, [r7, #4]
 8022ab8:	691b      	ldr	r3, [r3, #16]
 8022aba:	00db      	lsls	r3, r3, #3
 8022abc:	4937      	ldr	r1, [pc, #220]	; (8022b9c <HAL_RCC_OscConfig+0x240>)
 8022abe:	4313      	orrs	r3, r2
 8022ac0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8022ac2:	e03a      	b.n	8022b3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8022ac4:	687b      	ldr	r3, [r7, #4]
 8022ac6:	68db      	ldr	r3, [r3, #12]
 8022ac8:	2b00      	cmp	r3, #0
 8022aca:	d020      	beq.n	8022b0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8022acc:	4b34      	ldr	r3, [pc, #208]	; (8022ba0 <HAL_RCC_OscConfig+0x244>)
 8022ace:	2201      	movs	r2, #1
 8022ad0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8022ad2:	f7ff f8d5 	bl	8021c80 <HAL_GetTick>
 8022ad6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8022ad8:	e008      	b.n	8022aec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8022ada:	f7ff f8d1 	bl	8021c80 <HAL_GetTick>
 8022ade:	4602      	mov	r2, r0
 8022ae0:	693b      	ldr	r3, [r7, #16]
 8022ae2:	1ad3      	subs	r3, r2, r3
 8022ae4:	2b02      	cmp	r3, #2
 8022ae6:	d901      	bls.n	8022aec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8022ae8:	2303      	movs	r3, #3
 8022aea:	e1a8      	b.n	8022e3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8022aec:	4b2b      	ldr	r3, [pc, #172]	; (8022b9c <HAL_RCC_OscConfig+0x240>)
 8022aee:	681b      	ldr	r3, [r3, #0]
 8022af0:	f003 0302 	and.w	r3, r3, #2
 8022af4:	2b00      	cmp	r3, #0
 8022af6:	d0f0      	beq.n	8022ada <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8022af8:	4b28      	ldr	r3, [pc, #160]	; (8022b9c <HAL_RCC_OscConfig+0x240>)
 8022afa:	681b      	ldr	r3, [r3, #0]
 8022afc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8022b00:	687b      	ldr	r3, [r7, #4]
 8022b02:	691b      	ldr	r3, [r3, #16]
 8022b04:	00db      	lsls	r3, r3, #3
 8022b06:	4925      	ldr	r1, [pc, #148]	; (8022b9c <HAL_RCC_OscConfig+0x240>)
 8022b08:	4313      	orrs	r3, r2
 8022b0a:	600b      	str	r3, [r1, #0]
 8022b0c:	e015      	b.n	8022b3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8022b0e:	4b24      	ldr	r3, [pc, #144]	; (8022ba0 <HAL_RCC_OscConfig+0x244>)
 8022b10:	2200      	movs	r2, #0
 8022b12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8022b14:	f7ff f8b4 	bl	8021c80 <HAL_GetTick>
 8022b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8022b1a:	e008      	b.n	8022b2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8022b1c:	f7ff f8b0 	bl	8021c80 <HAL_GetTick>
 8022b20:	4602      	mov	r2, r0
 8022b22:	693b      	ldr	r3, [r7, #16]
 8022b24:	1ad3      	subs	r3, r2, r3
 8022b26:	2b02      	cmp	r3, #2
 8022b28:	d901      	bls.n	8022b2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8022b2a:	2303      	movs	r3, #3
 8022b2c:	e187      	b.n	8022e3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8022b2e:	4b1b      	ldr	r3, [pc, #108]	; (8022b9c <HAL_RCC_OscConfig+0x240>)
 8022b30:	681b      	ldr	r3, [r3, #0]
 8022b32:	f003 0302 	and.w	r3, r3, #2
 8022b36:	2b00      	cmp	r3, #0
 8022b38:	d1f0      	bne.n	8022b1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8022b3a:	687b      	ldr	r3, [r7, #4]
 8022b3c:	681b      	ldr	r3, [r3, #0]
 8022b3e:	f003 0308 	and.w	r3, r3, #8
 8022b42:	2b00      	cmp	r3, #0
 8022b44:	d036      	beq.n	8022bb4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8022b46:	687b      	ldr	r3, [r7, #4]
 8022b48:	695b      	ldr	r3, [r3, #20]
 8022b4a:	2b00      	cmp	r3, #0
 8022b4c:	d016      	beq.n	8022b7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8022b4e:	4b15      	ldr	r3, [pc, #84]	; (8022ba4 <HAL_RCC_OscConfig+0x248>)
 8022b50:	2201      	movs	r2, #1
 8022b52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8022b54:	f7ff f894 	bl	8021c80 <HAL_GetTick>
 8022b58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8022b5a:	e008      	b.n	8022b6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8022b5c:	f7ff f890 	bl	8021c80 <HAL_GetTick>
 8022b60:	4602      	mov	r2, r0
 8022b62:	693b      	ldr	r3, [r7, #16]
 8022b64:	1ad3      	subs	r3, r2, r3
 8022b66:	2b02      	cmp	r3, #2
 8022b68:	d901      	bls.n	8022b6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8022b6a:	2303      	movs	r3, #3
 8022b6c:	e167      	b.n	8022e3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8022b6e:	4b0b      	ldr	r3, [pc, #44]	; (8022b9c <HAL_RCC_OscConfig+0x240>)
 8022b70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8022b72:	f003 0302 	and.w	r3, r3, #2
 8022b76:	2b00      	cmp	r3, #0
 8022b78:	d0f0      	beq.n	8022b5c <HAL_RCC_OscConfig+0x200>
 8022b7a:	e01b      	b.n	8022bb4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8022b7c:	4b09      	ldr	r3, [pc, #36]	; (8022ba4 <HAL_RCC_OscConfig+0x248>)
 8022b7e:	2200      	movs	r2, #0
 8022b80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8022b82:	f7ff f87d 	bl	8021c80 <HAL_GetTick>
 8022b86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8022b88:	e00e      	b.n	8022ba8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8022b8a:	f7ff f879 	bl	8021c80 <HAL_GetTick>
 8022b8e:	4602      	mov	r2, r0
 8022b90:	693b      	ldr	r3, [r7, #16]
 8022b92:	1ad3      	subs	r3, r2, r3
 8022b94:	2b02      	cmp	r3, #2
 8022b96:	d907      	bls.n	8022ba8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8022b98:	2303      	movs	r3, #3
 8022b9a:	e150      	b.n	8022e3e <HAL_RCC_OscConfig+0x4e2>
 8022b9c:	40023800 	.word	0x40023800
 8022ba0:	42470000 	.word	0x42470000
 8022ba4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8022ba8:	4b88      	ldr	r3, [pc, #544]	; (8022dcc <HAL_RCC_OscConfig+0x470>)
 8022baa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8022bac:	f003 0302 	and.w	r3, r3, #2
 8022bb0:	2b00      	cmp	r3, #0
 8022bb2:	d1ea      	bne.n	8022b8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8022bb4:	687b      	ldr	r3, [r7, #4]
 8022bb6:	681b      	ldr	r3, [r3, #0]
 8022bb8:	f003 0304 	and.w	r3, r3, #4
 8022bbc:	2b00      	cmp	r3, #0
 8022bbe:	f000 8097 	beq.w	8022cf0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8022bc2:	2300      	movs	r3, #0
 8022bc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8022bc6:	4b81      	ldr	r3, [pc, #516]	; (8022dcc <HAL_RCC_OscConfig+0x470>)
 8022bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8022bce:	2b00      	cmp	r3, #0
 8022bd0:	d10f      	bne.n	8022bf2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8022bd2:	2300      	movs	r3, #0
 8022bd4:	60bb      	str	r3, [r7, #8]
 8022bd6:	4b7d      	ldr	r3, [pc, #500]	; (8022dcc <HAL_RCC_OscConfig+0x470>)
 8022bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022bda:	4a7c      	ldr	r2, [pc, #496]	; (8022dcc <HAL_RCC_OscConfig+0x470>)
 8022bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8022be0:	6413      	str	r3, [r2, #64]	; 0x40
 8022be2:	4b7a      	ldr	r3, [pc, #488]	; (8022dcc <HAL_RCC_OscConfig+0x470>)
 8022be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8022bea:	60bb      	str	r3, [r7, #8]
 8022bec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8022bee:	2301      	movs	r3, #1
 8022bf0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8022bf2:	4b77      	ldr	r3, [pc, #476]	; (8022dd0 <HAL_RCC_OscConfig+0x474>)
 8022bf4:	681b      	ldr	r3, [r3, #0]
 8022bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8022bfa:	2b00      	cmp	r3, #0
 8022bfc:	d118      	bne.n	8022c30 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8022bfe:	4b74      	ldr	r3, [pc, #464]	; (8022dd0 <HAL_RCC_OscConfig+0x474>)
 8022c00:	681b      	ldr	r3, [r3, #0]
 8022c02:	4a73      	ldr	r2, [pc, #460]	; (8022dd0 <HAL_RCC_OscConfig+0x474>)
 8022c04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8022c08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8022c0a:	f7ff f839 	bl	8021c80 <HAL_GetTick>
 8022c0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8022c10:	e008      	b.n	8022c24 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8022c12:	f7ff f835 	bl	8021c80 <HAL_GetTick>
 8022c16:	4602      	mov	r2, r0
 8022c18:	693b      	ldr	r3, [r7, #16]
 8022c1a:	1ad3      	subs	r3, r2, r3
 8022c1c:	2b02      	cmp	r3, #2
 8022c1e:	d901      	bls.n	8022c24 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8022c20:	2303      	movs	r3, #3
 8022c22:	e10c      	b.n	8022e3e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8022c24:	4b6a      	ldr	r3, [pc, #424]	; (8022dd0 <HAL_RCC_OscConfig+0x474>)
 8022c26:	681b      	ldr	r3, [r3, #0]
 8022c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8022c2c:	2b00      	cmp	r3, #0
 8022c2e:	d0f0      	beq.n	8022c12 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8022c30:	687b      	ldr	r3, [r7, #4]
 8022c32:	689b      	ldr	r3, [r3, #8]
 8022c34:	2b01      	cmp	r3, #1
 8022c36:	d106      	bne.n	8022c46 <HAL_RCC_OscConfig+0x2ea>
 8022c38:	4b64      	ldr	r3, [pc, #400]	; (8022dcc <HAL_RCC_OscConfig+0x470>)
 8022c3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8022c3c:	4a63      	ldr	r2, [pc, #396]	; (8022dcc <HAL_RCC_OscConfig+0x470>)
 8022c3e:	f043 0301 	orr.w	r3, r3, #1
 8022c42:	6713      	str	r3, [r2, #112]	; 0x70
 8022c44:	e01c      	b.n	8022c80 <HAL_RCC_OscConfig+0x324>
 8022c46:	687b      	ldr	r3, [r7, #4]
 8022c48:	689b      	ldr	r3, [r3, #8]
 8022c4a:	2b05      	cmp	r3, #5
 8022c4c:	d10c      	bne.n	8022c68 <HAL_RCC_OscConfig+0x30c>
 8022c4e:	4b5f      	ldr	r3, [pc, #380]	; (8022dcc <HAL_RCC_OscConfig+0x470>)
 8022c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8022c52:	4a5e      	ldr	r2, [pc, #376]	; (8022dcc <HAL_RCC_OscConfig+0x470>)
 8022c54:	f043 0304 	orr.w	r3, r3, #4
 8022c58:	6713      	str	r3, [r2, #112]	; 0x70
 8022c5a:	4b5c      	ldr	r3, [pc, #368]	; (8022dcc <HAL_RCC_OscConfig+0x470>)
 8022c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8022c5e:	4a5b      	ldr	r2, [pc, #364]	; (8022dcc <HAL_RCC_OscConfig+0x470>)
 8022c60:	f043 0301 	orr.w	r3, r3, #1
 8022c64:	6713      	str	r3, [r2, #112]	; 0x70
 8022c66:	e00b      	b.n	8022c80 <HAL_RCC_OscConfig+0x324>
 8022c68:	4b58      	ldr	r3, [pc, #352]	; (8022dcc <HAL_RCC_OscConfig+0x470>)
 8022c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8022c6c:	4a57      	ldr	r2, [pc, #348]	; (8022dcc <HAL_RCC_OscConfig+0x470>)
 8022c6e:	f023 0301 	bic.w	r3, r3, #1
 8022c72:	6713      	str	r3, [r2, #112]	; 0x70
 8022c74:	4b55      	ldr	r3, [pc, #340]	; (8022dcc <HAL_RCC_OscConfig+0x470>)
 8022c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8022c78:	4a54      	ldr	r2, [pc, #336]	; (8022dcc <HAL_RCC_OscConfig+0x470>)
 8022c7a:	f023 0304 	bic.w	r3, r3, #4
 8022c7e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8022c80:	687b      	ldr	r3, [r7, #4]
 8022c82:	689b      	ldr	r3, [r3, #8]
 8022c84:	2b00      	cmp	r3, #0
 8022c86:	d015      	beq.n	8022cb4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8022c88:	f7fe fffa 	bl	8021c80 <HAL_GetTick>
 8022c8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8022c8e:	e00a      	b.n	8022ca6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8022c90:	f7fe fff6 	bl	8021c80 <HAL_GetTick>
 8022c94:	4602      	mov	r2, r0
 8022c96:	693b      	ldr	r3, [r7, #16]
 8022c98:	1ad3      	subs	r3, r2, r3
 8022c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8022c9e:	4293      	cmp	r3, r2
 8022ca0:	d901      	bls.n	8022ca6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8022ca2:	2303      	movs	r3, #3
 8022ca4:	e0cb      	b.n	8022e3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8022ca6:	4b49      	ldr	r3, [pc, #292]	; (8022dcc <HAL_RCC_OscConfig+0x470>)
 8022ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8022caa:	f003 0302 	and.w	r3, r3, #2
 8022cae:	2b00      	cmp	r3, #0
 8022cb0:	d0ee      	beq.n	8022c90 <HAL_RCC_OscConfig+0x334>
 8022cb2:	e014      	b.n	8022cde <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8022cb4:	f7fe ffe4 	bl	8021c80 <HAL_GetTick>
 8022cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8022cba:	e00a      	b.n	8022cd2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8022cbc:	f7fe ffe0 	bl	8021c80 <HAL_GetTick>
 8022cc0:	4602      	mov	r2, r0
 8022cc2:	693b      	ldr	r3, [r7, #16]
 8022cc4:	1ad3      	subs	r3, r2, r3
 8022cc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8022cca:	4293      	cmp	r3, r2
 8022ccc:	d901      	bls.n	8022cd2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8022cce:	2303      	movs	r3, #3
 8022cd0:	e0b5      	b.n	8022e3e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8022cd2:	4b3e      	ldr	r3, [pc, #248]	; (8022dcc <HAL_RCC_OscConfig+0x470>)
 8022cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8022cd6:	f003 0302 	and.w	r3, r3, #2
 8022cda:	2b00      	cmp	r3, #0
 8022cdc:	d1ee      	bne.n	8022cbc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8022cde:	7dfb      	ldrb	r3, [r7, #23]
 8022ce0:	2b01      	cmp	r3, #1
 8022ce2:	d105      	bne.n	8022cf0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8022ce4:	4b39      	ldr	r3, [pc, #228]	; (8022dcc <HAL_RCC_OscConfig+0x470>)
 8022ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8022ce8:	4a38      	ldr	r2, [pc, #224]	; (8022dcc <HAL_RCC_OscConfig+0x470>)
 8022cea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8022cee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8022cf0:	687b      	ldr	r3, [r7, #4]
 8022cf2:	699b      	ldr	r3, [r3, #24]
 8022cf4:	2b00      	cmp	r3, #0
 8022cf6:	f000 80a1 	beq.w	8022e3c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8022cfa:	4b34      	ldr	r3, [pc, #208]	; (8022dcc <HAL_RCC_OscConfig+0x470>)
 8022cfc:	689b      	ldr	r3, [r3, #8]
 8022cfe:	f003 030c 	and.w	r3, r3, #12
 8022d02:	2b08      	cmp	r3, #8
 8022d04:	d05c      	beq.n	8022dc0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8022d06:	687b      	ldr	r3, [r7, #4]
 8022d08:	699b      	ldr	r3, [r3, #24]
 8022d0a:	2b02      	cmp	r3, #2
 8022d0c:	d141      	bne.n	8022d92 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8022d0e:	4b31      	ldr	r3, [pc, #196]	; (8022dd4 <HAL_RCC_OscConfig+0x478>)
 8022d10:	2200      	movs	r2, #0
 8022d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8022d14:	f7fe ffb4 	bl	8021c80 <HAL_GetTick>
 8022d18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8022d1a:	e008      	b.n	8022d2e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8022d1c:	f7fe ffb0 	bl	8021c80 <HAL_GetTick>
 8022d20:	4602      	mov	r2, r0
 8022d22:	693b      	ldr	r3, [r7, #16]
 8022d24:	1ad3      	subs	r3, r2, r3
 8022d26:	2b02      	cmp	r3, #2
 8022d28:	d901      	bls.n	8022d2e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8022d2a:	2303      	movs	r3, #3
 8022d2c:	e087      	b.n	8022e3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8022d2e:	4b27      	ldr	r3, [pc, #156]	; (8022dcc <HAL_RCC_OscConfig+0x470>)
 8022d30:	681b      	ldr	r3, [r3, #0]
 8022d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8022d36:	2b00      	cmp	r3, #0
 8022d38:	d1f0      	bne.n	8022d1c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8022d3a:	687b      	ldr	r3, [r7, #4]
 8022d3c:	69da      	ldr	r2, [r3, #28]
 8022d3e:	687b      	ldr	r3, [r7, #4]
 8022d40:	6a1b      	ldr	r3, [r3, #32]
 8022d42:	431a      	orrs	r2, r3
 8022d44:	687b      	ldr	r3, [r7, #4]
 8022d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022d48:	019b      	lsls	r3, r3, #6
 8022d4a:	431a      	orrs	r2, r3
 8022d4c:	687b      	ldr	r3, [r7, #4]
 8022d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022d50:	085b      	lsrs	r3, r3, #1
 8022d52:	3b01      	subs	r3, #1
 8022d54:	041b      	lsls	r3, r3, #16
 8022d56:	431a      	orrs	r2, r3
 8022d58:	687b      	ldr	r3, [r7, #4]
 8022d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022d5c:	061b      	lsls	r3, r3, #24
 8022d5e:	491b      	ldr	r1, [pc, #108]	; (8022dcc <HAL_RCC_OscConfig+0x470>)
 8022d60:	4313      	orrs	r3, r2
 8022d62:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8022d64:	4b1b      	ldr	r3, [pc, #108]	; (8022dd4 <HAL_RCC_OscConfig+0x478>)
 8022d66:	2201      	movs	r2, #1
 8022d68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8022d6a:	f7fe ff89 	bl	8021c80 <HAL_GetTick>
 8022d6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8022d70:	e008      	b.n	8022d84 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8022d72:	f7fe ff85 	bl	8021c80 <HAL_GetTick>
 8022d76:	4602      	mov	r2, r0
 8022d78:	693b      	ldr	r3, [r7, #16]
 8022d7a:	1ad3      	subs	r3, r2, r3
 8022d7c:	2b02      	cmp	r3, #2
 8022d7e:	d901      	bls.n	8022d84 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8022d80:	2303      	movs	r3, #3
 8022d82:	e05c      	b.n	8022e3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8022d84:	4b11      	ldr	r3, [pc, #68]	; (8022dcc <HAL_RCC_OscConfig+0x470>)
 8022d86:	681b      	ldr	r3, [r3, #0]
 8022d88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8022d8c:	2b00      	cmp	r3, #0
 8022d8e:	d0f0      	beq.n	8022d72 <HAL_RCC_OscConfig+0x416>
 8022d90:	e054      	b.n	8022e3c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8022d92:	4b10      	ldr	r3, [pc, #64]	; (8022dd4 <HAL_RCC_OscConfig+0x478>)
 8022d94:	2200      	movs	r2, #0
 8022d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8022d98:	f7fe ff72 	bl	8021c80 <HAL_GetTick>
 8022d9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8022d9e:	e008      	b.n	8022db2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8022da0:	f7fe ff6e 	bl	8021c80 <HAL_GetTick>
 8022da4:	4602      	mov	r2, r0
 8022da6:	693b      	ldr	r3, [r7, #16]
 8022da8:	1ad3      	subs	r3, r2, r3
 8022daa:	2b02      	cmp	r3, #2
 8022dac:	d901      	bls.n	8022db2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8022dae:	2303      	movs	r3, #3
 8022db0:	e045      	b.n	8022e3e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8022db2:	4b06      	ldr	r3, [pc, #24]	; (8022dcc <HAL_RCC_OscConfig+0x470>)
 8022db4:	681b      	ldr	r3, [r3, #0]
 8022db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8022dba:	2b00      	cmp	r3, #0
 8022dbc:	d1f0      	bne.n	8022da0 <HAL_RCC_OscConfig+0x444>
 8022dbe:	e03d      	b.n	8022e3c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8022dc0:	687b      	ldr	r3, [r7, #4]
 8022dc2:	699b      	ldr	r3, [r3, #24]
 8022dc4:	2b01      	cmp	r3, #1
 8022dc6:	d107      	bne.n	8022dd8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8022dc8:	2301      	movs	r3, #1
 8022dca:	e038      	b.n	8022e3e <HAL_RCC_OscConfig+0x4e2>
 8022dcc:	40023800 	.word	0x40023800
 8022dd0:	40007000 	.word	0x40007000
 8022dd4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8022dd8:	4b1b      	ldr	r3, [pc, #108]	; (8022e48 <HAL_RCC_OscConfig+0x4ec>)
 8022dda:	685b      	ldr	r3, [r3, #4]
 8022ddc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8022dde:	687b      	ldr	r3, [r7, #4]
 8022de0:	699b      	ldr	r3, [r3, #24]
 8022de2:	2b01      	cmp	r3, #1
 8022de4:	d028      	beq.n	8022e38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8022de6:	68fb      	ldr	r3, [r7, #12]
 8022de8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8022dec:	687b      	ldr	r3, [r7, #4]
 8022dee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8022df0:	429a      	cmp	r2, r3
 8022df2:	d121      	bne.n	8022e38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8022df4:	68fb      	ldr	r3, [r7, #12]
 8022df6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8022dfa:	687b      	ldr	r3, [r7, #4]
 8022dfc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8022dfe:	429a      	cmp	r2, r3
 8022e00:	d11a      	bne.n	8022e38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8022e02:	68fa      	ldr	r2, [r7, #12]
 8022e04:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8022e08:	4013      	ands	r3, r2
 8022e0a:	687a      	ldr	r2, [r7, #4]
 8022e0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8022e0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8022e10:	4293      	cmp	r3, r2
 8022e12:	d111      	bne.n	8022e38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8022e14:	68fb      	ldr	r3, [r7, #12]
 8022e16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8022e1a:	687b      	ldr	r3, [r7, #4]
 8022e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8022e1e:	085b      	lsrs	r3, r3, #1
 8022e20:	3b01      	subs	r3, #1
 8022e22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8022e24:	429a      	cmp	r2, r3
 8022e26:	d107      	bne.n	8022e38 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8022e28:	68fb      	ldr	r3, [r7, #12]
 8022e2a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8022e2e:	687b      	ldr	r3, [r7, #4]
 8022e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8022e32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8022e34:	429a      	cmp	r2, r3
 8022e36:	d001      	beq.n	8022e3c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8022e38:	2301      	movs	r3, #1
 8022e3a:	e000      	b.n	8022e3e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8022e3c:	2300      	movs	r3, #0
}
 8022e3e:	4618      	mov	r0, r3
 8022e40:	3718      	adds	r7, #24
 8022e42:	46bd      	mov	sp, r7
 8022e44:	bd80      	pop	{r7, pc}
 8022e46:	bf00      	nop
 8022e48:	40023800 	.word	0x40023800

08022e4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8022e4c:	b580      	push	{r7, lr}
 8022e4e:	b084      	sub	sp, #16
 8022e50:	af00      	add	r7, sp, #0
 8022e52:	6078      	str	r0, [r7, #4]
 8022e54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8022e56:	687b      	ldr	r3, [r7, #4]
 8022e58:	2b00      	cmp	r3, #0
 8022e5a:	d101      	bne.n	8022e60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8022e5c:	2301      	movs	r3, #1
 8022e5e:	e0cc      	b.n	8022ffa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8022e60:	4b68      	ldr	r3, [pc, #416]	; (8023004 <HAL_RCC_ClockConfig+0x1b8>)
 8022e62:	681b      	ldr	r3, [r3, #0]
 8022e64:	f003 0307 	and.w	r3, r3, #7
 8022e68:	683a      	ldr	r2, [r7, #0]
 8022e6a:	429a      	cmp	r2, r3
 8022e6c:	d90c      	bls.n	8022e88 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8022e6e:	4b65      	ldr	r3, [pc, #404]	; (8023004 <HAL_RCC_ClockConfig+0x1b8>)
 8022e70:	683a      	ldr	r2, [r7, #0]
 8022e72:	b2d2      	uxtb	r2, r2
 8022e74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8022e76:	4b63      	ldr	r3, [pc, #396]	; (8023004 <HAL_RCC_ClockConfig+0x1b8>)
 8022e78:	681b      	ldr	r3, [r3, #0]
 8022e7a:	f003 0307 	and.w	r3, r3, #7
 8022e7e:	683a      	ldr	r2, [r7, #0]
 8022e80:	429a      	cmp	r2, r3
 8022e82:	d001      	beq.n	8022e88 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8022e84:	2301      	movs	r3, #1
 8022e86:	e0b8      	b.n	8022ffa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8022e88:	687b      	ldr	r3, [r7, #4]
 8022e8a:	681b      	ldr	r3, [r3, #0]
 8022e8c:	f003 0302 	and.w	r3, r3, #2
 8022e90:	2b00      	cmp	r3, #0
 8022e92:	d020      	beq.n	8022ed6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8022e94:	687b      	ldr	r3, [r7, #4]
 8022e96:	681b      	ldr	r3, [r3, #0]
 8022e98:	f003 0304 	and.w	r3, r3, #4
 8022e9c:	2b00      	cmp	r3, #0
 8022e9e:	d005      	beq.n	8022eac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8022ea0:	4b59      	ldr	r3, [pc, #356]	; (8023008 <HAL_RCC_ClockConfig+0x1bc>)
 8022ea2:	689b      	ldr	r3, [r3, #8]
 8022ea4:	4a58      	ldr	r2, [pc, #352]	; (8023008 <HAL_RCC_ClockConfig+0x1bc>)
 8022ea6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8022eaa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8022eac:	687b      	ldr	r3, [r7, #4]
 8022eae:	681b      	ldr	r3, [r3, #0]
 8022eb0:	f003 0308 	and.w	r3, r3, #8
 8022eb4:	2b00      	cmp	r3, #0
 8022eb6:	d005      	beq.n	8022ec4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8022eb8:	4b53      	ldr	r3, [pc, #332]	; (8023008 <HAL_RCC_ClockConfig+0x1bc>)
 8022eba:	689b      	ldr	r3, [r3, #8]
 8022ebc:	4a52      	ldr	r2, [pc, #328]	; (8023008 <HAL_RCC_ClockConfig+0x1bc>)
 8022ebe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8022ec2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8022ec4:	4b50      	ldr	r3, [pc, #320]	; (8023008 <HAL_RCC_ClockConfig+0x1bc>)
 8022ec6:	689b      	ldr	r3, [r3, #8]
 8022ec8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8022ecc:	687b      	ldr	r3, [r7, #4]
 8022ece:	689b      	ldr	r3, [r3, #8]
 8022ed0:	494d      	ldr	r1, [pc, #308]	; (8023008 <HAL_RCC_ClockConfig+0x1bc>)
 8022ed2:	4313      	orrs	r3, r2
 8022ed4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8022ed6:	687b      	ldr	r3, [r7, #4]
 8022ed8:	681b      	ldr	r3, [r3, #0]
 8022eda:	f003 0301 	and.w	r3, r3, #1
 8022ede:	2b00      	cmp	r3, #0
 8022ee0:	d044      	beq.n	8022f6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8022ee2:	687b      	ldr	r3, [r7, #4]
 8022ee4:	685b      	ldr	r3, [r3, #4]
 8022ee6:	2b01      	cmp	r3, #1
 8022ee8:	d107      	bne.n	8022efa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8022eea:	4b47      	ldr	r3, [pc, #284]	; (8023008 <HAL_RCC_ClockConfig+0x1bc>)
 8022eec:	681b      	ldr	r3, [r3, #0]
 8022eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8022ef2:	2b00      	cmp	r3, #0
 8022ef4:	d119      	bne.n	8022f2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8022ef6:	2301      	movs	r3, #1
 8022ef8:	e07f      	b.n	8022ffa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8022efa:	687b      	ldr	r3, [r7, #4]
 8022efc:	685b      	ldr	r3, [r3, #4]
 8022efe:	2b02      	cmp	r3, #2
 8022f00:	d003      	beq.n	8022f0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8022f02:	687b      	ldr	r3, [r7, #4]
 8022f04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8022f06:	2b03      	cmp	r3, #3
 8022f08:	d107      	bne.n	8022f1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8022f0a:	4b3f      	ldr	r3, [pc, #252]	; (8023008 <HAL_RCC_ClockConfig+0x1bc>)
 8022f0c:	681b      	ldr	r3, [r3, #0]
 8022f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8022f12:	2b00      	cmp	r3, #0
 8022f14:	d109      	bne.n	8022f2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8022f16:	2301      	movs	r3, #1
 8022f18:	e06f      	b.n	8022ffa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8022f1a:	4b3b      	ldr	r3, [pc, #236]	; (8023008 <HAL_RCC_ClockConfig+0x1bc>)
 8022f1c:	681b      	ldr	r3, [r3, #0]
 8022f1e:	f003 0302 	and.w	r3, r3, #2
 8022f22:	2b00      	cmp	r3, #0
 8022f24:	d101      	bne.n	8022f2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8022f26:	2301      	movs	r3, #1
 8022f28:	e067      	b.n	8022ffa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8022f2a:	4b37      	ldr	r3, [pc, #220]	; (8023008 <HAL_RCC_ClockConfig+0x1bc>)
 8022f2c:	689b      	ldr	r3, [r3, #8]
 8022f2e:	f023 0203 	bic.w	r2, r3, #3
 8022f32:	687b      	ldr	r3, [r7, #4]
 8022f34:	685b      	ldr	r3, [r3, #4]
 8022f36:	4934      	ldr	r1, [pc, #208]	; (8023008 <HAL_RCC_ClockConfig+0x1bc>)
 8022f38:	4313      	orrs	r3, r2
 8022f3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8022f3c:	f7fe fea0 	bl	8021c80 <HAL_GetTick>
 8022f40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8022f42:	e00a      	b.n	8022f5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8022f44:	f7fe fe9c 	bl	8021c80 <HAL_GetTick>
 8022f48:	4602      	mov	r2, r0
 8022f4a:	68fb      	ldr	r3, [r7, #12]
 8022f4c:	1ad3      	subs	r3, r2, r3
 8022f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8022f52:	4293      	cmp	r3, r2
 8022f54:	d901      	bls.n	8022f5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8022f56:	2303      	movs	r3, #3
 8022f58:	e04f      	b.n	8022ffa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8022f5a:	4b2b      	ldr	r3, [pc, #172]	; (8023008 <HAL_RCC_ClockConfig+0x1bc>)
 8022f5c:	689b      	ldr	r3, [r3, #8]
 8022f5e:	f003 020c 	and.w	r2, r3, #12
 8022f62:	687b      	ldr	r3, [r7, #4]
 8022f64:	685b      	ldr	r3, [r3, #4]
 8022f66:	009b      	lsls	r3, r3, #2
 8022f68:	429a      	cmp	r2, r3
 8022f6a:	d1eb      	bne.n	8022f44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8022f6c:	4b25      	ldr	r3, [pc, #148]	; (8023004 <HAL_RCC_ClockConfig+0x1b8>)
 8022f6e:	681b      	ldr	r3, [r3, #0]
 8022f70:	f003 0307 	and.w	r3, r3, #7
 8022f74:	683a      	ldr	r2, [r7, #0]
 8022f76:	429a      	cmp	r2, r3
 8022f78:	d20c      	bcs.n	8022f94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8022f7a:	4b22      	ldr	r3, [pc, #136]	; (8023004 <HAL_RCC_ClockConfig+0x1b8>)
 8022f7c:	683a      	ldr	r2, [r7, #0]
 8022f7e:	b2d2      	uxtb	r2, r2
 8022f80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8022f82:	4b20      	ldr	r3, [pc, #128]	; (8023004 <HAL_RCC_ClockConfig+0x1b8>)
 8022f84:	681b      	ldr	r3, [r3, #0]
 8022f86:	f003 0307 	and.w	r3, r3, #7
 8022f8a:	683a      	ldr	r2, [r7, #0]
 8022f8c:	429a      	cmp	r2, r3
 8022f8e:	d001      	beq.n	8022f94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8022f90:	2301      	movs	r3, #1
 8022f92:	e032      	b.n	8022ffa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8022f94:	687b      	ldr	r3, [r7, #4]
 8022f96:	681b      	ldr	r3, [r3, #0]
 8022f98:	f003 0304 	and.w	r3, r3, #4
 8022f9c:	2b00      	cmp	r3, #0
 8022f9e:	d008      	beq.n	8022fb2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8022fa0:	4b19      	ldr	r3, [pc, #100]	; (8023008 <HAL_RCC_ClockConfig+0x1bc>)
 8022fa2:	689b      	ldr	r3, [r3, #8]
 8022fa4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8022fa8:	687b      	ldr	r3, [r7, #4]
 8022faa:	68db      	ldr	r3, [r3, #12]
 8022fac:	4916      	ldr	r1, [pc, #88]	; (8023008 <HAL_RCC_ClockConfig+0x1bc>)
 8022fae:	4313      	orrs	r3, r2
 8022fb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8022fb2:	687b      	ldr	r3, [r7, #4]
 8022fb4:	681b      	ldr	r3, [r3, #0]
 8022fb6:	f003 0308 	and.w	r3, r3, #8
 8022fba:	2b00      	cmp	r3, #0
 8022fbc:	d009      	beq.n	8022fd2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8022fbe:	4b12      	ldr	r3, [pc, #72]	; (8023008 <HAL_RCC_ClockConfig+0x1bc>)
 8022fc0:	689b      	ldr	r3, [r3, #8]
 8022fc2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8022fc6:	687b      	ldr	r3, [r7, #4]
 8022fc8:	691b      	ldr	r3, [r3, #16]
 8022fca:	00db      	lsls	r3, r3, #3
 8022fcc:	490e      	ldr	r1, [pc, #56]	; (8023008 <HAL_RCC_ClockConfig+0x1bc>)
 8022fce:	4313      	orrs	r3, r2
 8022fd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8022fd2:	f000 f821 	bl	8023018 <HAL_RCC_GetSysClockFreq>
 8022fd6:	4602      	mov	r2, r0
 8022fd8:	4b0b      	ldr	r3, [pc, #44]	; (8023008 <HAL_RCC_ClockConfig+0x1bc>)
 8022fda:	689b      	ldr	r3, [r3, #8]
 8022fdc:	091b      	lsrs	r3, r3, #4
 8022fde:	f003 030f 	and.w	r3, r3, #15
 8022fe2:	490a      	ldr	r1, [pc, #40]	; (802300c <HAL_RCC_ClockConfig+0x1c0>)
 8022fe4:	5ccb      	ldrb	r3, [r1, r3]
 8022fe6:	fa22 f303 	lsr.w	r3, r2, r3
 8022fea:	4a09      	ldr	r2, [pc, #36]	; (8023010 <HAL_RCC_ClockConfig+0x1c4>)
 8022fec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8022fee:	4b09      	ldr	r3, [pc, #36]	; (8023014 <HAL_RCC_ClockConfig+0x1c8>)
 8022ff0:	681b      	ldr	r3, [r3, #0]
 8022ff2:	4618      	mov	r0, r3
 8022ff4:	f7fe fb58 	bl	80216a8 <HAL_InitTick>

  return HAL_OK;
 8022ff8:	2300      	movs	r3, #0
}
 8022ffa:	4618      	mov	r0, r3
 8022ffc:	3710      	adds	r7, #16
 8022ffe:	46bd      	mov	sp, r7
 8023000:	bd80      	pop	{r7, pc}
 8023002:	bf00      	nop
 8023004:	40023c00 	.word	0x40023c00
 8023008:	40023800 	.word	0x40023800
 802300c:	08028174 	.word	0x08028174
 8023010:	20000004 	.word	0x20000004
 8023014:	20000008 	.word	0x20000008

08023018 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8023018:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 802301c:	b094      	sub	sp, #80	; 0x50
 802301e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8023020:	2300      	movs	r3, #0
 8023022:	647b      	str	r3, [r7, #68]	; 0x44
 8023024:	2300      	movs	r3, #0
 8023026:	64fb      	str	r3, [r7, #76]	; 0x4c
 8023028:	2300      	movs	r3, #0
 802302a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 802302c:	2300      	movs	r3, #0
 802302e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8023030:	4b79      	ldr	r3, [pc, #484]	; (8023218 <HAL_RCC_GetSysClockFreq+0x200>)
 8023032:	689b      	ldr	r3, [r3, #8]
 8023034:	f003 030c 	and.w	r3, r3, #12
 8023038:	2b08      	cmp	r3, #8
 802303a:	d00d      	beq.n	8023058 <HAL_RCC_GetSysClockFreq+0x40>
 802303c:	2b08      	cmp	r3, #8
 802303e:	f200 80e1 	bhi.w	8023204 <HAL_RCC_GetSysClockFreq+0x1ec>
 8023042:	2b00      	cmp	r3, #0
 8023044:	d002      	beq.n	802304c <HAL_RCC_GetSysClockFreq+0x34>
 8023046:	2b04      	cmp	r3, #4
 8023048:	d003      	beq.n	8023052 <HAL_RCC_GetSysClockFreq+0x3a>
 802304a:	e0db      	b.n	8023204 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 802304c:	4b73      	ldr	r3, [pc, #460]	; (802321c <HAL_RCC_GetSysClockFreq+0x204>)
 802304e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8023050:	e0db      	b.n	802320a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8023052:	4b73      	ldr	r3, [pc, #460]	; (8023220 <HAL_RCC_GetSysClockFreq+0x208>)
 8023054:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8023056:	e0d8      	b.n	802320a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8023058:	4b6f      	ldr	r3, [pc, #444]	; (8023218 <HAL_RCC_GetSysClockFreq+0x200>)
 802305a:	685b      	ldr	r3, [r3, #4]
 802305c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8023060:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8023062:	4b6d      	ldr	r3, [pc, #436]	; (8023218 <HAL_RCC_GetSysClockFreq+0x200>)
 8023064:	685b      	ldr	r3, [r3, #4]
 8023066:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 802306a:	2b00      	cmp	r3, #0
 802306c:	d063      	beq.n	8023136 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 802306e:	4b6a      	ldr	r3, [pc, #424]	; (8023218 <HAL_RCC_GetSysClockFreq+0x200>)
 8023070:	685b      	ldr	r3, [r3, #4]
 8023072:	099b      	lsrs	r3, r3, #6
 8023074:	2200      	movs	r2, #0
 8023076:	63bb      	str	r3, [r7, #56]	; 0x38
 8023078:	63fa      	str	r2, [r7, #60]	; 0x3c
 802307a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 802307c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8023080:	633b      	str	r3, [r7, #48]	; 0x30
 8023082:	2300      	movs	r3, #0
 8023084:	637b      	str	r3, [r7, #52]	; 0x34
 8023086:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 802308a:	4622      	mov	r2, r4
 802308c:	462b      	mov	r3, r5
 802308e:	f04f 0000 	mov.w	r0, #0
 8023092:	f04f 0100 	mov.w	r1, #0
 8023096:	0159      	lsls	r1, r3, #5
 8023098:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 802309c:	0150      	lsls	r0, r2, #5
 802309e:	4602      	mov	r2, r0
 80230a0:	460b      	mov	r3, r1
 80230a2:	4621      	mov	r1, r4
 80230a4:	1a51      	subs	r1, r2, r1
 80230a6:	6139      	str	r1, [r7, #16]
 80230a8:	4629      	mov	r1, r5
 80230aa:	eb63 0301 	sbc.w	r3, r3, r1
 80230ae:	617b      	str	r3, [r7, #20]
 80230b0:	f04f 0200 	mov.w	r2, #0
 80230b4:	f04f 0300 	mov.w	r3, #0
 80230b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80230bc:	4659      	mov	r1, fp
 80230be:	018b      	lsls	r3, r1, #6
 80230c0:	4651      	mov	r1, sl
 80230c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80230c6:	4651      	mov	r1, sl
 80230c8:	018a      	lsls	r2, r1, #6
 80230ca:	4651      	mov	r1, sl
 80230cc:	ebb2 0801 	subs.w	r8, r2, r1
 80230d0:	4659      	mov	r1, fp
 80230d2:	eb63 0901 	sbc.w	r9, r3, r1
 80230d6:	f04f 0200 	mov.w	r2, #0
 80230da:	f04f 0300 	mov.w	r3, #0
 80230de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80230e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80230e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80230ea:	4690      	mov	r8, r2
 80230ec:	4699      	mov	r9, r3
 80230ee:	4623      	mov	r3, r4
 80230f0:	eb18 0303 	adds.w	r3, r8, r3
 80230f4:	60bb      	str	r3, [r7, #8]
 80230f6:	462b      	mov	r3, r5
 80230f8:	eb49 0303 	adc.w	r3, r9, r3
 80230fc:	60fb      	str	r3, [r7, #12]
 80230fe:	f04f 0200 	mov.w	r2, #0
 8023102:	f04f 0300 	mov.w	r3, #0
 8023106:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 802310a:	4629      	mov	r1, r5
 802310c:	024b      	lsls	r3, r1, #9
 802310e:	4621      	mov	r1, r4
 8023110:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8023114:	4621      	mov	r1, r4
 8023116:	024a      	lsls	r2, r1, #9
 8023118:	4610      	mov	r0, r2
 802311a:	4619      	mov	r1, r3
 802311c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 802311e:	2200      	movs	r2, #0
 8023120:	62bb      	str	r3, [r7, #40]	; 0x28
 8023122:	62fa      	str	r2, [r7, #44]	; 0x2c
 8023124:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8023128:	f7fd fd56 	bl	8020bd8 <__aeabi_uldivmod>
 802312c:	4602      	mov	r2, r0
 802312e:	460b      	mov	r3, r1
 8023130:	4613      	mov	r3, r2
 8023132:	64fb      	str	r3, [r7, #76]	; 0x4c
 8023134:	e058      	b.n	80231e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8023136:	4b38      	ldr	r3, [pc, #224]	; (8023218 <HAL_RCC_GetSysClockFreq+0x200>)
 8023138:	685b      	ldr	r3, [r3, #4]
 802313a:	099b      	lsrs	r3, r3, #6
 802313c:	2200      	movs	r2, #0
 802313e:	4618      	mov	r0, r3
 8023140:	4611      	mov	r1, r2
 8023142:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8023146:	623b      	str	r3, [r7, #32]
 8023148:	2300      	movs	r3, #0
 802314a:	627b      	str	r3, [r7, #36]	; 0x24
 802314c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8023150:	4642      	mov	r2, r8
 8023152:	464b      	mov	r3, r9
 8023154:	f04f 0000 	mov.w	r0, #0
 8023158:	f04f 0100 	mov.w	r1, #0
 802315c:	0159      	lsls	r1, r3, #5
 802315e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8023162:	0150      	lsls	r0, r2, #5
 8023164:	4602      	mov	r2, r0
 8023166:	460b      	mov	r3, r1
 8023168:	4641      	mov	r1, r8
 802316a:	ebb2 0a01 	subs.w	sl, r2, r1
 802316e:	4649      	mov	r1, r9
 8023170:	eb63 0b01 	sbc.w	fp, r3, r1
 8023174:	f04f 0200 	mov.w	r2, #0
 8023178:	f04f 0300 	mov.w	r3, #0
 802317c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8023180:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8023184:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8023188:	ebb2 040a 	subs.w	r4, r2, sl
 802318c:	eb63 050b 	sbc.w	r5, r3, fp
 8023190:	f04f 0200 	mov.w	r2, #0
 8023194:	f04f 0300 	mov.w	r3, #0
 8023198:	00eb      	lsls	r3, r5, #3
 802319a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 802319e:	00e2      	lsls	r2, r4, #3
 80231a0:	4614      	mov	r4, r2
 80231a2:	461d      	mov	r5, r3
 80231a4:	4643      	mov	r3, r8
 80231a6:	18e3      	adds	r3, r4, r3
 80231a8:	603b      	str	r3, [r7, #0]
 80231aa:	464b      	mov	r3, r9
 80231ac:	eb45 0303 	adc.w	r3, r5, r3
 80231b0:	607b      	str	r3, [r7, #4]
 80231b2:	f04f 0200 	mov.w	r2, #0
 80231b6:	f04f 0300 	mov.w	r3, #0
 80231ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80231be:	4629      	mov	r1, r5
 80231c0:	028b      	lsls	r3, r1, #10
 80231c2:	4621      	mov	r1, r4
 80231c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80231c8:	4621      	mov	r1, r4
 80231ca:	028a      	lsls	r2, r1, #10
 80231cc:	4610      	mov	r0, r2
 80231ce:	4619      	mov	r1, r3
 80231d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80231d2:	2200      	movs	r2, #0
 80231d4:	61bb      	str	r3, [r7, #24]
 80231d6:	61fa      	str	r2, [r7, #28]
 80231d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80231dc:	f7fd fcfc 	bl	8020bd8 <__aeabi_uldivmod>
 80231e0:	4602      	mov	r2, r0
 80231e2:	460b      	mov	r3, r1
 80231e4:	4613      	mov	r3, r2
 80231e6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80231e8:	4b0b      	ldr	r3, [pc, #44]	; (8023218 <HAL_RCC_GetSysClockFreq+0x200>)
 80231ea:	685b      	ldr	r3, [r3, #4]
 80231ec:	0c1b      	lsrs	r3, r3, #16
 80231ee:	f003 0303 	and.w	r3, r3, #3
 80231f2:	3301      	adds	r3, #1
 80231f4:	005b      	lsls	r3, r3, #1
 80231f6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80231f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80231fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80231fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8023200:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8023202:	e002      	b.n	802320a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8023204:	4b05      	ldr	r3, [pc, #20]	; (802321c <HAL_RCC_GetSysClockFreq+0x204>)
 8023206:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8023208:	bf00      	nop
    }
  }
  return sysclockfreq;
 802320a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 802320c:	4618      	mov	r0, r3
 802320e:	3750      	adds	r7, #80	; 0x50
 8023210:	46bd      	mov	sp, r7
 8023212:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8023216:	bf00      	nop
 8023218:	40023800 	.word	0x40023800
 802321c:	00f42400 	.word	0x00f42400
 8023220:	007a1200 	.word	0x007a1200

08023224 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8023224:	b480      	push	{r7}
 8023226:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8023228:	4b03      	ldr	r3, [pc, #12]	; (8023238 <HAL_RCC_GetHCLKFreq+0x14>)
 802322a:	681b      	ldr	r3, [r3, #0]
}
 802322c:	4618      	mov	r0, r3
 802322e:	46bd      	mov	sp, r7
 8023230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023234:	4770      	bx	lr
 8023236:	bf00      	nop
 8023238:	20000004 	.word	0x20000004

0802323c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 802323c:	b580      	push	{r7, lr}
 802323e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8023240:	f7ff fff0 	bl	8023224 <HAL_RCC_GetHCLKFreq>
 8023244:	4602      	mov	r2, r0
 8023246:	4b05      	ldr	r3, [pc, #20]	; (802325c <HAL_RCC_GetPCLK1Freq+0x20>)
 8023248:	689b      	ldr	r3, [r3, #8]
 802324a:	0a9b      	lsrs	r3, r3, #10
 802324c:	f003 0307 	and.w	r3, r3, #7
 8023250:	4903      	ldr	r1, [pc, #12]	; (8023260 <HAL_RCC_GetPCLK1Freq+0x24>)
 8023252:	5ccb      	ldrb	r3, [r1, r3]
 8023254:	fa22 f303 	lsr.w	r3, r2, r3
}
 8023258:	4618      	mov	r0, r3
 802325a:	bd80      	pop	{r7, pc}
 802325c:	40023800 	.word	0x40023800
 8023260:	08028184 	.word	0x08028184

08023264 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8023264:	b580      	push	{r7, lr}
 8023266:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8023268:	f7ff ffdc 	bl	8023224 <HAL_RCC_GetHCLKFreq>
 802326c:	4602      	mov	r2, r0
 802326e:	4b05      	ldr	r3, [pc, #20]	; (8023284 <HAL_RCC_GetPCLK2Freq+0x20>)
 8023270:	689b      	ldr	r3, [r3, #8]
 8023272:	0b5b      	lsrs	r3, r3, #13
 8023274:	f003 0307 	and.w	r3, r3, #7
 8023278:	4903      	ldr	r1, [pc, #12]	; (8023288 <HAL_RCC_GetPCLK2Freq+0x24>)
 802327a:	5ccb      	ldrb	r3, [r1, r3]
 802327c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8023280:	4618      	mov	r0, r3
 8023282:	bd80      	pop	{r7, pc}
 8023284:	40023800 	.word	0x40023800
 8023288:	08028184 	.word	0x08028184

0802328c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 802328c:	b480      	push	{r7}
 802328e:	b083      	sub	sp, #12
 8023290:	af00      	add	r7, sp, #0
 8023292:	6078      	str	r0, [r7, #4]
 8023294:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8023296:	687b      	ldr	r3, [r7, #4]
 8023298:	220f      	movs	r2, #15
 802329a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 802329c:	4b12      	ldr	r3, [pc, #72]	; (80232e8 <HAL_RCC_GetClockConfig+0x5c>)
 802329e:	689b      	ldr	r3, [r3, #8]
 80232a0:	f003 0203 	and.w	r2, r3, #3
 80232a4:	687b      	ldr	r3, [r7, #4]
 80232a6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80232a8:	4b0f      	ldr	r3, [pc, #60]	; (80232e8 <HAL_RCC_GetClockConfig+0x5c>)
 80232aa:	689b      	ldr	r3, [r3, #8]
 80232ac:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80232b0:	687b      	ldr	r3, [r7, #4]
 80232b2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80232b4:	4b0c      	ldr	r3, [pc, #48]	; (80232e8 <HAL_RCC_GetClockConfig+0x5c>)
 80232b6:	689b      	ldr	r3, [r3, #8]
 80232b8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80232bc:	687b      	ldr	r3, [r7, #4]
 80232be:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80232c0:	4b09      	ldr	r3, [pc, #36]	; (80232e8 <HAL_RCC_GetClockConfig+0x5c>)
 80232c2:	689b      	ldr	r3, [r3, #8]
 80232c4:	08db      	lsrs	r3, r3, #3
 80232c6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80232ca:	687b      	ldr	r3, [r7, #4]
 80232cc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80232ce:	4b07      	ldr	r3, [pc, #28]	; (80232ec <HAL_RCC_GetClockConfig+0x60>)
 80232d0:	681b      	ldr	r3, [r3, #0]
 80232d2:	f003 0207 	and.w	r2, r3, #7
 80232d6:	683b      	ldr	r3, [r7, #0]
 80232d8:	601a      	str	r2, [r3, #0]
}
 80232da:	bf00      	nop
 80232dc:	370c      	adds	r7, #12
 80232de:	46bd      	mov	sp, r7
 80232e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80232e4:	4770      	bx	lr
 80232e6:	bf00      	nop
 80232e8:	40023800 	.word	0x40023800
 80232ec:	40023c00 	.word	0x40023c00

080232f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80232f0:	b580      	push	{r7, lr}
 80232f2:	b082      	sub	sp, #8
 80232f4:	af00      	add	r7, sp, #0
 80232f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80232f8:	687b      	ldr	r3, [r7, #4]
 80232fa:	2b00      	cmp	r3, #0
 80232fc:	d101      	bne.n	8023302 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80232fe:	2301      	movs	r3, #1
 8023300:	e041      	b.n	8023386 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8023302:	687b      	ldr	r3, [r7, #4]
 8023304:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8023308:	b2db      	uxtb	r3, r3
 802330a:	2b00      	cmp	r3, #0
 802330c:	d106      	bne.n	802331c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 802330e:	687b      	ldr	r3, [r7, #4]
 8023310:	2200      	movs	r2, #0
 8023312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8023316:	6878      	ldr	r0, [r7, #4]
 8023318:	f000 f839 	bl	802338e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 802331c:	687b      	ldr	r3, [r7, #4]
 802331e:	2202      	movs	r2, #2
 8023320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8023324:	687b      	ldr	r3, [r7, #4]
 8023326:	681a      	ldr	r2, [r3, #0]
 8023328:	687b      	ldr	r3, [r7, #4]
 802332a:	3304      	adds	r3, #4
 802332c:	4619      	mov	r1, r3
 802332e:	4610      	mov	r0, r2
 8023330:	f000 f9ca 	bl	80236c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8023334:	687b      	ldr	r3, [r7, #4]
 8023336:	2201      	movs	r2, #1
 8023338:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 802333c:	687b      	ldr	r3, [r7, #4]
 802333e:	2201      	movs	r2, #1
 8023340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8023344:	687b      	ldr	r3, [r7, #4]
 8023346:	2201      	movs	r2, #1
 8023348:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 802334c:	687b      	ldr	r3, [r7, #4]
 802334e:	2201      	movs	r2, #1
 8023350:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8023354:	687b      	ldr	r3, [r7, #4]
 8023356:	2201      	movs	r2, #1
 8023358:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 802335c:	687b      	ldr	r3, [r7, #4]
 802335e:	2201      	movs	r2, #1
 8023360:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8023364:	687b      	ldr	r3, [r7, #4]
 8023366:	2201      	movs	r2, #1
 8023368:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 802336c:	687b      	ldr	r3, [r7, #4]
 802336e:	2201      	movs	r2, #1
 8023370:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8023374:	687b      	ldr	r3, [r7, #4]
 8023376:	2201      	movs	r2, #1
 8023378:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 802337c:	687b      	ldr	r3, [r7, #4]
 802337e:	2201      	movs	r2, #1
 8023380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8023384:	2300      	movs	r3, #0
}
 8023386:	4618      	mov	r0, r3
 8023388:	3708      	adds	r7, #8
 802338a:	46bd      	mov	sp, r7
 802338c:	bd80      	pop	{r7, pc}

0802338e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 802338e:	b480      	push	{r7}
 8023390:	b083      	sub	sp, #12
 8023392:	af00      	add	r7, sp, #0
 8023394:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8023396:	bf00      	nop
 8023398:	370c      	adds	r7, #12
 802339a:	46bd      	mov	sp, r7
 802339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80233a0:	4770      	bx	lr
	...

080233a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80233a4:	b480      	push	{r7}
 80233a6:	b085      	sub	sp, #20
 80233a8:	af00      	add	r7, sp, #0
 80233aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80233ac:	687b      	ldr	r3, [r7, #4]
 80233ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80233b2:	b2db      	uxtb	r3, r3
 80233b4:	2b01      	cmp	r3, #1
 80233b6:	d001      	beq.n	80233bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80233b8:	2301      	movs	r3, #1
 80233ba:	e044      	b.n	8023446 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80233bc:	687b      	ldr	r3, [r7, #4]
 80233be:	2202      	movs	r2, #2
 80233c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80233c4:	687b      	ldr	r3, [r7, #4]
 80233c6:	681b      	ldr	r3, [r3, #0]
 80233c8:	68da      	ldr	r2, [r3, #12]
 80233ca:	687b      	ldr	r3, [r7, #4]
 80233cc:	681b      	ldr	r3, [r3, #0]
 80233ce:	f042 0201 	orr.w	r2, r2, #1
 80233d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80233d4:	687b      	ldr	r3, [r7, #4]
 80233d6:	681b      	ldr	r3, [r3, #0]
 80233d8:	4a1e      	ldr	r2, [pc, #120]	; (8023454 <HAL_TIM_Base_Start_IT+0xb0>)
 80233da:	4293      	cmp	r3, r2
 80233dc:	d018      	beq.n	8023410 <HAL_TIM_Base_Start_IT+0x6c>
 80233de:	687b      	ldr	r3, [r7, #4]
 80233e0:	681b      	ldr	r3, [r3, #0]
 80233e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80233e6:	d013      	beq.n	8023410 <HAL_TIM_Base_Start_IT+0x6c>
 80233e8:	687b      	ldr	r3, [r7, #4]
 80233ea:	681b      	ldr	r3, [r3, #0]
 80233ec:	4a1a      	ldr	r2, [pc, #104]	; (8023458 <HAL_TIM_Base_Start_IT+0xb4>)
 80233ee:	4293      	cmp	r3, r2
 80233f0:	d00e      	beq.n	8023410 <HAL_TIM_Base_Start_IT+0x6c>
 80233f2:	687b      	ldr	r3, [r7, #4]
 80233f4:	681b      	ldr	r3, [r3, #0]
 80233f6:	4a19      	ldr	r2, [pc, #100]	; (802345c <HAL_TIM_Base_Start_IT+0xb8>)
 80233f8:	4293      	cmp	r3, r2
 80233fa:	d009      	beq.n	8023410 <HAL_TIM_Base_Start_IT+0x6c>
 80233fc:	687b      	ldr	r3, [r7, #4]
 80233fe:	681b      	ldr	r3, [r3, #0]
 8023400:	4a17      	ldr	r2, [pc, #92]	; (8023460 <HAL_TIM_Base_Start_IT+0xbc>)
 8023402:	4293      	cmp	r3, r2
 8023404:	d004      	beq.n	8023410 <HAL_TIM_Base_Start_IT+0x6c>
 8023406:	687b      	ldr	r3, [r7, #4]
 8023408:	681b      	ldr	r3, [r3, #0]
 802340a:	4a16      	ldr	r2, [pc, #88]	; (8023464 <HAL_TIM_Base_Start_IT+0xc0>)
 802340c:	4293      	cmp	r3, r2
 802340e:	d111      	bne.n	8023434 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8023410:	687b      	ldr	r3, [r7, #4]
 8023412:	681b      	ldr	r3, [r3, #0]
 8023414:	689b      	ldr	r3, [r3, #8]
 8023416:	f003 0307 	and.w	r3, r3, #7
 802341a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 802341c:	68fb      	ldr	r3, [r7, #12]
 802341e:	2b06      	cmp	r3, #6
 8023420:	d010      	beq.n	8023444 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8023422:	687b      	ldr	r3, [r7, #4]
 8023424:	681b      	ldr	r3, [r3, #0]
 8023426:	681a      	ldr	r2, [r3, #0]
 8023428:	687b      	ldr	r3, [r7, #4]
 802342a:	681b      	ldr	r3, [r3, #0]
 802342c:	f042 0201 	orr.w	r2, r2, #1
 8023430:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8023432:	e007      	b.n	8023444 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8023434:	687b      	ldr	r3, [r7, #4]
 8023436:	681b      	ldr	r3, [r3, #0]
 8023438:	681a      	ldr	r2, [r3, #0]
 802343a:	687b      	ldr	r3, [r7, #4]
 802343c:	681b      	ldr	r3, [r3, #0]
 802343e:	f042 0201 	orr.w	r2, r2, #1
 8023442:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8023444:	2300      	movs	r3, #0
}
 8023446:	4618      	mov	r0, r3
 8023448:	3714      	adds	r7, #20
 802344a:	46bd      	mov	sp, r7
 802344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023450:	4770      	bx	lr
 8023452:	bf00      	nop
 8023454:	40010000 	.word	0x40010000
 8023458:	40000400 	.word	0x40000400
 802345c:	40000800 	.word	0x40000800
 8023460:	40000c00 	.word	0x40000c00
 8023464:	40014000 	.word	0x40014000

08023468 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8023468:	b580      	push	{r7, lr}
 802346a:	b082      	sub	sp, #8
 802346c:	af00      	add	r7, sp, #0
 802346e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8023470:	687b      	ldr	r3, [r7, #4]
 8023472:	681b      	ldr	r3, [r3, #0]
 8023474:	691b      	ldr	r3, [r3, #16]
 8023476:	f003 0302 	and.w	r3, r3, #2
 802347a:	2b02      	cmp	r3, #2
 802347c:	d122      	bne.n	80234c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 802347e:	687b      	ldr	r3, [r7, #4]
 8023480:	681b      	ldr	r3, [r3, #0]
 8023482:	68db      	ldr	r3, [r3, #12]
 8023484:	f003 0302 	and.w	r3, r3, #2
 8023488:	2b02      	cmp	r3, #2
 802348a:	d11b      	bne.n	80234c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 802348c:	687b      	ldr	r3, [r7, #4]
 802348e:	681b      	ldr	r3, [r3, #0]
 8023490:	f06f 0202 	mvn.w	r2, #2
 8023494:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8023496:	687b      	ldr	r3, [r7, #4]
 8023498:	2201      	movs	r2, #1
 802349a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 802349c:	687b      	ldr	r3, [r7, #4]
 802349e:	681b      	ldr	r3, [r3, #0]
 80234a0:	699b      	ldr	r3, [r3, #24]
 80234a2:	f003 0303 	and.w	r3, r3, #3
 80234a6:	2b00      	cmp	r3, #0
 80234a8:	d003      	beq.n	80234b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80234aa:	6878      	ldr	r0, [r7, #4]
 80234ac:	f000 f8ee 	bl	802368c <HAL_TIM_IC_CaptureCallback>
 80234b0:	e005      	b.n	80234be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80234b2:	6878      	ldr	r0, [r7, #4]
 80234b4:	f000 f8e0 	bl	8023678 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80234b8:	6878      	ldr	r0, [r7, #4]
 80234ba:	f000 f8f1 	bl	80236a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80234be:	687b      	ldr	r3, [r7, #4]
 80234c0:	2200      	movs	r2, #0
 80234c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80234c4:	687b      	ldr	r3, [r7, #4]
 80234c6:	681b      	ldr	r3, [r3, #0]
 80234c8:	691b      	ldr	r3, [r3, #16]
 80234ca:	f003 0304 	and.w	r3, r3, #4
 80234ce:	2b04      	cmp	r3, #4
 80234d0:	d122      	bne.n	8023518 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80234d2:	687b      	ldr	r3, [r7, #4]
 80234d4:	681b      	ldr	r3, [r3, #0]
 80234d6:	68db      	ldr	r3, [r3, #12]
 80234d8:	f003 0304 	and.w	r3, r3, #4
 80234dc:	2b04      	cmp	r3, #4
 80234de:	d11b      	bne.n	8023518 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80234e0:	687b      	ldr	r3, [r7, #4]
 80234e2:	681b      	ldr	r3, [r3, #0]
 80234e4:	f06f 0204 	mvn.w	r2, #4
 80234e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80234ea:	687b      	ldr	r3, [r7, #4]
 80234ec:	2202      	movs	r2, #2
 80234ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80234f0:	687b      	ldr	r3, [r7, #4]
 80234f2:	681b      	ldr	r3, [r3, #0]
 80234f4:	699b      	ldr	r3, [r3, #24]
 80234f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80234fa:	2b00      	cmp	r3, #0
 80234fc:	d003      	beq.n	8023506 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80234fe:	6878      	ldr	r0, [r7, #4]
 8023500:	f000 f8c4 	bl	802368c <HAL_TIM_IC_CaptureCallback>
 8023504:	e005      	b.n	8023512 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8023506:	6878      	ldr	r0, [r7, #4]
 8023508:	f000 f8b6 	bl	8023678 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 802350c:	6878      	ldr	r0, [r7, #4]
 802350e:	f000 f8c7 	bl	80236a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8023512:	687b      	ldr	r3, [r7, #4]
 8023514:	2200      	movs	r2, #0
 8023516:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8023518:	687b      	ldr	r3, [r7, #4]
 802351a:	681b      	ldr	r3, [r3, #0]
 802351c:	691b      	ldr	r3, [r3, #16]
 802351e:	f003 0308 	and.w	r3, r3, #8
 8023522:	2b08      	cmp	r3, #8
 8023524:	d122      	bne.n	802356c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8023526:	687b      	ldr	r3, [r7, #4]
 8023528:	681b      	ldr	r3, [r3, #0]
 802352a:	68db      	ldr	r3, [r3, #12]
 802352c:	f003 0308 	and.w	r3, r3, #8
 8023530:	2b08      	cmp	r3, #8
 8023532:	d11b      	bne.n	802356c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8023534:	687b      	ldr	r3, [r7, #4]
 8023536:	681b      	ldr	r3, [r3, #0]
 8023538:	f06f 0208 	mvn.w	r2, #8
 802353c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 802353e:	687b      	ldr	r3, [r7, #4]
 8023540:	2204      	movs	r2, #4
 8023542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8023544:	687b      	ldr	r3, [r7, #4]
 8023546:	681b      	ldr	r3, [r3, #0]
 8023548:	69db      	ldr	r3, [r3, #28]
 802354a:	f003 0303 	and.w	r3, r3, #3
 802354e:	2b00      	cmp	r3, #0
 8023550:	d003      	beq.n	802355a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8023552:	6878      	ldr	r0, [r7, #4]
 8023554:	f000 f89a 	bl	802368c <HAL_TIM_IC_CaptureCallback>
 8023558:	e005      	b.n	8023566 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 802355a:	6878      	ldr	r0, [r7, #4]
 802355c:	f000 f88c 	bl	8023678 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8023560:	6878      	ldr	r0, [r7, #4]
 8023562:	f000 f89d 	bl	80236a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8023566:	687b      	ldr	r3, [r7, #4]
 8023568:	2200      	movs	r2, #0
 802356a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 802356c:	687b      	ldr	r3, [r7, #4]
 802356e:	681b      	ldr	r3, [r3, #0]
 8023570:	691b      	ldr	r3, [r3, #16]
 8023572:	f003 0310 	and.w	r3, r3, #16
 8023576:	2b10      	cmp	r3, #16
 8023578:	d122      	bne.n	80235c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 802357a:	687b      	ldr	r3, [r7, #4]
 802357c:	681b      	ldr	r3, [r3, #0]
 802357e:	68db      	ldr	r3, [r3, #12]
 8023580:	f003 0310 	and.w	r3, r3, #16
 8023584:	2b10      	cmp	r3, #16
 8023586:	d11b      	bne.n	80235c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8023588:	687b      	ldr	r3, [r7, #4]
 802358a:	681b      	ldr	r3, [r3, #0]
 802358c:	f06f 0210 	mvn.w	r2, #16
 8023590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8023592:	687b      	ldr	r3, [r7, #4]
 8023594:	2208      	movs	r2, #8
 8023596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8023598:	687b      	ldr	r3, [r7, #4]
 802359a:	681b      	ldr	r3, [r3, #0]
 802359c:	69db      	ldr	r3, [r3, #28]
 802359e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80235a2:	2b00      	cmp	r3, #0
 80235a4:	d003      	beq.n	80235ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80235a6:	6878      	ldr	r0, [r7, #4]
 80235a8:	f000 f870 	bl	802368c <HAL_TIM_IC_CaptureCallback>
 80235ac:	e005      	b.n	80235ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80235ae:	6878      	ldr	r0, [r7, #4]
 80235b0:	f000 f862 	bl	8023678 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80235b4:	6878      	ldr	r0, [r7, #4]
 80235b6:	f000 f873 	bl	80236a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80235ba:	687b      	ldr	r3, [r7, #4]
 80235bc:	2200      	movs	r2, #0
 80235be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80235c0:	687b      	ldr	r3, [r7, #4]
 80235c2:	681b      	ldr	r3, [r3, #0]
 80235c4:	691b      	ldr	r3, [r3, #16]
 80235c6:	f003 0301 	and.w	r3, r3, #1
 80235ca:	2b01      	cmp	r3, #1
 80235cc:	d10e      	bne.n	80235ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80235ce:	687b      	ldr	r3, [r7, #4]
 80235d0:	681b      	ldr	r3, [r3, #0]
 80235d2:	68db      	ldr	r3, [r3, #12]
 80235d4:	f003 0301 	and.w	r3, r3, #1
 80235d8:	2b01      	cmp	r3, #1
 80235da:	d107      	bne.n	80235ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80235dc:	687b      	ldr	r3, [r7, #4]
 80235de:	681b      	ldr	r3, [r3, #0]
 80235e0:	f06f 0201 	mvn.w	r2, #1
 80235e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80235e6:	6878      	ldr	r0, [r7, #4]
 80235e8:	f7fe fa42 	bl	8021a70 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80235ec:	687b      	ldr	r3, [r7, #4]
 80235ee:	681b      	ldr	r3, [r3, #0]
 80235f0:	691b      	ldr	r3, [r3, #16]
 80235f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80235f6:	2b80      	cmp	r3, #128	; 0x80
 80235f8:	d10e      	bne.n	8023618 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80235fa:	687b      	ldr	r3, [r7, #4]
 80235fc:	681b      	ldr	r3, [r3, #0]
 80235fe:	68db      	ldr	r3, [r3, #12]
 8023600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8023604:	2b80      	cmp	r3, #128	; 0x80
 8023606:	d107      	bne.n	8023618 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8023608:	687b      	ldr	r3, [r7, #4]
 802360a:	681b      	ldr	r3, [r3, #0]
 802360c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8023610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8023612:	6878      	ldr	r0, [r7, #4]
 8023614:	f000 f8e2 	bl	80237dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8023618:	687b      	ldr	r3, [r7, #4]
 802361a:	681b      	ldr	r3, [r3, #0]
 802361c:	691b      	ldr	r3, [r3, #16]
 802361e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8023622:	2b40      	cmp	r3, #64	; 0x40
 8023624:	d10e      	bne.n	8023644 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8023626:	687b      	ldr	r3, [r7, #4]
 8023628:	681b      	ldr	r3, [r3, #0]
 802362a:	68db      	ldr	r3, [r3, #12]
 802362c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8023630:	2b40      	cmp	r3, #64	; 0x40
 8023632:	d107      	bne.n	8023644 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8023634:	687b      	ldr	r3, [r7, #4]
 8023636:	681b      	ldr	r3, [r3, #0]
 8023638:	f06f 0240 	mvn.w	r2, #64	; 0x40
 802363c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 802363e:	6878      	ldr	r0, [r7, #4]
 8023640:	f000 f838 	bl	80236b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8023644:	687b      	ldr	r3, [r7, #4]
 8023646:	681b      	ldr	r3, [r3, #0]
 8023648:	691b      	ldr	r3, [r3, #16]
 802364a:	f003 0320 	and.w	r3, r3, #32
 802364e:	2b20      	cmp	r3, #32
 8023650:	d10e      	bne.n	8023670 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8023652:	687b      	ldr	r3, [r7, #4]
 8023654:	681b      	ldr	r3, [r3, #0]
 8023656:	68db      	ldr	r3, [r3, #12]
 8023658:	f003 0320 	and.w	r3, r3, #32
 802365c:	2b20      	cmp	r3, #32
 802365e:	d107      	bne.n	8023670 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8023660:	687b      	ldr	r3, [r7, #4]
 8023662:	681b      	ldr	r3, [r3, #0]
 8023664:	f06f 0220 	mvn.w	r2, #32
 8023668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 802366a:	6878      	ldr	r0, [r7, #4]
 802366c:	f000 f8ac 	bl	80237c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8023670:	bf00      	nop
 8023672:	3708      	adds	r7, #8
 8023674:	46bd      	mov	sp, r7
 8023676:	bd80      	pop	{r7, pc}

08023678 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8023678:	b480      	push	{r7}
 802367a:	b083      	sub	sp, #12
 802367c:	af00      	add	r7, sp, #0
 802367e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8023680:	bf00      	nop
 8023682:	370c      	adds	r7, #12
 8023684:	46bd      	mov	sp, r7
 8023686:	f85d 7b04 	ldr.w	r7, [sp], #4
 802368a:	4770      	bx	lr

0802368c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 802368c:	b480      	push	{r7}
 802368e:	b083      	sub	sp, #12
 8023690:	af00      	add	r7, sp, #0
 8023692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8023694:	bf00      	nop
 8023696:	370c      	adds	r7, #12
 8023698:	46bd      	mov	sp, r7
 802369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802369e:	4770      	bx	lr

080236a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80236a0:	b480      	push	{r7}
 80236a2:	b083      	sub	sp, #12
 80236a4:	af00      	add	r7, sp, #0
 80236a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80236a8:	bf00      	nop
 80236aa:	370c      	adds	r7, #12
 80236ac:	46bd      	mov	sp, r7
 80236ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80236b2:	4770      	bx	lr

080236b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80236b4:	b480      	push	{r7}
 80236b6:	b083      	sub	sp, #12
 80236b8:	af00      	add	r7, sp, #0
 80236ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80236bc:	bf00      	nop
 80236be:	370c      	adds	r7, #12
 80236c0:	46bd      	mov	sp, r7
 80236c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80236c6:	4770      	bx	lr

080236c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80236c8:	b480      	push	{r7}
 80236ca:	b085      	sub	sp, #20
 80236cc:	af00      	add	r7, sp, #0
 80236ce:	6078      	str	r0, [r7, #4]
 80236d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80236d2:	687b      	ldr	r3, [r7, #4]
 80236d4:	681b      	ldr	r3, [r3, #0]
 80236d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80236d8:	687b      	ldr	r3, [r7, #4]
 80236da:	4a34      	ldr	r2, [pc, #208]	; (80237ac <TIM_Base_SetConfig+0xe4>)
 80236dc:	4293      	cmp	r3, r2
 80236de:	d00f      	beq.n	8023700 <TIM_Base_SetConfig+0x38>
 80236e0:	687b      	ldr	r3, [r7, #4]
 80236e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80236e6:	d00b      	beq.n	8023700 <TIM_Base_SetConfig+0x38>
 80236e8:	687b      	ldr	r3, [r7, #4]
 80236ea:	4a31      	ldr	r2, [pc, #196]	; (80237b0 <TIM_Base_SetConfig+0xe8>)
 80236ec:	4293      	cmp	r3, r2
 80236ee:	d007      	beq.n	8023700 <TIM_Base_SetConfig+0x38>
 80236f0:	687b      	ldr	r3, [r7, #4]
 80236f2:	4a30      	ldr	r2, [pc, #192]	; (80237b4 <TIM_Base_SetConfig+0xec>)
 80236f4:	4293      	cmp	r3, r2
 80236f6:	d003      	beq.n	8023700 <TIM_Base_SetConfig+0x38>
 80236f8:	687b      	ldr	r3, [r7, #4]
 80236fa:	4a2f      	ldr	r2, [pc, #188]	; (80237b8 <TIM_Base_SetConfig+0xf0>)
 80236fc:	4293      	cmp	r3, r2
 80236fe:	d108      	bne.n	8023712 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8023700:	68fb      	ldr	r3, [r7, #12]
 8023702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8023706:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8023708:	683b      	ldr	r3, [r7, #0]
 802370a:	685b      	ldr	r3, [r3, #4]
 802370c:	68fa      	ldr	r2, [r7, #12]
 802370e:	4313      	orrs	r3, r2
 8023710:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8023712:	687b      	ldr	r3, [r7, #4]
 8023714:	4a25      	ldr	r2, [pc, #148]	; (80237ac <TIM_Base_SetConfig+0xe4>)
 8023716:	4293      	cmp	r3, r2
 8023718:	d01b      	beq.n	8023752 <TIM_Base_SetConfig+0x8a>
 802371a:	687b      	ldr	r3, [r7, #4]
 802371c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8023720:	d017      	beq.n	8023752 <TIM_Base_SetConfig+0x8a>
 8023722:	687b      	ldr	r3, [r7, #4]
 8023724:	4a22      	ldr	r2, [pc, #136]	; (80237b0 <TIM_Base_SetConfig+0xe8>)
 8023726:	4293      	cmp	r3, r2
 8023728:	d013      	beq.n	8023752 <TIM_Base_SetConfig+0x8a>
 802372a:	687b      	ldr	r3, [r7, #4]
 802372c:	4a21      	ldr	r2, [pc, #132]	; (80237b4 <TIM_Base_SetConfig+0xec>)
 802372e:	4293      	cmp	r3, r2
 8023730:	d00f      	beq.n	8023752 <TIM_Base_SetConfig+0x8a>
 8023732:	687b      	ldr	r3, [r7, #4]
 8023734:	4a20      	ldr	r2, [pc, #128]	; (80237b8 <TIM_Base_SetConfig+0xf0>)
 8023736:	4293      	cmp	r3, r2
 8023738:	d00b      	beq.n	8023752 <TIM_Base_SetConfig+0x8a>
 802373a:	687b      	ldr	r3, [r7, #4]
 802373c:	4a1f      	ldr	r2, [pc, #124]	; (80237bc <TIM_Base_SetConfig+0xf4>)
 802373e:	4293      	cmp	r3, r2
 8023740:	d007      	beq.n	8023752 <TIM_Base_SetConfig+0x8a>
 8023742:	687b      	ldr	r3, [r7, #4]
 8023744:	4a1e      	ldr	r2, [pc, #120]	; (80237c0 <TIM_Base_SetConfig+0xf8>)
 8023746:	4293      	cmp	r3, r2
 8023748:	d003      	beq.n	8023752 <TIM_Base_SetConfig+0x8a>
 802374a:	687b      	ldr	r3, [r7, #4]
 802374c:	4a1d      	ldr	r2, [pc, #116]	; (80237c4 <TIM_Base_SetConfig+0xfc>)
 802374e:	4293      	cmp	r3, r2
 8023750:	d108      	bne.n	8023764 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8023752:	68fb      	ldr	r3, [r7, #12]
 8023754:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8023758:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 802375a:	683b      	ldr	r3, [r7, #0]
 802375c:	68db      	ldr	r3, [r3, #12]
 802375e:	68fa      	ldr	r2, [r7, #12]
 8023760:	4313      	orrs	r3, r2
 8023762:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8023764:	68fb      	ldr	r3, [r7, #12]
 8023766:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 802376a:	683b      	ldr	r3, [r7, #0]
 802376c:	695b      	ldr	r3, [r3, #20]
 802376e:	4313      	orrs	r3, r2
 8023770:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8023772:	687b      	ldr	r3, [r7, #4]
 8023774:	68fa      	ldr	r2, [r7, #12]
 8023776:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8023778:	683b      	ldr	r3, [r7, #0]
 802377a:	689a      	ldr	r2, [r3, #8]
 802377c:	687b      	ldr	r3, [r7, #4]
 802377e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8023780:	683b      	ldr	r3, [r7, #0]
 8023782:	681a      	ldr	r2, [r3, #0]
 8023784:	687b      	ldr	r3, [r7, #4]
 8023786:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8023788:	687b      	ldr	r3, [r7, #4]
 802378a:	4a08      	ldr	r2, [pc, #32]	; (80237ac <TIM_Base_SetConfig+0xe4>)
 802378c:	4293      	cmp	r3, r2
 802378e:	d103      	bne.n	8023798 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8023790:	683b      	ldr	r3, [r7, #0]
 8023792:	691a      	ldr	r2, [r3, #16]
 8023794:	687b      	ldr	r3, [r7, #4]
 8023796:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8023798:	687b      	ldr	r3, [r7, #4]
 802379a:	2201      	movs	r2, #1
 802379c:	615a      	str	r2, [r3, #20]
}
 802379e:	bf00      	nop
 80237a0:	3714      	adds	r7, #20
 80237a2:	46bd      	mov	sp, r7
 80237a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80237a8:	4770      	bx	lr
 80237aa:	bf00      	nop
 80237ac:	40010000 	.word	0x40010000
 80237b0:	40000400 	.word	0x40000400
 80237b4:	40000800 	.word	0x40000800
 80237b8:	40000c00 	.word	0x40000c00
 80237bc:	40014000 	.word	0x40014000
 80237c0:	40014400 	.word	0x40014400
 80237c4:	40014800 	.word	0x40014800

080237c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80237c8:	b480      	push	{r7}
 80237ca:	b083      	sub	sp, #12
 80237cc:	af00      	add	r7, sp, #0
 80237ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80237d0:	bf00      	nop
 80237d2:	370c      	adds	r7, #12
 80237d4:	46bd      	mov	sp, r7
 80237d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80237da:	4770      	bx	lr

080237dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80237dc:	b480      	push	{r7}
 80237de:	b083      	sub	sp, #12
 80237e0:	af00      	add	r7, sp, #0
 80237e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80237e4:	bf00      	nop
 80237e6:	370c      	adds	r7, #12
 80237e8:	46bd      	mov	sp, r7
 80237ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80237ee:	4770      	bx	lr

080237f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80237f0:	b580      	push	{r7, lr}
 80237f2:	b082      	sub	sp, #8
 80237f4:	af00      	add	r7, sp, #0
 80237f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80237f8:	687b      	ldr	r3, [r7, #4]
 80237fa:	2b00      	cmp	r3, #0
 80237fc:	d101      	bne.n	8023802 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80237fe:	2301      	movs	r3, #1
 8023800:	e03f      	b.n	8023882 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8023802:	687b      	ldr	r3, [r7, #4]
 8023804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8023808:	b2db      	uxtb	r3, r3
 802380a:	2b00      	cmp	r3, #0
 802380c:	d106      	bne.n	802381c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 802380e:	687b      	ldr	r3, [r7, #4]
 8023810:	2200      	movs	r2, #0
 8023812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8023816:	6878      	ldr	r0, [r7, #4]
 8023818:	f7fe f982 	bl	8021b20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 802381c:	687b      	ldr	r3, [r7, #4]
 802381e:	2224      	movs	r2, #36	; 0x24
 8023820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8023824:	687b      	ldr	r3, [r7, #4]
 8023826:	681b      	ldr	r3, [r3, #0]
 8023828:	68da      	ldr	r2, [r3, #12]
 802382a:	687b      	ldr	r3, [r7, #4]
 802382c:	681b      	ldr	r3, [r3, #0]
 802382e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8023832:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8023834:	6878      	ldr	r0, [r7, #4]
 8023836:	f000 fddf 	bl	80243f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 802383a:	687b      	ldr	r3, [r7, #4]
 802383c:	681b      	ldr	r3, [r3, #0]
 802383e:	691a      	ldr	r2, [r3, #16]
 8023840:	687b      	ldr	r3, [r7, #4]
 8023842:	681b      	ldr	r3, [r3, #0]
 8023844:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8023848:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 802384a:	687b      	ldr	r3, [r7, #4]
 802384c:	681b      	ldr	r3, [r3, #0]
 802384e:	695a      	ldr	r2, [r3, #20]
 8023850:	687b      	ldr	r3, [r7, #4]
 8023852:	681b      	ldr	r3, [r3, #0]
 8023854:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8023858:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 802385a:	687b      	ldr	r3, [r7, #4]
 802385c:	681b      	ldr	r3, [r3, #0]
 802385e:	68da      	ldr	r2, [r3, #12]
 8023860:	687b      	ldr	r3, [r7, #4]
 8023862:	681b      	ldr	r3, [r3, #0]
 8023864:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8023868:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 802386a:	687b      	ldr	r3, [r7, #4]
 802386c:	2200      	movs	r2, #0
 802386e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8023870:	687b      	ldr	r3, [r7, #4]
 8023872:	2220      	movs	r2, #32
 8023874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8023878:	687b      	ldr	r3, [r7, #4]
 802387a:	2220      	movs	r2, #32
 802387c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8023880:	2300      	movs	r3, #0
}
 8023882:	4618      	mov	r0, r3
 8023884:	3708      	adds	r7, #8
 8023886:	46bd      	mov	sp, r7
 8023888:	bd80      	pop	{r7, pc}

0802388a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 802388a:	b580      	push	{r7, lr}
 802388c:	b08a      	sub	sp, #40	; 0x28
 802388e:	af02      	add	r7, sp, #8
 8023890:	60f8      	str	r0, [r7, #12]
 8023892:	60b9      	str	r1, [r7, #8]
 8023894:	603b      	str	r3, [r7, #0]
 8023896:	4613      	mov	r3, r2
 8023898:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 802389a:	2300      	movs	r3, #0
 802389c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 802389e:	68fb      	ldr	r3, [r7, #12]
 80238a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80238a4:	b2db      	uxtb	r3, r3
 80238a6:	2b20      	cmp	r3, #32
 80238a8:	d17c      	bne.n	80239a4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80238aa:	68bb      	ldr	r3, [r7, #8]
 80238ac:	2b00      	cmp	r3, #0
 80238ae:	d002      	beq.n	80238b6 <HAL_UART_Transmit+0x2c>
 80238b0:	88fb      	ldrh	r3, [r7, #6]
 80238b2:	2b00      	cmp	r3, #0
 80238b4:	d101      	bne.n	80238ba <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80238b6:	2301      	movs	r3, #1
 80238b8:	e075      	b.n	80239a6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80238ba:	68fb      	ldr	r3, [r7, #12]
 80238bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80238c0:	2b01      	cmp	r3, #1
 80238c2:	d101      	bne.n	80238c8 <HAL_UART_Transmit+0x3e>
 80238c4:	2302      	movs	r3, #2
 80238c6:	e06e      	b.n	80239a6 <HAL_UART_Transmit+0x11c>
 80238c8:	68fb      	ldr	r3, [r7, #12]
 80238ca:	2201      	movs	r2, #1
 80238cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80238d0:	68fb      	ldr	r3, [r7, #12]
 80238d2:	2200      	movs	r2, #0
 80238d4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80238d6:	68fb      	ldr	r3, [r7, #12]
 80238d8:	2221      	movs	r2, #33	; 0x21
 80238da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80238de:	f7fe f9cf 	bl	8021c80 <HAL_GetTick>
 80238e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80238e4:	68fb      	ldr	r3, [r7, #12]
 80238e6:	88fa      	ldrh	r2, [r7, #6]
 80238e8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80238ea:	68fb      	ldr	r3, [r7, #12]
 80238ec:	88fa      	ldrh	r2, [r7, #6]
 80238ee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80238f0:	68fb      	ldr	r3, [r7, #12]
 80238f2:	689b      	ldr	r3, [r3, #8]
 80238f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80238f8:	d108      	bne.n	802390c <HAL_UART_Transmit+0x82>
 80238fa:	68fb      	ldr	r3, [r7, #12]
 80238fc:	691b      	ldr	r3, [r3, #16]
 80238fe:	2b00      	cmp	r3, #0
 8023900:	d104      	bne.n	802390c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8023902:	2300      	movs	r3, #0
 8023904:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8023906:	68bb      	ldr	r3, [r7, #8]
 8023908:	61bb      	str	r3, [r7, #24]
 802390a:	e003      	b.n	8023914 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 802390c:	68bb      	ldr	r3, [r7, #8]
 802390e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8023910:	2300      	movs	r3, #0
 8023912:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8023914:	68fb      	ldr	r3, [r7, #12]
 8023916:	2200      	movs	r2, #0
 8023918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 802391c:	e02a      	b.n	8023974 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 802391e:	683b      	ldr	r3, [r7, #0]
 8023920:	9300      	str	r3, [sp, #0]
 8023922:	697b      	ldr	r3, [r7, #20]
 8023924:	2200      	movs	r2, #0
 8023926:	2180      	movs	r1, #128	; 0x80
 8023928:	68f8      	ldr	r0, [r7, #12]
 802392a:	f000 fb1f 	bl	8023f6c <UART_WaitOnFlagUntilTimeout>
 802392e:	4603      	mov	r3, r0
 8023930:	2b00      	cmp	r3, #0
 8023932:	d001      	beq.n	8023938 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8023934:	2303      	movs	r3, #3
 8023936:	e036      	b.n	80239a6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8023938:	69fb      	ldr	r3, [r7, #28]
 802393a:	2b00      	cmp	r3, #0
 802393c:	d10b      	bne.n	8023956 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 802393e:	69bb      	ldr	r3, [r7, #24]
 8023940:	881b      	ldrh	r3, [r3, #0]
 8023942:	461a      	mov	r2, r3
 8023944:	68fb      	ldr	r3, [r7, #12]
 8023946:	681b      	ldr	r3, [r3, #0]
 8023948:	f3c2 0208 	ubfx	r2, r2, #0, #9
 802394c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 802394e:	69bb      	ldr	r3, [r7, #24]
 8023950:	3302      	adds	r3, #2
 8023952:	61bb      	str	r3, [r7, #24]
 8023954:	e007      	b.n	8023966 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8023956:	69fb      	ldr	r3, [r7, #28]
 8023958:	781a      	ldrb	r2, [r3, #0]
 802395a:	68fb      	ldr	r3, [r7, #12]
 802395c:	681b      	ldr	r3, [r3, #0]
 802395e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8023960:	69fb      	ldr	r3, [r7, #28]
 8023962:	3301      	adds	r3, #1
 8023964:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8023966:	68fb      	ldr	r3, [r7, #12]
 8023968:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 802396a:	b29b      	uxth	r3, r3
 802396c:	3b01      	subs	r3, #1
 802396e:	b29a      	uxth	r2, r3
 8023970:	68fb      	ldr	r3, [r7, #12]
 8023972:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8023974:	68fb      	ldr	r3, [r7, #12]
 8023976:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8023978:	b29b      	uxth	r3, r3
 802397a:	2b00      	cmp	r3, #0
 802397c:	d1cf      	bne.n	802391e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 802397e:	683b      	ldr	r3, [r7, #0]
 8023980:	9300      	str	r3, [sp, #0]
 8023982:	697b      	ldr	r3, [r7, #20]
 8023984:	2200      	movs	r2, #0
 8023986:	2140      	movs	r1, #64	; 0x40
 8023988:	68f8      	ldr	r0, [r7, #12]
 802398a:	f000 faef 	bl	8023f6c <UART_WaitOnFlagUntilTimeout>
 802398e:	4603      	mov	r3, r0
 8023990:	2b00      	cmp	r3, #0
 8023992:	d001      	beq.n	8023998 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8023994:	2303      	movs	r3, #3
 8023996:	e006      	b.n	80239a6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8023998:	68fb      	ldr	r3, [r7, #12]
 802399a:	2220      	movs	r2, #32
 802399c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80239a0:	2300      	movs	r3, #0
 80239a2:	e000      	b.n	80239a6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80239a4:	2302      	movs	r3, #2
  }
}
 80239a6:	4618      	mov	r0, r3
 80239a8:	3720      	adds	r7, #32
 80239aa:	46bd      	mov	sp, r7
 80239ac:	bd80      	pop	{r7, pc}

080239ae <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80239ae:	b580      	push	{r7, lr}
 80239b0:	b084      	sub	sp, #16
 80239b2:	af00      	add	r7, sp, #0
 80239b4:	60f8      	str	r0, [r7, #12]
 80239b6:	60b9      	str	r1, [r7, #8]
 80239b8:	4613      	mov	r3, r2
 80239ba:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80239bc:	68fb      	ldr	r3, [r7, #12]
 80239be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80239c2:	b2db      	uxtb	r3, r3
 80239c4:	2b20      	cmp	r3, #32
 80239c6:	d11d      	bne.n	8023a04 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80239c8:	68bb      	ldr	r3, [r7, #8]
 80239ca:	2b00      	cmp	r3, #0
 80239cc:	d002      	beq.n	80239d4 <HAL_UART_Receive_IT+0x26>
 80239ce:	88fb      	ldrh	r3, [r7, #6]
 80239d0:	2b00      	cmp	r3, #0
 80239d2:	d101      	bne.n	80239d8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80239d4:	2301      	movs	r3, #1
 80239d6:	e016      	b.n	8023a06 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80239d8:	68fb      	ldr	r3, [r7, #12]
 80239da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80239de:	2b01      	cmp	r3, #1
 80239e0:	d101      	bne.n	80239e6 <HAL_UART_Receive_IT+0x38>
 80239e2:	2302      	movs	r3, #2
 80239e4:	e00f      	b.n	8023a06 <HAL_UART_Receive_IT+0x58>
 80239e6:	68fb      	ldr	r3, [r7, #12]
 80239e8:	2201      	movs	r2, #1
 80239ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80239ee:	68fb      	ldr	r3, [r7, #12]
 80239f0:	2200      	movs	r2, #0
 80239f2:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80239f4:	88fb      	ldrh	r3, [r7, #6]
 80239f6:	461a      	mov	r2, r3
 80239f8:	68b9      	ldr	r1, [r7, #8]
 80239fa:	68f8      	ldr	r0, [r7, #12]
 80239fc:	f000 fb24 	bl	8024048 <UART_Start_Receive_IT>
 8023a00:	4603      	mov	r3, r0
 8023a02:	e000      	b.n	8023a06 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8023a04:	2302      	movs	r3, #2
  }
}
 8023a06:	4618      	mov	r0, r3
 8023a08:	3710      	adds	r7, #16
 8023a0a:	46bd      	mov	sp, r7
 8023a0c:	bd80      	pop	{r7, pc}
	...

08023a10 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8023a10:	b580      	push	{r7, lr}
 8023a12:	b0ba      	sub	sp, #232	; 0xe8
 8023a14:	af00      	add	r7, sp, #0
 8023a16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8023a18:	687b      	ldr	r3, [r7, #4]
 8023a1a:	681b      	ldr	r3, [r3, #0]
 8023a1c:	681b      	ldr	r3, [r3, #0]
 8023a1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8023a22:	687b      	ldr	r3, [r7, #4]
 8023a24:	681b      	ldr	r3, [r3, #0]
 8023a26:	68db      	ldr	r3, [r3, #12]
 8023a28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8023a2c:	687b      	ldr	r3, [r7, #4]
 8023a2e:	681b      	ldr	r3, [r3, #0]
 8023a30:	695b      	ldr	r3, [r3, #20]
 8023a32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8023a36:	2300      	movs	r3, #0
 8023a38:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8023a3c:	2300      	movs	r3, #0
 8023a3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8023a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8023a46:	f003 030f 	and.w	r3, r3, #15
 8023a4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8023a4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8023a52:	2b00      	cmp	r3, #0
 8023a54:	d10f      	bne.n	8023a76 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8023a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8023a5a:	f003 0320 	and.w	r3, r3, #32
 8023a5e:	2b00      	cmp	r3, #0
 8023a60:	d009      	beq.n	8023a76 <HAL_UART_IRQHandler+0x66>
 8023a62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8023a66:	f003 0320 	and.w	r3, r3, #32
 8023a6a:	2b00      	cmp	r3, #0
 8023a6c:	d003      	beq.n	8023a76 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8023a6e:	6878      	ldr	r0, [r7, #4]
 8023a70:	f000 fc07 	bl	8024282 <UART_Receive_IT>
      return;
 8023a74:	e256      	b.n	8023f24 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8023a76:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8023a7a:	2b00      	cmp	r3, #0
 8023a7c:	f000 80de 	beq.w	8023c3c <HAL_UART_IRQHandler+0x22c>
 8023a80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8023a84:	f003 0301 	and.w	r3, r3, #1
 8023a88:	2b00      	cmp	r3, #0
 8023a8a:	d106      	bne.n	8023a9a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8023a8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8023a90:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8023a94:	2b00      	cmp	r3, #0
 8023a96:	f000 80d1 	beq.w	8023c3c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8023a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8023a9e:	f003 0301 	and.w	r3, r3, #1
 8023aa2:	2b00      	cmp	r3, #0
 8023aa4:	d00b      	beq.n	8023abe <HAL_UART_IRQHandler+0xae>
 8023aa6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8023aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8023aae:	2b00      	cmp	r3, #0
 8023ab0:	d005      	beq.n	8023abe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8023ab2:	687b      	ldr	r3, [r7, #4]
 8023ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023ab6:	f043 0201 	orr.w	r2, r3, #1
 8023aba:	687b      	ldr	r3, [r7, #4]
 8023abc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8023abe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8023ac2:	f003 0304 	and.w	r3, r3, #4
 8023ac6:	2b00      	cmp	r3, #0
 8023ac8:	d00b      	beq.n	8023ae2 <HAL_UART_IRQHandler+0xd2>
 8023aca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8023ace:	f003 0301 	and.w	r3, r3, #1
 8023ad2:	2b00      	cmp	r3, #0
 8023ad4:	d005      	beq.n	8023ae2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8023ad6:	687b      	ldr	r3, [r7, #4]
 8023ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023ada:	f043 0202 	orr.w	r2, r3, #2
 8023ade:	687b      	ldr	r3, [r7, #4]
 8023ae0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8023ae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8023ae6:	f003 0302 	and.w	r3, r3, #2
 8023aea:	2b00      	cmp	r3, #0
 8023aec:	d00b      	beq.n	8023b06 <HAL_UART_IRQHandler+0xf6>
 8023aee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8023af2:	f003 0301 	and.w	r3, r3, #1
 8023af6:	2b00      	cmp	r3, #0
 8023af8:	d005      	beq.n	8023b06 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8023afa:	687b      	ldr	r3, [r7, #4]
 8023afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023afe:	f043 0204 	orr.w	r2, r3, #4
 8023b02:	687b      	ldr	r3, [r7, #4]
 8023b04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8023b06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8023b0a:	f003 0308 	and.w	r3, r3, #8
 8023b0e:	2b00      	cmp	r3, #0
 8023b10:	d011      	beq.n	8023b36 <HAL_UART_IRQHandler+0x126>
 8023b12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8023b16:	f003 0320 	and.w	r3, r3, #32
 8023b1a:	2b00      	cmp	r3, #0
 8023b1c:	d105      	bne.n	8023b2a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8023b1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8023b22:	f003 0301 	and.w	r3, r3, #1
 8023b26:	2b00      	cmp	r3, #0
 8023b28:	d005      	beq.n	8023b36 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8023b2a:	687b      	ldr	r3, [r7, #4]
 8023b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023b2e:	f043 0208 	orr.w	r2, r3, #8
 8023b32:	687b      	ldr	r3, [r7, #4]
 8023b34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8023b36:	687b      	ldr	r3, [r7, #4]
 8023b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023b3a:	2b00      	cmp	r3, #0
 8023b3c:	f000 81ed 	beq.w	8023f1a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8023b40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8023b44:	f003 0320 	and.w	r3, r3, #32
 8023b48:	2b00      	cmp	r3, #0
 8023b4a:	d008      	beq.n	8023b5e <HAL_UART_IRQHandler+0x14e>
 8023b4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8023b50:	f003 0320 	and.w	r3, r3, #32
 8023b54:	2b00      	cmp	r3, #0
 8023b56:	d002      	beq.n	8023b5e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8023b58:	6878      	ldr	r0, [r7, #4]
 8023b5a:	f000 fb92 	bl	8024282 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8023b5e:	687b      	ldr	r3, [r7, #4]
 8023b60:	681b      	ldr	r3, [r3, #0]
 8023b62:	695b      	ldr	r3, [r3, #20]
 8023b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8023b68:	2b40      	cmp	r3, #64	; 0x40
 8023b6a:	bf0c      	ite	eq
 8023b6c:	2301      	moveq	r3, #1
 8023b6e:	2300      	movne	r3, #0
 8023b70:	b2db      	uxtb	r3, r3
 8023b72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8023b76:	687b      	ldr	r3, [r7, #4]
 8023b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8023b7a:	f003 0308 	and.w	r3, r3, #8
 8023b7e:	2b00      	cmp	r3, #0
 8023b80:	d103      	bne.n	8023b8a <HAL_UART_IRQHandler+0x17a>
 8023b82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8023b86:	2b00      	cmp	r3, #0
 8023b88:	d04f      	beq.n	8023c2a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8023b8a:	6878      	ldr	r0, [r7, #4]
 8023b8c:	f000 fa9a 	bl	80240c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8023b90:	687b      	ldr	r3, [r7, #4]
 8023b92:	681b      	ldr	r3, [r3, #0]
 8023b94:	695b      	ldr	r3, [r3, #20]
 8023b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8023b9a:	2b40      	cmp	r3, #64	; 0x40
 8023b9c:	d141      	bne.n	8023c22 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8023b9e:	687b      	ldr	r3, [r7, #4]
 8023ba0:	681b      	ldr	r3, [r3, #0]
 8023ba2:	3314      	adds	r3, #20
 8023ba4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8023ba8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8023bac:	e853 3f00 	ldrex	r3, [r3]
 8023bb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8023bb4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8023bb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8023bbc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8023bc0:	687b      	ldr	r3, [r7, #4]
 8023bc2:	681b      	ldr	r3, [r3, #0]
 8023bc4:	3314      	adds	r3, #20
 8023bc6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8023bca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8023bce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8023bd2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8023bd6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8023bda:	e841 2300 	strex	r3, r2, [r1]
 8023bde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8023be2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8023be6:	2b00      	cmp	r3, #0
 8023be8:	d1d9      	bne.n	8023b9e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8023bea:	687b      	ldr	r3, [r7, #4]
 8023bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023bee:	2b00      	cmp	r3, #0
 8023bf0:	d013      	beq.n	8023c1a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8023bf2:	687b      	ldr	r3, [r7, #4]
 8023bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023bf6:	4a7d      	ldr	r2, [pc, #500]	; (8023dec <HAL_UART_IRQHandler+0x3dc>)
 8023bf8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8023bfa:	687b      	ldr	r3, [r7, #4]
 8023bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023bfe:	4618      	mov	r0, r3
 8023c00:	f7fe f9e9 	bl	8021fd6 <HAL_DMA_Abort_IT>
 8023c04:	4603      	mov	r3, r0
 8023c06:	2b00      	cmp	r3, #0
 8023c08:	d016      	beq.n	8023c38 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8023c0a:	687b      	ldr	r3, [r7, #4]
 8023c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023c0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8023c10:	687a      	ldr	r2, [r7, #4]
 8023c12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8023c14:	4610      	mov	r0, r2
 8023c16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8023c18:	e00e      	b.n	8023c38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8023c1a:	6878      	ldr	r0, [r7, #4]
 8023c1c:	f000 f990 	bl	8023f40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8023c20:	e00a      	b.n	8023c38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8023c22:	6878      	ldr	r0, [r7, #4]
 8023c24:	f000 f98c 	bl	8023f40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8023c28:	e006      	b.n	8023c38 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8023c2a:	6878      	ldr	r0, [r7, #4]
 8023c2c:	f000 f988 	bl	8023f40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8023c30:	687b      	ldr	r3, [r7, #4]
 8023c32:	2200      	movs	r2, #0
 8023c34:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8023c36:	e170      	b.n	8023f1a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8023c38:	bf00      	nop
    return;
 8023c3a:	e16e      	b.n	8023f1a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8023c3c:	687b      	ldr	r3, [r7, #4]
 8023c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023c40:	2b01      	cmp	r3, #1
 8023c42:	f040 814a 	bne.w	8023eda <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8023c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8023c4a:	f003 0310 	and.w	r3, r3, #16
 8023c4e:	2b00      	cmp	r3, #0
 8023c50:	f000 8143 	beq.w	8023eda <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8023c54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8023c58:	f003 0310 	and.w	r3, r3, #16
 8023c5c:	2b00      	cmp	r3, #0
 8023c5e:	f000 813c 	beq.w	8023eda <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8023c62:	2300      	movs	r3, #0
 8023c64:	60bb      	str	r3, [r7, #8]
 8023c66:	687b      	ldr	r3, [r7, #4]
 8023c68:	681b      	ldr	r3, [r3, #0]
 8023c6a:	681b      	ldr	r3, [r3, #0]
 8023c6c:	60bb      	str	r3, [r7, #8]
 8023c6e:	687b      	ldr	r3, [r7, #4]
 8023c70:	681b      	ldr	r3, [r3, #0]
 8023c72:	685b      	ldr	r3, [r3, #4]
 8023c74:	60bb      	str	r3, [r7, #8]
 8023c76:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8023c78:	687b      	ldr	r3, [r7, #4]
 8023c7a:	681b      	ldr	r3, [r3, #0]
 8023c7c:	695b      	ldr	r3, [r3, #20]
 8023c7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8023c82:	2b40      	cmp	r3, #64	; 0x40
 8023c84:	f040 80b4 	bne.w	8023df0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8023c88:	687b      	ldr	r3, [r7, #4]
 8023c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023c8c:	681b      	ldr	r3, [r3, #0]
 8023c8e:	685b      	ldr	r3, [r3, #4]
 8023c90:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8023c94:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8023c98:	2b00      	cmp	r3, #0
 8023c9a:	f000 8140 	beq.w	8023f1e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8023c9e:	687b      	ldr	r3, [r7, #4]
 8023ca0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8023ca2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8023ca6:	429a      	cmp	r2, r3
 8023ca8:	f080 8139 	bcs.w	8023f1e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8023cac:	687b      	ldr	r3, [r7, #4]
 8023cae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8023cb2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8023cb4:	687b      	ldr	r3, [r7, #4]
 8023cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023cb8:	69db      	ldr	r3, [r3, #28]
 8023cba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8023cbe:	f000 8088 	beq.w	8023dd2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8023cc2:	687b      	ldr	r3, [r7, #4]
 8023cc4:	681b      	ldr	r3, [r3, #0]
 8023cc6:	330c      	adds	r3, #12
 8023cc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8023ccc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8023cd0:	e853 3f00 	ldrex	r3, [r3]
 8023cd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8023cd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8023cdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8023ce0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8023ce4:	687b      	ldr	r3, [r7, #4]
 8023ce6:	681b      	ldr	r3, [r3, #0]
 8023ce8:	330c      	adds	r3, #12
 8023cea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8023cee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8023cf2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8023cf6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8023cfa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8023cfe:	e841 2300 	strex	r3, r2, [r1]
 8023d02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8023d06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8023d0a:	2b00      	cmp	r3, #0
 8023d0c:	d1d9      	bne.n	8023cc2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8023d0e:	687b      	ldr	r3, [r7, #4]
 8023d10:	681b      	ldr	r3, [r3, #0]
 8023d12:	3314      	adds	r3, #20
 8023d14:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8023d16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8023d18:	e853 3f00 	ldrex	r3, [r3]
 8023d1c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8023d1e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8023d20:	f023 0301 	bic.w	r3, r3, #1
 8023d24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8023d28:	687b      	ldr	r3, [r7, #4]
 8023d2a:	681b      	ldr	r3, [r3, #0]
 8023d2c:	3314      	adds	r3, #20
 8023d2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8023d32:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8023d36:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8023d38:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8023d3a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8023d3e:	e841 2300 	strex	r3, r2, [r1]
 8023d42:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8023d44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8023d46:	2b00      	cmp	r3, #0
 8023d48:	d1e1      	bne.n	8023d0e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8023d4a:	687b      	ldr	r3, [r7, #4]
 8023d4c:	681b      	ldr	r3, [r3, #0]
 8023d4e:	3314      	adds	r3, #20
 8023d50:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8023d52:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8023d54:	e853 3f00 	ldrex	r3, [r3]
 8023d58:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8023d5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8023d5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8023d60:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8023d64:	687b      	ldr	r3, [r7, #4]
 8023d66:	681b      	ldr	r3, [r3, #0]
 8023d68:	3314      	adds	r3, #20
 8023d6a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8023d6e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8023d70:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8023d72:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8023d74:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8023d76:	e841 2300 	strex	r3, r2, [r1]
 8023d7a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8023d7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8023d7e:	2b00      	cmp	r3, #0
 8023d80:	d1e3      	bne.n	8023d4a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8023d82:	687b      	ldr	r3, [r7, #4]
 8023d84:	2220      	movs	r2, #32
 8023d86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8023d8a:	687b      	ldr	r3, [r7, #4]
 8023d8c:	2200      	movs	r2, #0
 8023d8e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8023d90:	687b      	ldr	r3, [r7, #4]
 8023d92:	681b      	ldr	r3, [r3, #0]
 8023d94:	330c      	adds	r3, #12
 8023d96:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8023d98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8023d9a:	e853 3f00 	ldrex	r3, [r3]
 8023d9e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8023da0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8023da2:	f023 0310 	bic.w	r3, r3, #16
 8023da6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8023daa:	687b      	ldr	r3, [r7, #4]
 8023dac:	681b      	ldr	r3, [r3, #0]
 8023dae:	330c      	adds	r3, #12
 8023db0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8023db4:	65ba      	str	r2, [r7, #88]	; 0x58
 8023db6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8023db8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8023dba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8023dbc:	e841 2300 	strex	r3, r2, [r1]
 8023dc0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8023dc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8023dc4:	2b00      	cmp	r3, #0
 8023dc6:	d1e3      	bne.n	8023d90 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8023dc8:	687b      	ldr	r3, [r7, #4]
 8023dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8023dcc:	4618      	mov	r0, r3
 8023dce:	f7fe f892 	bl	8021ef6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8023dd2:	687b      	ldr	r3, [r7, #4]
 8023dd4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8023dd6:	687b      	ldr	r3, [r7, #4]
 8023dd8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8023dda:	b29b      	uxth	r3, r3
 8023ddc:	1ad3      	subs	r3, r2, r3
 8023dde:	b29b      	uxth	r3, r3
 8023de0:	4619      	mov	r1, r3
 8023de2:	6878      	ldr	r0, [r7, #4]
 8023de4:	f000 f8b6 	bl	8023f54 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8023de8:	e099      	b.n	8023f1e <HAL_UART_IRQHandler+0x50e>
 8023dea:	bf00      	nop
 8023dec:	0802418b 	.word	0x0802418b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8023df0:	687b      	ldr	r3, [r7, #4]
 8023df2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8023df4:	687b      	ldr	r3, [r7, #4]
 8023df6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8023df8:	b29b      	uxth	r3, r3
 8023dfa:	1ad3      	subs	r3, r2, r3
 8023dfc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8023e00:	687b      	ldr	r3, [r7, #4]
 8023e02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8023e04:	b29b      	uxth	r3, r3
 8023e06:	2b00      	cmp	r3, #0
 8023e08:	f000 808b 	beq.w	8023f22 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8023e0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8023e10:	2b00      	cmp	r3, #0
 8023e12:	f000 8086 	beq.w	8023f22 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8023e16:	687b      	ldr	r3, [r7, #4]
 8023e18:	681b      	ldr	r3, [r3, #0]
 8023e1a:	330c      	adds	r3, #12
 8023e1c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8023e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8023e20:	e853 3f00 	ldrex	r3, [r3]
 8023e24:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8023e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8023e28:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8023e2c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8023e30:	687b      	ldr	r3, [r7, #4]
 8023e32:	681b      	ldr	r3, [r3, #0]
 8023e34:	330c      	adds	r3, #12
 8023e36:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8023e3a:	647a      	str	r2, [r7, #68]	; 0x44
 8023e3c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8023e3e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8023e40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8023e42:	e841 2300 	strex	r3, r2, [r1]
 8023e46:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8023e48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8023e4a:	2b00      	cmp	r3, #0
 8023e4c:	d1e3      	bne.n	8023e16 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8023e4e:	687b      	ldr	r3, [r7, #4]
 8023e50:	681b      	ldr	r3, [r3, #0]
 8023e52:	3314      	adds	r3, #20
 8023e54:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8023e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023e58:	e853 3f00 	ldrex	r3, [r3]
 8023e5c:	623b      	str	r3, [r7, #32]
   return(result);
 8023e5e:	6a3b      	ldr	r3, [r7, #32]
 8023e60:	f023 0301 	bic.w	r3, r3, #1
 8023e64:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8023e68:	687b      	ldr	r3, [r7, #4]
 8023e6a:	681b      	ldr	r3, [r3, #0]
 8023e6c:	3314      	adds	r3, #20
 8023e6e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8023e72:	633a      	str	r2, [r7, #48]	; 0x30
 8023e74:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8023e76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8023e78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8023e7a:	e841 2300 	strex	r3, r2, [r1]
 8023e7e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8023e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023e82:	2b00      	cmp	r3, #0
 8023e84:	d1e3      	bne.n	8023e4e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8023e86:	687b      	ldr	r3, [r7, #4]
 8023e88:	2220      	movs	r2, #32
 8023e8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8023e8e:	687b      	ldr	r3, [r7, #4]
 8023e90:	2200      	movs	r2, #0
 8023e92:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8023e94:	687b      	ldr	r3, [r7, #4]
 8023e96:	681b      	ldr	r3, [r3, #0]
 8023e98:	330c      	adds	r3, #12
 8023e9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8023e9c:	693b      	ldr	r3, [r7, #16]
 8023e9e:	e853 3f00 	ldrex	r3, [r3]
 8023ea2:	60fb      	str	r3, [r7, #12]
   return(result);
 8023ea4:	68fb      	ldr	r3, [r7, #12]
 8023ea6:	f023 0310 	bic.w	r3, r3, #16
 8023eaa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8023eae:	687b      	ldr	r3, [r7, #4]
 8023eb0:	681b      	ldr	r3, [r3, #0]
 8023eb2:	330c      	adds	r3, #12
 8023eb4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8023eb8:	61fa      	str	r2, [r7, #28]
 8023eba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8023ebc:	69b9      	ldr	r1, [r7, #24]
 8023ebe:	69fa      	ldr	r2, [r7, #28]
 8023ec0:	e841 2300 	strex	r3, r2, [r1]
 8023ec4:	617b      	str	r3, [r7, #20]
   return(result);
 8023ec6:	697b      	ldr	r3, [r7, #20]
 8023ec8:	2b00      	cmp	r3, #0
 8023eca:	d1e3      	bne.n	8023e94 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8023ecc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8023ed0:	4619      	mov	r1, r3
 8023ed2:	6878      	ldr	r0, [r7, #4]
 8023ed4:	f000 f83e 	bl	8023f54 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8023ed8:	e023      	b.n	8023f22 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8023eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8023ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8023ee2:	2b00      	cmp	r3, #0
 8023ee4:	d009      	beq.n	8023efa <HAL_UART_IRQHandler+0x4ea>
 8023ee6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8023eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8023eee:	2b00      	cmp	r3, #0
 8023ef0:	d003      	beq.n	8023efa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8023ef2:	6878      	ldr	r0, [r7, #4]
 8023ef4:	f000 f95d 	bl	80241b2 <UART_Transmit_IT>
    return;
 8023ef8:	e014      	b.n	8023f24 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8023efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8023efe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8023f02:	2b00      	cmp	r3, #0
 8023f04:	d00e      	beq.n	8023f24 <HAL_UART_IRQHandler+0x514>
 8023f06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8023f0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8023f0e:	2b00      	cmp	r3, #0
 8023f10:	d008      	beq.n	8023f24 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8023f12:	6878      	ldr	r0, [r7, #4]
 8023f14:	f000 f99d 	bl	8024252 <UART_EndTransmit_IT>
    return;
 8023f18:	e004      	b.n	8023f24 <HAL_UART_IRQHandler+0x514>
    return;
 8023f1a:	bf00      	nop
 8023f1c:	e002      	b.n	8023f24 <HAL_UART_IRQHandler+0x514>
      return;
 8023f1e:	bf00      	nop
 8023f20:	e000      	b.n	8023f24 <HAL_UART_IRQHandler+0x514>
      return;
 8023f22:	bf00      	nop
  }
}
 8023f24:	37e8      	adds	r7, #232	; 0xe8
 8023f26:	46bd      	mov	sp, r7
 8023f28:	bd80      	pop	{r7, pc}
 8023f2a:	bf00      	nop

08023f2c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8023f2c:	b480      	push	{r7}
 8023f2e:	b083      	sub	sp, #12
 8023f30:	af00      	add	r7, sp, #0
 8023f32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8023f34:	bf00      	nop
 8023f36:	370c      	adds	r7, #12
 8023f38:	46bd      	mov	sp, r7
 8023f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023f3e:	4770      	bx	lr

08023f40 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8023f40:	b480      	push	{r7}
 8023f42:	b083      	sub	sp, #12
 8023f44:	af00      	add	r7, sp, #0
 8023f46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8023f48:	bf00      	nop
 8023f4a:	370c      	adds	r7, #12
 8023f4c:	46bd      	mov	sp, r7
 8023f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023f52:	4770      	bx	lr

08023f54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8023f54:	b480      	push	{r7}
 8023f56:	b083      	sub	sp, #12
 8023f58:	af00      	add	r7, sp, #0
 8023f5a:	6078      	str	r0, [r7, #4]
 8023f5c:	460b      	mov	r3, r1
 8023f5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8023f60:	bf00      	nop
 8023f62:	370c      	adds	r7, #12
 8023f64:	46bd      	mov	sp, r7
 8023f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8023f6a:	4770      	bx	lr

08023f6c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8023f6c:	b580      	push	{r7, lr}
 8023f6e:	b090      	sub	sp, #64	; 0x40
 8023f70:	af00      	add	r7, sp, #0
 8023f72:	60f8      	str	r0, [r7, #12]
 8023f74:	60b9      	str	r1, [r7, #8]
 8023f76:	603b      	str	r3, [r7, #0]
 8023f78:	4613      	mov	r3, r2
 8023f7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8023f7c:	e050      	b.n	8024020 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8023f7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8023f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8023f84:	d04c      	beq.n	8024020 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8023f86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8023f88:	2b00      	cmp	r3, #0
 8023f8a:	d007      	beq.n	8023f9c <UART_WaitOnFlagUntilTimeout+0x30>
 8023f8c:	f7fd fe78 	bl	8021c80 <HAL_GetTick>
 8023f90:	4602      	mov	r2, r0
 8023f92:	683b      	ldr	r3, [r7, #0]
 8023f94:	1ad3      	subs	r3, r2, r3
 8023f96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8023f98:	429a      	cmp	r2, r3
 8023f9a:	d241      	bcs.n	8024020 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8023f9c:	68fb      	ldr	r3, [r7, #12]
 8023f9e:	681b      	ldr	r3, [r3, #0]
 8023fa0:	330c      	adds	r3, #12
 8023fa2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8023fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8023fa6:	e853 3f00 	ldrex	r3, [r3]
 8023faa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8023fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8023fae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8023fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8023fb4:	68fb      	ldr	r3, [r7, #12]
 8023fb6:	681b      	ldr	r3, [r3, #0]
 8023fb8:	330c      	adds	r3, #12
 8023fba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8023fbc:	637a      	str	r2, [r7, #52]	; 0x34
 8023fbe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8023fc0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8023fc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8023fc4:	e841 2300 	strex	r3, r2, [r1]
 8023fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8023fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8023fcc:	2b00      	cmp	r3, #0
 8023fce:	d1e5      	bne.n	8023f9c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8023fd0:	68fb      	ldr	r3, [r7, #12]
 8023fd2:	681b      	ldr	r3, [r3, #0]
 8023fd4:	3314      	adds	r3, #20
 8023fd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8023fd8:	697b      	ldr	r3, [r7, #20]
 8023fda:	e853 3f00 	ldrex	r3, [r3]
 8023fde:	613b      	str	r3, [r7, #16]
   return(result);
 8023fe0:	693b      	ldr	r3, [r7, #16]
 8023fe2:	f023 0301 	bic.w	r3, r3, #1
 8023fe6:	63bb      	str	r3, [r7, #56]	; 0x38
 8023fe8:	68fb      	ldr	r3, [r7, #12]
 8023fea:	681b      	ldr	r3, [r3, #0]
 8023fec:	3314      	adds	r3, #20
 8023fee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8023ff0:	623a      	str	r2, [r7, #32]
 8023ff2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8023ff4:	69f9      	ldr	r1, [r7, #28]
 8023ff6:	6a3a      	ldr	r2, [r7, #32]
 8023ff8:	e841 2300 	strex	r3, r2, [r1]
 8023ffc:	61bb      	str	r3, [r7, #24]
   return(result);
 8023ffe:	69bb      	ldr	r3, [r7, #24]
 8024000:	2b00      	cmp	r3, #0
 8024002:	d1e5      	bne.n	8023fd0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8024004:	68fb      	ldr	r3, [r7, #12]
 8024006:	2220      	movs	r2, #32
 8024008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 802400c:	68fb      	ldr	r3, [r7, #12]
 802400e:	2220      	movs	r2, #32
 8024010:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8024014:	68fb      	ldr	r3, [r7, #12]
 8024016:	2200      	movs	r2, #0
 8024018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 802401c:	2303      	movs	r3, #3
 802401e:	e00f      	b.n	8024040 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8024020:	68fb      	ldr	r3, [r7, #12]
 8024022:	681b      	ldr	r3, [r3, #0]
 8024024:	681a      	ldr	r2, [r3, #0]
 8024026:	68bb      	ldr	r3, [r7, #8]
 8024028:	4013      	ands	r3, r2
 802402a:	68ba      	ldr	r2, [r7, #8]
 802402c:	429a      	cmp	r2, r3
 802402e:	bf0c      	ite	eq
 8024030:	2301      	moveq	r3, #1
 8024032:	2300      	movne	r3, #0
 8024034:	b2db      	uxtb	r3, r3
 8024036:	461a      	mov	r2, r3
 8024038:	79fb      	ldrb	r3, [r7, #7]
 802403a:	429a      	cmp	r2, r3
 802403c:	d09f      	beq.n	8023f7e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 802403e:	2300      	movs	r3, #0
}
 8024040:	4618      	mov	r0, r3
 8024042:	3740      	adds	r7, #64	; 0x40
 8024044:	46bd      	mov	sp, r7
 8024046:	bd80      	pop	{r7, pc}

08024048 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8024048:	b480      	push	{r7}
 802404a:	b085      	sub	sp, #20
 802404c:	af00      	add	r7, sp, #0
 802404e:	60f8      	str	r0, [r7, #12]
 8024050:	60b9      	str	r1, [r7, #8]
 8024052:	4613      	mov	r3, r2
 8024054:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8024056:	68fb      	ldr	r3, [r7, #12]
 8024058:	68ba      	ldr	r2, [r7, #8]
 802405a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 802405c:	68fb      	ldr	r3, [r7, #12]
 802405e:	88fa      	ldrh	r2, [r7, #6]
 8024060:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8024062:	68fb      	ldr	r3, [r7, #12]
 8024064:	88fa      	ldrh	r2, [r7, #6]
 8024066:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8024068:	68fb      	ldr	r3, [r7, #12]
 802406a:	2200      	movs	r2, #0
 802406c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 802406e:	68fb      	ldr	r3, [r7, #12]
 8024070:	2222      	movs	r2, #34	; 0x22
 8024072:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8024076:	68fb      	ldr	r3, [r7, #12]
 8024078:	2200      	movs	r2, #0
 802407a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 802407e:	68fb      	ldr	r3, [r7, #12]
 8024080:	691b      	ldr	r3, [r3, #16]
 8024082:	2b00      	cmp	r3, #0
 8024084:	d007      	beq.n	8024096 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8024086:	68fb      	ldr	r3, [r7, #12]
 8024088:	681b      	ldr	r3, [r3, #0]
 802408a:	68da      	ldr	r2, [r3, #12]
 802408c:	68fb      	ldr	r3, [r7, #12]
 802408e:	681b      	ldr	r3, [r3, #0]
 8024090:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8024094:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8024096:	68fb      	ldr	r3, [r7, #12]
 8024098:	681b      	ldr	r3, [r3, #0]
 802409a:	695a      	ldr	r2, [r3, #20]
 802409c:	68fb      	ldr	r3, [r7, #12]
 802409e:	681b      	ldr	r3, [r3, #0]
 80240a0:	f042 0201 	orr.w	r2, r2, #1
 80240a4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80240a6:	68fb      	ldr	r3, [r7, #12]
 80240a8:	681b      	ldr	r3, [r3, #0]
 80240aa:	68da      	ldr	r2, [r3, #12]
 80240ac:	68fb      	ldr	r3, [r7, #12]
 80240ae:	681b      	ldr	r3, [r3, #0]
 80240b0:	f042 0220 	orr.w	r2, r2, #32
 80240b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80240b6:	2300      	movs	r3, #0
}
 80240b8:	4618      	mov	r0, r3
 80240ba:	3714      	adds	r7, #20
 80240bc:	46bd      	mov	sp, r7
 80240be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80240c2:	4770      	bx	lr

080240c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80240c4:	b480      	push	{r7}
 80240c6:	b095      	sub	sp, #84	; 0x54
 80240c8:	af00      	add	r7, sp, #0
 80240ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80240cc:	687b      	ldr	r3, [r7, #4]
 80240ce:	681b      	ldr	r3, [r3, #0]
 80240d0:	330c      	adds	r3, #12
 80240d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80240d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80240d6:	e853 3f00 	ldrex	r3, [r3]
 80240da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80240dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80240de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80240e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80240e4:	687b      	ldr	r3, [r7, #4]
 80240e6:	681b      	ldr	r3, [r3, #0]
 80240e8:	330c      	adds	r3, #12
 80240ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80240ec:	643a      	str	r2, [r7, #64]	; 0x40
 80240ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80240f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80240f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80240f4:	e841 2300 	strex	r3, r2, [r1]
 80240f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80240fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80240fc:	2b00      	cmp	r3, #0
 80240fe:	d1e5      	bne.n	80240cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8024100:	687b      	ldr	r3, [r7, #4]
 8024102:	681b      	ldr	r3, [r3, #0]
 8024104:	3314      	adds	r3, #20
 8024106:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8024108:	6a3b      	ldr	r3, [r7, #32]
 802410a:	e853 3f00 	ldrex	r3, [r3]
 802410e:	61fb      	str	r3, [r7, #28]
   return(result);
 8024110:	69fb      	ldr	r3, [r7, #28]
 8024112:	f023 0301 	bic.w	r3, r3, #1
 8024116:	64bb      	str	r3, [r7, #72]	; 0x48
 8024118:	687b      	ldr	r3, [r7, #4]
 802411a:	681b      	ldr	r3, [r3, #0]
 802411c:	3314      	adds	r3, #20
 802411e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8024120:	62fa      	str	r2, [r7, #44]	; 0x2c
 8024122:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8024124:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8024126:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8024128:	e841 2300 	strex	r3, r2, [r1]
 802412c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 802412e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024130:	2b00      	cmp	r3, #0
 8024132:	d1e5      	bne.n	8024100 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8024134:	687b      	ldr	r3, [r7, #4]
 8024136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024138:	2b01      	cmp	r3, #1
 802413a:	d119      	bne.n	8024170 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802413c:	687b      	ldr	r3, [r7, #4]
 802413e:	681b      	ldr	r3, [r3, #0]
 8024140:	330c      	adds	r3, #12
 8024142:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8024144:	68fb      	ldr	r3, [r7, #12]
 8024146:	e853 3f00 	ldrex	r3, [r3]
 802414a:	60bb      	str	r3, [r7, #8]
   return(result);
 802414c:	68bb      	ldr	r3, [r7, #8]
 802414e:	f023 0310 	bic.w	r3, r3, #16
 8024152:	647b      	str	r3, [r7, #68]	; 0x44
 8024154:	687b      	ldr	r3, [r7, #4]
 8024156:	681b      	ldr	r3, [r3, #0]
 8024158:	330c      	adds	r3, #12
 802415a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 802415c:	61ba      	str	r2, [r7, #24]
 802415e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8024160:	6979      	ldr	r1, [r7, #20]
 8024162:	69ba      	ldr	r2, [r7, #24]
 8024164:	e841 2300 	strex	r3, r2, [r1]
 8024168:	613b      	str	r3, [r7, #16]
   return(result);
 802416a:	693b      	ldr	r3, [r7, #16]
 802416c:	2b00      	cmp	r3, #0
 802416e:	d1e5      	bne.n	802413c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8024170:	687b      	ldr	r3, [r7, #4]
 8024172:	2220      	movs	r2, #32
 8024174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8024178:	687b      	ldr	r3, [r7, #4]
 802417a:	2200      	movs	r2, #0
 802417c:	631a      	str	r2, [r3, #48]	; 0x30
}
 802417e:	bf00      	nop
 8024180:	3754      	adds	r7, #84	; 0x54
 8024182:	46bd      	mov	sp, r7
 8024184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024188:	4770      	bx	lr

0802418a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 802418a:	b580      	push	{r7, lr}
 802418c:	b084      	sub	sp, #16
 802418e:	af00      	add	r7, sp, #0
 8024190:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8024192:	687b      	ldr	r3, [r7, #4]
 8024194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8024196:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8024198:	68fb      	ldr	r3, [r7, #12]
 802419a:	2200      	movs	r2, #0
 802419c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 802419e:	68fb      	ldr	r3, [r7, #12]
 80241a0:	2200      	movs	r2, #0
 80241a2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80241a4:	68f8      	ldr	r0, [r7, #12]
 80241a6:	f7ff fecb 	bl	8023f40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80241aa:	bf00      	nop
 80241ac:	3710      	adds	r7, #16
 80241ae:	46bd      	mov	sp, r7
 80241b0:	bd80      	pop	{r7, pc}

080241b2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80241b2:	b480      	push	{r7}
 80241b4:	b085      	sub	sp, #20
 80241b6:	af00      	add	r7, sp, #0
 80241b8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80241ba:	687b      	ldr	r3, [r7, #4]
 80241bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80241c0:	b2db      	uxtb	r3, r3
 80241c2:	2b21      	cmp	r3, #33	; 0x21
 80241c4:	d13e      	bne.n	8024244 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80241c6:	687b      	ldr	r3, [r7, #4]
 80241c8:	689b      	ldr	r3, [r3, #8]
 80241ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80241ce:	d114      	bne.n	80241fa <UART_Transmit_IT+0x48>
 80241d0:	687b      	ldr	r3, [r7, #4]
 80241d2:	691b      	ldr	r3, [r3, #16]
 80241d4:	2b00      	cmp	r3, #0
 80241d6:	d110      	bne.n	80241fa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80241d8:	687b      	ldr	r3, [r7, #4]
 80241da:	6a1b      	ldr	r3, [r3, #32]
 80241dc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80241de:	68fb      	ldr	r3, [r7, #12]
 80241e0:	881b      	ldrh	r3, [r3, #0]
 80241e2:	461a      	mov	r2, r3
 80241e4:	687b      	ldr	r3, [r7, #4]
 80241e6:	681b      	ldr	r3, [r3, #0]
 80241e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80241ec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80241ee:	687b      	ldr	r3, [r7, #4]
 80241f0:	6a1b      	ldr	r3, [r3, #32]
 80241f2:	1c9a      	adds	r2, r3, #2
 80241f4:	687b      	ldr	r3, [r7, #4]
 80241f6:	621a      	str	r2, [r3, #32]
 80241f8:	e008      	b.n	802420c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80241fa:	687b      	ldr	r3, [r7, #4]
 80241fc:	6a1b      	ldr	r3, [r3, #32]
 80241fe:	1c59      	adds	r1, r3, #1
 8024200:	687a      	ldr	r2, [r7, #4]
 8024202:	6211      	str	r1, [r2, #32]
 8024204:	781a      	ldrb	r2, [r3, #0]
 8024206:	687b      	ldr	r3, [r7, #4]
 8024208:	681b      	ldr	r3, [r3, #0]
 802420a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 802420c:	687b      	ldr	r3, [r7, #4]
 802420e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8024210:	b29b      	uxth	r3, r3
 8024212:	3b01      	subs	r3, #1
 8024214:	b29b      	uxth	r3, r3
 8024216:	687a      	ldr	r2, [r7, #4]
 8024218:	4619      	mov	r1, r3
 802421a:	84d1      	strh	r1, [r2, #38]	; 0x26
 802421c:	2b00      	cmp	r3, #0
 802421e:	d10f      	bne.n	8024240 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8024220:	687b      	ldr	r3, [r7, #4]
 8024222:	681b      	ldr	r3, [r3, #0]
 8024224:	68da      	ldr	r2, [r3, #12]
 8024226:	687b      	ldr	r3, [r7, #4]
 8024228:	681b      	ldr	r3, [r3, #0]
 802422a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 802422e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8024230:	687b      	ldr	r3, [r7, #4]
 8024232:	681b      	ldr	r3, [r3, #0]
 8024234:	68da      	ldr	r2, [r3, #12]
 8024236:	687b      	ldr	r3, [r7, #4]
 8024238:	681b      	ldr	r3, [r3, #0]
 802423a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 802423e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8024240:	2300      	movs	r3, #0
 8024242:	e000      	b.n	8024246 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8024244:	2302      	movs	r3, #2
  }
}
 8024246:	4618      	mov	r0, r3
 8024248:	3714      	adds	r7, #20
 802424a:	46bd      	mov	sp, r7
 802424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024250:	4770      	bx	lr

08024252 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8024252:	b580      	push	{r7, lr}
 8024254:	b082      	sub	sp, #8
 8024256:	af00      	add	r7, sp, #0
 8024258:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 802425a:	687b      	ldr	r3, [r7, #4]
 802425c:	681b      	ldr	r3, [r3, #0]
 802425e:	68da      	ldr	r2, [r3, #12]
 8024260:	687b      	ldr	r3, [r7, #4]
 8024262:	681b      	ldr	r3, [r3, #0]
 8024264:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8024268:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 802426a:	687b      	ldr	r3, [r7, #4]
 802426c:	2220      	movs	r2, #32
 802426e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8024272:	6878      	ldr	r0, [r7, #4]
 8024274:	f7ff fe5a 	bl	8023f2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8024278:	2300      	movs	r3, #0
}
 802427a:	4618      	mov	r0, r3
 802427c:	3708      	adds	r7, #8
 802427e:	46bd      	mov	sp, r7
 8024280:	bd80      	pop	{r7, pc}

08024282 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8024282:	b580      	push	{r7, lr}
 8024284:	b08c      	sub	sp, #48	; 0x30
 8024286:	af00      	add	r7, sp, #0
 8024288:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 802428a:	687b      	ldr	r3, [r7, #4]
 802428c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8024290:	b2db      	uxtb	r3, r3
 8024292:	2b22      	cmp	r3, #34	; 0x22
 8024294:	f040 80ab 	bne.w	80243ee <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8024298:	687b      	ldr	r3, [r7, #4]
 802429a:	689b      	ldr	r3, [r3, #8]
 802429c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80242a0:	d117      	bne.n	80242d2 <UART_Receive_IT+0x50>
 80242a2:	687b      	ldr	r3, [r7, #4]
 80242a4:	691b      	ldr	r3, [r3, #16]
 80242a6:	2b00      	cmp	r3, #0
 80242a8:	d113      	bne.n	80242d2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80242aa:	2300      	movs	r3, #0
 80242ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80242ae:	687b      	ldr	r3, [r7, #4]
 80242b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80242b2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80242b4:	687b      	ldr	r3, [r7, #4]
 80242b6:	681b      	ldr	r3, [r3, #0]
 80242b8:	685b      	ldr	r3, [r3, #4]
 80242ba:	b29b      	uxth	r3, r3
 80242bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80242c0:	b29a      	uxth	r2, r3
 80242c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80242c4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80242c6:	687b      	ldr	r3, [r7, #4]
 80242c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80242ca:	1c9a      	adds	r2, r3, #2
 80242cc:	687b      	ldr	r3, [r7, #4]
 80242ce:	629a      	str	r2, [r3, #40]	; 0x28
 80242d0:	e026      	b.n	8024320 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80242d2:	687b      	ldr	r3, [r7, #4]
 80242d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80242d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80242d8:	2300      	movs	r3, #0
 80242da:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80242dc:	687b      	ldr	r3, [r7, #4]
 80242de:	689b      	ldr	r3, [r3, #8]
 80242e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80242e4:	d007      	beq.n	80242f6 <UART_Receive_IT+0x74>
 80242e6:	687b      	ldr	r3, [r7, #4]
 80242e8:	689b      	ldr	r3, [r3, #8]
 80242ea:	2b00      	cmp	r3, #0
 80242ec:	d10a      	bne.n	8024304 <UART_Receive_IT+0x82>
 80242ee:	687b      	ldr	r3, [r7, #4]
 80242f0:	691b      	ldr	r3, [r3, #16]
 80242f2:	2b00      	cmp	r3, #0
 80242f4:	d106      	bne.n	8024304 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80242f6:	687b      	ldr	r3, [r7, #4]
 80242f8:	681b      	ldr	r3, [r3, #0]
 80242fa:	685b      	ldr	r3, [r3, #4]
 80242fc:	b2da      	uxtb	r2, r3
 80242fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024300:	701a      	strb	r2, [r3, #0]
 8024302:	e008      	b.n	8024316 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8024304:	687b      	ldr	r3, [r7, #4]
 8024306:	681b      	ldr	r3, [r3, #0]
 8024308:	685b      	ldr	r3, [r3, #4]
 802430a:	b2db      	uxtb	r3, r3
 802430c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8024310:	b2da      	uxtb	r2, r3
 8024312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8024314:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8024316:	687b      	ldr	r3, [r7, #4]
 8024318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 802431a:	1c5a      	adds	r2, r3, #1
 802431c:	687b      	ldr	r3, [r7, #4]
 802431e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8024320:	687b      	ldr	r3, [r7, #4]
 8024322:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8024324:	b29b      	uxth	r3, r3
 8024326:	3b01      	subs	r3, #1
 8024328:	b29b      	uxth	r3, r3
 802432a:	687a      	ldr	r2, [r7, #4]
 802432c:	4619      	mov	r1, r3
 802432e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8024330:	2b00      	cmp	r3, #0
 8024332:	d15a      	bne.n	80243ea <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8024334:	687b      	ldr	r3, [r7, #4]
 8024336:	681b      	ldr	r3, [r3, #0]
 8024338:	68da      	ldr	r2, [r3, #12]
 802433a:	687b      	ldr	r3, [r7, #4]
 802433c:	681b      	ldr	r3, [r3, #0]
 802433e:	f022 0220 	bic.w	r2, r2, #32
 8024342:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8024344:	687b      	ldr	r3, [r7, #4]
 8024346:	681b      	ldr	r3, [r3, #0]
 8024348:	68da      	ldr	r2, [r3, #12]
 802434a:	687b      	ldr	r3, [r7, #4]
 802434c:	681b      	ldr	r3, [r3, #0]
 802434e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8024352:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8024354:	687b      	ldr	r3, [r7, #4]
 8024356:	681b      	ldr	r3, [r3, #0]
 8024358:	695a      	ldr	r2, [r3, #20]
 802435a:	687b      	ldr	r3, [r7, #4]
 802435c:	681b      	ldr	r3, [r3, #0]
 802435e:	f022 0201 	bic.w	r2, r2, #1
 8024362:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8024364:	687b      	ldr	r3, [r7, #4]
 8024366:	2220      	movs	r2, #32
 8024368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 802436c:	687b      	ldr	r3, [r7, #4]
 802436e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8024370:	2b01      	cmp	r3, #1
 8024372:	d135      	bne.n	80243e0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8024374:	687b      	ldr	r3, [r7, #4]
 8024376:	2200      	movs	r2, #0
 8024378:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 802437a:	687b      	ldr	r3, [r7, #4]
 802437c:	681b      	ldr	r3, [r3, #0]
 802437e:	330c      	adds	r3, #12
 8024380:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8024382:	697b      	ldr	r3, [r7, #20]
 8024384:	e853 3f00 	ldrex	r3, [r3]
 8024388:	613b      	str	r3, [r7, #16]
   return(result);
 802438a:	693b      	ldr	r3, [r7, #16]
 802438c:	f023 0310 	bic.w	r3, r3, #16
 8024390:	627b      	str	r3, [r7, #36]	; 0x24
 8024392:	687b      	ldr	r3, [r7, #4]
 8024394:	681b      	ldr	r3, [r3, #0]
 8024396:	330c      	adds	r3, #12
 8024398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 802439a:	623a      	str	r2, [r7, #32]
 802439c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802439e:	69f9      	ldr	r1, [r7, #28]
 80243a0:	6a3a      	ldr	r2, [r7, #32]
 80243a2:	e841 2300 	strex	r3, r2, [r1]
 80243a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80243a8:	69bb      	ldr	r3, [r7, #24]
 80243aa:	2b00      	cmp	r3, #0
 80243ac:	d1e5      	bne.n	802437a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80243ae:	687b      	ldr	r3, [r7, #4]
 80243b0:	681b      	ldr	r3, [r3, #0]
 80243b2:	681b      	ldr	r3, [r3, #0]
 80243b4:	f003 0310 	and.w	r3, r3, #16
 80243b8:	2b10      	cmp	r3, #16
 80243ba:	d10a      	bne.n	80243d2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80243bc:	2300      	movs	r3, #0
 80243be:	60fb      	str	r3, [r7, #12]
 80243c0:	687b      	ldr	r3, [r7, #4]
 80243c2:	681b      	ldr	r3, [r3, #0]
 80243c4:	681b      	ldr	r3, [r3, #0]
 80243c6:	60fb      	str	r3, [r7, #12]
 80243c8:	687b      	ldr	r3, [r7, #4]
 80243ca:	681b      	ldr	r3, [r3, #0]
 80243cc:	685b      	ldr	r3, [r3, #4]
 80243ce:	60fb      	str	r3, [r7, #12]
 80243d0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80243d2:	687b      	ldr	r3, [r7, #4]
 80243d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80243d6:	4619      	mov	r1, r3
 80243d8:	6878      	ldr	r0, [r7, #4]
 80243da:	f7ff fdbb 	bl	8023f54 <HAL_UARTEx_RxEventCallback>
 80243de:	e002      	b.n	80243e6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80243e0:	6878      	ldr	r0, [r7, #4]
 80243e2:	f7fc fda5 	bl	8020f30 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80243e6:	2300      	movs	r3, #0
 80243e8:	e002      	b.n	80243f0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80243ea:	2300      	movs	r3, #0
 80243ec:	e000      	b.n	80243f0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80243ee:	2302      	movs	r3, #2
  }
}
 80243f0:	4618      	mov	r0, r3
 80243f2:	3730      	adds	r7, #48	; 0x30
 80243f4:	46bd      	mov	sp, r7
 80243f6:	bd80      	pop	{r7, pc}

080243f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80243f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80243fc:	b0c0      	sub	sp, #256	; 0x100
 80243fe:	af00      	add	r7, sp, #0
 8024400:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8024404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8024408:	681b      	ldr	r3, [r3, #0]
 802440a:	691b      	ldr	r3, [r3, #16]
 802440c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8024410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8024414:	68d9      	ldr	r1, [r3, #12]
 8024416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802441a:	681a      	ldr	r2, [r3, #0]
 802441c:	ea40 0301 	orr.w	r3, r0, r1
 8024420:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8024422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8024426:	689a      	ldr	r2, [r3, #8]
 8024428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802442c:	691b      	ldr	r3, [r3, #16]
 802442e:	431a      	orrs	r2, r3
 8024430:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8024434:	695b      	ldr	r3, [r3, #20]
 8024436:	431a      	orrs	r2, r3
 8024438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 802443c:	69db      	ldr	r3, [r3, #28]
 802443e:	4313      	orrs	r3, r2
 8024440:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8024444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8024448:	681b      	ldr	r3, [r3, #0]
 802444a:	68db      	ldr	r3, [r3, #12]
 802444c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8024450:	f021 010c 	bic.w	r1, r1, #12
 8024454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8024458:	681a      	ldr	r2, [r3, #0]
 802445a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 802445e:	430b      	orrs	r3, r1
 8024460:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8024462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8024466:	681b      	ldr	r3, [r3, #0]
 8024468:	695b      	ldr	r3, [r3, #20]
 802446a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 802446e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8024472:	6999      	ldr	r1, [r3, #24]
 8024474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8024478:	681a      	ldr	r2, [r3, #0]
 802447a:	ea40 0301 	orr.w	r3, r0, r1
 802447e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8024480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8024484:	681a      	ldr	r2, [r3, #0]
 8024486:	4b8f      	ldr	r3, [pc, #572]	; (80246c4 <UART_SetConfig+0x2cc>)
 8024488:	429a      	cmp	r2, r3
 802448a:	d005      	beq.n	8024498 <UART_SetConfig+0xa0>
 802448c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8024490:	681a      	ldr	r2, [r3, #0]
 8024492:	4b8d      	ldr	r3, [pc, #564]	; (80246c8 <UART_SetConfig+0x2d0>)
 8024494:	429a      	cmp	r2, r3
 8024496:	d104      	bne.n	80244a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8024498:	f7fe fee4 	bl	8023264 <HAL_RCC_GetPCLK2Freq>
 802449c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80244a0:	e003      	b.n	80244aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80244a2:	f7fe fecb 	bl	802323c <HAL_RCC_GetPCLK1Freq>
 80244a6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80244aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80244ae:	69db      	ldr	r3, [r3, #28]
 80244b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80244b4:	f040 810c 	bne.w	80246d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80244b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80244bc:	2200      	movs	r2, #0
 80244be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80244c2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80244c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80244ca:	4622      	mov	r2, r4
 80244cc:	462b      	mov	r3, r5
 80244ce:	1891      	adds	r1, r2, r2
 80244d0:	65b9      	str	r1, [r7, #88]	; 0x58
 80244d2:	415b      	adcs	r3, r3
 80244d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80244d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80244da:	4621      	mov	r1, r4
 80244dc:	eb12 0801 	adds.w	r8, r2, r1
 80244e0:	4629      	mov	r1, r5
 80244e2:	eb43 0901 	adc.w	r9, r3, r1
 80244e6:	f04f 0200 	mov.w	r2, #0
 80244ea:	f04f 0300 	mov.w	r3, #0
 80244ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80244f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80244f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80244fa:	4690      	mov	r8, r2
 80244fc:	4699      	mov	r9, r3
 80244fe:	4623      	mov	r3, r4
 8024500:	eb18 0303 	adds.w	r3, r8, r3
 8024504:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8024508:	462b      	mov	r3, r5
 802450a:	eb49 0303 	adc.w	r3, r9, r3
 802450e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8024512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8024516:	685b      	ldr	r3, [r3, #4]
 8024518:	2200      	movs	r2, #0
 802451a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 802451e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8024522:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8024526:	460b      	mov	r3, r1
 8024528:	18db      	adds	r3, r3, r3
 802452a:	653b      	str	r3, [r7, #80]	; 0x50
 802452c:	4613      	mov	r3, r2
 802452e:	eb42 0303 	adc.w	r3, r2, r3
 8024532:	657b      	str	r3, [r7, #84]	; 0x54
 8024534:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8024538:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 802453c:	f7fc fb4c 	bl	8020bd8 <__aeabi_uldivmod>
 8024540:	4602      	mov	r2, r0
 8024542:	460b      	mov	r3, r1
 8024544:	4b61      	ldr	r3, [pc, #388]	; (80246cc <UART_SetConfig+0x2d4>)
 8024546:	fba3 2302 	umull	r2, r3, r3, r2
 802454a:	095b      	lsrs	r3, r3, #5
 802454c:	011c      	lsls	r4, r3, #4
 802454e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8024552:	2200      	movs	r2, #0
 8024554:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8024558:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 802455c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8024560:	4642      	mov	r2, r8
 8024562:	464b      	mov	r3, r9
 8024564:	1891      	adds	r1, r2, r2
 8024566:	64b9      	str	r1, [r7, #72]	; 0x48
 8024568:	415b      	adcs	r3, r3
 802456a:	64fb      	str	r3, [r7, #76]	; 0x4c
 802456c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8024570:	4641      	mov	r1, r8
 8024572:	eb12 0a01 	adds.w	sl, r2, r1
 8024576:	4649      	mov	r1, r9
 8024578:	eb43 0b01 	adc.w	fp, r3, r1
 802457c:	f04f 0200 	mov.w	r2, #0
 8024580:	f04f 0300 	mov.w	r3, #0
 8024584:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8024588:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 802458c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8024590:	4692      	mov	sl, r2
 8024592:	469b      	mov	fp, r3
 8024594:	4643      	mov	r3, r8
 8024596:	eb1a 0303 	adds.w	r3, sl, r3
 802459a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 802459e:	464b      	mov	r3, r9
 80245a0:	eb4b 0303 	adc.w	r3, fp, r3
 80245a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80245a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80245ac:	685b      	ldr	r3, [r3, #4]
 80245ae:	2200      	movs	r2, #0
 80245b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80245b4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80245b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80245bc:	460b      	mov	r3, r1
 80245be:	18db      	adds	r3, r3, r3
 80245c0:	643b      	str	r3, [r7, #64]	; 0x40
 80245c2:	4613      	mov	r3, r2
 80245c4:	eb42 0303 	adc.w	r3, r2, r3
 80245c8:	647b      	str	r3, [r7, #68]	; 0x44
 80245ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80245ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80245d2:	f7fc fb01 	bl	8020bd8 <__aeabi_uldivmod>
 80245d6:	4602      	mov	r2, r0
 80245d8:	460b      	mov	r3, r1
 80245da:	4611      	mov	r1, r2
 80245dc:	4b3b      	ldr	r3, [pc, #236]	; (80246cc <UART_SetConfig+0x2d4>)
 80245de:	fba3 2301 	umull	r2, r3, r3, r1
 80245e2:	095b      	lsrs	r3, r3, #5
 80245e4:	2264      	movs	r2, #100	; 0x64
 80245e6:	fb02 f303 	mul.w	r3, r2, r3
 80245ea:	1acb      	subs	r3, r1, r3
 80245ec:	00db      	lsls	r3, r3, #3
 80245ee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80245f2:	4b36      	ldr	r3, [pc, #216]	; (80246cc <UART_SetConfig+0x2d4>)
 80245f4:	fba3 2302 	umull	r2, r3, r3, r2
 80245f8:	095b      	lsrs	r3, r3, #5
 80245fa:	005b      	lsls	r3, r3, #1
 80245fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8024600:	441c      	add	r4, r3
 8024602:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8024606:	2200      	movs	r2, #0
 8024608:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 802460c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8024610:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8024614:	4642      	mov	r2, r8
 8024616:	464b      	mov	r3, r9
 8024618:	1891      	adds	r1, r2, r2
 802461a:	63b9      	str	r1, [r7, #56]	; 0x38
 802461c:	415b      	adcs	r3, r3
 802461e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8024620:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8024624:	4641      	mov	r1, r8
 8024626:	1851      	adds	r1, r2, r1
 8024628:	6339      	str	r1, [r7, #48]	; 0x30
 802462a:	4649      	mov	r1, r9
 802462c:	414b      	adcs	r3, r1
 802462e:	637b      	str	r3, [r7, #52]	; 0x34
 8024630:	f04f 0200 	mov.w	r2, #0
 8024634:	f04f 0300 	mov.w	r3, #0
 8024638:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 802463c:	4659      	mov	r1, fp
 802463e:	00cb      	lsls	r3, r1, #3
 8024640:	4651      	mov	r1, sl
 8024642:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8024646:	4651      	mov	r1, sl
 8024648:	00ca      	lsls	r2, r1, #3
 802464a:	4610      	mov	r0, r2
 802464c:	4619      	mov	r1, r3
 802464e:	4603      	mov	r3, r0
 8024650:	4642      	mov	r2, r8
 8024652:	189b      	adds	r3, r3, r2
 8024654:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8024658:	464b      	mov	r3, r9
 802465a:	460a      	mov	r2, r1
 802465c:	eb42 0303 	adc.w	r3, r2, r3
 8024660:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8024664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8024668:	685b      	ldr	r3, [r3, #4]
 802466a:	2200      	movs	r2, #0
 802466c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8024670:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8024674:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8024678:	460b      	mov	r3, r1
 802467a:	18db      	adds	r3, r3, r3
 802467c:	62bb      	str	r3, [r7, #40]	; 0x28
 802467e:	4613      	mov	r3, r2
 8024680:	eb42 0303 	adc.w	r3, r2, r3
 8024684:	62fb      	str	r3, [r7, #44]	; 0x2c
 8024686:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 802468a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 802468e:	f7fc faa3 	bl	8020bd8 <__aeabi_uldivmod>
 8024692:	4602      	mov	r2, r0
 8024694:	460b      	mov	r3, r1
 8024696:	4b0d      	ldr	r3, [pc, #52]	; (80246cc <UART_SetConfig+0x2d4>)
 8024698:	fba3 1302 	umull	r1, r3, r3, r2
 802469c:	095b      	lsrs	r3, r3, #5
 802469e:	2164      	movs	r1, #100	; 0x64
 80246a0:	fb01 f303 	mul.w	r3, r1, r3
 80246a4:	1ad3      	subs	r3, r2, r3
 80246a6:	00db      	lsls	r3, r3, #3
 80246a8:	3332      	adds	r3, #50	; 0x32
 80246aa:	4a08      	ldr	r2, [pc, #32]	; (80246cc <UART_SetConfig+0x2d4>)
 80246ac:	fba2 2303 	umull	r2, r3, r2, r3
 80246b0:	095b      	lsrs	r3, r3, #5
 80246b2:	f003 0207 	and.w	r2, r3, #7
 80246b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80246ba:	681b      	ldr	r3, [r3, #0]
 80246bc:	4422      	add	r2, r4
 80246be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80246c0:	e105      	b.n	80248ce <UART_SetConfig+0x4d6>
 80246c2:	bf00      	nop
 80246c4:	40011000 	.word	0x40011000
 80246c8:	40011400 	.word	0x40011400
 80246cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80246d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80246d4:	2200      	movs	r2, #0
 80246d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80246da:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80246de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80246e2:	4642      	mov	r2, r8
 80246e4:	464b      	mov	r3, r9
 80246e6:	1891      	adds	r1, r2, r2
 80246e8:	6239      	str	r1, [r7, #32]
 80246ea:	415b      	adcs	r3, r3
 80246ec:	627b      	str	r3, [r7, #36]	; 0x24
 80246ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80246f2:	4641      	mov	r1, r8
 80246f4:	1854      	adds	r4, r2, r1
 80246f6:	4649      	mov	r1, r9
 80246f8:	eb43 0501 	adc.w	r5, r3, r1
 80246fc:	f04f 0200 	mov.w	r2, #0
 8024700:	f04f 0300 	mov.w	r3, #0
 8024704:	00eb      	lsls	r3, r5, #3
 8024706:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 802470a:	00e2      	lsls	r2, r4, #3
 802470c:	4614      	mov	r4, r2
 802470e:	461d      	mov	r5, r3
 8024710:	4643      	mov	r3, r8
 8024712:	18e3      	adds	r3, r4, r3
 8024714:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8024718:	464b      	mov	r3, r9
 802471a:	eb45 0303 	adc.w	r3, r5, r3
 802471e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8024722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8024726:	685b      	ldr	r3, [r3, #4]
 8024728:	2200      	movs	r2, #0
 802472a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 802472e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8024732:	f04f 0200 	mov.w	r2, #0
 8024736:	f04f 0300 	mov.w	r3, #0
 802473a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 802473e:	4629      	mov	r1, r5
 8024740:	008b      	lsls	r3, r1, #2
 8024742:	4621      	mov	r1, r4
 8024744:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8024748:	4621      	mov	r1, r4
 802474a:	008a      	lsls	r2, r1, #2
 802474c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8024750:	f7fc fa42 	bl	8020bd8 <__aeabi_uldivmod>
 8024754:	4602      	mov	r2, r0
 8024756:	460b      	mov	r3, r1
 8024758:	4b60      	ldr	r3, [pc, #384]	; (80248dc <UART_SetConfig+0x4e4>)
 802475a:	fba3 2302 	umull	r2, r3, r3, r2
 802475e:	095b      	lsrs	r3, r3, #5
 8024760:	011c      	lsls	r4, r3, #4
 8024762:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8024766:	2200      	movs	r2, #0
 8024768:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 802476c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8024770:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8024774:	4642      	mov	r2, r8
 8024776:	464b      	mov	r3, r9
 8024778:	1891      	adds	r1, r2, r2
 802477a:	61b9      	str	r1, [r7, #24]
 802477c:	415b      	adcs	r3, r3
 802477e:	61fb      	str	r3, [r7, #28]
 8024780:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8024784:	4641      	mov	r1, r8
 8024786:	1851      	adds	r1, r2, r1
 8024788:	6139      	str	r1, [r7, #16]
 802478a:	4649      	mov	r1, r9
 802478c:	414b      	adcs	r3, r1
 802478e:	617b      	str	r3, [r7, #20]
 8024790:	f04f 0200 	mov.w	r2, #0
 8024794:	f04f 0300 	mov.w	r3, #0
 8024798:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 802479c:	4659      	mov	r1, fp
 802479e:	00cb      	lsls	r3, r1, #3
 80247a0:	4651      	mov	r1, sl
 80247a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80247a6:	4651      	mov	r1, sl
 80247a8:	00ca      	lsls	r2, r1, #3
 80247aa:	4610      	mov	r0, r2
 80247ac:	4619      	mov	r1, r3
 80247ae:	4603      	mov	r3, r0
 80247b0:	4642      	mov	r2, r8
 80247b2:	189b      	adds	r3, r3, r2
 80247b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80247b8:	464b      	mov	r3, r9
 80247ba:	460a      	mov	r2, r1
 80247bc:	eb42 0303 	adc.w	r3, r2, r3
 80247c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80247c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80247c8:	685b      	ldr	r3, [r3, #4]
 80247ca:	2200      	movs	r2, #0
 80247cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80247ce:	67fa      	str	r2, [r7, #124]	; 0x7c
 80247d0:	f04f 0200 	mov.w	r2, #0
 80247d4:	f04f 0300 	mov.w	r3, #0
 80247d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80247dc:	4649      	mov	r1, r9
 80247de:	008b      	lsls	r3, r1, #2
 80247e0:	4641      	mov	r1, r8
 80247e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80247e6:	4641      	mov	r1, r8
 80247e8:	008a      	lsls	r2, r1, #2
 80247ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80247ee:	f7fc f9f3 	bl	8020bd8 <__aeabi_uldivmod>
 80247f2:	4602      	mov	r2, r0
 80247f4:	460b      	mov	r3, r1
 80247f6:	4b39      	ldr	r3, [pc, #228]	; (80248dc <UART_SetConfig+0x4e4>)
 80247f8:	fba3 1302 	umull	r1, r3, r3, r2
 80247fc:	095b      	lsrs	r3, r3, #5
 80247fe:	2164      	movs	r1, #100	; 0x64
 8024800:	fb01 f303 	mul.w	r3, r1, r3
 8024804:	1ad3      	subs	r3, r2, r3
 8024806:	011b      	lsls	r3, r3, #4
 8024808:	3332      	adds	r3, #50	; 0x32
 802480a:	4a34      	ldr	r2, [pc, #208]	; (80248dc <UART_SetConfig+0x4e4>)
 802480c:	fba2 2303 	umull	r2, r3, r2, r3
 8024810:	095b      	lsrs	r3, r3, #5
 8024812:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8024816:	441c      	add	r4, r3
 8024818:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 802481c:	2200      	movs	r2, #0
 802481e:	673b      	str	r3, [r7, #112]	; 0x70
 8024820:	677a      	str	r2, [r7, #116]	; 0x74
 8024822:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8024826:	4642      	mov	r2, r8
 8024828:	464b      	mov	r3, r9
 802482a:	1891      	adds	r1, r2, r2
 802482c:	60b9      	str	r1, [r7, #8]
 802482e:	415b      	adcs	r3, r3
 8024830:	60fb      	str	r3, [r7, #12]
 8024832:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8024836:	4641      	mov	r1, r8
 8024838:	1851      	adds	r1, r2, r1
 802483a:	6039      	str	r1, [r7, #0]
 802483c:	4649      	mov	r1, r9
 802483e:	414b      	adcs	r3, r1
 8024840:	607b      	str	r3, [r7, #4]
 8024842:	f04f 0200 	mov.w	r2, #0
 8024846:	f04f 0300 	mov.w	r3, #0
 802484a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 802484e:	4659      	mov	r1, fp
 8024850:	00cb      	lsls	r3, r1, #3
 8024852:	4651      	mov	r1, sl
 8024854:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8024858:	4651      	mov	r1, sl
 802485a:	00ca      	lsls	r2, r1, #3
 802485c:	4610      	mov	r0, r2
 802485e:	4619      	mov	r1, r3
 8024860:	4603      	mov	r3, r0
 8024862:	4642      	mov	r2, r8
 8024864:	189b      	adds	r3, r3, r2
 8024866:	66bb      	str	r3, [r7, #104]	; 0x68
 8024868:	464b      	mov	r3, r9
 802486a:	460a      	mov	r2, r1
 802486c:	eb42 0303 	adc.w	r3, r2, r3
 8024870:	66fb      	str	r3, [r7, #108]	; 0x6c
 8024872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8024876:	685b      	ldr	r3, [r3, #4]
 8024878:	2200      	movs	r2, #0
 802487a:	663b      	str	r3, [r7, #96]	; 0x60
 802487c:	667a      	str	r2, [r7, #100]	; 0x64
 802487e:	f04f 0200 	mov.w	r2, #0
 8024882:	f04f 0300 	mov.w	r3, #0
 8024886:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 802488a:	4649      	mov	r1, r9
 802488c:	008b      	lsls	r3, r1, #2
 802488e:	4641      	mov	r1, r8
 8024890:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8024894:	4641      	mov	r1, r8
 8024896:	008a      	lsls	r2, r1, #2
 8024898:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 802489c:	f7fc f99c 	bl	8020bd8 <__aeabi_uldivmod>
 80248a0:	4602      	mov	r2, r0
 80248a2:	460b      	mov	r3, r1
 80248a4:	4b0d      	ldr	r3, [pc, #52]	; (80248dc <UART_SetConfig+0x4e4>)
 80248a6:	fba3 1302 	umull	r1, r3, r3, r2
 80248aa:	095b      	lsrs	r3, r3, #5
 80248ac:	2164      	movs	r1, #100	; 0x64
 80248ae:	fb01 f303 	mul.w	r3, r1, r3
 80248b2:	1ad3      	subs	r3, r2, r3
 80248b4:	011b      	lsls	r3, r3, #4
 80248b6:	3332      	adds	r3, #50	; 0x32
 80248b8:	4a08      	ldr	r2, [pc, #32]	; (80248dc <UART_SetConfig+0x4e4>)
 80248ba:	fba2 2303 	umull	r2, r3, r2, r3
 80248be:	095b      	lsrs	r3, r3, #5
 80248c0:	f003 020f 	and.w	r2, r3, #15
 80248c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80248c8:	681b      	ldr	r3, [r3, #0]
 80248ca:	4422      	add	r2, r4
 80248cc:	609a      	str	r2, [r3, #8]
}
 80248ce:	bf00      	nop
 80248d0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80248d4:	46bd      	mov	sp, r7
 80248d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80248da:	bf00      	nop
 80248dc:	51eb851f 	.word	0x51eb851f

080248e0 <Serial_PutByte>:
  * @brief  Transmit a byte to the HyperTerminal
  * @param  param The byte to be sent
  * @retval HAL_StatusTypeDef HAL_OK if OK
  */
HAL_StatusTypeDef Serial_PutByte( uint8_t param )
{
 80248e0:	b580      	push	{r7, lr}
 80248e2:	b082      	sub	sp, #8
 80248e4:	af00      	add	r7, sp, #0
 80248e6:	4603      	mov	r3, r0
 80248e8:	71fb      	strb	r3, [r7, #7]
  /* May be timeouted... */
  if ( huart2.gState == HAL_UART_STATE_TIMEOUT )
 80248ea:	4b0a      	ldr	r3, [pc, #40]	; (8024914 <Serial_PutByte+0x34>)
 80248ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80248f0:	b2db      	uxtb	r3, r3
 80248f2:	2ba0      	cmp	r3, #160	; 0xa0
 80248f4:	d103      	bne.n	80248fe <Serial_PutByte+0x1e>
  {
	  huart2.gState = HAL_UART_STATE_READY;
 80248f6:	4b07      	ldr	r3, [pc, #28]	; (8024914 <Serial_PutByte+0x34>)
 80248f8:	2220      	movs	r2, #32
 80248fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }
  return HAL_UART_Transmit(&huart2, &param, 1, TX_TIMEOUT);
 80248fe:	1df9      	adds	r1, r7, #7
 8024900:	2364      	movs	r3, #100	; 0x64
 8024902:	2201      	movs	r2, #1
 8024904:	4803      	ldr	r0, [pc, #12]	; (8024914 <Serial_PutByte+0x34>)
 8024906:	f7fe ffc0 	bl	802388a <HAL_UART_Transmit>
 802490a:	4603      	mov	r3, r0
}
 802490c:	4618      	mov	r0, r3
 802490e:	3708      	adds	r7, #8
 8024910:	46bd      	mov	sp, r7
 8024912:	bd80      	pop	{r7, pc}
 8024914:	200002d0 	.word	0x200002d0

08024918 <FLASH_If_Init>:
  * @brief  Unlocks Flash for write access
  * @param  None
  * @retval None
  */
void FLASH_If_Init(void)
{
 8024918:	b480      	push	{r7}
 802491a:	af00      	add	r7, sp, #0
#if 0
  /* Clear pending flags (if any) */  
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | 
                         FLASH_FLAG_PGSERR | FLASH_FLAG_WRPERR);
#else
__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR );
 802491c:	4b03      	ldr	r3, [pc, #12]	; (802492c <FLASH_If_Init+0x14>)
 802491e:	22b3      	movs	r2, #179	; 0xb3
 8024920:	60da      	str	r2, [r3, #12]
#endif
}
 8024922:	bf00      	nop
 8024924:	46bd      	mov	sp, r7
 8024926:	f85d 7b04 	ldr.w	r7, [sp], #4
 802492a:	4770      	bx	lr
 802492c:	40023c00 	.word	0x40023c00

08024930 <FLASH_If_Erase>:
  * @param  StartSector: start of user flash area
  * @retval 0: user flash area successfully erased
  *         1: error occurred
  */
uint32_t FLASH_If_Erase(uint32_t StartSector)
{
 8024930:	b580      	push	{r7, lr}
 8024932:	b08a      	sub	sp, #40	; 0x28
 8024934:	af00      	add	r7, sp, #0
 8024936:	6078      	str	r0, [r7, #4]
  uint32_t UserStartSector;
  uint32_t SectorError;
  FLASH_EraseInitTypeDef pEraseInit;

  /* Unlock the Flash to enable the flash control register access *************/ 
  HAL_FLASH_Unlock(); 
 8024938:	f7fd fbc4 	bl	80220c4 <HAL_FLASH_Unlock>
  FLASH_If_Init();
 802493c:	f7ff ffec 	bl	8024918 <FLASH_If_Init>
  
  /* Get the sector where start the user flash area */
  UserStartSector = GetSector(StartSector);
 8024940:	6878      	ldr	r0, [r7, #4]
 8024942:	f000 f827 	bl	8024994 <GetSector>
 8024946:	6278      	str	r0, [r7, #36]	; 0x24
  pEraseInit.TypeErase    = FLASH_TYPEERASE_SECTORS;
 8024948:	2300      	movs	r3, #0
 802494a:	60fb      	str	r3, [r7, #12]
  pEraseInit.Sector       = UserStartSector;
 802494c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802494e:	617b      	str	r3, [r7, #20]
  pEraseInit.NbSectors    = 8 - UserStartSector + 1;
 8024950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8024952:	f1c3 0309 	rsb	r3, r3, #9
 8024956:	61bb      	str	r3, [r7, #24]
  pEraseInit.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8024958:	2302      	movs	r3, #2
 802495a:	61fb      	str	r3, [r7, #28]
  
  if (StartSector < APPLICATION_ADDRESS_M4_END)
 802495c:	687b      	ldr	r3, [r7, #4]
 802495e:	4a0c      	ldr	r2, [pc, #48]	; (8024990 <FLASH_If_Erase+0x60>)
 8024960:	4293      	cmp	r3, r2
 8024962:	d20e      	bcs.n	8024982 <FLASH_If_Erase+0x52>
  {
    pEraseInit.Banks = FLASH_BANK_1;
 8024964:	2301      	movs	r3, #1
 8024966:	613b      	str	r3, [r7, #16]
    if (HAL_FLASHEx_Erase(&pEraseInit, &SectorError) != HAL_OK)
 8024968:	f107 0220 	add.w	r2, r7, #32
 802496c:	f107 030c 	add.w	r3, r7, #12
 8024970:	4611      	mov	r1, r2
 8024972:	4618      	mov	r0, r3
 8024974:	f7fd fd18 	bl	80223a8 <HAL_FLASHEx_Erase>
 8024978:	4603      	mov	r3, r0
 802497a:	2b00      	cmp	r3, #0
 802497c:	d001      	beq.n	8024982 <FLASH_If_Erase+0x52>
    {
      /* Error occurred while sector erase */
      return (1);
 802497e:	2301      	movs	r3, #1
 8024980:	e002      	b.n	8024988 <FLASH_If_Erase+0x58>
      /* Error occurred while sector erase */
      return (1);
    }
  }
  #endif
  HAL_FLASH_Lock(); 
 8024982:	f7fd fbc1 	bl	8022108 <HAL_FLASH_Lock>
  return (0);
 8024986:	2300      	movs	r3, #0
}
 8024988:	4618      	mov	r0, r3
 802498a:	3728      	adds	r7, #40	; 0x28
 802498c:	46bd      	mov	sp, r7
 802498e:	bd80      	pop	{r7, pc}
 8024990:	0807ffff 	.word	0x0807ffff

08024994 <GetSector>:
  * @brief  Gets the sector of a given address
  * @param  Address: Flash address
  * @retval The sector of a given address
  */
static uint32_t GetSector(uint32_t Address)
{
 8024994:	b480      	push	{r7}
 8024996:	b085      	sub	sp, #20
 8024998:	af00      	add	r7, sp, #0
 802499a:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 802499c:	2300      	movs	r3, #0
 802499e:	60fb      	str	r3, [r7, #12]
  
  if((Address < ADDR_FLASH_SECTOR_1_BANK1) && (Address >= ADDR_FLASH_SECTOR_0_BANK1))
 80249a0:	687b      	ldr	r3, [r7, #4]
 80249a2:	4a30      	ldr	r2, [pc, #192]	; (8024a64 <GetSector+0xd0>)
 80249a4:	4293      	cmp	r3, r2
 80249a6:	d206      	bcs.n	80249b6 <GetSector+0x22>
 80249a8:	687b      	ldr	r3, [r7, #4]
 80249aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80249ae:	d302      	bcc.n	80249b6 <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;  
 80249b0:	2300      	movs	r3, #0
 80249b2:	60fb      	str	r3, [r7, #12]
 80249b4:	e04e      	b.n	8024a54 <GetSector+0xc0>
  }
  else if((Address < ADDR_FLASH_SECTOR_2_BANK1) && (Address >= ADDR_FLASH_SECTOR_1_BANK1))
 80249b6:	687b      	ldr	r3, [r7, #4]
 80249b8:	4a2b      	ldr	r2, [pc, #172]	; (8024a68 <GetSector+0xd4>)
 80249ba:	4293      	cmp	r3, r2
 80249bc:	d206      	bcs.n	80249cc <GetSector+0x38>
 80249be:	687b      	ldr	r3, [r7, #4]
 80249c0:	4a28      	ldr	r2, [pc, #160]	; (8024a64 <GetSector+0xd0>)
 80249c2:	4293      	cmp	r3, r2
 80249c4:	d302      	bcc.n	80249cc <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;  
 80249c6:	2301      	movs	r3, #1
 80249c8:	60fb      	str	r3, [r7, #12]
 80249ca:	e043      	b.n	8024a54 <GetSector+0xc0>
  }
  else if((Address < ADDR_FLASH_SECTOR_3_BANK1) && (Address >= ADDR_FLASH_SECTOR_2_BANK1))
 80249cc:	687b      	ldr	r3, [r7, #4]
 80249ce:	4a27      	ldr	r2, [pc, #156]	; (8024a6c <GetSector+0xd8>)
 80249d0:	4293      	cmp	r3, r2
 80249d2:	d206      	bcs.n	80249e2 <GetSector+0x4e>
 80249d4:	687b      	ldr	r3, [r7, #4]
 80249d6:	4a24      	ldr	r2, [pc, #144]	; (8024a68 <GetSector+0xd4>)
 80249d8:	4293      	cmp	r3, r2
 80249da:	d302      	bcc.n	80249e2 <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;  
 80249dc:	2302      	movs	r3, #2
 80249de:	60fb      	str	r3, [r7, #12]
 80249e0:	e038      	b.n	8024a54 <GetSector+0xc0>
  }
  else if((Address < ADDR_FLASH_SECTOR_4_BANK1) && (Address >= ADDR_FLASH_SECTOR_3_BANK1))
 80249e2:	687b      	ldr	r3, [r7, #4]
 80249e4:	4a22      	ldr	r2, [pc, #136]	; (8024a70 <GetSector+0xdc>)
 80249e6:	4293      	cmp	r3, r2
 80249e8:	d806      	bhi.n	80249f8 <GetSector+0x64>
 80249ea:	687b      	ldr	r3, [r7, #4]
 80249ec:	4a1f      	ldr	r2, [pc, #124]	; (8024a6c <GetSector+0xd8>)
 80249ee:	4293      	cmp	r3, r2
 80249f0:	d302      	bcc.n	80249f8 <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;  
 80249f2:	2303      	movs	r3, #3
 80249f4:	60fb      	str	r3, [r7, #12]
 80249f6:	e02d      	b.n	8024a54 <GetSector+0xc0>
  }
  else if((Address < ADDR_FLASH_SECTOR_5_BANK1) && (Address >= ADDR_FLASH_SECTOR_4_BANK1))
 80249f8:	687b      	ldr	r3, [r7, #4]
 80249fa:	4a1e      	ldr	r2, [pc, #120]	; (8024a74 <GetSector+0xe0>)
 80249fc:	4293      	cmp	r3, r2
 80249fe:	d806      	bhi.n	8024a0e <GetSector+0x7a>
 8024a00:	687b      	ldr	r3, [r7, #4]
 8024a02:	4a1b      	ldr	r2, [pc, #108]	; (8024a70 <GetSector+0xdc>)
 8024a04:	4293      	cmp	r3, r2
 8024a06:	d902      	bls.n	8024a0e <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;  
 8024a08:	2304      	movs	r3, #4
 8024a0a:	60fb      	str	r3, [r7, #12]
 8024a0c:	e022      	b.n	8024a54 <GetSector+0xc0>
  }
  else if((Address < ADDR_FLASH_SECTOR_6_BANK1) && (Address >= ADDR_FLASH_SECTOR_5_BANK1))
 8024a0e:	687b      	ldr	r3, [r7, #4]
 8024a10:	4a19      	ldr	r2, [pc, #100]	; (8024a78 <GetSector+0xe4>)
 8024a12:	4293      	cmp	r3, r2
 8024a14:	d806      	bhi.n	8024a24 <GetSector+0x90>
 8024a16:	687b      	ldr	r3, [r7, #4]
 8024a18:	4a16      	ldr	r2, [pc, #88]	; (8024a74 <GetSector+0xe0>)
 8024a1a:	4293      	cmp	r3, r2
 8024a1c:	d902      	bls.n	8024a24 <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;  
 8024a1e:	2305      	movs	r3, #5
 8024a20:	60fb      	str	r3, [r7, #12]
 8024a22:	e017      	b.n	8024a54 <GetSector+0xc0>
  }
  else if((Address < ADDR_FLASH_SECTOR_7_BANK1) && (Address >= ADDR_FLASH_SECTOR_6_BANK1))
 8024a24:	687b      	ldr	r3, [r7, #4]
 8024a26:	4a15      	ldr	r2, [pc, #84]	; (8024a7c <GetSector+0xe8>)
 8024a28:	4293      	cmp	r3, r2
 8024a2a:	d806      	bhi.n	8024a3a <GetSector+0xa6>
 8024a2c:	687b      	ldr	r3, [r7, #4]
 8024a2e:	4a12      	ldr	r2, [pc, #72]	; (8024a78 <GetSector+0xe4>)
 8024a30:	4293      	cmp	r3, r2
 8024a32:	d902      	bls.n	8024a3a <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;  
 8024a34:	2306      	movs	r3, #6
 8024a36:	60fb      	str	r3, [r7, #12]
 8024a38:	e00c      	b.n	8024a54 <GetSector+0xc0>
  }
  else if((Address < APPLICATION_ADDRESS_M4_END) && (Address >= ADDR_FLASH_SECTOR_7_BANK1))
 8024a3a:	687b      	ldr	r3, [r7, #4]
 8024a3c:	4a10      	ldr	r2, [pc, #64]	; (8024a80 <GetSector+0xec>)
 8024a3e:	4293      	cmp	r3, r2
 8024a40:	d206      	bcs.n	8024a50 <GetSector+0xbc>
 8024a42:	687b      	ldr	r3, [r7, #4]
 8024a44:	4a0d      	ldr	r2, [pc, #52]	; (8024a7c <GetSector+0xe8>)
 8024a46:	4293      	cmp	r3, r2
 8024a48:	d902      	bls.n	8024a50 <GetSector+0xbc>
  {
    sector = FLASH_SECTOR_7;  
 8024a4a:	2307      	movs	r3, #7
 8024a4c:	60fb      	str	r3, [r7, #12]
 8024a4e:	e001      	b.n	8024a54 <GetSector+0xc0>
    sector = FLASH_SECTOR_6;  
  }
  #endif
  else /*if((Address < USER_FLASH_END_ADDRESS) && (Address >= ADDR_FLASH_SECTOR_7_BANK2))*/
  {
    sector = FLASH_SECTOR_7;  
 8024a50:	2307      	movs	r3, #7
 8024a52:	60fb      	str	r3, [r7, #12]
  }

  return sector;
 8024a54:	68fb      	ldr	r3, [r7, #12]
}
 8024a56:	4618      	mov	r0, r3
 8024a58:	3714      	adds	r7, #20
 8024a5a:	46bd      	mov	sp, r7
 8024a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024a60:	4770      	bx	lr
 8024a62:	bf00      	nop
 8024a64:	08004000 	.word	0x08004000
 8024a68:	08008000 	.word	0x08008000
 8024a6c:	0800c000 	.word	0x0800c000
 8024a70:	0800ffff 	.word	0x0800ffff
 8024a74:	0801ffff 	.word	0x0801ffff
 8024a78:	0803ffff 	.word	0x0803ffff
 8024a7c:	0805ffff 	.word	0x0805ffff
 8024a80:	0807ffff 	.word	0x0807ffff

08024a84 <Xmodem_Getchar>:
 **                                                                         **
 **                                                                         **
 *****************************************************************************/

U8 Xmodem_Getchar(U8 *retChar)
{
 8024a84:	b480      	push	{r7}
 8024a86:	b083      	sub	sp, #12
 8024a88:	af00      	add	r7, sp, #0
 8024a8a:	6078      	str	r0, [r7, #4]
    if ((__HAL_UART_GET_FLAG(&huart2, UART_FLAG_RXNE) ? SET : RESET) == SET)
 8024a8c:	4b0a      	ldr	r3, [pc, #40]	; (8024ab8 <Xmodem_Getchar+0x34>)
 8024a8e:	681b      	ldr	r3, [r3, #0]
 8024a90:	681b      	ldr	r3, [r3, #0]
 8024a92:	f003 0320 	and.w	r3, r3, #32
 8024a96:	2b20      	cmp	r3, #32
 8024a98:	d107      	bne.n	8024aaa <Xmodem_Getchar+0x26>
    {
        *retChar = (U8)huart2.Instance->DR;
 8024a9a:	4b07      	ldr	r3, [pc, #28]	; (8024ab8 <Xmodem_Getchar+0x34>)
 8024a9c:	681b      	ldr	r3, [r3, #0]
 8024a9e:	685b      	ldr	r3, [r3, #4]
 8024aa0:	b2da      	uxtb	r2, r3
 8024aa2:	687b      	ldr	r3, [r7, #4]
 8024aa4:	701a      	strb	r2, [r3, #0]
    else
    {
        return (FALSE );
    }
    
    return( TRUE );
 8024aa6:	2301      	movs	r3, #1
 8024aa8:	e000      	b.n	8024aac <Xmodem_Getchar+0x28>
        return (FALSE );
 8024aaa:	2300      	movs	r3, #0
}
 8024aac:	4618      	mov	r0, r3
 8024aae:	370c      	adds	r7, #12
 8024ab0:	46bd      	mov	sp, r7
 8024ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8024ab6:	4770      	bx	lr
 8024ab8:	200002d0 	.word	0x200002d0

08024abc <XMODEM_WaitForChar>:
 **                                                                         **
 **                                                                         **
 *****************************************************************************/

BOOL_e XMODEM_WaitForChar(U8 *u8CPtr, U32 u32ProcessTime)
{
 8024abc:	b580      	push	{r7, lr}
 8024abe:	b084      	sub	sp, #16
 8024ac0:	af00      	add	r7, sp, #0
 8024ac2:	6078      	str	r0, [r7, #4]
 8024ac4:	6039      	str	r1, [r7, #0]
    U32     u32Thisms;

    ++u32ProcessTime;
 8024ac6:	683b      	ldr	r3, [r7, #0]
 8024ac8:	3301      	adds	r3, #1
 8024aca:	603b      	str	r3, [r7, #0]

    u32Thisms = uwTick;
 8024acc:	4b0f      	ldr	r3, [pc, #60]	; (8024b0c <XMODEM_WaitForChar+0x50>)
 8024ace:	681b      	ldr	r3, [r3, #0]
 8024ad0:	60fb      	str	r3, [r7, #12]

    while (u32ProcessTime)
 8024ad2:	e012      	b.n	8024afa <XMODEM_WaitForChar+0x3e>
    {
        if (Xmodem_Getchar(u8CPtr))
 8024ad4:	6878      	ldr	r0, [r7, #4]
 8024ad6:	f7ff ffd5 	bl	8024a84 <Xmodem_Getchar>
 8024ada:	4603      	mov	r3, r0
 8024adc:	2b00      	cmp	r3, #0
 8024ade:	d001      	beq.n	8024ae4 <XMODEM_WaitForChar+0x28>
        {
            return (TRUE);
 8024ae0:	2301      	movs	r3, #1
 8024ae2:	e00e      	b.n	8024b02 <XMODEM_WaitForChar+0x46>
        }

        if (uwTick != u32Thisms) {
 8024ae4:	4b09      	ldr	r3, [pc, #36]	; (8024b0c <XMODEM_WaitForChar+0x50>)
 8024ae6:	681b      	ldr	r3, [r3, #0]
 8024ae8:	68fa      	ldr	r2, [r7, #12]
 8024aea:	429a      	cmp	r2, r3
 8024aec:	d005      	beq.n	8024afa <XMODEM_WaitForChar+0x3e>
            --u32ProcessTime;
 8024aee:	683b      	ldr	r3, [r7, #0]
 8024af0:	3b01      	subs	r3, #1
 8024af2:	603b      	str	r3, [r7, #0]
            u32Thisms = uwTick;
 8024af4:	4b05      	ldr	r3, [pc, #20]	; (8024b0c <XMODEM_WaitForChar+0x50>)
 8024af6:	681b      	ldr	r3, [r3, #0]
 8024af8:	60fb      	str	r3, [r7, #12]
    while (u32ProcessTime)
 8024afa:	683b      	ldr	r3, [r7, #0]
 8024afc:	2b00      	cmp	r3, #0
 8024afe:	d1e9      	bne.n	8024ad4 <XMODEM_WaitForChar+0x18>
        }
    }

    return (FALSE);
 8024b00:	2300      	movs	r3, #0
}
 8024b02:	4618      	mov	r0, r3
 8024b04:	3710      	adds	r7, #16
 8024b06:	46bd      	mov	sp, r7
 8024b08:	bd80      	pop	{r7, pc}
 8024b0a:	bf00      	nop
 8024b0c:	20000314 	.word	0x20000314

08024b10 <XMODEM_GetRecord>:
 **                                                                         **
 **                                                                         **
 *****************************************************************************/

BOOL_e XMODEM_GetRecord(U8 *u8DestAddress)
{
 8024b10:	b5b0      	push	{r4, r5, r7, lr}
 8024b12:	b084      	sub	sp, #16
 8024b14:	af00      	add	r7, sp, #0
 8024b16:	6078      	str	r0, [r7, #4]
    U32         u32Size = 0;
 8024b18:	2300      	movs	r3, #0
 8024b1a:	60fb      	str	r3, [r7, #12]
    U16         u16CRC_check;
    U8          u8GetChar;
    BOOL_e      bGetCheck;

    u16CRC_check = 0;
 8024b1c:	2300      	movs	r3, #0
 8024b1e:	817b      	strh	r3, [r7, #10]

    /* Packet number */
    bGetCheck = XMODEM_WaitForChar(&u8GetChar, DOWNLOAD_TIMEOUT);
 8024b20:	f107 0308 	add.w	r3, r7, #8
 8024b24:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8024b28:	4618      	mov	r0, r3
 8024b2a:	f7ff ffc7 	bl	8024abc <XMODEM_WaitForChar>
 8024b2e:	4603      	mov	r3, r0
 8024b30:	727b      	strb	r3, [r7, #9]
    if ((!bGetCheck) || (u8GetChar != gu8PacketNumber))
 8024b32:	7a7b      	ldrb	r3, [r7, #9]
 8024b34:	2b00      	cmp	r3, #0
 8024b36:	d004      	beq.n	8024b42 <XMODEM_GetRecord+0x32>
 8024b38:	7a3a      	ldrb	r2, [r7, #8]
 8024b3a:	4b3f      	ldr	r3, [pc, #252]	; (8024c38 <XMODEM_GetRecord+0x128>)
 8024b3c:	781b      	ldrb	r3, [r3, #0]
 8024b3e:	429a      	cmp	r2, r3
 8024b40:	d001      	beq.n	8024b46 <XMODEM_GetRecord+0x36>
    {
        return (FALSE);
 8024b42:	2300      	movs	r3, #0
 8024b44:	e073      	b.n	8024c2e <XMODEM_GetRecord+0x11e>
    }    

    bGetCheck = XMODEM_WaitForChar(&u8GetChar, DOWNLOAD_TIMEOUT);
 8024b46:	f107 0308 	add.w	r3, r7, #8
 8024b4a:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8024b4e:	4618      	mov	r0, r3
 8024b50:	f7ff ffb4 	bl	8024abc <XMODEM_WaitForChar>
 8024b54:	4603      	mov	r3, r0
 8024b56:	727b      	strb	r3, [r7, #9]
    if ((!bGetCheck) || (u8GetChar != (U8)~gu8PacketNumber))
 8024b58:	7a7b      	ldrb	r3, [r7, #9]
 8024b5a:	2b00      	cmp	r3, #0
 8024b5c:	d006      	beq.n	8024b6c <XMODEM_GetRecord+0x5c>
 8024b5e:	4b36      	ldr	r3, [pc, #216]	; (8024c38 <XMODEM_GetRecord+0x128>)
 8024b60:	781b      	ldrb	r3, [r3, #0]
 8024b62:	43db      	mvns	r3, r3
 8024b64:	b2da      	uxtb	r2, r3
 8024b66:	7a3b      	ldrb	r3, [r7, #8]
 8024b68:	429a      	cmp	r2, r3
 8024b6a:	d001      	beq.n	8024b70 <XMODEM_GetRecord+0x60>
    {
        return (FALSE);
 8024b6c:	2300      	movs	r3, #0
 8024b6e:	e05e      	b.n	8024c2e <XMODEM_GetRecord+0x11e>
    }    


    /* Get data - 128 or 1024 byte */
    for (u32Size = 0; u32Size < gu32PacketSize; ++u32Size)
 8024b70:	2300      	movs	r3, #0
 8024b72:	60fb      	str	r3, [r7, #12]
 8024b74:	e02d      	b.n	8024bd2 <XMODEM_GetRecord+0xc2>
    {
        if (!XMODEM_WaitForChar(&u8GetChar, DOWNLOAD_TIMEOUT))
 8024b76:	f107 0308 	add.w	r3, r7, #8
 8024b7a:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8024b7e:	4618      	mov	r0, r3
 8024b80:	f7ff ff9c 	bl	8024abc <XMODEM_WaitForChar>
 8024b84:	4603      	mov	r3, r0
 8024b86:	2b00      	cmp	r3, #0
 8024b88:	d101      	bne.n	8024b8e <XMODEM_GetRecord+0x7e>
        {
            return (FALSE);
 8024b8a:	2300      	movs	r3, #0
 8024b8c:	e04f      	b.n	8024c2e <XMODEM_GetRecord+0x11e>
        }

        /* CRC calculation */
        u16CRC_check = (u16CRC_check<<8) ^ crc16tab[((u16CRC_check>>8) ^ u8GetChar)&0x00FF];
 8024b8e:	897b      	ldrh	r3, [r7, #10]
 8024b90:	021b      	lsls	r3, r3, #8
 8024b92:	b21a      	sxth	r2, r3
 8024b94:	897b      	ldrh	r3, [r7, #10]
 8024b96:	0a1b      	lsrs	r3, r3, #8
 8024b98:	b29b      	uxth	r3, r3
 8024b9a:	4619      	mov	r1, r3
 8024b9c:	7a3b      	ldrb	r3, [r7, #8]
 8024b9e:	404b      	eors	r3, r1
 8024ba0:	b2db      	uxtb	r3, r3
 8024ba2:	4926      	ldr	r1, [pc, #152]	; (8024c3c <XMODEM_GetRecord+0x12c>)
 8024ba4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8024ba8:	b21b      	sxth	r3, r3
 8024baa:	4053      	eors	r3, r2
 8024bac:	b21b      	sxth	r3, r3
 8024bae:	817b      	strh	r3, [r7, #10]
        
        #if 1
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, u8DestAddress++, u8GetChar);
 8024bb0:	687b      	ldr	r3, [r7, #4]
 8024bb2:	1c5a      	adds	r2, r3, #1
 8024bb4:	607a      	str	r2, [r7, #4]
 8024bb6:	4619      	mov	r1, r3
 8024bb8:	7a3b      	ldrb	r3, [r7, #8]
 8024bba:	b2db      	uxtb	r3, r3
 8024bbc:	2200      	movs	r2, #0
 8024bbe:	461c      	mov	r4, r3
 8024bc0:	4615      	mov	r5, r2
 8024bc2:	4622      	mov	r2, r4
 8024bc4:	462b      	mov	r3, r5
 8024bc6:	2000      	movs	r0, #0
 8024bc8:	f7fd fa28 	bl	802201c <HAL_FLASH_Program>
    for (u32Size = 0; u32Size < gu32PacketSize; ++u32Size)
 8024bcc:	68fb      	ldr	r3, [r7, #12]
 8024bce:	3301      	adds	r3, #1
 8024bd0:	60fb      	str	r3, [r7, #12]
 8024bd2:	4b1b      	ldr	r3, [pc, #108]	; (8024c40 <XMODEM_GetRecord+0x130>)
 8024bd4:	681b      	ldr	r3, [r3, #0]
 8024bd6:	68fa      	ldr	r2, [r7, #12]
 8024bd8:	429a      	cmp	r2, r3
 8024bda:	d3cc      	bcc.n	8024b76 <XMODEM_GetRecord+0x66>
        #endif
    }

    /* high & low CRC bit */
    u16CRC_check &= 0xFFFF;
    bGetCheck = XMODEM_WaitForChar(&u8GetChar, DOWNLOAD_TIMEOUT);
 8024bdc:	f107 0308 	add.w	r3, r7, #8
 8024be0:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8024be4:	4618      	mov	r0, r3
 8024be6:	f7ff ff69 	bl	8024abc <XMODEM_WaitForChar>
 8024bea:	4603      	mov	r3, r0
 8024bec:	727b      	strb	r3, [r7, #9]
    if ((!bGetCheck) || (u8GetChar != (U8)((u16CRC_check >> 8) & 0xFF)))
 8024bee:	7a7b      	ldrb	r3, [r7, #9]
 8024bf0:	2b00      	cmp	r3, #0
 8024bf2:	d006      	beq.n	8024c02 <XMODEM_GetRecord+0xf2>
 8024bf4:	897b      	ldrh	r3, [r7, #10]
 8024bf6:	0a1b      	lsrs	r3, r3, #8
 8024bf8:	b29b      	uxth	r3, r3
 8024bfa:	b2da      	uxtb	r2, r3
 8024bfc:	7a3b      	ldrb	r3, [r7, #8]
 8024bfe:	429a      	cmp	r2, r3
 8024c00:	d001      	beq.n	8024c06 <XMODEM_GetRecord+0xf6>
    {
        return (FALSE);
 8024c02:	2300      	movs	r3, #0
 8024c04:	e013      	b.n	8024c2e <XMODEM_GetRecord+0x11e>
    }    

    bGetCheck = XMODEM_WaitForChar(&u8GetChar, DOWNLOAD_TIMEOUT);
 8024c06:	f107 0308 	add.w	r3, r7, #8
 8024c0a:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8024c0e:	4618      	mov	r0, r3
 8024c10:	f7ff ff54 	bl	8024abc <XMODEM_WaitForChar>
 8024c14:	4603      	mov	r3, r0
 8024c16:	727b      	strb	r3, [r7, #9]
    if ((!bGetCheck) || (u8GetChar != (U8)(u16CRC_check & 0xFF)))
 8024c18:	7a7b      	ldrb	r3, [r7, #9]
 8024c1a:	2b00      	cmp	r3, #0
 8024c1c:	d004      	beq.n	8024c28 <XMODEM_GetRecord+0x118>
 8024c1e:	897b      	ldrh	r3, [r7, #10]
 8024c20:	b2da      	uxtb	r2, r3
 8024c22:	7a3b      	ldrb	r3, [r7, #8]
 8024c24:	429a      	cmp	r2, r3
 8024c26:	d001      	beq.n	8024c2c <XMODEM_GetRecord+0x11c>
    {
        return (FALSE);
 8024c28:	2300      	movs	r3, #0
 8024c2a:	e000      	b.n	8024c2e <XMODEM_GetRecord+0x11e>
    }    

    return (TRUE);
 8024c2c:	2301      	movs	r3, #1
}
 8024c2e:	4618      	mov	r0, r3
 8024c30:	3710      	adds	r7, #16
 8024c32:	46bd      	mov	sp, r7
 8024c34:	bdb0      	pop	{r4, r5, r7, pc}
 8024c36:	bf00      	nop
 8024c38:	20000338 	.word	0x20000338
 8024c3c:	0802818c 	.word	0x0802818c
 8024c40:	2000033c 	.word	0x2000033c

08024c44 <XMODEM_Rx>:
 **  128 or 1024 xmodem Rx                                                  **
 **                                                                         **
 *****************************************************************************/

BOOL_e XMODEM_Rx(U32 *p_size, U8 *u8DestAddress)
{
 8024c44:	b580      	push	{r7, lr}
 8024c46:	b086      	sub	sp, #24
 8024c48:	af00      	add	r7, sp, #0
 8024c4a:	6078      	str	r0, [r7, #4]
 8024c4c:	6039      	str	r1, [r7, #0]

    U32     u32State;
    U32     u32Retrynum = 10;                            
 8024c4e:	230a      	movs	r3, #10
 8024c50:	613b      	str	r3, [r7, #16]
    U8      u8GetChar;
    U8      *u8StartAddress =  u8DestAddress;
 8024c52:	683b      	ldr	r3, [r7, #0]
 8024c54:	60fb      	str	r3, [r7, #12]

    gu32PacketTSize = 0;
 8024c56:	4b56      	ldr	r3, [pc, #344]	; (8024db0 <XMODEM_Rx+0x16c>)
 8024c58:	2200      	movs	r2, #0
 8024c5a:	601a      	str	r2, [r3, #0]
    gu8PacketNumber = 1;
 8024c5c:	4b55      	ldr	r3, [pc, #340]	; (8024db4 <XMODEM_Rx+0x170>)
 8024c5e:	2201      	movs	r2, #1
 8024c60:	701a      	strb	r2, [r3, #0]
    u32State = WAITING_START;
 8024c62:	2301      	movs	r3, #1
 8024c64:	617b      	str	r3, [r7, #20]
    
#if DBG_LED
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8024c66:	2201      	movs	r2, #1
 8024c68:	2120      	movs	r1, #32
 8024c6a:	4853      	ldr	r0, [pc, #332]	; (8024db8 <XMODEM_Rx+0x174>)
 8024c6c:	f7fd fe42 	bl	80228f4 <HAL_GPIO_WritePin>
#endif

    while (u32Retrynum)
 8024c70:	e094      	b.n	8024d9c <XMODEM_Rx+0x158>
    {                              
        if (u32State == WAITING_START)                 
 8024c72:	697b      	ldr	r3, [r7, #20]
 8024c74:	2b01      	cmp	r3, #1
 8024c76:	d12a      	bne.n	8024cce <XMODEM_Rx+0x8a>
        {
            Serial_PutByte('C');
 8024c78:	2043      	movs	r0, #67	; 0x43
 8024c7a:	f7ff fe31 	bl	80248e0 <Serial_PutByte>

            if (XMODEM_WaitForChar(&u8GetChar, DOWNLOAD_TIMEOUT))
 8024c7e:	f107 030b 	add.w	r3, r7, #11
 8024c82:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8024c86:	4618      	mov	r0, r3
 8024c88:	f7ff ff18 	bl	8024abc <XMODEM_WaitForChar>
 8024c8c:	4603      	mov	r3, r0
 8024c8e:	2b00      	cmp	r3, #0
 8024c90:	d01d      	beq.n	8024cce <XMODEM_Rx+0x8a>
            {
                /* packet head packet size  */
                if (u8GetChar == XMODEM_SOH)
 8024c92:	7afb      	ldrb	r3, [r7, #11]
 8024c94:	2b01      	cmp	r3, #1
 8024c96:	d109      	bne.n	8024cac <XMODEM_Rx+0x68>
                {
                    gu32PacketSize = PACKET_SIZE_SOH;
 8024c98:	4b48      	ldr	r3, [pc, #288]	; (8024dbc <XMODEM_Rx+0x178>)
 8024c9a:	2280      	movs	r2, #128	; 0x80
 8024c9c:	601a      	str	r2, [r3, #0]
                    TransitionState(u32State, RX_PACKET);
 8024c9e:	2303      	movs	r3, #3
 8024ca0:	617b      	str	r3, [r7, #20]
                    #if DBG_LED
                    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8024ca2:	2200      	movs	r2, #0
 8024ca4:	2120      	movs	r1, #32
 8024ca6:	4844      	ldr	r0, [pc, #272]	; (8024db8 <XMODEM_Rx+0x174>)
 8024ca8:	f7fd fe24 	bl	80228f4 <HAL_GPIO_WritePin>
                    #endif
                }
                
                // x modem 1024byte
                if (u8GetChar == XMODEM_STX)
 8024cac:	7afb      	ldrb	r3, [r7, #11]
 8024cae:	2b02      	cmp	r3, #2
 8024cb0:	d105      	bne.n	8024cbe <XMODEM_Rx+0x7a>
                {
                    gu32PacketSize = PACKET_SIZE_STX;
 8024cb2:	4b42      	ldr	r3, [pc, #264]	; (8024dbc <XMODEM_Rx+0x178>)
 8024cb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8024cb8:	601a      	str	r2, [r3, #0]
                    TransitionState(u32State, RX_PACKET);
 8024cba:	2303      	movs	r3, #3
 8024cbc:	617b      	str	r3, [r7, #20]
                }

                if ((u8GetChar == ABORT1) || (u8GetChar == ABORT2))
 8024cbe:	7afb      	ldrb	r3, [r7, #11]
 8024cc0:	2b41      	cmp	r3, #65	; 0x41
 8024cc2:	d002      	beq.n	8024cca <XMODEM_Rx+0x86>
 8024cc4:	7afb      	ldrb	r3, [r7, #11]
 8024cc6:	2b61      	cmp	r3, #97	; 0x61
 8024cc8:	d101      	bne.n	8024cce <XMODEM_Rx+0x8a>
                {
                    return (FALSE);
 8024cca:	2300      	movs	r3, #0
 8024ccc:	e06b      	b.n	8024da6 <XMODEM_Rx+0x162>
                }
            }
        }

        if (u32State == WAIT_HEAD)                      
 8024cce:	697b      	ldr	r3, [r7, #20]
 8024cd0:	2b02      	cmp	r3, #2
 8024cd2:	d136      	bne.n	8024d42 <XMODEM_Rx+0xfe>
        {
            if (!XMODEM_WaitForChar(&u8GetChar, DOWNLOAD_TIMEOUT))     
 8024cd4:	f107 030b 	add.w	r3, r7, #11
 8024cd8:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8024cdc:	4618      	mov	r0, r3
 8024cde:	f7ff feed 	bl	8024abc <XMODEM_WaitForChar>
 8024ce2:	4603      	mov	r3, r0
 8024ce4:	2b00      	cmp	r3, #0
 8024ce6:	d106      	bne.n	8024cf6 <XMODEM_Rx+0xb2>
            {                                           
                Serial_PutByte(XMODEM_NAK);
 8024ce8:	2015      	movs	r0, #21
 8024cea:	f7ff fdf9 	bl	80248e0 <Serial_PutByte>

                u32Retrynum--;                         
 8024cee:	693b      	ldr	r3, [r7, #16]
 8024cf0:	3b01      	subs	r3, #1
 8024cf2:	613b      	str	r3, [r7, #16]
 8024cf4:	e020      	b.n	8024d38 <XMODEM_Rx+0xf4>
            }
            else if (u8GetChar == XMODEM_SOH)
 8024cf6:	7afb      	ldrb	r3, [r7, #11]
 8024cf8:	2b01      	cmp	r3, #1
 8024cfa:	d105      	bne.n	8024d08 <XMODEM_Rx+0xc4>
            {
                gu32PacketSize = PACKET_SIZE_SOH;
 8024cfc:	4b2f      	ldr	r3, [pc, #188]	; (8024dbc <XMODEM_Rx+0x178>)
 8024cfe:	2280      	movs	r2, #128	; 0x80
 8024d00:	601a      	str	r2, [r3, #0]
                TransitionState(u32State, RX_PACKET);
 8024d02:	2303      	movs	r3, #3
 8024d04:	617b      	str	r3, [r7, #20]
 8024d06:	e017      	b.n	8024d38 <XMODEM_Rx+0xf4>
            }
            else if (u8GetChar == XMODEM_STX)
 8024d08:	7afb      	ldrb	r3, [r7, #11]
 8024d0a:	2b02      	cmp	r3, #2
 8024d0c:	d106      	bne.n	8024d1c <XMODEM_Rx+0xd8>
            {
                gu32PacketSize = PACKET_SIZE_STX;
 8024d0e:	4b2b      	ldr	r3, [pc, #172]	; (8024dbc <XMODEM_Rx+0x178>)
 8024d10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8024d14:	601a      	str	r2, [r3, #0]
                TransitionState(u32State, RX_PACKET);
 8024d16:	2303      	movs	r3, #3
 8024d18:	617b      	str	r3, [r7, #20]
 8024d1a:	e00d      	b.n	8024d38 <XMODEM_Rx+0xf4>
            }
            else if (u8GetChar == XMODEM_EOT) 
 8024d1c:	7afb      	ldrb	r3, [r7, #11]
 8024d1e:	2b04      	cmp	r3, #4
 8024d20:	d10a      	bne.n	8024d38 <XMODEM_Rx+0xf4>
            {
                Serial_PutByte(XMODEM_ACK);
 8024d22:	2006      	movs	r0, #6
 8024d24:	f7ff fddc 	bl	80248e0 <Serial_PutByte>

                *p_size = (u8DestAddress - u8StartAddress);
 8024d28:	683a      	ldr	r2, [r7, #0]
 8024d2a:	68fb      	ldr	r3, [r7, #12]
 8024d2c:	1ad3      	subs	r3, r2, r3
 8024d2e:	461a      	mov	r2, r3
 8024d30:	687b      	ldr	r3, [r7, #4]
 8024d32:	601a      	str	r2, [r3, #0]
                //*p_size = gu32PacketTSize;
                return (TRUE);
 8024d34:	2301      	movs	r3, #1
 8024d36:	e036      	b.n	8024da6 <XMODEM_Rx+0x162>
            }

            if (u8GetChar == XMODEM_CAN) /* CANCEL */
 8024d38:	7afb      	ldrb	r3, [r7, #11]
 8024d3a:	2b18      	cmp	r3, #24
 8024d3c:	d101      	bne.n	8024d42 <XMODEM_Rx+0xfe>
            {
                return (FALSE);                        
 8024d3e:	2300      	movs	r3, #0
 8024d40:	e031      	b.n	8024da6 <XMODEM_Rx+0x162>
            }
        }

        if (u32State == RX_PACKET)
 8024d42:	697b      	ldr	r3, [r7, #20]
 8024d44:	2b03      	cmp	r3, #3
 8024d46:	d129      	bne.n	8024d9c <XMODEM_Rx+0x158>
        {
            #if DBG_LED
            HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8024d48:	2120      	movs	r1, #32
 8024d4a:	481b      	ldr	r0, [pc, #108]	; (8024db8 <XMODEM_Rx+0x174>)
 8024d4c:	f7fd fdeb 	bl	8022926 <HAL_GPIO_TogglePin>
            #endif
            if (XMODEM_GetRecord(u8DestAddress))
 8024d50:	6838      	ldr	r0, [r7, #0]
 8024d52:	f7ff fedd 	bl	8024b10 <XMODEM_GetRecord>
 8024d56:	4603      	mov	r3, r0
 8024d58:	2b00      	cmp	r3, #0
 8024d5a:	d017      	beq.n	8024d8c <XMODEM_Rx+0x148>
            {
                Serial_PutByte(XMODEM_ACK);
 8024d5c:	2006      	movs	r0, #6
 8024d5e:	f7ff fdbf 	bl	80248e0 <Serial_PutByte>
                u8DestAddress += gu32PacketSize;
 8024d62:	4b16      	ldr	r3, [pc, #88]	; (8024dbc <XMODEM_Rx+0x178>)
 8024d64:	681b      	ldr	r3, [r3, #0]
 8024d66:	683a      	ldr	r2, [r7, #0]
 8024d68:	4413      	add	r3, r2
 8024d6a:	603b      	str	r3, [r7, #0]
                gu32PacketTSize += gu32PacketSize;
 8024d6c:	4b10      	ldr	r3, [pc, #64]	; (8024db0 <XMODEM_Rx+0x16c>)
 8024d6e:	681a      	ldr	r2, [r3, #0]
 8024d70:	4b12      	ldr	r3, [pc, #72]	; (8024dbc <XMODEM_Rx+0x178>)
 8024d72:	681b      	ldr	r3, [r3, #0]
 8024d74:	4413      	add	r3, r2
 8024d76:	4a0e      	ldr	r2, [pc, #56]	; (8024db0 <XMODEM_Rx+0x16c>)
 8024d78:	6013      	str	r3, [r2, #0]
                ++gu8PacketNumber;
 8024d7a:	4b0e      	ldr	r3, [pc, #56]	; (8024db4 <XMODEM_Rx+0x170>)
 8024d7c:	781b      	ldrb	r3, [r3, #0]
 8024d7e:	3301      	adds	r3, #1
 8024d80:	b2da      	uxtb	r2, r3
 8024d82:	4b0c      	ldr	r3, [pc, #48]	; (8024db4 <XMODEM_Rx+0x170>)
 8024d84:	701a      	strb	r2, [r3, #0]
                TransitionState(u32State, WAIT_HEAD);
 8024d86:	2302      	movs	r3, #2
 8024d88:	617b      	str	r3, [r7, #20]
 8024d8a:	e007      	b.n	8024d9c <XMODEM_Rx+0x158>
            }
            else
            {
                Serial_PutByte(XMODEM_ACK);
 8024d8c:	2006      	movs	r0, #6
 8024d8e:	f7ff fda7 	bl	80248e0 <Serial_PutByte>
                u32Retrynum--;
 8024d92:	693b      	ldr	r3, [r7, #16]
 8024d94:	3b01      	subs	r3, #1
 8024d96:	613b      	str	r3, [r7, #16]
                TransitionState(u32State, WAIT_HEAD);
 8024d98:	2302      	movs	r3, #2
 8024d9a:	617b      	str	r3, [r7, #20]
    while (u32Retrynum)
 8024d9c:	693b      	ldr	r3, [r7, #16]
 8024d9e:	2b00      	cmp	r3, #0
 8024da0:	f47f af67 	bne.w	8024c72 <XMODEM_Rx+0x2e>
            }
        }
    }

    return (FALSE);
 8024da4:	2300      	movs	r3, #0
}
 8024da6:	4618      	mov	r0, r3
 8024da8:	3718      	adds	r7, #24
 8024daa:	46bd      	mov	sp, r7
 8024dac:	bd80      	pop	{r7, pc}
 8024dae:	bf00      	nop
 8024db0:	20000340 	.word	0x20000340
 8024db4:	20000338 	.word	0x20000338
 8024db8:	40020000 	.word	0x40020000
 8024dbc:	2000033c 	.word	0x2000033c

08024dc0 <atoi>:
 8024dc0:	220a      	movs	r2, #10
 8024dc2:	2100      	movs	r1, #0
 8024dc4:	f000 beec 	b.w	8025ba0 <strtol>

08024dc8 <__errno>:
 8024dc8:	4b01      	ldr	r3, [pc, #4]	; (8024dd0 <__errno+0x8>)
 8024dca:	6818      	ldr	r0, [r3, #0]
 8024dcc:	4770      	bx	lr
 8024dce:	bf00      	nop
 8024dd0:	20000010 	.word	0x20000010

08024dd4 <__libc_init_array>:
 8024dd4:	b570      	push	{r4, r5, r6, lr}
 8024dd6:	4d0d      	ldr	r5, [pc, #52]	; (8024e0c <__libc_init_array+0x38>)
 8024dd8:	4c0d      	ldr	r4, [pc, #52]	; (8024e10 <__libc_init_array+0x3c>)
 8024dda:	1b64      	subs	r4, r4, r5
 8024ddc:	10a4      	asrs	r4, r4, #2
 8024dde:	2600      	movs	r6, #0
 8024de0:	42a6      	cmp	r6, r4
 8024de2:	d109      	bne.n	8024df8 <__libc_init_array+0x24>
 8024de4:	4d0b      	ldr	r5, [pc, #44]	; (8024e14 <__libc_init_array+0x40>)
 8024de6:	4c0c      	ldr	r4, [pc, #48]	; (8024e18 <__libc_init_array+0x44>)
 8024de8:	f002 ffd8 	bl	8027d9c <_init>
 8024dec:	1b64      	subs	r4, r4, r5
 8024dee:	10a4      	asrs	r4, r4, #2
 8024df0:	2600      	movs	r6, #0
 8024df2:	42a6      	cmp	r6, r4
 8024df4:	d105      	bne.n	8024e02 <__libc_init_array+0x2e>
 8024df6:	bd70      	pop	{r4, r5, r6, pc}
 8024df8:	f855 3b04 	ldr.w	r3, [r5], #4
 8024dfc:	4798      	blx	r3
 8024dfe:	3601      	adds	r6, #1
 8024e00:	e7ee      	b.n	8024de0 <__libc_init_array+0xc>
 8024e02:	f855 3b04 	ldr.w	r3, [r5], #4
 8024e06:	4798      	blx	r3
 8024e08:	3601      	adds	r6, #1
 8024e0a:	e7f2      	b.n	8024df2 <__libc_init_array+0x1e>
 8024e0c:	080287d0 	.word	0x080287d0
 8024e10:	080287d0 	.word	0x080287d0
 8024e14:	080287d0 	.word	0x080287d0
 8024e18:	080287d4 	.word	0x080287d4

08024e1c <memset>:
 8024e1c:	4402      	add	r2, r0
 8024e1e:	4603      	mov	r3, r0
 8024e20:	4293      	cmp	r3, r2
 8024e22:	d100      	bne.n	8024e26 <memset+0xa>
 8024e24:	4770      	bx	lr
 8024e26:	f803 1b01 	strb.w	r1, [r3], #1
 8024e2a:	e7f9      	b.n	8024e20 <memset+0x4>

08024e2c <__cvt>:
 8024e2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8024e30:	ec55 4b10 	vmov	r4, r5, d0
 8024e34:	2d00      	cmp	r5, #0
 8024e36:	460e      	mov	r6, r1
 8024e38:	4619      	mov	r1, r3
 8024e3a:	462b      	mov	r3, r5
 8024e3c:	bfbb      	ittet	lt
 8024e3e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8024e42:	461d      	movlt	r5, r3
 8024e44:	2300      	movge	r3, #0
 8024e46:	232d      	movlt	r3, #45	; 0x2d
 8024e48:	700b      	strb	r3, [r1, #0]
 8024e4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024e4c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8024e50:	4691      	mov	r9, r2
 8024e52:	f023 0820 	bic.w	r8, r3, #32
 8024e56:	bfbc      	itt	lt
 8024e58:	4622      	movlt	r2, r4
 8024e5a:	4614      	movlt	r4, r2
 8024e5c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8024e60:	d005      	beq.n	8024e6e <__cvt+0x42>
 8024e62:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8024e66:	d100      	bne.n	8024e6a <__cvt+0x3e>
 8024e68:	3601      	adds	r6, #1
 8024e6a:	2102      	movs	r1, #2
 8024e6c:	e000      	b.n	8024e70 <__cvt+0x44>
 8024e6e:	2103      	movs	r1, #3
 8024e70:	ab03      	add	r3, sp, #12
 8024e72:	9301      	str	r3, [sp, #4]
 8024e74:	ab02      	add	r3, sp, #8
 8024e76:	9300      	str	r3, [sp, #0]
 8024e78:	ec45 4b10 	vmov	d0, r4, r5
 8024e7c:	4653      	mov	r3, sl
 8024e7e:	4632      	mov	r2, r6
 8024e80:	f001 f802 	bl	8025e88 <_dtoa_r>
 8024e84:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8024e88:	4607      	mov	r7, r0
 8024e8a:	d102      	bne.n	8024e92 <__cvt+0x66>
 8024e8c:	f019 0f01 	tst.w	r9, #1
 8024e90:	d022      	beq.n	8024ed8 <__cvt+0xac>
 8024e92:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8024e96:	eb07 0906 	add.w	r9, r7, r6
 8024e9a:	d110      	bne.n	8024ebe <__cvt+0x92>
 8024e9c:	783b      	ldrb	r3, [r7, #0]
 8024e9e:	2b30      	cmp	r3, #48	; 0x30
 8024ea0:	d10a      	bne.n	8024eb8 <__cvt+0x8c>
 8024ea2:	2200      	movs	r2, #0
 8024ea4:	2300      	movs	r3, #0
 8024ea6:	4620      	mov	r0, r4
 8024ea8:	4629      	mov	r1, r5
 8024eaa:	f7fb fe25 	bl	8020af8 <__aeabi_dcmpeq>
 8024eae:	b918      	cbnz	r0, 8024eb8 <__cvt+0x8c>
 8024eb0:	f1c6 0601 	rsb	r6, r6, #1
 8024eb4:	f8ca 6000 	str.w	r6, [sl]
 8024eb8:	f8da 3000 	ldr.w	r3, [sl]
 8024ebc:	4499      	add	r9, r3
 8024ebe:	2200      	movs	r2, #0
 8024ec0:	2300      	movs	r3, #0
 8024ec2:	4620      	mov	r0, r4
 8024ec4:	4629      	mov	r1, r5
 8024ec6:	f7fb fe17 	bl	8020af8 <__aeabi_dcmpeq>
 8024eca:	b108      	cbz	r0, 8024ed0 <__cvt+0xa4>
 8024ecc:	f8cd 900c 	str.w	r9, [sp, #12]
 8024ed0:	2230      	movs	r2, #48	; 0x30
 8024ed2:	9b03      	ldr	r3, [sp, #12]
 8024ed4:	454b      	cmp	r3, r9
 8024ed6:	d307      	bcc.n	8024ee8 <__cvt+0xbc>
 8024ed8:	9b03      	ldr	r3, [sp, #12]
 8024eda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8024edc:	1bdb      	subs	r3, r3, r7
 8024ede:	4638      	mov	r0, r7
 8024ee0:	6013      	str	r3, [r2, #0]
 8024ee2:	b004      	add	sp, #16
 8024ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024ee8:	1c59      	adds	r1, r3, #1
 8024eea:	9103      	str	r1, [sp, #12]
 8024eec:	701a      	strb	r2, [r3, #0]
 8024eee:	e7f0      	b.n	8024ed2 <__cvt+0xa6>

08024ef0 <__exponent>:
 8024ef0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8024ef2:	4603      	mov	r3, r0
 8024ef4:	2900      	cmp	r1, #0
 8024ef6:	bfb8      	it	lt
 8024ef8:	4249      	neglt	r1, r1
 8024efa:	f803 2b02 	strb.w	r2, [r3], #2
 8024efe:	bfb4      	ite	lt
 8024f00:	222d      	movlt	r2, #45	; 0x2d
 8024f02:	222b      	movge	r2, #43	; 0x2b
 8024f04:	2909      	cmp	r1, #9
 8024f06:	7042      	strb	r2, [r0, #1]
 8024f08:	dd2a      	ble.n	8024f60 <__exponent+0x70>
 8024f0a:	f10d 0407 	add.w	r4, sp, #7
 8024f0e:	46a4      	mov	ip, r4
 8024f10:	270a      	movs	r7, #10
 8024f12:	46a6      	mov	lr, r4
 8024f14:	460a      	mov	r2, r1
 8024f16:	fb91 f6f7 	sdiv	r6, r1, r7
 8024f1a:	fb07 1516 	mls	r5, r7, r6, r1
 8024f1e:	3530      	adds	r5, #48	; 0x30
 8024f20:	2a63      	cmp	r2, #99	; 0x63
 8024f22:	f104 34ff 	add.w	r4, r4, #4294967295
 8024f26:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8024f2a:	4631      	mov	r1, r6
 8024f2c:	dcf1      	bgt.n	8024f12 <__exponent+0x22>
 8024f2e:	3130      	adds	r1, #48	; 0x30
 8024f30:	f1ae 0502 	sub.w	r5, lr, #2
 8024f34:	f804 1c01 	strb.w	r1, [r4, #-1]
 8024f38:	1c44      	adds	r4, r0, #1
 8024f3a:	4629      	mov	r1, r5
 8024f3c:	4561      	cmp	r1, ip
 8024f3e:	d30a      	bcc.n	8024f56 <__exponent+0x66>
 8024f40:	f10d 0209 	add.w	r2, sp, #9
 8024f44:	eba2 020e 	sub.w	r2, r2, lr
 8024f48:	4565      	cmp	r5, ip
 8024f4a:	bf88      	it	hi
 8024f4c:	2200      	movhi	r2, #0
 8024f4e:	4413      	add	r3, r2
 8024f50:	1a18      	subs	r0, r3, r0
 8024f52:	b003      	add	sp, #12
 8024f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024f56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8024f5a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8024f5e:	e7ed      	b.n	8024f3c <__exponent+0x4c>
 8024f60:	2330      	movs	r3, #48	; 0x30
 8024f62:	3130      	adds	r1, #48	; 0x30
 8024f64:	7083      	strb	r3, [r0, #2]
 8024f66:	70c1      	strb	r1, [r0, #3]
 8024f68:	1d03      	adds	r3, r0, #4
 8024f6a:	e7f1      	b.n	8024f50 <__exponent+0x60>

08024f6c <_printf_float>:
 8024f6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024f70:	ed2d 8b02 	vpush	{d8}
 8024f74:	b08d      	sub	sp, #52	; 0x34
 8024f76:	460c      	mov	r4, r1
 8024f78:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8024f7c:	4616      	mov	r6, r2
 8024f7e:	461f      	mov	r7, r3
 8024f80:	4605      	mov	r5, r0
 8024f82:	f001 ff39 	bl	8026df8 <_localeconv_r>
 8024f86:	f8d0 a000 	ldr.w	sl, [r0]
 8024f8a:	4650      	mov	r0, sl
 8024f8c:	f7fb f932 	bl	80201f4 <strlen>
 8024f90:	2300      	movs	r3, #0
 8024f92:	930a      	str	r3, [sp, #40]	; 0x28
 8024f94:	6823      	ldr	r3, [r4, #0]
 8024f96:	9305      	str	r3, [sp, #20]
 8024f98:	f8d8 3000 	ldr.w	r3, [r8]
 8024f9c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8024fa0:	3307      	adds	r3, #7
 8024fa2:	f023 0307 	bic.w	r3, r3, #7
 8024fa6:	f103 0208 	add.w	r2, r3, #8
 8024faa:	f8c8 2000 	str.w	r2, [r8]
 8024fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8024fb2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8024fb6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8024fba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8024fbe:	9307      	str	r3, [sp, #28]
 8024fc0:	f8cd 8018 	str.w	r8, [sp, #24]
 8024fc4:	ee08 0a10 	vmov	s16, r0
 8024fc8:	4b9f      	ldr	r3, [pc, #636]	; (8025248 <_printf_float+0x2dc>)
 8024fca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8024fce:	f04f 32ff 	mov.w	r2, #4294967295
 8024fd2:	f7fb fdc3 	bl	8020b5c <__aeabi_dcmpun>
 8024fd6:	bb88      	cbnz	r0, 802503c <_printf_float+0xd0>
 8024fd8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8024fdc:	4b9a      	ldr	r3, [pc, #616]	; (8025248 <_printf_float+0x2dc>)
 8024fde:	f04f 32ff 	mov.w	r2, #4294967295
 8024fe2:	f7fb fd9d 	bl	8020b20 <__aeabi_dcmple>
 8024fe6:	bb48      	cbnz	r0, 802503c <_printf_float+0xd0>
 8024fe8:	2200      	movs	r2, #0
 8024fea:	2300      	movs	r3, #0
 8024fec:	4640      	mov	r0, r8
 8024fee:	4649      	mov	r1, r9
 8024ff0:	f7fb fd8c 	bl	8020b0c <__aeabi_dcmplt>
 8024ff4:	b110      	cbz	r0, 8024ffc <_printf_float+0x90>
 8024ff6:	232d      	movs	r3, #45	; 0x2d
 8024ff8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8024ffc:	4b93      	ldr	r3, [pc, #588]	; (802524c <_printf_float+0x2e0>)
 8024ffe:	4894      	ldr	r0, [pc, #592]	; (8025250 <_printf_float+0x2e4>)
 8025000:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8025004:	bf94      	ite	ls
 8025006:	4698      	movls	r8, r3
 8025008:	4680      	movhi	r8, r0
 802500a:	2303      	movs	r3, #3
 802500c:	6123      	str	r3, [r4, #16]
 802500e:	9b05      	ldr	r3, [sp, #20]
 8025010:	f023 0204 	bic.w	r2, r3, #4
 8025014:	6022      	str	r2, [r4, #0]
 8025016:	f04f 0900 	mov.w	r9, #0
 802501a:	9700      	str	r7, [sp, #0]
 802501c:	4633      	mov	r3, r6
 802501e:	aa0b      	add	r2, sp, #44	; 0x2c
 8025020:	4621      	mov	r1, r4
 8025022:	4628      	mov	r0, r5
 8025024:	f000 f9d8 	bl	80253d8 <_printf_common>
 8025028:	3001      	adds	r0, #1
 802502a:	f040 8090 	bne.w	802514e <_printf_float+0x1e2>
 802502e:	f04f 30ff 	mov.w	r0, #4294967295
 8025032:	b00d      	add	sp, #52	; 0x34
 8025034:	ecbd 8b02 	vpop	{d8}
 8025038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802503c:	4642      	mov	r2, r8
 802503e:	464b      	mov	r3, r9
 8025040:	4640      	mov	r0, r8
 8025042:	4649      	mov	r1, r9
 8025044:	f7fb fd8a 	bl	8020b5c <__aeabi_dcmpun>
 8025048:	b140      	cbz	r0, 802505c <_printf_float+0xf0>
 802504a:	464b      	mov	r3, r9
 802504c:	2b00      	cmp	r3, #0
 802504e:	bfbc      	itt	lt
 8025050:	232d      	movlt	r3, #45	; 0x2d
 8025052:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8025056:	487f      	ldr	r0, [pc, #508]	; (8025254 <_printf_float+0x2e8>)
 8025058:	4b7f      	ldr	r3, [pc, #508]	; (8025258 <_printf_float+0x2ec>)
 802505a:	e7d1      	b.n	8025000 <_printf_float+0x94>
 802505c:	6863      	ldr	r3, [r4, #4]
 802505e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8025062:	9206      	str	r2, [sp, #24]
 8025064:	1c5a      	adds	r2, r3, #1
 8025066:	d13f      	bne.n	80250e8 <_printf_float+0x17c>
 8025068:	2306      	movs	r3, #6
 802506a:	6063      	str	r3, [r4, #4]
 802506c:	9b05      	ldr	r3, [sp, #20]
 802506e:	6861      	ldr	r1, [r4, #4]
 8025070:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8025074:	2300      	movs	r3, #0
 8025076:	9303      	str	r3, [sp, #12]
 8025078:	ab0a      	add	r3, sp, #40	; 0x28
 802507a:	e9cd b301 	strd	fp, r3, [sp, #4]
 802507e:	ab09      	add	r3, sp, #36	; 0x24
 8025080:	ec49 8b10 	vmov	d0, r8, r9
 8025084:	9300      	str	r3, [sp, #0]
 8025086:	6022      	str	r2, [r4, #0]
 8025088:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 802508c:	4628      	mov	r0, r5
 802508e:	f7ff fecd 	bl	8024e2c <__cvt>
 8025092:	9b06      	ldr	r3, [sp, #24]
 8025094:	9909      	ldr	r1, [sp, #36]	; 0x24
 8025096:	2b47      	cmp	r3, #71	; 0x47
 8025098:	4680      	mov	r8, r0
 802509a:	d108      	bne.n	80250ae <_printf_float+0x142>
 802509c:	1cc8      	adds	r0, r1, #3
 802509e:	db02      	blt.n	80250a6 <_printf_float+0x13a>
 80250a0:	6863      	ldr	r3, [r4, #4]
 80250a2:	4299      	cmp	r1, r3
 80250a4:	dd41      	ble.n	802512a <_printf_float+0x1be>
 80250a6:	f1ab 0b02 	sub.w	fp, fp, #2
 80250aa:	fa5f fb8b 	uxtb.w	fp, fp
 80250ae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80250b2:	d820      	bhi.n	80250f6 <_printf_float+0x18a>
 80250b4:	3901      	subs	r1, #1
 80250b6:	465a      	mov	r2, fp
 80250b8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80250bc:	9109      	str	r1, [sp, #36]	; 0x24
 80250be:	f7ff ff17 	bl	8024ef0 <__exponent>
 80250c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80250c4:	1813      	adds	r3, r2, r0
 80250c6:	2a01      	cmp	r2, #1
 80250c8:	4681      	mov	r9, r0
 80250ca:	6123      	str	r3, [r4, #16]
 80250cc:	dc02      	bgt.n	80250d4 <_printf_float+0x168>
 80250ce:	6822      	ldr	r2, [r4, #0]
 80250d0:	07d2      	lsls	r2, r2, #31
 80250d2:	d501      	bpl.n	80250d8 <_printf_float+0x16c>
 80250d4:	3301      	adds	r3, #1
 80250d6:	6123      	str	r3, [r4, #16]
 80250d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80250dc:	2b00      	cmp	r3, #0
 80250de:	d09c      	beq.n	802501a <_printf_float+0xae>
 80250e0:	232d      	movs	r3, #45	; 0x2d
 80250e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80250e6:	e798      	b.n	802501a <_printf_float+0xae>
 80250e8:	9a06      	ldr	r2, [sp, #24]
 80250ea:	2a47      	cmp	r2, #71	; 0x47
 80250ec:	d1be      	bne.n	802506c <_printf_float+0x100>
 80250ee:	2b00      	cmp	r3, #0
 80250f0:	d1bc      	bne.n	802506c <_printf_float+0x100>
 80250f2:	2301      	movs	r3, #1
 80250f4:	e7b9      	b.n	802506a <_printf_float+0xfe>
 80250f6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80250fa:	d118      	bne.n	802512e <_printf_float+0x1c2>
 80250fc:	2900      	cmp	r1, #0
 80250fe:	6863      	ldr	r3, [r4, #4]
 8025100:	dd0b      	ble.n	802511a <_printf_float+0x1ae>
 8025102:	6121      	str	r1, [r4, #16]
 8025104:	b913      	cbnz	r3, 802510c <_printf_float+0x1a0>
 8025106:	6822      	ldr	r2, [r4, #0]
 8025108:	07d0      	lsls	r0, r2, #31
 802510a:	d502      	bpl.n	8025112 <_printf_float+0x1a6>
 802510c:	3301      	adds	r3, #1
 802510e:	440b      	add	r3, r1
 8025110:	6123      	str	r3, [r4, #16]
 8025112:	65a1      	str	r1, [r4, #88]	; 0x58
 8025114:	f04f 0900 	mov.w	r9, #0
 8025118:	e7de      	b.n	80250d8 <_printf_float+0x16c>
 802511a:	b913      	cbnz	r3, 8025122 <_printf_float+0x1b6>
 802511c:	6822      	ldr	r2, [r4, #0]
 802511e:	07d2      	lsls	r2, r2, #31
 8025120:	d501      	bpl.n	8025126 <_printf_float+0x1ba>
 8025122:	3302      	adds	r3, #2
 8025124:	e7f4      	b.n	8025110 <_printf_float+0x1a4>
 8025126:	2301      	movs	r3, #1
 8025128:	e7f2      	b.n	8025110 <_printf_float+0x1a4>
 802512a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 802512e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025130:	4299      	cmp	r1, r3
 8025132:	db05      	blt.n	8025140 <_printf_float+0x1d4>
 8025134:	6823      	ldr	r3, [r4, #0]
 8025136:	6121      	str	r1, [r4, #16]
 8025138:	07d8      	lsls	r0, r3, #31
 802513a:	d5ea      	bpl.n	8025112 <_printf_float+0x1a6>
 802513c:	1c4b      	adds	r3, r1, #1
 802513e:	e7e7      	b.n	8025110 <_printf_float+0x1a4>
 8025140:	2900      	cmp	r1, #0
 8025142:	bfd4      	ite	le
 8025144:	f1c1 0202 	rsble	r2, r1, #2
 8025148:	2201      	movgt	r2, #1
 802514a:	4413      	add	r3, r2
 802514c:	e7e0      	b.n	8025110 <_printf_float+0x1a4>
 802514e:	6823      	ldr	r3, [r4, #0]
 8025150:	055a      	lsls	r2, r3, #21
 8025152:	d407      	bmi.n	8025164 <_printf_float+0x1f8>
 8025154:	6923      	ldr	r3, [r4, #16]
 8025156:	4642      	mov	r2, r8
 8025158:	4631      	mov	r1, r6
 802515a:	4628      	mov	r0, r5
 802515c:	47b8      	blx	r7
 802515e:	3001      	adds	r0, #1
 8025160:	d12c      	bne.n	80251bc <_printf_float+0x250>
 8025162:	e764      	b.n	802502e <_printf_float+0xc2>
 8025164:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8025168:	f240 80e0 	bls.w	802532c <_printf_float+0x3c0>
 802516c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8025170:	2200      	movs	r2, #0
 8025172:	2300      	movs	r3, #0
 8025174:	f7fb fcc0 	bl	8020af8 <__aeabi_dcmpeq>
 8025178:	2800      	cmp	r0, #0
 802517a:	d034      	beq.n	80251e6 <_printf_float+0x27a>
 802517c:	4a37      	ldr	r2, [pc, #220]	; (802525c <_printf_float+0x2f0>)
 802517e:	2301      	movs	r3, #1
 8025180:	4631      	mov	r1, r6
 8025182:	4628      	mov	r0, r5
 8025184:	47b8      	blx	r7
 8025186:	3001      	adds	r0, #1
 8025188:	f43f af51 	beq.w	802502e <_printf_float+0xc2>
 802518c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8025190:	429a      	cmp	r2, r3
 8025192:	db02      	blt.n	802519a <_printf_float+0x22e>
 8025194:	6823      	ldr	r3, [r4, #0]
 8025196:	07d8      	lsls	r0, r3, #31
 8025198:	d510      	bpl.n	80251bc <_printf_float+0x250>
 802519a:	ee18 3a10 	vmov	r3, s16
 802519e:	4652      	mov	r2, sl
 80251a0:	4631      	mov	r1, r6
 80251a2:	4628      	mov	r0, r5
 80251a4:	47b8      	blx	r7
 80251a6:	3001      	adds	r0, #1
 80251a8:	f43f af41 	beq.w	802502e <_printf_float+0xc2>
 80251ac:	f04f 0800 	mov.w	r8, #0
 80251b0:	f104 091a 	add.w	r9, r4, #26
 80251b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80251b6:	3b01      	subs	r3, #1
 80251b8:	4543      	cmp	r3, r8
 80251ba:	dc09      	bgt.n	80251d0 <_printf_float+0x264>
 80251bc:	6823      	ldr	r3, [r4, #0]
 80251be:	079b      	lsls	r3, r3, #30
 80251c0:	f100 8105 	bmi.w	80253ce <_printf_float+0x462>
 80251c4:	68e0      	ldr	r0, [r4, #12]
 80251c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80251c8:	4298      	cmp	r0, r3
 80251ca:	bfb8      	it	lt
 80251cc:	4618      	movlt	r0, r3
 80251ce:	e730      	b.n	8025032 <_printf_float+0xc6>
 80251d0:	2301      	movs	r3, #1
 80251d2:	464a      	mov	r2, r9
 80251d4:	4631      	mov	r1, r6
 80251d6:	4628      	mov	r0, r5
 80251d8:	47b8      	blx	r7
 80251da:	3001      	adds	r0, #1
 80251dc:	f43f af27 	beq.w	802502e <_printf_float+0xc2>
 80251e0:	f108 0801 	add.w	r8, r8, #1
 80251e4:	e7e6      	b.n	80251b4 <_printf_float+0x248>
 80251e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80251e8:	2b00      	cmp	r3, #0
 80251ea:	dc39      	bgt.n	8025260 <_printf_float+0x2f4>
 80251ec:	4a1b      	ldr	r2, [pc, #108]	; (802525c <_printf_float+0x2f0>)
 80251ee:	2301      	movs	r3, #1
 80251f0:	4631      	mov	r1, r6
 80251f2:	4628      	mov	r0, r5
 80251f4:	47b8      	blx	r7
 80251f6:	3001      	adds	r0, #1
 80251f8:	f43f af19 	beq.w	802502e <_printf_float+0xc2>
 80251fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8025200:	4313      	orrs	r3, r2
 8025202:	d102      	bne.n	802520a <_printf_float+0x29e>
 8025204:	6823      	ldr	r3, [r4, #0]
 8025206:	07d9      	lsls	r1, r3, #31
 8025208:	d5d8      	bpl.n	80251bc <_printf_float+0x250>
 802520a:	ee18 3a10 	vmov	r3, s16
 802520e:	4652      	mov	r2, sl
 8025210:	4631      	mov	r1, r6
 8025212:	4628      	mov	r0, r5
 8025214:	47b8      	blx	r7
 8025216:	3001      	adds	r0, #1
 8025218:	f43f af09 	beq.w	802502e <_printf_float+0xc2>
 802521c:	f04f 0900 	mov.w	r9, #0
 8025220:	f104 0a1a 	add.w	sl, r4, #26
 8025224:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8025226:	425b      	negs	r3, r3
 8025228:	454b      	cmp	r3, r9
 802522a:	dc01      	bgt.n	8025230 <_printf_float+0x2c4>
 802522c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802522e:	e792      	b.n	8025156 <_printf_float+0x1ea>
 8025230:	2301      	movs	r3, #1
 8025232:	4652      	mov	r2, sl
 8025234:	4631      	mov	r1, r6
 8025236:	4628      	mov	r0, r5
 8025238:	47b8      	blx	r7
 802523a:	3001      	adds	r0, #1
 802523c:	f43f aef7 	beq.w	802502e <_printf_float+0xc2>
 8025240:	f109 0901 	add.w	r9, r9, #1
 8025244:	e7ee      	b.n	8025224 <_printf_float+0x2b8>
 8025246:	bf00      	nop
 8025248:	7fefffff 	.word	0x7fefffff
 802524c:	08028390 	.word	0x08028390
 8025250:	08028394 	.word	0x08028394
 8025254:	0802839c 	.word	0x0802839c
 8025258:	08028398 	.word	0x08028398
 802525c:	080283a0 	.word	0x080283a0
 8025260:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8025262:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8025264:	429a      	cmp	r2, r3
 8025266:	bfa8      	it	ge
 8025268:	461a      	movge	r2, r3
 802526a:	2a00      	cmp	r2, #0
 802526c:	4691      	mov	r9, r2
 802526e:	dc37      	bgt.n	80252e0 <_printf_float+0x374>
 8025270:	f04f 0b00 	mov.w	fp, #0
 8025274:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8025278:	f104 021a 	add.w	r2, r4, #26
 802527c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 802527e:	9305      	str	r3, [sp, #20]
 8025280:	eba3 0309 	sub.w	r3, r3, r9
 8025284:	455b      	cmp	r3, fp
 8025286:	dc33      	bgt.n	80252f0 <_printf_float+0x384>
 8025288:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 802528c:	429a      	cmp	r2, r3
 802528e:	db3b      	blt.n	8025308 <_printf_float+0x39c>
 8025290:	6823      	ldr	r3, [r4, #0]
 8025292:	07da      	lsls	r2, r3, #31
 8025294:	d438      	bmi.n	8025308 <_printf_float+0x39c>
 8025296:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025298:	9a05      	ldr	r2, [sp, #20]
 802529a:	9909      	ldr	r1, [sp, #36]	; 0x24
 802529c:	1a9a      	subs	r2, r3, r2
 802529e:	eba3 0901 	sub.w	r9, r3, r1
 80252a2:	4591      	cmp	r9, r2
 80252a4:	bfa8      	it	ge
 80252a6:	4691      	movge	r9, r2
 80252a8:	f1b9 0f00 	cmp.w	r9, #0
 80252ac:	dc35      	bgt.n	802531a <_printf_float+0x3ae>
 80252ae:	f04f 0800 	mov.w	r8, #0
 80252b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80252b6:	f104 0a1a 	add.w	sl, r4, #26
 80252ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80252be:	1a9b      	subs	r3, r3, r2
 80252c0:	eba3 0309 	sub.w	r3, r3, r9
 80252c4:	4543      	cmp	r3, r8
 80252c6:	f77f af79 	ble.w	80251bc <_printf_float+0x250>
 80252ca:	2301      	movs	r3, #1
 80252cc:	4652      	mov	r2, sl
 80252ce:	4631      	mov	r1, r6
 80252d0:	4628      	mov	r0, r5
 80252d2:	47b8      	blx	r7
 80252d4:	3001      	adds	r0, #1
 80252d6:	f43f aeaa 	beq.w	802502e <_printf_float+0xc2>
 80252da:	f108 0801 	add.w	r8, r8, #1
 80252de:	e7ec      	b.n	80252ba <_printf_float+0x34e>
 80252e0:	4613      	mov	r3, r2
 80252e2:	4631      	mov	r1, r6
 80252e4:	4642      	mov	r2, r8
 80252e6:	4628      	mov	r0, r5
 80252e8:	47b8      	blx	r7
 80252ea:	3001      	adds	r0, #1
 80252ec:	d1c0      	bne.n	8025270 <_printf_float+0x304>
 80252ee:	e69e      	b.n	802502e <_printf_float+0xc2>
 80252f0:	2301      	movs	r3, #1
 80252f2:	4631      	mov	r1, r6
 80252f4:	4628      	mov	r0, r5
 80252f6:	9205      	str	r2, [sp, #20]
 80252f8:	47b8      	blx	r7
 80252fa:	3001      	adds	r0, #1
 80252fc:	f43f ae97 	beq.w	802502e <_printf_float+0xc2>
 8025300:	9a05      	ldr	r2, [sp, #20]
 8025302:	f10b 0b01 	add.w	fp, fp, #1
 8025306:	e7b9      	b.n	802527c <_printf_float+0x310>
 8025308:	ee18 3a10 	vmov	r3, s16
 802530c:	4652      	mov	r2, sl
 802530e:	4631      	mov	r1, r6
 8025310:	4628      	mov	r0, r5
 8025312:	47b8      	blx	r7
 8025314:	3001      	adds	r0, #1
 8025316:	d1be      	bne.n	8025296 <_printf_float+0x32a>
 8025318:	e689      	b.n	802502e <_printf_float+0xc2>
 802531a:	9a05      	ldr	r2, [sp, #20]
 802531c:	464b      	mov	r3, r9
 802531e:	4442      	add	r2, r8
 8025320:	4631      	mov	r1, r6
 8025322:	4628      	mov	r0, r5
 8025324:	47b8      	blx	r7
 8025326:	3001      	adds	r0, #1
 8025328:	d1c1      	bne.n	80252ae <_printf_float+0x342>
 802532a:	e680      	b.n	802502e <_printf_float+0xc2>
 802532c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802532e:	2a01      	cmp	r2, #1
 8025330:	dc01      	bgt.n	8025336 <_printf_float+0x3ca>
 8025332:	07db      	lsls	r3, r3, #31
 8025334:	d538      	bpl.n	80253a8 <_printf_float+0x43c>
 8025336:	2301      	movs	r3, #1
 8025338:	4642      	mov	r2, r8
 802533a:	4631      	mov	r1, r6
 802533c:	4628      	mov	r0, r5
 802533e:	47b8      	blx	r7
 8025340:	3001      	adds	r0, #1
 8025342:	f43f ae74 	beq.w	802502e <_printf_float+0xc2>
 8025346:	ee18 3a10 	vmov	r3, s16
 802534a:	4652      	mov	r2, sl
 802534c:	4631      	mov	r1, r6
 802534e:	4628      	mov	r0, r5
 8025350:	47b8      	blx	r7
 8025352:	3001      	adds	r0, #1
 8025354:	f43f ae6b 	beq.w	802502e <_printf_float+0xc2>
 8025358:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 802535c:	2200      	movs	r2, #0
 802535e:	2300      	movs	r3, #0
 8025360:	f7fb fbca 	bl	8020af8 <__aeabi_dcmpeq>
 8025364:	b9d8      	cbnz	r0, 802539e <_printf_float+0x432>
 8025366:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025368:	f108 0201 	add.w	r2, r8, #1
 802536c:	3b01      	subs	r3, #1
 802536e:	4631      	mov	r1, r6
 8025370:	4628      	mov	r0, r5
 8025372:	47b8      	blx	r7
 8025374:	3001      	adds	r0, #1
 8025376:	d10e      	bne.n	8025396 <_printf_float+0x42a>
 8025378:	e659      	b.n	802502e <_printf_float+0xc2>
 802537a:	2301      	movs	r3, #1
 802537c:	4652      	mov	r2, sl
 802537e:	4631      	mov	r1, r6
 8025380:	4628      	mov	r0, r5
 8025382:	47b8      	blx	r7
 8025384:	3001      	adds	r0, #1
 8025386:	f43f ae52 	beq.w	802502e <_printf_float+0xc2>
 802538a:	f108 0801 	add.w	r8, r8, #1
 802538e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025390:	3b01      	subs	r3, #1
 8025392:	4543      	cmp	r3, r8
 8025394:	dcf1      	bgt.n	802537a <_printf_float+0x40e>
 8025396:	464b      	mov	r3, r9
 8025398:	f104 0250 	add.w	r2, r4, #80	; 0x50
 802539c:	e6dc      	b.n	8025158 <_printf_float+0x1ec>
 802539e:	f04f 0800 	mov.w	r8, #0
 80253a2:	f104 0a1a 	add.w	sl, r4, #26
 80253a6:	e7f2      	b.n	802538e <_printf_float+0x422>
 80253a8:	2301      	movs	r3, #1
 80253aa:	4642      	mov	r2, r8
 80253ac:	e7df      	b.n	802536e <_printf_float+0x402>
 80253ae:	2301      	movs	r3, #1
 80253b0:	464a      	mov	r2, r9
 80253b2:	4631      	mov	r1, r6
 80253b4:	4628      	mov	r0, r5
 80253b6:	47b8      	blx	r7
 80253b8:	3001      	adds	r0, #1
 80253ba:	f43f ae38 	beq.w	802502e <_printf_float+0xc2>
 80253be:	f108 0801 	add.w	r8, r8, #1
 80253c2:	68e3      	ldr	r3, [r4, #12]
 80253c4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80253c6:	1a5b      	subs	r3, r3, r1
 80253c8:	4543      	cmp	r3, r8
 80253ca:	dcf0      	bgt.n	80253ae <_printf_float+0x442>
 80253cc:	e6fa      	b.n	80251c4 <_printf_float+0x258>
 80253ce:	f04f 0800 	mov.w	r8, #0
 80253d2:	f104 0919 	add.w	r9, r4, #25
 80253d6:	e7f4      	b.n	80253c2 <_printf_float+0x456>

080253d8 <_printf_common>:
 80253d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80253dc:	4616      	mov	r6, r2
 80253de:	4699      	mov	r9, r3
 80253e0:	688a      	ldr	r2, [r1, #8]
 80253e2:	690b      	ldr	r3, [r1, #16]
 80253e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80253e8:	4293      	cmp	r3, r2
 80253ea:	bfb8      	it	lt
 80253ec:	4613      	movlt	r3, r2
 80253ee:	6033      	str	r3, [r6, #0]
 80253f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80253f4:	4607      	mov	r7, r0
 80253f6:	460c      	mov	r4, r1
 80253f8:	b10a      	cbz	r2, 80253fe <_printf_common+0x26>
 80253fa:	3301      	adds	r3, #1
 80253fc:	6033      	str	r3, [r6, #0]
 80253fe:	6823      	ldr	r3, [r4, #0]
 8025400:	0699      	lsls	r1, r3, #26
 8025402:	bf42      	ittt	mi
 8025404:	6833      	ldrmi	r3, [r6, #0]
 8025406:	3302      	addmi	r3, #2
 8025408:	6033      	strmi	r3, [r6, #0]
 802540a:	6825      	ldr	r5, [r4, #0]
 802540c:	f015 0506 	ands.w	r5, r5, #6
 8025410:	d106      	bne.n	8025420 <_printf_common+0x48>
 8025412:	f104 0a19 	add.w	sl, r4, #25
 8025416:	68e3      	ldr	r3, [r4, #12]
 8025418:	6832      	ldr	r2, [r6, #0]
 802541a:	1a9b      	subs	r3, r3, r2
 802541c:	42ab      	cmp	r3, r5
 802541e:	dc26      	bgt.n	802546e <_printf_common+0x96>
 8025420:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8025424:	1e13      	subs	r3, r2, #0
 8025426:	6822      	ldr	r2, [r4, #0]
 8025428:	bf18      	it	ne
 802542a:	2301      	movne	r3, #1
 802542c:	0692      	lsls	r2, r2, #26
 802542e:	d42b      	bmi.n	8025488 <_printf_common+0xb0>
 8025430:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8025434:	4649      	mov	r1, r9
 8025436:	4638      	mov	r0, r7
 8025438:	47c0      	blx	r8
 802543a:	3001      	adds	r0, #1
 802543c:	d01e      	beq.n	802547c <_printf_common+0xa4>
 802543e:	6823      	ldr	r3, [r4, #0]
 8025440:	68e5      	ldr	r5, [r4, #12]
 8025442:	6832      	ldr	r2, [r6, #0]
 8025444:	f003 0306 	and.w	r3, r3, #6
 8025448:	2b04      	cmp	r3, #4
 802544a:	bf08      	it	eq
 802544c:	1aad      	subeq	r5, r5, r2
 802544e:	68a3      	ldr	r3, [r4, #8]
 8025450:	6922      	ldr	r2, [r4, #16]
 8025452:	bf0c      	ite	eq
 8025454:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8025458:	2500      	movne	r5, #0
 802545a:	4293      	cmp	r3, r2
 802545c:	bfc4      	itt	gt
 802545e:	1a9b      	subgt	r3, r3, r2
 8025460:	18ed      	addgt	r5, r5, r3
 8025462:	2600      	movs	r6, #0
 8025464:	341a      	adds	r4, #26
 8025466:	42b5      	cmp	r5, r6
 8025468:	d11a      	bne.n	80254a0 <_printf_common+0xc8>
 802546a:	2000      	movs	r0, #0
 802546c:	e008      	b.n	8025480 <_printf_common+0xa8>
 802546e:	2301      	movs	r3, #1
 8025470:	4652      	mov	r2, sl
 8025472:	4649      	mov	r1, r9
 8025474:	4638      	mov	r0, r7
 8025476:	47c0      	blx	r8
 8025478:	3001      	adds	r0, #1
 802547a:	d103      	bne.n	8025484 <_printf_common+0xac>
 802547c:	f04f 30ff 	mov.w	r0, #4294967295
 8025480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025484:	3501      	adds	r5, #1
 8025486:	e7c6      	b.n	8025416 <_printf_common+0x3e>
 8025488:	18e1      	adds	r1, r4, r3
 802548a:	1c5a      	adds	r2, r3, #1
 802548c:	2030      	movs	r0, #48	; 0x30
 802548e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8025492:	4422      	add	r2, r4
 8025494:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8025498:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 802549c:	3302      	adds	r3, #2
 802549e:	e7c7      	b.n	8025430 <_printf_common+0x58>
 80254a0:	2301      	movs	r3, #1
 80254a2:	4622      	mov	r2, r4
 80254a4:	4649      	mov	r1, r9
 80254a6:	4638      	mov	r0, r7
 80254a8:	47c0      	blx	r8
 80254aa:	3001      	adds	r0, #1
 80254ac:	d0e6      	beq.n	802547c <_printf_common+0xa4>
 80254ae:	3601      	adds	r6, #1
 80254b0:	e7d9      	b.n	8025466 <_printf_common+0x8e>
	...

080254b4 <_printf_i>:
 80254b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80254b8:	7e0f      	ldrb	r7, [r1, #24]
 80254ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80254bc:	2f78      	cmp	r7, #120	; 0x78
 80254be:	4691      	mov	r9, r2
 80254c0:	4680      	mov	r8, r0
 80254c2:	460c      	mov	r4, r1
 80254c4:	469a      	mov	sl, r3
 80254c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80254ca:	d807      	bhi.n	80254dc <_printf_i+0x28>
 80254cc:	2f62      	cmp	r7, #98	; 0x62
 80254ce:	d80a      	bhi.n	80254e6 <_printf_i+0x32>
 80254d0:	2f00      	cmp	r7, #0
 80254d2:	f000 80d8 	beq.w	8025686 <_printf_i+0x1d2>
 80254d6:	2f58      	cmp	r7, #88	; 0x58
 80254d8:	f000 80a3 	beq.w	8025622 <_printf_i+0x16e>
 80254dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80254e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80254e4:	e03a      	b.n	802555c <_printf_i+0xa8>
 80254e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80254ea:	2b15      	cmp	r3, #21
 80254ec:	d8f6      	bhi.n	80254dc <_printf_i+0x28>
 80254ee:	a101      	add	r1, pc, #4	; (adr r1, 80254f4 <_printf_i+0x40>)
 80254f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80254f4:	0802554d 	.word	0x0802554d
 80254f8:	08025561 	.word	0x08025561
 80254fc:	080254dd 	.word	0x080254dd
 8025500:	080254dd 	.word	0x080254dd
 8025504:	080254dd 	.word	0x080254dd
 8025508:	080254dd 	.word	0x080254dd
 802550c:	08025561 	.word	0x08025561
 8025510:	080254dd 	.word	0x080254dd
 8025514:	080254dd 	.word	0x080254dd
 8025518:	080254dd 	.word	0x080254dd
 802551c:	080254dd 	.word	0x080254dd
 8025520:	0802566d 	.word	0x0802566d
 8025524:	08025591 	.word	0x08025591
 8025528:	0802564f 	.word	0x0802564f
 802552c:	080254dd 	.word	0x080254dd
 8025530:	080254dd 	.word	0x080254dd
 8025534:	0802568f 	.word	0x0802568f
 8025538:	080254dd 	.word	0x080254dd
 802553c:	08025591 	.word	0x08025591
 8025540:	080254dd 	.word	0x080254dd
 8025544:	080254dd 	.word	0x080254dd
 8025548:	08025657 	.word	0x08025657
 802554c:	682b      	ldr	r3, [r5, #0]
 802554e:	1d1a      	adds	r2, r3, #4
 8025550:	681b      	ldr	r3, [r3, #0]
 8025552:	602a      	str	r2, [r5, #0]
 8025554:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8025558:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 802555c:	2301      	movs	r3, #1
 802555e:	e0a3      	b.n	80256a8 <_printf_i+0x1f4>
 8025560:	6820      	ldr	r0, [r4, #0]
 8025562:	6829      	ldr	r1, [r5, #0]
 8025564:	0606      	lsls	r6, r0, #24
 8025566:	f101 0304 	add.w	r3, r1, #4
 802556a:	d50a      	bpl.n	8025582 <_printf_i+0xce>
 802556c:	680e      	ldr	r6, [r1, #0]
 802556e:	602b      	str	r3, [r5, #0]
 8025570:	2e00      	cmp	r6, #0
 8025572:	da03      	bge.n	802557c <_printf_i+0xc8>
 8025574:	232d      	movs	r3, #45	; 0x2d
 8025576:	4276      	negs	r6, r6
 8025578:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802557c:	485e      	ldr	r0, [pc, #376]	; (80256f8 <_printf_i+0x244>)
 802557e:	230a      	movs	r3, #10
 8025580:	e019      	b.n	80255b6 <_printf_i+0x102>
 8025582:	680e      	ldr	r6, [r1, #0]
 8025584:	602b      	str	r3, [r5, #0]
 8025586:	f010 0f40 	tst.w	r0, #64	; 0x40
 802558a:	bf18      	it	ne
 802558c:	b236      	sxthne	r6, r6
 802558e:	e7ef      	b.n	8025570 <_printf_i+0xbc>
 8025590:	682b      	ldr	r3, [r5, #0]
 8025592:	6820      	ldr	r0, [r4, #0]
 8025594:	1d19      	adds	r1, r3, #4
 8025596:	6029      	str	r1, [r5, #0]
 8025598:	0601      	lsls	r1, r0, #24
 802559a:	d501      	bpl.n	80255a0 <_printf_i+0xec>
 802559c:	681e      	ldr	r6, [r3, #0]
 802559e:	e002      	b.n	80255a6 <_printf_i+0xf2>
 80255a0:	0646      	lsls	r6, r0, #25
 80255a2:	d5fb      	bpl.n	802559c <_printf_i+0xe8>
 80255a4:	881e      	ldrh	r6, [r3, #0]
 80255a6:	4854      	ldr	r0, [pc, #336]	; (80256f8 <_printf_i+0x244>)
 80255a8:	2f6f      	cmp	r7, #111	; 0x6f
 80255aa:	bf0c      	ite	eq
 80255ac:	2308      	moveq	r3, #8
 80255ae:	230a      	movne	r3, #10
 80255b0:	2100      	movs	r1, #0
 80255b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80255b6:	6865      	ldr	r5, [r4, #4]
 80255b8:	60a5      	str	r5, [r4, #8]
 80255ba:	2d00      	cmp	r5, #0
 80255bc:	bfa2      	ittt	ge
 80255be:	6821      	ldrge	r1, [r4, #0]
 80255c0:	f021 0104 	bicge.w	r1, r1, #4
 80255c4:	6021      	strge	r1, [r4, #0]
 80255c6:	b90e      	cbnz	r6, 80255cc <_printf_i+0x118>
 80255c8:	2d00      	cmp	r5, #0
 80255ca:	d04d      	beq.n	8025668 <_printf_i+0x1b4>
 80255cc:	4615      	mov	r5, r2
 80255ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80255d2:	fb03 6711 	mls	r7, r3, r1, r6
 80255d6:	5dc7      	ldrb	r7, [r0, r7]
 80255d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80255dc:	4637      	mov	r7, r6
 80255de:	42bb      	cmp	r3, r7
 80255e0:	460e      	mov	r6, r1
 80255e2:	d9f4      	bls.n	80255ce <_printf_i+0x11a>
 80255e4:	2b08      	cmp	r3, #8
 80255e6:	d10b      	bne.n	8025600 <_printf_i+0x14c>
 80255e8:	6823      	ldr	r3, [r4, #0]
 80255ea:	07de      	lsls	r6, r3, #31
 80255ec:	d508      	bpl.n	8025600 <_printf_i+0x14c>
 80255ee:	6923      	ldr	r3, [r4, #16]
 80255f0:	6861      	ldr	r1, [r4, #4]
 80255f2:	4299      	cmp	r1, r3
 80255f4:	bfde      	ittt	le
 80255f6:	2330      	movle	r3, #48	; 0x30
 80255f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80255fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8025600:	1b52      	subs	r2, r2, r5
 8025602:	6122      	str	r2, [r4, #16]
 8025604:	f8cd a000 	str.w	sl, [sp]
 8025608:	464b      	mov	r3, r9
 802560a:	aa03      	add	r2, sp, #12
 802560c:	4621      	mov	r1, r4
 802560e:	4640      	mov	r0, r8
 8025610:	f7ff fee2 	bl	80253d8 <_printf_common>
 8025614:	3001      	adds	r0, #1
 8025616:	d14c      	bne.n	80256b2 <_printf_i+0x1fe>
 8025618:	f04f 30ff 	mov.w	r0, #4294967295
 802561c:	b004      	add	sp, #16
 802561e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025622:	4835      	ldr	r0, [pc, #212]	; (80256f8 <_printf_i+0x244>)
 8025624:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8025628:	6829      	ldr	r1, [r5, #0]
 802562a:	6823      	ldr	r3, [r4, #0]
 802562c:	f851 6b04 	ldr.w	r6, [r1], #4
 8025630:	6029      	str	r1, [r5, #0]
 8025632:	061d      	lsls	r5, r3, #24
 8025634:	d514      	bpl.n	8025660 <_printf_i+0x1ac>
 8025636:	07df      	lsls	r7, r3, #31
 8025638:	bf44      	itt	mi
 802563a:	f043 0320 	orrmi.w	r3, r3, #32
 802563e:	6023      	strmi	r3, [r4, #0]
 8025640:	b91e      	cbnz	r6, 802564a <_printf_i+0x196>
 8025642:	6823      	ldr	r3, [r4, #0]
 8025644:	f023 0320 	bic.w	r3, r3, #32
 8025648:	6023      	str	r3, [r4, #0]
 802564a:	2310      	movs	r3, #16
 802564c:	e7b0      	b.n	80255b0 <_printf_i+0xfc>
 802564e:	6823      	ldr	r3, [r4, #0]
 8025650:	f043 0320 	orr.w	r3, r3, #32
 8025654:	6023      	str	r3, [r4, #0]
 8025656:	2378      	movs	r3, #120	; 0x78
 8025658:	4828      	ldr	r0, [pc, #160]	; (80256fc <_printf_i+0x248>)
 802565a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 802565e:	e7e3      	b.n	8025628 <_printf_i+0x174>
 8025660:	0659      	lsls	r1, r3, #25
 8025662:	bf48      	it	mi
 8025664:	b2b6      	uxthmi	r6, r6
 8025666:	e7e6      	b.n	8025636 <_printf_i+0x182>
 8025668:	4615      	mov	r5, r2
 802566a:	e7bb      	b.n	80255e4 <_printf_i+0x130>
 802566c:	682b      	ldr	r3, [r5, #0]
 802566e:	6826      	ldr	r6, [r4, #0]
 8025670:	6961      	ldr	r1, [r4, #20]
 8025672:	1d18      	adds	r0, r3, #4
 8025674:	6028      	str	r0, [r5, #0]
 8025676:	0635      	lsls	r5, r6, #24
 8025678:	681b      	ldr	r3, [r3, #0]
 802567a:	d501      	bpl.n	8025680 <_printf_i+0x1cc>
 802567c:	6019      	str	r1, [r3, #0]
 802567e:	e002      	b.n	8025686 <_printf_i+0x1d2>
 8025680:	0670      	lsls	r0, r6, #25
 8025682:	d5fb      	bpl.n	802567c <_printf_i+0x1c8>
 8025684:	8019      	strh	r1, [r3, #0]
 8025686:	2300      	movs	r3, #0
 8025688:	6123      	str	r3, [r4, #16]
 802568a:	4615      	mov	r5, r2
 802568c:	e7ba      	b.n	8025604 <_printf_i+0x150>
 802568e:	682b      	ldr	r3, [r5, #0]
 8025690:	1d1a      	adds	r2, r3, #4
 8025692:	602a      	str	r2, [r5, #0]
 8025694:	681d      	ldr	r5, [r3, #0]
 8025696:	6862      	ldr	r2, [r4, #4]
 8025698:	2100      	movs	r1, #0
 802569a:	4628      	mov	r0, r5
 802569c:	f7fa fdb8 	bl	8020210 <memchr>
 80256a0:	b108      	cbz	r0, 80256a6 <_printf_i+0x1f2>
 80256a2:	1b40      	subs	r0, r0, r5
 80256a4:	6060      	str	r0, [r4, #4]
 80256a6:	6863      	ldr	r3, [r4, #4]
 80256a8:	6123      	str	r3, [r4, #16]
 80256aa:	2300      	movs	r3, #0
 80256ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80256b0:	e7a8      	b.n	8025604 <_printf_i+0x150>
 80256b2:	6923      	ldr	r3, [r4, #16]
 80256b4:	462a      	mov	r2, r5
 80256b6:	4649      	mov	r1, r9
 80256b8:	4640      	mov	r0, r8
 80256ba:	47d0      	blx	sl
 80256bc:	3001      	adds	r0, #1
 80256be:	d0ab      	beq.n	8025618 <_printf_i+0x164>
 80256c0:	6823      	ldr	r3, [r4, #0]
 80256c2:	079b      	lsls	r3, r3, #30
 80256c4:	d413      	bmi.n	80256ee <_printf_i+0x23a>
 80256c6:	68e0      	ldr	r0, [r4, #12]
 80256c8:	9b03      	ldr	r3, [sp, #12]
 80256ca:	4298      	cmp	r0, r3
 80256cc:	bfb8      	it	lt
 80256ce:	4618      	movlt	r0, r3
 80256d0:	e7a4      	b.n	802561c <_printf_i+0x168>
 80256d2:	2301      	movs	r3, #1
 80256d4:	4632      	mov	r2, r6
 80256d6:	4649      	mov	r1, r9
 80256d8:	4640      	mov	r0, r8
 80256da:	47d0      	blx	sl
 80256dc:	3001      	adds	r0, #1
 80256de:	d09b      	beq.n	8025618 <_printf_i+0x164>
 80256e0:	3501      	adds	r5, #1
 80256e2:	68e3      	ldr	r3, [r4, #12]
 80256e4:	9903      	ldr	r1, [sp, #12]
 80256e6:	1a5b      	subs	r3, r3, r1
 80256e8:	42ab      	cmp	r3, r5
 80256ea:	dcf2      	bgt.n	80256d2 <_printf_i+0x21e>
 80256ec:	e7eb      	b.n	80256c6 <_printf_i+0x212>
 80256ee:	2500      	movs	r5, #0
 80256f0:	f104 0619 	add.w	r6, r4, #25
 80256f4:	e7f5      	b.n	80256e2 <_printf_i+0x22e>
 80256f6:	bf00      	nop
 80256f8:	080283a2 	.word	0x080283a2
 80256fc:	080283b3 	.word	0x080283b3

08025700 <iprintf>:
 8025700:	b40f      	push	{r0, r1, r2, r3}
 8025702:	4b0a      	ldr	r3, [pc, #40]	; (802572c <iprintf+0x2c>)
 8025704:	b513      	push	{r0, r1, r4, lr}
 8025706:	681c      	ldr	r4, [r3, #0]
 8025708:	b124      	cbz	r4, 8025714 <iprintf+0x14>
 802570a:	69a3      	ldr	r3, [r4, #24]
 802570c:	b913      	cbnz	r3, 8025714 <iprintf+0x14>
 802570e:	4620      	mov	r0, r4
 8025710:	f001 fac2 	bl	8026c98 <__sinit>
 8025714:	ab05      	add	r3, sp, #20
 8025716:	9a04      	ldr	r2, [sp, #16]
 8025718:	68a1      	ldr	r1, [r4, #8]
 802571a:	9301      	str	r3, [sp, #4]
 802571c:	4620      	mov	r0, r4
 802571e:	f002 f891 	bl	8027844 <_vfiprintf_r>
 8025722:	b002      	add	sp, #8
 8025724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025728:	b004      	add	sp, #16
 802572a:	4770      	bx	lr
 802572c:	20000010 	.word	0x20000010

08025730 <putchar>:
 8025730:	4b09      	ldr	r3, [pc, #36]	; (8025758 <putchar+0x28>)
 8025732:	b513      	push	{r0, r1, r4, lr}
 8025734:	681c      	ldr	r4, [r3, #0]
 8025736:	4601      	mov	r1, r0
 8025738:	b134      	cbz	r4, 8025748 <putchar+0x18>
 802573a:	69a3      	ldr	r3, [r4, #24]
 802573c:	b923      	cbnz	r3, 8025748 <putchar+0x18>
 802573e:	9001      	str	r0, [sp, #4]
 8025740:	4620      	mov	r0, r4
 8025742:	f001 faa9 	bl	8026c98 <__sinit>
 8025746:	9901      	ldr	r1, [sp, #4]
 8025748:	68a2      	ldr	r2, [r4, #8]
 802574a:	4620      	mov	r0, r4
 802574c:	b002      	add	sp, #8
 802574e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025752:	f002 b9a7 	b.w	8027aa4 <_putc_r>
 8025756:	bf00      	nop
 8025758:	20000010 	.word	0x20000010

0802575c <_puts_r>:
 802575c:	b570      	push	{r4, r5, r6, lr}
 802575e:	460e      	mov	r6, r1
 8025760:	4605      	mov	r5, r0
 8025762:	b118      	cbz	r0, 802576c <_puts_r+0x10>
 8025764:	6983      	ldr	r3, [r0, #24]
 8025766:	b90b      	cbnz	r3, 802576c <_puts_r+0x10>
 8025768:	f001 fa96 	bl	8026c98 <__sinit>
 802576c:	69ab      	ldr	r3, [r5, #24]
 802576e:	68ac      	ldr	r4, [r5, #8]
 8025770:	b913      	cbnz	r3, 8025778 <_puts_r+0x1c>
 8025772:	4628      	mov	r0, r5
 8025774:	f001 fa90 	bl	8026c98 <__sinit>
 8025778:	4b2c      	ldr	r3, [pc, #176]	; (802582c <_puts_r+0xd0>)
 802577a:	429c      	cmp	r4, r3
 802577c:	d120      	bne.n	80257c0 <_puts_r+0x64>
 802577e:	686c      	ldr	r4, [r5, #4]
 8025780:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8025782:	07db      	lsls	r3, r3, #31
 8025784:	d405      	bmi.n	8025792 <_puts_r+0x36>
 8025786:	89a3      	ldrh	r3, [r4, #12]
 8025788:	0598      	lsls	r0, r3, #22
 802578a:	d402      	bmi.n	8025792 <_puts_r+0x36>
 802578c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802578e:	f001 fb38 	bl	8026e02 <__retarget_lock_acquire_recursive>
 8025792:	89a3      	ldrh	r3, [r4, #12]
 8025794:	0719      	lsls	r1, r3, #28
 8025796:	d51d      	bpl.n	80257d4 <_puts_r+0x78>
 8025798:	6923      	ldr	r3, [r4, #16]
 802579a:	b1db      	cbz	r3, 80257d4 <_puts_r+0x78>
 802579c:	3e01      	subs	r6, #1
 802579e:	68a3      	ldr	r3, [r4, #8]
 80257a0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80257a4:	3b01      	subs	r3, #1
 80257a6:	60a3      	str	r3, [r4, #8]
 80257a8:	bb39      	cbnz	r1, 80257fa <_puts_r+0x9e>
 80257aa:	2b00      	cmp	r3, #0
 80257ac:	da38      	bge.n	8025820 <_puts_r+0xc4>
 80257ae:	4622      	mov	r2, r4
 80257b0:	210a      	movs	r1, #10
 80257b2:	4628      	mov	r0, r5
 80257b4:	f000 f9fe 	bl	8025bb4 <__swbuf_r>
 80257b8:	3001      	adds	r0, #1
 80257ba:	d011      	beq.n	80257e0 <_puts_r+0x84>
 80257bc:	250a      	movs	r5, #10
 80257be:	e011      	b.n	80257e4 <_puts_r+0x88>
 80257c0:	4b1b      	ldr	r3, [pc, #108]	; (8025830 <_puts_r+0xd4>)
 80257c2:	429c      	cmp	r4, r3
 80257c4:	d101      	bne.n	80257ca <_puts_r+0x6e>
 80257c6:	68ac      	ldr	r4, [r5, #8]
 80257c8:	e7da      	b.n	8025780 <_puts_r+0x24>
 80257ca:	4b1a      	ldr	r3, [pc, #104]	; (8025834 <_puts_r+0xd8>)
 80257cc:	429c      	cmp	r4, r3
 80257ce:	bf08      	it	eq
 80257d0:	68ec      	ldreq	r4, [r5, #12]
 80257d2:	e7d5      	b.n	8025780 <_puts_r+0x24>
 80257d4:	4621      	mov	r1, r4
 80257d6:	4628      	mov	r0, r5
 80257d8:	f000 fa3e 	bl	8025c58 <__swsetup_r>
 80257dc:	2800      	cmp	r0, #0
 80257de:	d0dd      	beq.n	802579c <_puts_r+0x40>
 80257e0:	f04f 35ff 	mov.w	r5, #4294967295
 80257e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80257e6:	07da      	lsls	r2, r3, #31
 80257e8:	d405      	bmi.n	80257f6 <_puts_r+0x9a>
 80257ea:	89a3      	ldrh	r3, [r4, #12]
 80257ec:	059b      	lsls	r3, r3, #22
 80257ee:	d402      	bmi.n	80257f6 <_puts_r+0x9a>
 80257f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80257f2:	f001 fb07 	bl	8026e04 <__retarget_lock_release_recursive>
 80257f6:	4628      	mov	r0, r5
 80257f8:	bd70      	pop	{r4, r5, r6, pc}
 80257fa:	2b00      	cmp	r3, #0
 80257fc:	da04      	bge.n	8025808 <_puts_r+0xac>
 80257fe:	69a2      	ldr	r2, [r4, #24]
 8025800:	429a      	cmp	r2, r3
 8025802:	dc06      	bgt.n	8025812 <_puts_r+0xb6>
 8025804:	290a      	cmp	r1, #10
 8025806:	d004      	beq.n	8025812 <_puts_r+0xb6>
 8025808:	6823      	ldr	r3, [r4, #0]
 802580a:	1c5a      	adds	r2, r3, #1
 802580c:	6022      	str	r2, [r4, #0]
 802580e:	7019      	strb	r1, [r3, #0]
 8025810:	e7c5      	b.n	802579e <_puts_r+0x42>
 8025812:	4622      	mov	r2, r4
 8025814:	4628      	mov	r0, r5
 8025816:	f000 f9cd 	bl	8025bb4 <__swbuf_r>
 802581a:	3001      	adds	r0, #1
 802581c:	d1bf      	bne.n	802579e <_puts_r+0x42>
 802581e:	e7df      	b.n	80257e0 <_puts_r+0x84>
 8025820:	6823      	ldr	r3, [r4, #0]
 8025822:	250a      	movs	r5, #10
 8025824:	1c5a      	adds	r2, r3, #1
 8025826:	6022      	str	r2, [r4, #0]
 8025828:	701d      	strb	r5, [r3, #0]
 802582a:	e7db      	b.n	80257e4 <_puts_r+0x88>
 802582c:	08028610 	.word	0x08028610
 8025830:	08028630 	.word	0x08028630
 8025834:	080285f0 	.word	0x080285f0

08025838 <puts>:
 8025838:	4b02      	ldr	r3, [pc, #8]	; (8025844 <puts+0xc>)
 802583a:	4601      	mov	r1, r0
 802583c:	6818      	ldr	r0, [r3, #0]
 802583e:	f7ff bf8d 	b.w	802575c <_puts_r>
 8025842:	bf00      	nop
 8025844:	20000010 	.word	0x20000010

08025848 <setbuf>:
 8025848:	2900      	cmp	r1, #0
 802584a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802584e:	bf0c      	ite	eq
 8025850:	2202      	moveq	r2, #2
 8025852:	2200      	movne	r2, #0
 8025854:	f000 b800 	b.w	8025858 <setvbuf>

08025858 <setvbuf>:
 8025858:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802585c:	461d      	mov	r5, r3
 802585e:	4b5d      	ldr	r3, [pc, #372]	; (80259d4 <setvbuf+0x17c>)
 8025860:	681f      	ldr	r7, [r3, #0]
 8025862:	4604      	mov	r4, r0
 8025864:	460e      	mov	r6, r1
 8025866:	4690      	mov	r8, r2
 8025868:	b127      	cbz	r7, 8025874 <setvbuf+0x1c>
 802586a:	69bb      	ldr	r3, [r7, #24]
 802586c:	b913      	cbnz	r3, 8025874 <setvbuf+0x1c>
 802586e:	4638      	mov	r0, r7
 8025870:	f001 fa12 	bl	8026c98 <__sinit>
 8025874:	4b58      	ldr	r3, [pc, #352]	; (80259d8 <setvbuf+0x180>)
 8025876:	429c      	cmp	r4, r3
 8025878:	d167      	bne.n	802594a <setvbuf+0xf2>
 802587a:	687c      	ldr	r4, [r7, #4]
 802587c:	f1b8 0f02 	cmp.w	r8, #2
 8025880:	d006      	beq.n	8025890 <setvbuf+0x38>
 8025882:	f1b8 0f01 	cmp.w	r8, #1
 8025886:	f200 809f 	bhi.w	80259c8 <setvbuf+0x170>
 802588a:	2d00      	cmp	r5, #0
 802588c:	f2c0 809c 	blt.w	80259c8 <setvbuf+0x170>
 8025890:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8025892:	07db      	lsls	r3, r3, #31
 8025894:	d405      	bmi.n	80258a2 <setvbuf+0x4a>
 8025896:	89a3      	ldrh	r3, [r4, #12]
 8025898:	0598      	lsls	r0, r3, #22
 802589a:	d402      	bmi.n	80258a2 <setvbuf+0x4a>
 802589c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802589e:	f001 fab0 	bl	8026e02 <__retarget_lock_acquire_recursive>
 80258a2:	4621      	mov	r1, r4
 80258a4:	4638      	mov	r0, r7
 80258a6:	f001 f963 	bl	8026b70 <_fflush_r>
 80258aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80258ac:	b141      	cbz	r1, 80258c0 <setvbuf+0x68>
 80258ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80258b2:	4299      	cmp	r1, r3
 80258b4:	d002      	beq.n	80258bc <setvbuf+0x64>
 80258b6:	4638      	mov	r0, r7
 80258b8:	f001 feba 	bl	8027630 <_free_r>
 80258bc:	2300      	movs	r3, #0
 80258be:	6363      	str	r3, [r4, #52]	; 0x34
 80258c0:	2300      	movs	r3, #0
 80258c2:	61a3      	str	r3, [r4, #24]
 80258c4:	6063      	str	r3, [r4, #4]
 80258c6:	89a3      	ldrh	r3, [r4, #12]
 80258c8:	0619      	lsls	r1, r3, #24
 80258ca:	d503      	bpl.n	80258d4 <setvbuf+0x7c>
 80258cc:	6921      	ldr	r1, [r4, #16]
 80258ce:	4638      	mov	r0, r7
 80258d0:	f001 feae 	bl	8027630 <_free_r>
 80258d4:	89a3      	ldrh	r3, [r4, #12]
 80258d6:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80258da:	f023 0303 	bic.w	r3, r3, #3
 80258de:	f1b8 0f02 	cmp.w	r8, #2
 80258e2:	81a3      	strh	r3, [r4, #12]
 80258e4:	d06c      	beq.n	80259c0 <setvbuf+0x168>
 80258e6:	ab01      	add	r3, sp, #4
 80258e8:	466a      	mov	r2, sp
 80258ea:	4621      	mov	r1, r4
 80258ec:	4638      	mov	r0, r7
 80258ee:	f001 fa8a 	bl	8026e06 <__swhatbuf_r>
 80258f2:	89a3      	ldrh	r3, [r4, #12]
 80258f4:	4318      	orrs	r0, r3
 80258f6:	81a0      	strh	r0, [r4, #12]
 80258f8:	2d00      	cmp	r5, #0
 80258fa:	d130      	bne.n	802595e <setvbuf+0x106>
 80258fc:	9d00      	ldr	r5, [sp, #0]
 80258fe:	4628      	mov	r0, r5
 8025900:	f001 fae6 	bl	8026ed0 <malloc>
 8025904:	4606      	mov	r6, r0
 8025906:	2800      	cmp	r0, #0
 8025908:	d155      	bne.n	80259b6 <setvbuf+0x15e>
 802590a:	f8dd 9000 	ldr.w	r9, [sp]
 802590e:	45a9      	cmp	r9, r5
 8025910:	d14a      	bne.n	80259a8 <setvbuf+0x150>
 8025912:	f04f 35ff 	mov.w	r5, #4294967295
 8025916:	2200      	movs	r2, #0
 8025918:	60a2      	str	r2, [r4, #8]
 802591a:	f104 0247 	add.w	r2, r4, #71	; 0x47
 802591e:	6022      	str	r2, [r4, #0]
 8025920:	6122      	str	r2, [r4, #16]
 8025922:	2201      	movs	r2, #1
 8025924:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025928:	6162      	str	r2, [r4, #20]
 802592a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802592c:	f043 0302 	orr.w	r3, r3, #2
 8025930:	07d2      	lsls	r2, r2, #31
 8025932:	81a3      	strh	r3, [r4, #12]
 8025934:	d405      	bmi.n	8025942 <setvbuf+0xea>
 8025936:	f413 7f00 	tst.w	r3, #512	; 0x200
 802593a:	d102      	bne.n	8025942 <setvbuf+0xea>
 802593c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802593e:	f001 fa61 	bl	8026e04 <__retarget_lock_release_recursive>
 8025942:	4628      	mov	r0, r5
 8025944:	b003      	add	sp, #12
 8025946:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802594a:	4b24      	ldr	r3, [pc, #144]	; (80259dc <setvbuf+0x184>)
 802594c:	429c      	cmp	r4, r3
 802594e:	d101      	bne.n	8025954 <setvbuf+0xfc>
 8025950:	68bc      	ldr	r4, [r7, #8]
 8025952:	e793      	b.n	802587c <setvbuf+0x24>
 8025954:	4b22      	ldr	r3, [pc, #136]	; (80259e0 <setvbuf+0x188>)
 8025956:	429c      	cmp	r4, r3
 8025958:	bf08      	it	eq
 802595a:	68fc      	ldreq	r4, [r7, #12]
 802595c:	e78e      	b.n	802587c <setvbuf+0x24>
 802595e:	2e00      	cmp	r6, #0
 8025960:	d0cd      	beq.n	80258fe <setvbuf+0xa6>
 8025962:	69bb      	ldr	r3, [r7, #24]
 8025964:	b913      	cbnz	r3, 802596c <setvbuf+0x114>
 8025966:	4638      	mov	r0, r7
 8025968:	f001 f996 	bl	8026c98 <__sinit>
 802596c:	f1b8 0f01 	cmp.w	r8, #1
 8025970:	bf08      	it	eq
 8025972:	89a3      	ldrheq	r3, [r4, #12]
 8025974:	6026      	str	r6, [r4, #0]
 8025976:	bf04      	itt	eq
 8025978:	f043 0301 	orreq.w	r3, r3, #1
 802597c:	81a3      	strheq	r3, [r4, #12]
 802597e:	89a2      	ldrh	r2, [r4, #12]
 8025980:	f012 0308 	ands.w	r3, r2, #8
 8025984:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8025988:	d01c      	beq.n	80259c4 <setvbuf+0x16c>
 802598a:	07d3      	lsls	r3, r2, #31
 802598c:	bf41      	itttt	mi
 802598e:	2300      	movmi	r3, #0
 8025990:	426d      	negmi	r5, r5
 8025992:	60a3      	strmi	r3, [r4, #8]
 8025994:	61a5      	strmi	r5, [r4, #24]
 8025996:	bf58      	it	pl
 8025998:	60a5      	strpl	r5, [r4, #8]
 802599a:	6e65      	ldr	r5, [r4, #100]	; 0x64
 802599c:	f015 0501 	ands.w	r5, r5, #1
 80259a0:	d115      	bne.n	80259ce <setvbuf+0x176>
 80259a2:	f412 7f00 	tst.w	r2, #512	; 0x200
 80259a6:	e7c8      	b.n	802593a <setvbuf+0xe2>
 80259a8:	4648      	mov	r0, r9
 80259aa:	f001 fa91 	bl	8026ed0 <malloc>
 80259ae:	4606      	mov	r6, r0
 80259b0:	2800      	cmp	r0, #0
 80259b2:	d0ae      	beq.n	8025912 <setvbuf+0xba>
 80259b4:	464d      	mov	r5, r9
 80259b6:	89a3      	ldrh	r3, [r4, #12]
 80259b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80259bc:	81a3      	strh	r3, [r4, #12]
 80259be:	e7d0      	b.n	8025962 <setvbuf+0x10a>
 80259c0:	2500      	movs	r5, #0
 80259c2:	e7a8      	b.n	8025916 <setvbuf+0xbe>
 80259c4:	60a3      	str	r3, [r4, #8]
 80259c6:	e7e8      	b.n	802599a <setvbuf+0x142>
 80259c8:	f04f 35ff 	mov.w	r5, #4294967295
 80259cc:	e7b9      	b.n	8025942 <setvbuf+0xea>
 80259ce:	2500      	movs	r5, #0
 80259d0:	e7b7      	b.n	8025942 <setvbuf+0xea>
 80259d2:	bf00      	nop
 80259d4:	20000010 	.word	0x20000010
 80259d8:	08028610 	.word	0x08028610
 80259dc:	08028630 	.word	0x08028630
 80259e0:	080285f0 	.word	0x080285f0

080259e4 <strtok>:
 80259e4:	4b16      	ldr	r3, [pc, #88]	; (8025a40 <strtok+0x5c>)
 80259e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80259e8:	681e      	ldr	r6, [r3, #0]
 80259ea:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80259ec:	4605      	mov	r5, r0
 80259ee:	b9fc      	cbnz	r4, 8025a30 <strtok+0x4c>
 80259f0:	2050      	movs	r0, #80	; 0x50
 80259f2:	9101      	str	r1, [sp, #4]
 80259f4:	f001 fa6c 	bl	8026ed0 <malloc>
 80259f8:	9901      	ldr	r1, [sp, #4]
 80259fa:	65b0      	str	r0, [r6, #88]	; 0x58
 80259fc:	4602      	mov	r2, r0
 80259fe:	b920      	cbnz	r0, 8025a0a <strtok+0x26>
 8025a00:	4b10      	ldr	r3, [pc, #64]	; (8025a44 <strtok+0x60>)
 8025a02:	4811      	ldr	r0, [pc, #68]	; (8025a48 <strtok+0x64>)
 8025a04:	2157      	movs	r1, #87	; 0x57
 8025a06:	f000 f995 	bl	8025d34 <__assert_func>
 8025a0a:	e9c0 4400 	strd	r4, r4, [r0]
 8025a0e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8025a12:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8025a16:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8025a1a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8025a1e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8025a22:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8025a26:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8025a2a:	6184      	str	r4, [r0, #24]
 8025a2c:	7704      	strb	r4, [r0, #28]
 8025a2e:	6244      	str	r4, [r0, #36]	; 0x24
 8025a30:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8025a32:	2301      	movs	r3, #1
 8025a34:	4628      	mov	r0, r5
 8025a36:	b002      	add	sp, #8
 8025a38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8025a3c:	f000 b806 	b.w	8025a4c <__strtok_r>
 8025a40:	20000010 	.word	0x20000010
 8025a44:	080283c4 	.word	0x080283c4
 8025a48:	080283db 	.word	0x080283db

08025a4c <__strtok_r>:
 8025a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025a4e:	b908      	cbnz	r0, 8025a54 <__strtok_r+0x8>
 8025a50:	6810      	ldr	r0, [r2, #0]
 8025a52:	b188      	cbz	r0, 8025a78 <__strtok_r+0x2c>
 8025a54:	4604      	mov	r4, r0
 8025a56:	4620      	mov	r0, r4
 8025a58:	f814 5b01 	ldrb.w	r5, [r4], #1
 8025a5c:	460f      	mov	r7, r1
 8025a5e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8025a62:	b91e      	cbnz	r6, 8025a6c <__strtok_r+0x20>
 8025a64:	b965      	cbnz	r5, 8025a80 <__strtok_r+0x34>
 8025a66:	6015      	str	r5, [r2, #0]
 8025a68:	4628      	mov	r0, r5
 8025a6a:	e005      	b.n	8025a78 <__strtok_r+0x2c>
 8025a6c:	42b5      	cmp	r5, r6
 8025a6e:	d1f6      	bne.n	8025a5e <__strtok_r+0x12>
 8025a70:	2b00      	cmp	r3, #0
 8025a72:	d1f0      	bne.n	8025a56 <__strtok_r+0xa>
 8025a74:	6014      	str	r4, [r2, #0]
 8025a76:	7003      	strb	r3, [r0, #0]
 8025a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025a7a:	461c      	mov	r4, r3
 8025a7c:	e00c      	b.n	8025a98 <__strtok_r+0x4c>
 8025a7e:	b915      	cbnz	r5, 8025a86 <__strtok_r+0x3a>
 8025a80:	f814 3b01 	ldrb.w	r3, [r4], #1
 8025a84:	460e      	mov	r6, r1
 8025a86:	f816 5b01 	ldrb.w	r5, [r6], #1
 8025a8a:	42ab      	cmp	r3, r5
 8025a8c:	d1f7      	bne.n	8025a7e <__strtok_r+0x32>
 8025a8e:	2b00      	cmp	r3, #0
 8025a90:	d0f3      	beq.n	8025a7a <__strtok_r+0x2e>
 8025a92:	2300      	movs	r3, #0
 8025a94:	f804 3c01 	strb.w	r3, [r4, #-1]
 8025a98:	6014      	str	r4, [r2, #0]
 8025a9a:	e7ed      	b.n	8025a78 <__strtok_r+0x2c>

08025a9c <_strtol_l.constprop.0>:
 8025a9c:	2b01      	cmp	r3, #1
 8025a9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025aa2:	d001      	beq.n	8025aa8 <_strtol_l.constprop.0+0xc>
 8025aa4:	2b24      	cmp	r3, #36	; 0x24
 8025aa6:	d906      	bls.n	8025ab6 <_strtol_l.constprop.0+0x1a>
 8025aa8:	f7ff f98e 	bl	8024dc8 <__errno>
 8025aac:	2316      	movs	r3, #22
 8025aae:	6003      	str	r3, [r0, #0]
 8025ab0:	2000      	movs	r0, #0
 8025ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025ab6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8025b9c <_strtol_l.constprop.0+0x100>
 8025aba:	460d      	mov	r5, r1
 8025abc:	462e      	mov	r6, r5
 8025abe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8025ac2:	f814 700c 	ldrb.w	r7, [r4, ip]
 8025ac6:	f017 0708 	ands.w	r7, r7, #8
 8025aca:	d1f7      	bne.n	8025abc <_strtol_l.constprop.0+0x20>
 8025acc:	2c2d      	cmp	r4, #45	; 0x2d
 8025ace:	d132      	bne.n	8025b36 <_strtol_l.constprop.0+0x9a>
 8025ad0:	782c      	ldrb	r4, [r5, #0]
 8025ad2:	2701      	movs	r7, #1
 8025ad4:	1cb5      	adds	r5, r6, #2
 8025ad6:	2b00      	cmp	r3, #0
 8025ad8:	d05b      	beq.n	8025b92 <_strtol_l.constprop.0+0xf6>
 8025ada:	2b10      	cmp	r3, #16
 8025adc:	d109      	bne.n	8025af2 <_strtol_l.constprop.0+0x56>
 8025ade:	2c30      	cmp	r4, #48	; 0x30
 8025ae0:	d107      	bne.n	8025af2 <_strtol_l.constprop.0+0x56>
 8025ae2:	782c      	ldrb	r4, [r5, #0]
 8025ae4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8025ae8:	2c58      	cmp	r4, #88	; 0x58
 8025aea:	d14d      	bne.n	8025b88 <_strtol_l.constprop.0+0xec>
 8025aec:	786c      	ldrb	r4, [r5, #1]
 8025aee:	2310      	movs	r3, #16
 8025af0:	3502      	adds	r5, #2
 8025af2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8025af6:	f108 38ff 	add.w	r8, r8, #4294967295
 8025afa:	f04f 0c00 	mov.w	ip, #0
 8025afe:	fbb8 f9f3 	udiv	r9, r8, r3
 8025b02:	4666      	mov	r6, ip
 8025b04:	fb03 8a19 	mls	sl, r3, r9, r8
 8025b08:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8025b0c:	f1be 0f09 	cmp.w	lr, #9
 8025b10:	d816      	bhi.n	8025b40 <_strtol_l.constprop.0+0xa4>
 8025b12:	4674      	mov	r4, lr
 8025b14:	42a3      	cmp	r3, r4
 8025b16:	dd24      	ble.n	8025b62 <_strtol_l.constprop.0+0xc6>
 8025b18:	f1bc 0f00 	cmp.w	ip, #0
 8025b1c:	db1e      	blt.n	8025b5c <_strtol_l.constprop.0+0xc0>
 8025b1e:	45b1      	cmp	r9, r6
 8025b20:	d31c      	bcc.n	8025b5c <_strtol_l.constprop.0+0xc0>
 8025b22:	d101      	bne.n	8025b28 <_strtol_l.constprop.0+0x8c>
 8025b24:	45a2      	cmp	sl, r4
 8025b26:	db19      	blt.n	8025b5c <_strtol_l.constprop.0+0xc0>
 8025b28:	fb06 4603 	mla	r6, r6, r3, r4
 8025b2c:	f04f 0c01 	mov.w	ip, #1
 8025b30:	f815 4b01 	ldrb.w	r4, [r5], #1
 8025b34:	e7e8      	b.n	8025b08 <_strtol_l.constprop.0+0x6c>
 8025b36:	2c2b      	cmp	r4, #43	; 0x2b
 8025b38:	bf04      	itt	eq
 8025b3a:	782c      	ldrbeq	r4, [r5, #0]
 8025b3c:	1cb5      	addeq	r5, r6, #2
 8025b3e:	e7ca      	b.n	8025ad6 <_strtol_l.constprop.0+0x3a>
 8025b40:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8025b44:	f1be 0f19 	cmp.w	lr, #25
 8025b48:	d801      	bhi.n	8025b4e <_strtol_l.constprop.0+0xb2>
 8025b4a:	3c37      	subs	r4, #55	; 0x37
 8025b4c:	e7e2      	b.n	8025b14 <_strtol_l.constprop.0+0x78>
 8025b4e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8025b52:	f1be 0f19 	cmp.w	lr, #25
 8025b56:	d804      	bhi.n	8025b62 <_strtol_l.constprop.0+0xc6>
 8025b58:	3c57      	subs	r4, #87	; 0x57
 8025b5a:	e7db      	b.n	8025b14 <_strtol_l.constprop.0+0x78>
 8025b5c:	f04f 3cff 	mov.w	ip, #4294967295
 8025b60:	e7e6      	b.n	8025b30 <_strtol_l.constprop.0+0x94>
 8025b62:	f1bc 0f00 	cmp.w	ip, #0
 8025b66:	da05      	bge.n	8025b74 <_strtol_l.constprop.0+0xd8>
 8025b68:	2322      	movs	r3, #34	; 0x22
 8025b6a:	6003      	str	r3, [r0, #0]
 8025b6c:	4646      	mov	r6, r8
 8025b6e:	b942      	cbnz	r2, 8025b82 <_strtol_l.constprop.0+0xe6>
 8025b70:	4630      	mov	r0, r6
 8025b72:	e79e      	b.n	8025ab2 <_strtol_l.constprop.0+0x16>
 8025b74:	b107      	cbz	r7, 8025b78 <_strtol_l.constprop.0+0xdc>
 8025b76:	4276      	negs	r6, r6
 8025b78:	2a00      	cmp	r2, #0
 8025b7a:	d0f9      	beq.n	8025b70 <_strtol_l.constprop.0+0xd4>
 8025b7c:	f1bc 0f00 	cmp.w	ip, #0
 8025b80:	d000      	beq.n	8025b84 <_strtol_l.constprop.0+0xe8>
 8025b82:	1e69      	subs	r1, r5, #1
 8025b84:	6011      	str	r1, [r2, #0]
 8025b86:	e7f3      	b.n	8025b70 <_strtol_l.constprop.0+0xd4>
 8025b88:	2430      	movs	r4, #48	; 0x30
 8025b8a:	2b00      	cmp	r3, #0
 8025b8c:	d1b1      	bne.n	8025af2 <_strtol_l.constprop.0+0x56>
 8025b8e:	2308      	movs	r3, #8
 8025b90:	e7af      	b.n	8025af2 <_strtol_l.constprop.0+0x56>
 8025b92:	2c30      	cmp	r4, #48	; 0x30
 8025b94:	d0a5      	beq.n	8025ae2 <_strtol_l.constprop.0+0x46>
 8025b96:	230a      	movs	r3, #10
 8025b98:	e7ab      	b.n	8025af2 <_strtol_l.constprop.0+0x56>
 8025b9a:	bf00      	nop
 8025b9c:	08028475 	.word	0x08028475

08025ba0 <strtol>:
 8025ba0:	4613      	mov	r3, r2
 8025ba2:	460a      	mov	r2, r1
 8025ba4:	4601      	mov	r1, r0
 8025ba6:	4802      	ldr	r0, [pc, #8]	; (8025bb0 <strtol+0x10>)
 8025ba8:	6800      	ldr	r0, [r0, #0]
 8025baa:	f7ff bf77 	b.w	8025a9c <_strtol_l.constprop.0>
 8025bae:	bf00      	nop
 8025bb0:	20000010 	.word	0x20000010

08025bb4 <__swbuf_r>:
 8025bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025bb6:	460e      	mov	r6, r1
 8025bb8:	4614      	mov	r4, r2
 8025bba:	4605      	mov	r5, r0
 8025bbc:	b118      	cbz	r0, 8025bc6 <__swbuf_r+0x12>
 8025bbe:	6983      	ldr	r3, [r0, #24]
 8025bc0:	b90b      	cbnz	r3, 8025bc6 <__swbuf_r+0x12>
 8025bc2:	f001 f869 	bl	8026c98 <__sinit>
 8025bc6:	4b21      	ldr	r3, [pc, #132]	; (8025c4c <__swbuf_r+0x98>)
 8025bc8:	429c      	cmp	r4, r3
 8025bca:	d12b      	bne.n	8025c24 <__swbuf_r+0x70>
 8025bcc:	686c      	ldr	r4, [r5, #4]
 8025bce:	69a3      	ldr	r3, [r4, #24]
 8025bd0:	60a3      	str	r3, [r4, #8]
 8025bd2:	89a3      	ldrh	r3, [r4, #12]
 8025bd4:	071a      	lsls	r2, r3, #28
 8025bd6:	d52f      	bpl.n	8025c38 <__swbuf_r+0x84>
 8025bd8:	6923      	ldr	r3, [r4, #16]
 8025bda:	b36b      	cbz	r3, 8025c38 <__swbuf_r+0x84>
 8025bdc:	6923      	ldr	r3, [r4, #16]
 8025bde:	6820      	ldr	r0, [r4, #0]
 8025be0:	1ac0      	subs	r0, r0, r3
 8025be2:	6963      	ldr	r3, [r4, #20]
 8025be4:	b2f6      	uxtb	r6, r6
 8025be6:	4283      	cmp	r3, r0
 8025be8:	4637      	mov	r7, r6
 8025bea:	dc04      	bgt.n	8025bf6 <__swbuf_r+0x42>
 8025bec:	4621      	mov	r1, r4
 8025bee:	4628      	mov	r0, r5
 8025bf0:	f000 ffbe 	bl	8026b70 <_fflush_r>
 8025bf4:	bb30      	cbnz	r0, 8025c44 <__swbuf_r+0x90>
 8025bf6:	68a3      	ldr	r3, [r4, #8]
 8025bf8:	3b01      	subs	r3, #1
 8025bfa:	60a3      	str	r3, [r4, #8]
 8025bfc:	6823      	ldr	r3, [r4, #0]
 8025bfe:	1c5a      	adds	r2, r3, #1
 8025c00:	6022      	str	r2, [r4, #0]
 8025c02:	701e      	strb	r6, [r3, #0]
 8025c04:	6963      	ldr	r3, [r4, #20]
 8025c06:	3001      	adds	r0, #1
 8025c08:	4283      	cmp	r3, r0
 8025c0a:	d004      	beq.n	8025c16 <__swbuf_r+0x62>
 8025c0c:	89a3      	ldrh	r3, [r4, #12]
 8025c0e:	07db      	lsls	r3, r3, #31
 8025c10:	d506      	bpl.n	8025c20 <__swbuf_r+0x6c>
 8025c12:	2e0a      	cmp	r6, #10
 8025c14:	d104      	bne.n	8025c20 <__swbuf_r+0x6c>
 8025c16:	4621      	mov	r1, r4
 8025c18:	4628      	mov	r0, r5
 8025c1a:	f000 ffa9 	bl	8026b70 <_fflush_r>
 8025c1e:	b988      	cbnz	r0, 8025c44 <__swbuf_r+0x90>
 8025c20:	4638      	mov	r0, r7
 8025c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025c24:	4b0a      	ldr	r3, [pc, #40]	; (8025c50 <__swbuf_r+0x9c>)
 8025c26:	429c      	cmp	r4, r3
 8025c28:	d101      	bne.n	8025c2e <__swbuf_r+0x7a>
 8025c2a:	68ac      	ldr	r4, [r5, #8]
 8025c2c:	e7cf      	b.n	8025bce <__swbuf_r+0x1a>
 8025c2e:	4b09      	ldr	r3, [pc, #36]	; (8025c54 <__swbuf_r+0xa0>)
 8025c30:	429c      	cmp	r4, r3
 8025c32:	bf08      	it	eq
 8025c34:	68ec      	ldreq	r4, [r5, #12]
 8025c36:	e7ca      	b.n	8025bce <__swbuf_r+0x1a>
 8025c38:	4621      	mov	r1, r4
 8025c3a:	4628      	mov	r0, r5
 8025c3c:	f000 f80c 	bl	8025c58 <__swsetup_r>
 8025c40:	2800      	cmp	r0, #0
 8025c42:	d0cb      	beq.n	8025bdc <__swbuf_r+0x28>
 8025c44:	f04f 37ff 	mov.w	r7, #4294967295
 8025c48:	e7ea      	b.n	8025c20 <__swbuf_r+0x6c>
 8025c4a:	bf00      	nop
 8025c4c:	08028610 	.word	0x08028610
 8025c50:	08028630 	.word	0x08028630
 8025c54:	080285f0 	.word	0x080285f0

08025c58 <__swsetup_r>:
 8025c58:	4b32      	ldr	r3, [pc, #200]	; (8025d24 <__swsetup_r+0xcc>)
 8025c5a:	b570      	push	{r4, r5, r6, lr}
 8025c5c:	681d      	ldr	r5, [r3, #0]
 8025c5e:	4606      	mov	r6, r0
 8025c60:	460c      	mov	r4, r1
 8025c62:	b125      	cbz	r5, 8025c6e <__swsetup_r+0x16>
 8025c64:	69ab      	ldr	r3, [r5, #24]
 8025c66:	b913      	cbnz	r3, 8025c6e <__swsetup_r+0x16>
 8025c68:	4628      	mov	r0, r5
 8025c6a:	f001 f815 	bl	8026c98 <__sinit>
 8025c6e:	4b2e      	ldr	r3, [pc, #184]	; (8025d28 <__swsetup_r+0xd0>)
 8025c70:	429c      	cmp	r4, r3
 8025c72:	d10f      	bne.n	8025c94 <__swsetup_r+0x3c>
 8025c74:	686c      	ldr	r4, [r5, #4]
 8025c76:	89a3      	ldrh	r3, [r4, #12]
 8025c78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8025c7c:	0719      	lsls	r1, r3, #28
 8025c7e:	d42c      	bmi.n	8025cda <__swsetup_r+0x82>
 8025c80:	06dd      	lsls	r5, r3, #27
 8025c82:	d411      	bmi.n	8025ca8 <__swsetup_r+0x50>
 8025c84:	2309      	movs	r3, #9
 8025c86:	6033      	str	r3, [r6, #0]
 8025c88:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8025c8c:	81a3      	strh	r3, [r4, #12]
 8025c8e:	f04f 30ff 	mov.w	r0, #4294967295
 8025c92:	e03e      	b.n	8025d12 <__swsetup_r+0xba>
 8025c94:	4b25      	ldr	r3, [pc, #148]	; (8025d2c <__swsetup_r+0xd4>)
 8025c96:	429c      	cmp	r4, r3
 8025c98:	d101      	bne.n	8025c9e <__swsetup_r+0x46>
 8025c9a:	68ac      	ldr	r4, [r5, #8]
 8025c9c:	e7eb      	b.n	8025c76 <__swsetup_r+0x1e>
 8025c9e:	4b24      	ldr	r3, [pc, #144]	; (8025d30 <__swsetup_r+0xd8>)
 8025ca0:	429c      	cmp	r4, r3
 8025ca2:	bf08      	it	eq
 8025ca4:	68ec      	ldreq	r4, [r5, #12]
 8025ca6:	e7e6      	b.n	8025c76 <__swsetup_r+0x1e>
 8025ca8:	0758      	lsls	r0, r3, #29
 8025caa:	d512      	bpl.n	8025cd2 <__swsetup_r+0x7a>
 8025cac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8025cae:	b141      	cbz	r1, 8025cc2 <__swsetup_r+0x6a>
 8025cb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8025cb4:	4299      	cmp	r1, r3
 8025cb6:	d002      	beq.n	8025cbe <__swsetup_r+0x66>
 8025cb8:	4630      	mov	r0, r6
 8025cba:	f001 fcb9 	bl	8027630 <_free_r>
 8025cbe:	2300      	movs	r3, #0
 8025cc0:	6363      	str	r3, [r4, #52]	; 0x34
 8025cc2:	89a3      	ldrh	r3, [r4, #12]
 8025cc4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8025cc8:	81a3      	strh	r3, [r4, #12]
 8025cca:	2300      	movs	r3, #0
 8025ccc:	6063      	str	r3, [r4, #4]
 8025cce:	6923      	ldr	r3, [r4, #16]
 8025cd0:	6023      	str	r3, [r4, #0]
 8025cd2:	89a3      	ldrh	r3, [r4, #12]
 8025cd4:	f043 0308 	orr.w	r3, r3, #8
 8025cd8:	81a3      	strh	r3, [r4, #12]
 8025cda:	6923      	ldr	r3, [r4, #16]
 8025cdc:	b94b      	cbnz	r3, 8025cf2 <__swsetup_r+0x9a>
 8025cde:	89a3      	ldrh	r3, [r4, #12]
 8025ce0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8025ce4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8025ce8:	d003      	beq.n	8025cf2 <__swsetup_r+0x9a>
 8025cea:	4621      	mov	r1, r4
 8025cec:	4630      	mov	r0, r6
 8025cee:	f001 f8af 	bl	8026e50 <__smakebuf_r>
 8025cf2:	89a0      	ldrh	r0, [r4, #12]
 8025cf4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8025cf8:	f010 0301 	ands.w	r3, r0, #1
 8025cfc:	d00a      	beq.n	8025d14 <__swsetup_r+0xbc>
 8025cfe:	2300      	movs	r3, #0
 8025d00:	60a3      	str	r3, [r4, #8]
 8025d02:	6963      	ldr	r3, [r4, #20]
 8025d04:	425b      	negs	r3, r3
 8025d06:	61a3      	str	r3, [r4, #24]
 8025d08:	6923      	ldr	r3, [r4, #16]
 8025d0a:	b943      	cbnz	r3, 8025d1e <__swsetup_r+0xc6>
 8025d0c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8025d10:	d1ba      	bne.n	8025c88 <__swsetup_r+0x30>
 8025d12:	bd70      	pop	{r4, r5, r6, pc}
 8025d14:	0781      	lsls	r1, r0, #30
 8025d16:	bf58      	it	pl
 8025d18:	6963      	ldrpl	r3, [r4, #20]
 8025d1a:	60a3      	str	r3, [r4, #8]
 8025d1c:	e7f4      	b.n	8025d08 <__swsetup_r+0xb0>
 8025d1e:	2000      	movs	r0, #0
 8025d20:	e7f7      	b.n	8025d12 <__swsetup_r+0xba>
 8025d22:	bf00      	nop
 8025d24:	20000010 	.word	0x20000010
 8025d28:	08028610 	.word	0x08028610
 8025d2c:	08028630 	.word	0x08028630
 8025d30:	080285f0 	.word	0x080285f0

08025d34 <__assert_func>:
 8025d34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8025d36:	4614      	mov	r4, r2
 8025d38:	461a      	mov	r2, r3
 8025d3a:	4b09      	ldr	r3, [pc, #36]	; (8025d60 <__assert_func+0x2c>)
 8025d3c:	681b      	ldr	r3, [r3, #0]
 8025d3e:	4605      	mov	r5, r0
 8025d40:	68d8      	ldr	r0, [r3, #12]
 8025d42:	b14c      	cbz	r4, 8025d58 <__assert_func+0x24>
 8025d44:	4b07      	ldr	r3, [pc, #28]	; (8025d64 <__assert_func+0x30>)
 8025d46:	9100      	str	r1, [sp, #0]
 8025d48:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8025d4c:	4906      	ldr	r1, [pc, #24]	; (8025d68 <__assert_func+0x34>)
 8025d4e:	462b      	mov	r3, r5
 8025d50:	f001 f820 	bl	8026d94 <fiprintf>
 8025d54:	f001 ff54 	bl	8027c00 <abort>
 8025d58:	4b04      	ldr	r3, [pc, #16]	; (8025d6c <__assert_func+0x38>)
 8025d5a:	461c      	mov	r4, r3
 8025d5c:	e7f3      	b.n	8025d46 <__assert_func+0x12>
 8025d5e:	bf00      	nop
 8025d60:	20000010 	.word	0x20000010
 8025d64:	08028438 	.word	0x08028438
 8025d68:	08028445 	.word	0x08028445
 8025d6c:	08028473 	.word	0x08028473

08025d70 <quorem>:
 8025d70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025d74:	6903      	ldr	r3, [r0, #16]
 8025d76:	690c      	ldr	r4, [r1, #16]
 8025d78:	42a3      	cmp	r3, r4
 8025d7a:	4607      	mov	r7, r0
 8025d7c:	f2c0 8081 	blt.w	8025e82 <quorem+0x112>
 8025d80:	3c01      	subs	r4, #1
 8025d82:	f101 0814 	add.w	r8, r1, #20
 8025d86:	f100 0514 	add.w	r5, r0, #20
 8025d8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8025d8e:	9301      	str	r3, [sp, #4]
 8025d90:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8025d94:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8025d98:	3301      	adds	r3, #1
 8025d9a:	429a      	cmp	r2, r3
 8025d9c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8025da0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8025da4:	fbb2 f6f3 	udiv	r6, r2, r3
 8025da8:	d331      	bcc.n	8025e0e <quorem+0x9e>
 8025daa:	f04f 0e00 	mov.w	lr, #0
 8025dae:	4640      	mov	r0, r8
 8025db0:	46ac      	mov	ip, r5
 8025db2:	46f2      	mov	sl, lr
 8025db4:	f850 2b04 	ldr.w	r2, [r0], #4
 8025db8:	b293      	uxth	r3, r2
 8025dba:	fb06 e303 	mla	r3, r6, r3, lr
 8025dbe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8025dc2:	b29b      	uxth	r3, r3
 8025dc4:	ebaa 0303 	sub.w	r3, sl, r3
 8025dc8:	f8dc a000 	ldr.w	sl, [ip]
 8025dcc:	0c12      	lsrs	r2, r2, #16
 8025dce:	fa13 f38a 	uxtah	r3, r3, sl
 8025dd2:	fb06 e202 	mla	r2, r6, r2, lr
 8025dd6:	9300      	str	r3, [sp, #0]
 8025dd8:	9b00      	ldr	r3, [sp, #0]
 8025dda:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8025dde:	b292      	uxth	r2, r2
 8025de0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8025de4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8025de8:	f8bd 3000 	ldrh.w	r3, [sp]
 8025dec:	4581      	cmp	r9, r0
 8025dee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8025df2:	f84c 3b04 	str.w	r3, [ip], #4
 8025df6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8025dfa:	d2db      	bcs.n	8025db4 <quorem+0x44>
 8025dfc:	f855 300b 	ldr.w	r3, [r5, fp]
 8025e00:	b92b      	cbnz	r3, 8025e0e <quorem+0x9e>
 8025e02:	9b01      	ldr	r3, [sp, #4]
 8025e04:	3b04      	subs	r3, #4
 8025e06:	429d      	cmp	r5, r3
 8025e08:	461a      	mov	r2, r3
 8025e0a:	d32e      	bcc.n	8025e6a <quorem+0xfa>
 8025e0c:	613c      	str	r4, [r7, #16]
 8025e0e:	4638      	mov	r0, r7
 8025e10:	f001 faf6 	bl	8027400 <__mcmp>
 8025e14:	2800      	cmp	r0, #0
 8025e16:	db24      	blt.n	8025e62 <quorem+0xf2>
 8025e18:	3601      	adds	r6, #1
 8025e1a:	4628      	mov	r0, r5
 8025e1c:	f04f 0c00 	mov.w	ip, #0
 8025e20:	f858 2b04 	ldr.w	r2, [r8], #4
 8025e24:	f8d0 e000 	ldr.w	lr, [r0]
 8025e28:	b293      	uxth	r3, r2
 8025e2a:	ebac 0303 	sub.w	r3, ip, r3
 8025e2e:	0c12      	lsrs	r2, r2, #16
 8025e30:	fa13 f38e 	uxtah	r3, r3, lr
 8025e34:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8025e38:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8025e3c:	b29b      	uxth	r3, r3
 8025e3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8025e42:	45c1      	cmp	r9, r8
 8025e44:	f840 3b04 	str.w	r3, [r0], #4
 8025e48:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8025e4c:	d2e8      	bcs.n	8025e20 <quorem+0xb0>
 8025e4e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8025e52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8025e56:	b922      	cbnz	r2, 8025e62 <quorem+0xf2>
 8025e58:	3b04      	subs	r3, #4
 8025e5a:	429d      	cmp	r5, r3
 8025e5c:	461a      	mov	r2, r3
 8025e5e:	d30a      	bcc.n	8025e76 <quorem+0x106>
 8025e60:	613c      	str	r4, [r7, #16]
 8025e62:	4630      	mov	r0, r6
 8025e64:	b003      	add	sp, #12
 8025e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025e6a:	6812      	ldr	r2, [r2, #0]
 8025e6c:	3b04      	subs	r3, #4
 8025e6e:	2a00      	cmp	r2, #0
 8025e70:	d1cc      	bne.n	8025e0c <quorem+0x9c>
 8025e72:	3c01      	subs	r4, #1
 8025e74:	e7c7      	b.n	8025e06 <quorem+0x96>
 8025e76:	6812      	ldr	r2, [r2, #0]
 8025e78:	3b04      	subs	r3, #4
 8025e7a:	2a00      	cmp	r2, #0
 8025e7c:	d1f0      	bne.n	8025e60 <quorem+0xf0>
 8025e7e:	3c01      	subs	r4, #1
 8025e80:	e7eb      	b.n	8025e5a <quorem+0xea>
 8025e82:	2000      	movs	r0, #0
 8025e84:	e7ee      	b.n	8025e64 <quorem+0xf4>
	...

08025e88 <_dtoa_r>:
 8025e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025e8c:	ed2d 8b04 	vpush	{d8-d9}
 8025e90:	ec57 6b10 	vmov	r6, r7, d0
 8025e94:	b093      	sub	sp, #76	; 0x4c
 8025e96:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8025e98:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8025e9c:	9106      	str	r1, [sp, #24]
 8025e9e:	ee10 aa10 	vmov	sl, s0
 8025ea2:	4604      	mov	r4, r0
 8025ea4:	9209      	str	r2, [sp, #36]	; 0x24
 8025ea6:	930c      	str	r3, [sp, #48]	; 0x30
 8025ea8:	46bb      	mov	fp, r7
 8025eaa:	b975      	cbnz	r5, 8025eca <_dtoa_r+0x42>
 8025eac:	2010      	movs	r0, #16
 8025eae:	f001 f80f 	bl	8026ed0 <malloc>
 8025eb2:	4602      	mov	r2, r0
 8025eb4:	6260      	str	r0, [r4, #36]	; 0x24
 8025eb6:	b920      	cbnz	r0, 8025ec2 <_dtoa_r+0x3a>
 8025eb8:	4ba7      	ldr	r3, [pc, #668]	; (8026158 <_dtoa_r+0x2d0>)
 8025eba:	21ea      	movs	r1, #234	; 0xea
 8025ebc:	48a7      	ldr	r0, [pc, #668]	; (802615c <_dtoa_r+0x2d4>)
 8025ebe:	f7ff ff39 	bl	8025d34 <__assert_func>
 8025ec2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8025ec6:	6005      	str	r5, [r0, #0]
 8025ec8:	60c5      	str	r5, [r0, #12]
 8025eca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8025ecc:	6819      	ldr	r1, [r3, #0]
 8025ece:	b151      	cbz	r1, 8025ee6 <_dtoa_r+0x5e>
 8025ed0:	685a      	ldr	r2, [r3, #4]
 8025ed2:	604a      	str	r2, [r1, #4]
 8025ed4:	2301      	movs	r3, #1
 8025ed6:	4093      	lsls	r3, r2
 8025ed8:	608b      	str	r3, [r1, #8]
 8025eda:	4620      	mov	r0, r4
 8025edc:	f001 f84e 	bl	8026f7c <_Bfree>
 8025ee0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8025ee2:	2200      	movs	r2, #0
 8025ee4:	601a      	str	r2, [r3, #0]
 8025ee6:	1e3b      	subs	r3, r7, #0
 8025ee8:	bfaa      	itet	ge
 8025eea:	2300      	movge	r3, #0
 8025eec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8025ef0:	f8c8 3000 	strge.w	r3, [r8]
 8025ef4:	4b9a      	ldr	r3, [pc, #616]	; (8026160 <_dtoa_r+0x2d8>)
 8025ef6:	bfbc      	itt	lt
 8025ef8:	2201      	movlt	r2, #1
 8025efa:	f8c8 2000 	strlt.w	r2, [r8]
 8025efe:	ea33 030b 	bics.w	r3, r3, fp
 8025f02:	d11b      	bne.n	8025f3c <_dtoa_r+0xb4>
 8025f04:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8025f06:	f242 730f 	movw	r3, #9999	; 0x270f
 8025f0a:	6013      	str	r3, [r2, #0]
 8025f0c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8025f10:	4333      	orrs	r3, r6
 8025f12:	f000 8592 	beq.w	8026a3a <_dtoa_r+0xbb2>
 8025f16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8025f18:	b963      	cbnz	r3, 8025f34 <_dtoa_r+0xac>
 8025f1a:	4b92      	ldr	r3, [pc, #584]	; (8026164 <_dtoa_r+0x2dc>)
 8025f1c:	e022      	b.n	8025f64 <_dtoa_r+0xdc>
 8025f1e:	4b92      	ldr	r3, [pc, #584]	; (8026168 <_dtoa_r+0x2e0>)
 8025f20:	9301      	str	r3, [sp, #4]
 8025f22:	3308      	adds	r3, #8
 8025f24:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8025f26:	6013      	str	r3, [r2, #0]
 8025f28:	9801      	ldr	r0, [sp, #4]
 8025f2a:	b013      	add	sp, #76	; 0x4c
 8025f2c:	ecbd 8b04 	vpop	{d8-d9}
 8025f30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025f34:	4b8b      	ldr	r3, [pc, #556]	; (8026164 <_dtoa_r+0x2dc>)
 8025f36:	9301      	str	r3, [sp, #4]
 8025f38:	3303      	adds	r3, #3
 8025f3a:	e7f3      	b.n	8025f24 <_dtoa_r+0x9c>
 8025f3c:	2200      	movs	r2, #0
 8025f3e:	2300      	movs	r3, #0
 8025f40:	4650      	mov	r0, sl
 8025f42:	4659      	mov	r1, fp
 8025f44:	f7fa fdd8 	bl	8020af8 <__aeabi_dcmpeq>
 8025f48:	ec4b ab19 	vmov	d9, sl, fp
 8025f4c:	4680      	mov	r8, r0
 8025f4e:	b158      	cbz	r0, 8025f68 <_dtoa_r+0xe0>
 8025f50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8025f52:	2301      	movs	r3, #1
 8025f54:	6013      	str	r3, [r2, #0]
 8025f56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8025f58:	2b00      	cmp	r3, #0
 8025f5a:	f000 856b 	beq.w	8026a34 <_dtoa_r+0xbac>
 8025f5e:	4883      	ldr	r0, [pc, #524]	; (802616c <_dtoa_r+0x2e4>)
 8025f60:	6018      	str	r0, [r3, #0]
 8025f62:	1e43      	subs	r3, r0, #1
 8025f64:	9301      	str	r3, [sp, #4]
 8025f66:	e7df      	b.n	8025f28 <_dtoa_r+0xa0>
 8025f68:	ec4b ab10 	vmov	d0, sl, fp
 8025f6c:	aa10      	add	r2, sp, #64	; 0x40
 8025f6e:	a911      	add	r1, sp, #68	; 0x44
 8025f70:	4620      	mov	r0, r4
 8025f72:	f001 faeb 	bl	802754c <__d2b>
 8025f76:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8025f7a:	ee08 0a10 	vmov	s16, r0
 8025f7e:	2d00      	cmp	r5, #0
 8025f80:	f000 8084 	beq.w	802608c <_dtoa_r+0x204>
 8025f84:	ee19 3a90 	vmov	r3, s19
 8025f88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8025f8c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8025f90:	4656      	mov	r6, sl
 8025f92:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8025f96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8025f9a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8025f9e:	4b74      	ldr	r3, [pc, #464]	; (8026170 <_dtoa_r+0x2e8>)
 8025fa0:	2200      	movs	r2, #0
 8025fa2:	4630      	mov	r0, r6
 8025fa4:	4639      	mov	r1, r7
 8025fa6:	f7fa f987 	bl	80202b8 <__aeabi_dsub>
 8025faa:	a365      	add	r3, pc, #404	; (adr r3, 8026140 <_dtoa_r+0x2b8>)
 8025fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025fb0:	f7fa fb3a 	bl	8020628 <__aeabi_dmul>
 8025fb4:	a364      	add	r3, pc, #400	; (adr r3, 8026148 <_dtoa_r+0x2c0>)
 8025fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025fba:	f7fa f97f 	bl	80202bc <__adddf3>
 8025fbe:	4606      	mov	r6, r0
 8025fc0:	4628      	mov	r0, r5
 8025fc2:	460f      	mov	r7, r1
 8025fc4:	f7fa fac6 	bl	8020554 <__aeabi_i2d>
 8025fc8:	a361      	add	r3, pc, #388	; (adr r3, 8026150 <_dtoa_r+0x2c8>)
 8025fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8025fce:	f7fa fb2b 	bl	8020628 <__aeabi_dmul>
 8025fd2:	4602      	mov	r2, r0
 8025fd4:	460b      	mov	r3, r1
 8025fd6:	4630      	mov	r0, r6
 8025fd8:	4639      	mov	r1, r7
 8025fda:	f7fa f96f 	bl	80202bc <__adddf3>
 8025fde:	4606      	mov	r6, r0
 8025fe0:	460f      	mov	r7, r1
 8025fe2:	f7fa fdd1 	bl	8020b88 <__aeabi_d2iz>
 8025fe6:	2200      	movs	r2, #0
 8025fe8:	9000      	str	r0, [sp, #0]
 8025fea:	2300      	movs	r3, #0
 8025fec:	4630      	mov	r0, r6
 8025fee:	4639      	mov	r1, r7
 8025ff0:	f7fa fd8c 	bl	8020b0c <__aeabi_dcmplt>
 8025ff4:	b150      	cbz	r0, 802600c <_dtoa_r+0x184>
 8025ff6:	9800      	ldr	r0, [sp, #0]
 8025ff8:	f7fa faac 	bl	8020554 <__aeabi_i2d>
 8025ffc:	4632      	mov	r2, r6
 8025ffe:	463b      	mov	r3, r7
 8026000:	f7fa fd7a 	bl	8020af8 <__aeabi_dcmpeq>
 8026004:	b910      	cbnz	r0, 802600c <_dtoa_r+0x184>
 8026006:	9b00      	ldr	r3, [sp, #0]
 8026008:	3b01      	subs	r3, #1
 802600a:	9300      	str	r3, [sp, #0]
 802600c:	9b00      	ldr	r3, [sp, #0]
 802600e:	2b16      	cmp	r3, #22
 8026010:	d85a      	bhi.n	80260c8 <_dtoa_r+0x240>
 8026012:	9a00      	ldr	r2, [sp, #0]
 8026014:	4b57      	ldr	r3, [pc, #348]	; (8026174 <_dtoa_r+0x2ec>)
 8026016:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802601a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802601e:	ec51 0b19 	vmov	r0, r1, d9
 8026022:	f7fa fd73 	bl	8020b0c <__aeabi_dcmplt>
 8026026:	2800      	cmp	r0, #0
 8026028:	d050      	beq.n	80260cc <_dtoa_r+0x244>
 802602a:	9b00      	ldr	r3, [sp, #0]
 802602c:	3b01      	subs	r3, #1
 802602e:	9300      	str	r3, [sp, #0]
 8026030:	2300      	movs	r3, #0
 8026032:	930b      	str	r3, [sp, #44]	; 0x2c
 8026034:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8026036:	1b5d      	subs	r5, r3, r5
 8026038:	1e6b      	subs	r3, r5, #1
 802603a:	9305      	str	r3, [sp, #20]
 802603c:	bf45      	ittet	mi
 802603e:	f1c5 0301 	rsbmi	r3, r5, #1
 8026042:	9304      	strmi	r3, [sp, #16]
 8026044:	2300      	movpl	r3, #0
 8026046:	2300      	movmi	r3, #0
 8026048:	bf4c      	ite	mi
 802604a:	9305      	strmi	r3, [sp, #20]
 802604c:	9304      	strpl	r3, [sp, #16]
 802604e:	9b00      	ldr	r3, [sp, #0]
 8026050:	2b00      	cmp	r3, #0
 8026052:	db3d      	blt.n	80260d0 <_dtoa_r+0x248>
 8026054:	9b05      	ldr	r3, [sp, #20]
 8026056:	9a00      	ldr	r2, [sp, #0]
 8026058:	920a      	str	r2, [sp, #40]	; 0x28
 802605a:	4413      	add	r3, r2
 802605c:	9305      	str	r3, [sp, #20]
 802605e:	2300      	movs	r3, #0
 8026060:	9307      	str	r3, [sp, #28]
 8026062:	9b06      	ldr	r3, [sp, #24]
 8026064:	2b09      	cmp	r3, #9
 8026066:	f200 8089 	bhi.w	802617c <_dtoa_r+0x2f4>
 802606a:	2b05      	cmp	r3, #5
 802606c:	bfc4      	itt	gt
 802606e:	3b04      	subgt	r3, #4
 8026070:	9306      	strgt	r3, [sp, #24]
 8026072:	9b06      	ldr	r3, [sp, #24]
 8026074:	f1a3 0302 	sub.w	r3, r3, #2
 8026078:	bfcc      	ite	gt
 802607a:	2500      	movgt	r5, #0
 802607c:	2501      	movle	r5, #1
 802607e:	2b03      	cmp	r3, #3
 8026080:	f200 8087 	bhi.w	8026192 <_dtoa_r+0x30a>
 8026084:	e8df f003 	tbb	[pc, r3]
 8026088:	59383a2d 	.word	0x59383a2d
 802608c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8026090:	441d      	add	r5, r3
 8026092:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8026096:	2b20      	cmp	r3, #32
 8026098:	bfc1      	itttt	gt
 802609a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 802609e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80260a2:	fa0b f303 	lslgt.w	r3, fp, r3
 80260a6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80260aa:	bfda      	itte	le
 80260ac:	f1c3 0320 	rsble	r3, r3, #32
 80260b0:	fa06 f003 	lslle.w	r0, r6, r3
 80260b4:	4318      	orrgt	r0, r3
 80260b6:	f7fa fa3d 	bl	8020534 <__aeabi_ui2d>
 80260ba:	2301      	movs	r3, #1
 80260bc:	4606      	mov	r6, r0
 80260be:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80260c2:	3d01      	subs	r5, #1
 80260c4:	930e      	str	r3, [sp, #56]	; 0x38
 80260c6:	e76a      	b.n	8025f9e <_dtoa_r+0x116>
 80260c8:	2301      	movs	r3, #1
 80260ca:	e7b2      	b.n	8026032 <_dtoa_r+0x1aa>
 80260cc:	900b      	str	r0, [sp, #44]	; 0x2c
 80260ce:	e7b1      	b.n	8026034 <_dtoa_r+0x1ac>
 80260d0:	9b04      	ldr	r3, [sp, #16]
 80260d2:	9a00      	ldr	r2, [sp, #0]
 80260d4:	1a9b      	subs	r3, r3, r2
 80260d6:	9304      	str	r3, [sp, #16]
 80260d8:	4253      	negs	r3, r2
 80260da:	9307      	str	r3, [sp, #28]
 80260dc:	2300      	movs	r3, #0
 80260de:	930a      	str	r3, [sp, #40]	; 0x28
 80260e0:	e7bf      	b.n	8026062 <_dtoa_r+0x1da>
 80260e2:	2300      	movs	r3, #0
 80260e4:	9308      	str	r3, [sp, #32]
 80260e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80260e8:	2b00      	cmp	r3, #0
 80260ea:	dc55      	bgt.n	8026198 <_dtoa_r+0x310>
 80260ec:	2301      	movs	r3, #1
 80260ee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80260f2:	461a      	mov	r2, r3
 80260f4:	9209      	str	r2, [sp, #36]	; 0x24
 80260f6:	e00c      	b.n	8026112 <_dtoa_r+0x28a>
 80260f8:	2301      	movs	r3, #1
 80260fa:	e7f3      	b.n	80260e4 <_dtoa_r+0x25c>
 80260fc:	2300      	movs	r3, #0
 80260fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026100:	9308      	str	r3, [sp, #32]
 8026102:	9b00      	ldr	r3, [sp, #0]
 8026104:	4413      	add	r3, r2
 8026106:	9302      	str	r3, [sp, #8]
 8026108:	3301      	adds	r3, #1
 802610a:	2b01      	cmp	r3, #1
 802610c:	9303      	str	r3, [sp, #12]
 802610e:	bfb8      	it	lt
 8026110:	2301      	movlt	r3, #1
 8026112:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8026114:	2200      	movs	r2, #0
 8026116:	6042      	str	r2, [r0, #4]
 8026118:	2204      	movs	r2, #4
 802611a:	f102 0614 	add.w	r6, r2, #20
 802611e:	429e      	cmp	r6, r3
 8026120:	6841      	ldr	r1, [r0, #4]
 8026122:	d93d      	bls.n	80261a0 <_dtoa_r+0x318>
 8026124:	4620      	mov	r0, r4
 8026126:	f000 fee9 	bl	8026efc <_Balloc>
 802612a:	9001      	str	r0, [sp, #4]
 802612c:	2800      	cmp	r0, #0
 802612e:	d13b      	bne.n	80261a8 <_dtoa_r+0x320>
 8026130:	4b11      	ldr	r3, [pc, #68]	; (8026178 <_dtoa_r+0x2f0>)
 8026132:	4602      	mov	r2, r0
 8026134:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8026138:	e6c0      	b.n	8025ebc <_dtoa_r+0x34>
 802613a:	2301      	movs	r3, #1
 802613c:	e7df      	b.n	80260fe <_dtoa_r+0x276>
 802613e:	bf00      	nop
 8026140:	636f4361 	.word	0x636f4361
 8026144:	3fd287a7 	.word	0x3fd287a7
 8026148:	8b60c8b3 	.word	0x8b60c8b3
 802614c:	3fc68a28 	.word	0x3fc68a28
 8026150:	509f79fb 	.word	0x509f79fb
 8026154:	3fd34413 	.word	0x3fd34413
 8026158:	080283c4 	.word	0x080283c4
 802615c:	08028582 	.word	0x08028582
 8026160:	7ff00000 	.word	0x7ff00000
 8026164:	0802857e 	.word	0x0802857e
 8026168:	08028575 	.word	0x08028575
 802616c:	080283a1 	.word	0x080283a1
 8026170:	3ff80000 	.word	0x3ff80000
 8026174:	080286d8 	.word	0x080286d8
 8026178:	080285dd 	.word	0x080285dd
 802617c:	2501      	movs	r5, #1
 802617e:	2300      	movs	r3, #0
 8026180:	9306      	str	r3, [sp, #24]
 8026182:	9508      	str	r5, [sp, #32]
 8026184:	f04f 33ff 	mov.w	r3, #4294967295
 8026188:	e9cd 3302 	strd	r3, r3, [sp, #8]
 802618c:	2200      	movs	r2, #0
 802618e:	2312      	movs	r3, #18
 8026190:	e7b0      	b.n	80260f4 <_dtoa_r+0x26c>
 8026192:	2301      	movs	r3, #1
 8026194:	9308      	str	r3, [sp, #32]
 8026196:	e7f5      	b.n	8026184 <_dtoa_r+0x2fc>
 8026198:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802619a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 802619e:	e7b8      	b.n	8026112 <_dtoa_r+0x28a>
 80261a0:	3101      	adds	r1, #1
 80261a2:	6041      	str	r1, [r0, #4]
 80261a4:	0052      	lsls	r2, r2, #1
 80261a6:	e7b8      	b.n	802611a <_dtoa_r+0x292>
 80261a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80261aa:	9a01      	ldr	r2, [sp, #4]
 80261ac:	601a      	str	r2, [r3, #0]
 80261ae:	9b03      	ldr	r3, [sp, #12]
 80261b0:	2b0e      	cmp	r3, #14
 80261b2:	f200 809d 	bhi.w	80262f0 <_dtoa_r+0x468>
 80261b6:	2d00      	cmp	r5, #0
 80261b8:	f000 809a 	beq.w	80262f0 <_dtoa_r+0x468>
 80261bc:	9b00      	ldr	r3, [sp, #0]
 80261be:	2b00      	cmp	r3, #0
 80261c0:	dd32      	ble.n	8026228 <_dtoa_r+0x3a0>
 80261c2:	4ab7      	ldr	r2, [pc, #732]	; (80264a0 <_dtoa_r+0x618>)
 80261c4:	f003 030f 	and.w	r3, r3, #15
 80261c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80261cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80261d0:	9b00      	ldr	r3, [sp, #0]
 80261d2:	05d8      	lsls	r0, r3, #23
 80261d4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80261d8:	d516      	bpl.n	8026208 <_dtoa_r+0x380>
 80261da:	4bb2      	ldr	r3, [pc, #712]	; (80264a4 <_dtoa_r+0x61c>)
 80261dc:	ec51 0b19 	vmov	r0, r1, d9
 80261e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80261e4:	f7fa fb4a 	bl	802087c <__aeabi_ddiv>
 80261e8:	f007 070f 	and.w	r7, r7, #15
 80261ec:	4682      	mov	sl, r0
 80261ee:	468b      	mov	fp, r1
 80261f0:	2503      	movs	r5, #3
 80261f2:	4eac      	ldr	r6, [pc, #688]	; (80264a4 <_dtoa_r+0x61c>)
 80261f4:	b957      	cbnz	r7, 802620c <_dtoa_r+0x384>
 80261f6:	4642      	mov	r2, r8
 80261f8:	464b      	mov	r3, r9
 80261fa:	4650      	mov	r0, sl
 80261fc:	4659      	mov	r1, fp
 80261fe:	f7fa fb3d 	bl	802087c <__aeabi_ddiv>
 8026202:	4682      	mov	sl, r0
 8026204:	468b      	mov	fp, r1
 8026206:	e028      	b.n	802625a <_dtoa_r+0x3d2>
 8026208:	2502      	movs	r5, #2
 802620a:	e7f2      	b.n	80261f2 <_dtoa_r+0x36a>
 802620c:	07f9      	lsls	r1, r7, #31
 802620e:	d508      	bpl.n	8026222 <_dtoa_r+0x39a>
 8026210:	4640      	mov	r0, r8
 8026212:	4649      	mov	r1, r9
 8026214:	e9d6 2300 	ldrd	r2, r3, [r6]
 8026218:	f7fa fa06 	bl	8020628 <__aeabi_dmul>
 802621c:	3501      	adds	r5, #1
 802621e:	4680      	mov	r8, r0
 8026220:	4689      	mov	r9, r1
 8026222:	107f      	asrs	r7, r7, #1
 8026224:	3608      	adds	r6, #8
 8026226:	e7e5      	b.n	80261f4 <_dtoa_r+0x36c>
 8026228:	f000 809b 	beq.w	8026362 <_dtoa_r+0x4da>
 802622c:	9b00      	ldr	r3, [sp, #0]
 802622e:	4f9d      	ldr	r7, [pc, #628]	; (80264a4 <_dtoa_r+0x61c>)
 8026230:	425e      	negs	r6, r3
 8026232:	4b9b      	ldr	r3, [pc, #620]	; (80264a0 <_dtoa_r+0x618>)
 8026234:	f006 020f 	and.w	r2, r6, #15
 8026238:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802623c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8026240:	ec51 0b19 	vmov	r0, r1, d9
 8026244:	f7fa f9f0 	bl	8020628 <__aeabi_dmul>
 8026248:	1136      	asrs	r6, r6, #4
 802624a:	4682      	mov	sl, r0
 802624c:	468b      	mov	fp, r1
 802624e:	2300      	movs	r3, #0
 8026250:	2502      	movs	r5, #2
 8026252:	2e00      	cmp	r6, #0
 8026254:	d17a      	bne.n	802634c <_dtoa_r+0x4c4>
 8026256:	2b00      	cmp	r3, #0
 8026258:	d1d3      	bne.n	8026202 <_dtoa_r+0x37a>
 802625a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802625c:	2b00      	cmp	r3, #0
 802625e:	f000 8082 	beq.w	8026366 <_dtoa_r+0x4de>
 8026262:	4b91      	ldr	r3, [pc, #580]	; (80264a8 <_dtoa_r+0x620>)
 8026264:	2200      	movs	r2, #0
 8026266:	4650      	mov	r0, sl
 8026268:	4659      	mov	r1, fp
 802626a:	f7fa fc4f 	bl	8020b0c <__aeabi_dcmplt>
 802626e:	2800      	cmp	r0, #0
 8026270:	d079      	beq.n	8026366 <_dtoa_r+0x4de>
 8026272:	9b03      	ldr	r3, [sp, #12]
 8026274:	2b00      	cmp	r3, #0
 8026276:	d076      	beq.n	8026366 <_dtoa_r+0x4de>
 8026278:	9b02      	ldr	r3, [sp, #8]
 802627a:	2b00      	cmp	r3, #0
 802627c:	dd36      	ble.n	80262ec <_dtoa_r+0x464>
 802627e:	9b00      	ldr	r3, [sp, #0]
 8026280:	4650      	mov	r0, sl
 8026282:	4659      	mov	r1, fp
 8026284:	1e5f      	subs	r7, r3, #1
 8026286:	2200      	movs	r2, #0
 8026288:	4b88      	ldr	r3, [pc, #544]	; (80264ac <_dtoa_r+0x624>)
 802628a:	f7fa f9cd 	bl	8020628 <__aeabi_dmul>
 802628e:	9e02      	ldr	r6, [sp, #8]
 8026290:	4682      	mov	sl, r0
 8026292:	468b      	mov	fp, r1
 8026294:	3501      	adds	r5, #1
 8026296:	4628      	mov	r0, r5
 8026298:	f7fa f95c 	bl	8020554 <__aeabi_i2d>
 802629c:	4652      	mov	r2, sl
 802629e:	465b      	mov	r3, fp
 80262a0:	f7fa f9c2 	bl	8020628 <__aeabi_dmul>
 80262a4:	4b82      	ldr	r3, [pc, #520]	; (80264b0 <_dtoa_r+0x628>)
 80262a6:	2200      	movs	r2, #0
 80262a8:	f7fa f808 	bl	80202bc <__adddf3>
 80262ac:	46d0      	mov	r8, sl
 80262ae:	46d9      	mov	r9, fp
 80262b0:	4682      	mov	sl, r0
 80262b2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80262b6:	2e00      	cmp	r6, #0
 80262b8:	d158      	bne.n	802636c <_dtoa_r+0x4e4>
 80262ba:	4b7e      	ldr	r3, [pc, #504]	; (80264b4 <_dtoa_r+0x62c>)
 80262bc:	2200      	movs	r2, #0
 80262be:	4640      	mov	r0, r8
 80262c0:	4649      	mov	r1, r9
 80262c2:	f7f9 fff9 	bl	80202b8 <__aeabi_dsub>
 80262c6:	4652      	mov	r2, sl
 80262c8:	465b      	mov	r3, fp
 80262ca:	4680      	mov	r8, r0
 80262cc:	4689      	mov	r9, r1
 80262ce:	f7fa fc3b 	bl	8020b48 <__aeabi_dcmpgt>
 80262d2:	2800      	cmp	r0, #0
 80262d4:	f040 8295 	bne.w	8026802 <_dtoa_r+0x97a>
 80262d8:	4652      	mov	r2, sl
 80262da:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80262de:	4640      	mov	r0, r8
 80262e0:	4649      	mov	r1, r9
 80262e2:	f7fa fc13 	bl	8020b0c <__aeabi_dcmplt>
 80262e6:	2800      	cmp	r0, #0
 80262e8:	f040 8289 	bne.w	80267fe <_dtoa_r+0x976>
 80262ec:	ec5b ab19 	vmov	sl, fp, d9
 80262f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80262f2:	2b00      	cmp	r3, #0
 80262f4:	f2c0 8148 	blt.w	8026588 <_dtoa_r+0x700>
 80262f8:	9a00      	ldr	r2, [sp, #0]
 80262fa:	2a0e      	cmp	r2, #14
 80262fc:	f300 8144 	bgt.w	8026588 <_dtoa_r+0x700>
 8026300:	4b67      	ldr	r3, [pc, #412]	; (80264a0 <_dtoa_r+0x618>)
 8026302:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8026306:	e9d3 8900 	ldrd	r8, r9, [r3]
 802630a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802630c:	2b00      	cmp	r3, #0
 802630e:	f280 80d5 	bge.w	80264bc <_dtoa_r+0x634>
 8026312:	9b03      	ldr	r3, [sp, #12]
 8026314:	2b00      	cmp	r3, #0
 8026316:	f300 80d1 	bgt.w	80264bc <_dtoa_r+0x634>
 802631a:	f040 826f 	bne.w	80267fc <_dtoa_r+0x974>
 802631e:	4b65      	ldr	r3, [pc, #404]	; (80264b4 <_dtoa_r+0x62c>)
 8026320:	2200      	movs	r2, #0
 8026322:	4640      	mov	r0, r8
 8026324:	4649      	mov	r1, r9
 8026326:	f7fa f97f 	bl	8020628 <__aeabi_dmul>
 802632a:	4652      	mov	r2, sl
 802632c:	465b      	mov	r3, fp
 802632e:	f7fa fc01 	bl	8020b34 <__aeabi_dcmpge>
 8026332:	9e03      	ldr	r6, [sp, #12]
 8026334:	4637      	mov	r7, r6
 8026336:	2800      	cmp	r0, #0
 8026338:	f040 8245 	bne.w	80267c6 <_dtoa_r+0x93e>
 802633c:	9d01      	ldr	r5, [sp, #4]
 802633e:	2331      	movs	r3, #49	; 0x31
 8026340:	f805 3b01 	strb.w	r3, [r5], #1
 8026344:	9b00      	ldr	r3, [sp, #0]
 8026346:	3301      	adds	r3, #1
 8026348:	9300      	str	r3, [sp, #0]
 802634a:	e240      	b.n	80267ce <_dtoa_r+0x946>
 802634c:	07f2      	lsls	r2, r6, #31
 802634e:	d505      	bpl.n	802635c <_dtoa_r+0x4d4>
 8026350:	e9d7 2300 	ldrd	r2, r3, [r7]
 8026354:	f7fa f968 	bl	8020628 <__aeabi_dmul>
 8026358:	3501      	adds	r5, #1
 802635a:	2301      	movs	r3, #1
 802635c:	1076      	asrs	r6, r6, #1
 802635e:	3708      	adds	r7, #8
 8026360:	e777      	b.n	8026252 <_dtoa_r+0x3ca>
 8026362:	2502      	movs	r5, #2
 8026364:	e779      	b.n	802625a <_dtoa_r+0x3d2>
 8026366:	9f00      	ldr	r7, [sp, #0]
 8026368:	9e03      	ldr	r6, [sp, #12]
 802636a:	e794      	b.n	8026296 <_dtoa_r+0x40e>
 802636c:	9901      	ldr	r1, [sp, #4]
 802636e:	4b4c      	ldr	r3, [pc, #304]	; (80264a0 <_dtoa_r+0x618>)
 8026370:	4431      	add	r1, r6
 8026372:	910d      	str	r1, [sp, #52]	; 0x34
 8026374:	9908      	ldr	r1, [sp, #32]
 8026376:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 802637a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 802637e:	2900      	cmp	r1, #0
 8026380:	d043      	beq.n	802640a <_dtoa_r+0x582>
 8026382:	494d      	ldr	r1, [pc, #308]	; (80264b8 <_dtoa_r+0x630>)
 8026384:	2000      	movs	r0, #0
 8026386:	f7fa fa79 	bl	802087c <__aeabi_ddiv>
 802638a:	4652      	mov	r2, sl
 802638c:	465b      	mov	r3, fp
 802638e:	f7f9 ff93 	bl	80202b8 <__aeabi_dsub>
 8026392:	9d01      	ldr	r5, [sp, #4]
 8026394:	4682      	mov	sl, r0
 8026396:	468b      	mov	fp, r1
 8026398:	4649      	mov	r1, r9
 802639a:	4640      	mov	r0, r8
 802639c:	f7fa fbf4 	bl	8020b88 <__aeabi_d2iz>
 80263a0:	4606      	mov	r6, r0
 80263a2:	f7fa f8d7 	bl	8020554 <__aeabi_i2d>
 80263a6:	4602      	mov	r2, r0
 80263a8:	460b      	mov	r3, r1
 80263aa:	4640      	mov	r0, r8
 80263ac:	4649      	mov	r1, r9
 80263ae:	f7f9 ff83 	bl	80202b8 <__aeabi_dsub>
 80263b2:	3630      	adds	r6, #48	; 0x30
 80263b4:	f805 6b01 	strb.w	r6, [r5], #1
 80263b8:	4652      	mov	r2, sl
 80263ba:	465b      	mov	r3, fp
 80263bc:	4680      	mov	r8, r0
 80263be:	4689      	mov	r9, r1
 80263c0:	f7fa fba4 	bl	8020b0c <__aeabi_dcmplt>
 80263c4:	2800      	cmp	r0, #0
 80263c6:	d163      	bne.n	8026490 <_dtoa_r+0x608>
 80263c8:	4642      	mov	r2, r8
 80263ca:	464b      	mov	r3, r9
 80263cc:	4936      	ldr	r1, [pc, #216]	; (80264a8 <_dtoa_r+0x620>)
 80263ce:	2000      	movs	r0, #0
 80263d0:	f7f9 ff72 	bl	80202b8 <__aeabi_dsub>
 80263d4:	4652      	mov	r2, sl
 80263d6:	465b      	mov	r3, fp
 80263d8:	f7fa fb98 	bl	8020b0c <__aeabi_dcmplt>
 80263dc:	2800      	cmp	r0, #0
 80263de:	f040 80b5 	bne.w	802654c <_dtoa_r+0x6c4>
 80263e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80263e4:	429d      	cmp	r5, r3
 80263e6:	d081      	beq.n	80262ec <_dtoa_r+0x464>
 80263e8:	4b30      	ldr	r3, [pc, #192]	; (80264ac <_dtoa_r+0x624>)
 80263ea:	2200      	movs	r2, #0
 80263ec:	4650      	mov	r0, sl
 80263ee:	4659      	mov	r1, fp
 80263f0:	f7fa f91a 	bl	8020628 <__aeabi_dmul>
 80263f4:	4b2d      	ldr	r3, [pc, #180]	; (80264ac <_dtoa_r+0x624>)
 80263f6:	4682      	mov	sl, r0
 80263f8:	468b      	mov	fp, r1
 80263fa:	4640      	mov	r0, r8
 80263fc:	4649      	mov	r1, r9
 80263fe:	2200      	movs	r2, #0
 8026400:	f7fa f912 	bl	8020628 <__aeabi_dmul>
 8026404:	4680      	mov	r8, r0
 8026406:	4689      	mov	r9, r1
 8026408:	e7c6      	b.n	8026398 <_dtoa_r+0x510>
 802640a:	4650      	mov	r0, sl
 802640c:	4659      	mov	r1, fp
 802640e:	f7fa f90b 	bl	8020628 <__aeabi_dmul>
 8026412:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8026414:	9d01      	ldr	r5, [sp, #4]
 8026416:	930f      	str	r3, [sp, #60]	; 0x3c
 8026418:	4682      	mov	sl, r0
 802641a:	468b      	mov	fp, r1
 802641c:	4649      	mov	r1, r9
 802641e:	4640      	mov	r0, r8
 8026420:	f7fa fbb2 	bl	8020b88 <__aeabi_d2iz>
 8026424:	4606      	mov	r6, r0
 8026426:	f7fa f895 	bl	8020554 <__aeabi_i2d>
 802642a:	3630      	adds	r6, #48	; 0x30
 802642c:	4602      	mov	r2, r0
 802642e:	460b      	mov	r3, r1
 8026430:	4640      	mov	r0, r8
 8026432:	4649      	mov	r1, r9
 8026434:	f7f9 ff40 	bl	80202b8 <__aeabi_dsub>
 8026438:	f805 6b01 	strb.w	r6, [r5], #1
 802643c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802643e:	429d      	cmp	r5, r3
 8026440:	4680      	mov	r8, r0
 8026442:	4689      	mov	r9, r1
 8026444:	f04f 0200 	mov.w	r2, #0
 8026448:	d124      	bne.n	8026494 <_dtoa_r+0x60c>
 802644a:	4b1b      	ldr	r3, [pc, #108]	; (80264b8 <_dtoa_r+0x630>)
 802644c:	4650      	mov	r0, sl
 802644e:	4659      	mov	r1, fp
 8026450:	f7f9 ff34 	bl	80202bc <__adddf3>
 8026454:	4602      	mov	r2, r0
 8026456:	460b      	mov	r3, r1
 8026458:	4640      	mov	r0, r8
 802645a:	4649      	mov	r1, r9
 802645c:	f7fa fb74 	bl	8020b48 <__aeabi_dcmpgt>
 8026460:	2800      	cmp	r0, #0
 8026462:	d173      	bne.n	802654c <_dtoa_r+0x6c4>
 8026464:	4652      	mov	r2, sl
 8026466:	465b      	mov	r3, fp
 8026468:	4913      	ldr	r1, [pc, #76]	; (80264b8 <_dtoa_r+0x630>)
 802646a:	2000      	movs	r0, #0
 802646c:	f7f9 ff24 	bl	80202b8 <__aeabi_dsub>
 8026470:	4602      	mov	r2, r0
 8026472:	460b      	mov	r3, r1
 8026474:	4640      	mov	r0, r8
 8026476:	4649      	mov	r1, r9
 8026478:	f7fa fb48 	bl	8020b0c <__aeabi_dcmplt>
 802647c:	2800      	cmp	r0, #0
 802647e:	f43f af35 	beq.w	80262ec <_dtoa_r+0x464>
 8026482:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8026484:	1e6b      	subs	r3, r5, #1
 8026486:	930f      	str	r3, [sp, #60]	; 0x3c
 8026488:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 802648c:	2b30      	cmp	r3, #48	; 0x30
 802648e:	d0f8      	beq.n	8026482 <_dtoa_r+0x5fa>
 8026490:	9700      	str	r7, [sp, #0]
 8026492:	e049      	b.n	8026528 <_dtoa_r+0x6a0>
 8026494:	4b05      	ldr	r3, [pc, #20]	; (80264ac <_dtoa_r+0x624>)
 8026496:	f7fa f8c7 	bl	8020628 <__aeabi_dmul>
 802649a:	4680      	mov	r8, r0
 802649c:	4689      	mov	r9, r1
 802649e:	e7bd      	b.n	802641c <_dtoa_r+0x594>
 80264a0:	080286d8 	.word	0x080286d8
 80264a4:	080286b0 	.word	0x080286b0
 80264a8:	3ff00000 	.word	0x3ff00000
 80264ac:	40240000 	.word	0x40240000
 80264b0:	401c0000 	.word	0x401c0000
 80264b4:	40140000 	.word	0x40140000
 80264b8:	3fe00000 	.word	0x3fe00000
 80264bc:	9d01      	ldr	r5, [sp, #4]
 80264be:	4656      	mov	r6, sl
 80264c0:	465f      	mov	r7, fp
 80264c2:	4642      	mov	r2, r8
 80264c4:	464b      	mov	r3, r9
 80264c6:	4630      	mov	r0, r6
 80264c8:	4639      	mov	r1, r7
 80264ca:	f7fa f9d7 	bl	802087c <__aeabi_ddiv>
 80264ce:	f7fa fb5b 	bl	8020b88 <__aeabi_d2iz>
 80264d2:	4682      	mov	sl, r0
 80264d4:	f7fa f83e 	bl	8020554 <__aeabi_i2d>
 80264d8:	4642      	mov	r2, r8
 80264da:	464b      	mov	r3, r9
 80264dc:	f7fa f8a4 	bl	8020628 <__aeabi_dmul>
 80264e0:	4602      	mov	r2, r0
 80264e2:	460b      	mov	r3, r1
 80264e4:	4630      	mov	r0, r6
 80264e6:	4639      	mov	r1, r7
 80264e8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80264ec:	f7f9 fee4 	bl	80202b8 <__aeabi_dsub>
 80264f0:	f805 6b01 	strb.w	r6, [r5], #1
 80264f4:	9e01      	ldr	r6, [sp, #4]
 80264f6:	9f03      	ldr	r7, [sp, #12]
 80264f8:	1bae      	subs	r6, r5, r6
 80264fa:	42b7      	cmp	r7, r6
 80264fc:	4602      	mov	r2, r0
 80264fe:	460b      	mov	r3, r1
 8026500:	d135      	bne.n	802656e <_dtoa_r+0x6e6>
 8026502:	f7f9 fedb 	bl	80202bc <__adddf3>
 8026506:	4642      	mov	r2, r8
 8026508:	464b      	mov	r3, r9
 802650a:	4606      	mov	r6, r0
 802650c:	460f      	mov	r7, r1
 802650e:	f7fa fb1b 	bl	8020b48 <__aeabi_dcmpgt>
 8026512:	b9d0      	cbnz	r0, 802654a <_dtoa_r+0x6c2>
 8026514:	4642      	mov	r2, r8
 8026516:	464b      	mov	r3, r9
 8026518:	4630      	mov	r0, r6
 802651a:	4639      	mov	r1, r7
 802651c:	f7fa faec 	bl	8020af8 <__aeabi_dcmpeq>
 8026520:	b110      	cbz	r0, 8026528 <_dtoa_r+0x6a0>
 8026522:	f01a 0f01 	tst.w	sl, #1
 8026526:	d110      	bne.n	802654a <_dtoa_r+0x6c2>
 8026528:	4620      	mov	r0, r4
 802652a:	ee18 1a10 	vmov	r1, s16
 802652e:	f000 fd25 	bl	8026f7c <_Bfree>
 8026532:	2300      	movs	r3, #0
 8026534:	9800      	ldr	r0, [sp, #0]
 8026536:	702b      	strb	r3, [r5, #0]
 8026538:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802653a:	3001      	adds	r0, #1
 802653c:	6018      	str	r0, [r3, #0]
 802653e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8026540:	2b00      	cmp	r3, #0
 8026542:	f43f acf1 	beq.w	8025f28 <_dtoa_r+0xa0>
 8026546:	601d      	str	r5, [r3, #0]
 8026548:	e4ee      	b.n	8025f28 <_dtoa_r+0xa0>
 802654a:	9f00      	ldr	r7, [sp, #0]
 802654c:	462b      	mov	r3, r5
 802654e:	461d      	mov	r5, r3
 8026550:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8026554:	2a39      	cmp	r2, #57	; 0x39
 8026556:	d106      	bne.n	8026566 <_dtoa_r+0x6de>
 8026558:	9a01      	ldr	r2, [sp, #4]
 802655a:	429a      	cmp	r2, r3
 802655c:	d1f7      	bne.n	802654e <_dtoa_r+0x6c6>
 802655e:	9901      	ldr	r1, [sp, #4]
 8026560:	2230      	movs	r2, #48	; 0x30
 8026562:	3701      	adds	r7, #1
 8026564:	700a      	strb	r2, [r1, #0]
 8026566:	781a      	ldrb	r2, [r3, #0]
 8026568:	3201      	adds	r2, #1
 802656a:	701a      	strb	r2, [r3, #0]
 802656c:	e790      	b.n	8026490 <_dtoa_r+0x608>
 802656e:	4ba6      	ldr	r3, [pc, #664]	; (8026808 <_dtoa_r+0x980>)
 8026570:	2200      	movs	r2, #0
 8026572:	f7fa f859 	bl	8020628 <__aeabi_dmul>
 8026576:	2200      	movs	r2, #0
 8026578:	2300      	movs	r3, #0
 802657a:	4606      	mov	r6, r0
 802657c:	460f      	mov	r7, r1
 802657e:	f7fa fabb 	bl	8020af8 <__aeabi_dcmpeq>
 8026582:	2800      	cmp	r0, #0
 8026584:	d09d      	beq.n	80264c2 <_dtoa_r+0x63a>
 8026586:	e7cf      	b.n	8026528 <_dtoa_r+0x6a0>
 8026588:	9a08      	ldr	r2, [sp, #32]
 802658a:	2a00      	cmp	r2, #0
 802658c:	f000 80d7 	beq.w	802673e <_dtoa_r+0x8b6>
 8026590:	9a06      	ldr	r2, [sp, #24]
 8026592:	2a01      	cmp	r2, #1
 8026594:	f300 80ba 	bgt.w	802670c <_dtoa_r+0x884>
 8026598:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802659a:	2a00      	cmp	r2, #0
 802659c:	f000 80b2 	beq.w	8026704 <_dtoa_r+0x87c>
 80265a0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80265a4:	9e07      	ldr	r6, [sp, #28]
 80265a6:	9d04      	ldr	r5, [sp, #16]
 80265a8:	9a04      	ldr	r2, [sp, #16]
 80265aa:	441a      	add	r2, r3
 80265ac:	9204      	str	r2, [sp, #16]
 80265ae:	9a05      	ldr	r2, [sp, #20]
 80265b0:	2101      	movs	r1, #1
 80265b2:	441a      	add	r2, r3
 80265b4:	4620      	mov	r0, r4
 80265b6:	9205      	str	r2, [sp, #20]
 80265b8:	f000 fd98 	bl	80270ec <__i2b>
 80265bc:	4607      	mov	r7, r0
 80265be:	2d00      	cmp	r5, #0
 80265c0:	dd0c      	ble.n	80265dc <_dtoa_r+0x754>
 80265c2:	9b05      	ldr	r3, [sp, #20]
 80265c4:	2b00      	cmp	r3, #0
 80265c6:	dd09      	ble.n	80265dc <_dtoa_r+0x754>
 80265c8:	42ab      	cmp	r3, r5
 80265ca:	9a04      	ldr	r2, [sp, #16]
 80265cc:	bfa8      	it	ge
 80265ce:	462b      	movge	r3, r5
 80265d0:	1ad2      	subs	r2, r2, r3
 80265d2:	9204      	str	r2, [sp, #16]
 80265d4:	9a05      	ldr	r2, [sp, #20]
 80265d6:	1aed      	subs	r5, r5, r3
 80265d8:	1ad3      	subs	r3, r2, r3
 80265da:	9305      	str	r3, [sp, #20]
 80265dc:	9b07      	ldr	r3, [sp, #28]
 80265de:	b31b      	cbz	r3, 8026628 <_dtoa_r+0x7a0>
 80265e0:	9b08      	ldr	r3, [sp, #32]
 80265e2:	2b00      	cmp	r3, #0
 80265e4:	f000 80af 	beq.w	8026746 <_dtoa_r+0x8be>
 80265e8:	2e00      	cmp	r6, #0
 80265ea:	dd13      	ble.n	8026614 <_dtoa_r+0x78c>
 80265ec:	4639      	mov	r1, r7
 80265ee:	4632      	mov	r2, r6
 80265f0:	4620      	mov	r0, r4
 80265f2:	f000 fe3b 	bl	802726c <__pow5mult>
 80265f6:	ee18 2a10 	vmov	r2, s16
 80265fa:	4601      	mov	r1, r0
 80265fc:	4607      	mov	r7, r0
 80265fe:	4620      	mov	r0, r4
 8026600:	f000 fd8a 	bl	8027118 <__multiply>
 8026604:	ee18 1a10 	vmov	r1, s16
 8026608:	4680      	mov	r8, r0
 802660a:	4620      	mov	r0, r4
 802660c:	f000 fcb6 	bl	8026f7c <_Bfree>
 8026610:	ee08 8a10 	vmov	s16, r8
 8026614:	9b07      	ldr	r3, [sp, #28]
 8026616:	1b9a      	subs	r2, r3, r6
 8026618:	d006      	beq.n	8026628 <_dtoa_r+0x7a0>
 802661a:	ee18 1a10 	vmov	r1, s16
 802661e:	4620      	mov	r0, r4
 8026620:	f000 fe24 	bl	802726c <__pow5mult>
 8026624:	ee08 0a10 	vmov	s16, r0
 8026628:	2101      	movs	r1, #1
 802662a:	4620      	mov	r0, r4
 802662c:	f000 fd5e 	bl	80270ec <__i2b>
 8026630:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026632:	2b00      	cmp	r3, #0
 8026634:	4606      	mov	r6, r0
 8026636:	f340 8088 	ble.w	802674a <_dtoa_r+0x8c2>
 802663a:	461a      	mov	r2, r3
 802663c:	4601      	mov	r1, r0
 802663e:	4620      	mov	r0, r4
 8026640:	f000 fe14 	bl	802726c <__pow5mult>
 8026644:	9b06      	ldr	r3, [sp, #24]
 8026646:	2b01      	cmp	r3, #1
 8026648:	4606      	mov	r6, r0
 802664a:	f340 8081 	ble.w	8026750 <_dtoa_r+0x8c8>
 802664e:	f04f 0800 	mov.w	r8, #0
 8026652:	6933      	ldr	r3, [r6, #16]
 8026654:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8026658:	6918      	ldr	r0, [r3, #16]
 802665a:	f000 fcf7 	bl	802704c <__hi0bits>
 802665e:	f1c0 0020 	rsb	r0, r0, #32
 8026662:	9b05      	ldr	r3, [sp, #20]
 8026664:	4418      	add	r0, r3
 8026666:	f010 001f 	ands.w	r0, r0, #31
 802666a:	f000 8092 	beq.w	8026792 <_dtoa_r+0x90a>
 802666e:	f1c0 0320 	rsb	r3, r0, #32
 8026672:	2b04      	cmp	r3, #4
 8026674:	f340 808a 	ble.w	802678c <_dtoa_r+0x904>
 8026678:	f1c0 001c 	rsb	r0, r0, #28
 802667c:	9b04      	ldr	r3, [sp, #16]
 802667e:	4403      	add	r3, r0
 8026680:	9304      	str	r3, [sp, #16]
 8026682:	9b05      	ldr	r3, [sp, #20]
 8026684:	4403      	add	r3, r0
 8026686:	4405      	add	r5, r0
 8026688:	9305      	str	r3, [sp, #20]
 802668a:	9b04      	ldr	r3, [sp, #16]
 802668c:	2b00      	cmp	r3, #0
 802668e:	dd07      	ble.n	80266a0 <_dtoa_r+0x818>
 8026690:	ee18 1a10 	vmov	r1, s16
 8026694:	461a      	mov	r2, r3
 8026696:	4620      	mov	r0, r4
 8026698:	f000 fe42 	bl	8027320 <__lshift>
 802669c:	ee08 0a10 	vmov	s16, r0
 80266a0:	9b05      	ldr	r3, [sp, #20]
 80266a2:	2b00      	cmp	r3, #0
 80266a4:	dd05      	ble.n	80266b2 <_dtoa_r+0x82a>
 80266a6:	4631      	mov	r1, r6
 80266a8:	461a      	mov	r2, r3
 80266aa:	4620      	mov	r0, r4
 80266ac:	f000 fe38 	bl	8027320 <__lshift>
 80266b0:	4606      	mov	r6, r0
 80266b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80266b4:	2b00      	cmp	r3, #0
 80266b6:	d06e      	beq.n	8026796 <_dtoa_r+0x90e>
 80266b8:	ee18 0a10 	vmov	r0, s16
 80266bc:	4631      	mov	r1, r6
 80266be:	f000 fe9f 	bl	8027400 <__mcmp>
 80266c2:	2800      	cmp	r0, #0
 80266c4:	da67      	bge.n	8026796 <_dtoa_r+0x90e>
 80266c6:	9b00      	ldr	r3, [sp, #0]
 80266c8:	3b01      	subs	r3, #1
 80266ca:	ee18 1a10 	vmov	r1, s16
 80266ce:	9300      	str	r3, [sp, #0]
 80266d0:	220a      	movs	r2, #10
 80266d2:	2300      	movs	r3, #0
 80266d4:	4620      	mov	r0, r4
 80266d6:	f000 fc73 	bl	8026fc0 <__multadd>
 80266da:	9b08      	ldr	r3, [sp, #32]
 80266dc:	ee08 0a10 	vmov	s16, r0
 80266e0:	2b00      	cmp	r3, #0
 80266e2:	f000 81b1 	beq.w	8026a48 <_dtoa_r+0xbc0>
 80266e6:	2300      	movs	r3, #0
 80266e8:	4639      	mov	r1, r7
 80266ea:	220a      	movs	r2, #10
 80266ec:	4620      	mov	r0, r4
 80266ee:	f000 fc67 	bl	8026fc0 <__multadd>
 80266f2:	9b02      	ldr	r3, [sp, #8]
 80266f4:	2b00      	cmp	r3, #0
 80266f6:	4607      	mov	r7, r0
 80266f8:	f300 808e 	bgt.w	8026818 <_dtoa_r+0x990>
 80266fc:	9b06      	ldr	r3, [sp, #24]
 80266fe:	2b02      	cmp	r3, #2
 8026700:	dc51      	bgt.n	80267a6 <_dtoa_r+0x91e>
 8026702:	e089      	b.n	8026818 <_dtoa_r+0x990>
 8026704:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8026706:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 802670a:	e74b      	b.n	80265a4 <_dtoa_r+0x71c>
 802670c:	9b03      	ldr	r3, [sp, #12]
 802670e:	1e5e      	subs	r6, r3, #1
 8026710:	9b07      	ldr	r3, [sp, #28]
 8026712:	42b3      	cmp	r3, r6
 8026714:	bfbf      	itttt	lt
 8026716:	9b07      	ldrlt	r3, [sp, #28]
 8026718:	9607      	strlt	r6, [sp, #28]
 802671a:	1af2      	sublt	r2, r6, r3
 802671c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 802671e:	bfb6      	itet	lt
 8026720:	189b      	addlt	r3, r3, r2
 8026722:	1b9e      	subge	r6, r3, r6
 8026724:	930a      	strlt	r3, [sp, #40]	; 0x28
 8026726:	9b03      	ldr	r3, [sp, #12]
 8026728:	bfb8      	it	lt
 802672a:	2600      	movlt	r6, #0
 802672c:	2b00      	cmp	r3, #0
 802672e:	bfb7      	itett	lt
 8026730:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8026734:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8026738:	1a9d      	sublt	r5, r3, r2
 802673a:	2300      	movlt	r3, #0
 802673c:	e734      	b.n	80265a8 <_dtoa_r+0x720>
 802673e:	9e07      	ldr	r6, [sp, #28]
 8026740:	9d04      	ldr	r5, [sp, #16]
 8026742:	9f08      	ldr	r7, [sp, #32]
 8026744:	e73b      	b.n	80265be <_dtoa_r+0x736>
 8026746:	9a07      	ldr	r2, [sp, #28]
 8026748:	e767      	b.n	802661a <_dtoa_r+0x792>
 802674a:	9b06      	ldr	r3, [sp, #24]
 802674c:	2b01      	cmp	r3, #1
 802674e:	dc18      	bgt.n	8026782 <_dtoa_r+0x8fa>
 8026750:	f1ba 0f00 	cmp.w	sl, #0
 8026754:	d115      	bne.n	8026782 <_dtoa_r+0x8fa>
 8026756:	f3cb 0313 	ubfx	r3, fp, #0, #20
 802675a:	b993      	cbnz	r3, 8026782 <_dtoa_r+0x8fa>
 802675c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8026760:	0d1b      	lsrs	r3, r3, #20
 8026762:	051b      	lsls	r3, r3, #20
 8026764:	b183      	cbz	r3, 8026788 <_dtoa_r+0x900>
 8026766:	9b04      	ldr	r3, [sp, #16]
 8026768:	3301      	adds	r3, #1
 802676a:	9304      	str	r3, [sp, #16]
 802676c:	9b05      	ldr	r3, [sp, #20]
 802676e:	3301      	adds	r3, #1
 8026770:	9305      	str	r3, [sp, #20]
 8026772:	f04f 0801 	mov.w	r8, #1
 8026776:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026778:	2b00      	cmp	r3, #0
 802677a:	f47f af6a 	bne.w	8026652 <_dtoa_r+0x7ca>
 802677e:	2001      	movs	r0, #1
 8026780:	e76f      	b.n	8026662 <_dtoa_r+0x7da>
 8026782:	f04f 0800 	mov.w	r8, #0
 8026786:	e7f6      	b.n	8026776 <_dtoa_r+0x8ee>
 8026788:	4698      	mov	r8, r3
 802678a:	e7f4      	b.n	8026776 <_dtoa_r+0x8ee>
 802678c:	f43f af7d 	beq.w	802668a <_dtoa_r+0x802>
 8026790:	4618      	mov	r0, r3
 8026792:	301c      	adds	r0, #28
 8026794:	e772      	b.n	802667c <_dtoa_r+0x7f4>
 8026796:	9b03      	ldr	r3, [sp, #12]
 8026798:	2b00      	cmp	r3, #0
 802679a:	dc37      	bgt.n	802680c <_dtoa_r+0x984>
 802679c:	9b06      	ldr	r3, [sp, #24]
 802679e:	2b02      	cmp	r3, #2
 80267a0:	dd34      	ble.n	802680c <_dtoa_r+0x984>
 80267a2:	9b03      	ldr	r3, [sp, #12]
 80267a4:	9302      	str	r3, [sp, #8]
 80267a6:	9b02      	ldr	r3, [sp, #8]
 80267a8:	b96b      	cbnz	r3, 80267c6 <_dtoa_r+0x93e>
 80267aa:	4631      	mov	r1, r6
 80267ac:	2205      	movs	r2, #5
 80267ae:	4620      	mov	r0, r4
 80267b0:	f000 fc06 	bl	8026fc0 <__multadd>
 80267b4:	4601      	mov	r1, r0
 80267b6:	4606      	mov	r6, r0
 80267b8:	ee18 0a10 	vmov	r0, s16
 80267bc:	f000 fe20 	bl	8027400 <__mcmp>
 80267c0:	2800      	cmp	r0, #0
 80267c2:	f73f adbb 	bgt.w	802633c <_dtoa_r+0x4b4>
 80267c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80267c8:	9d01      	ldr	r5, [sp, #4]
 80267ca:	43db      	mvns	r3, r3
 80267cc:	9300      	str	r3, [sp, #0]
 80267ce:	f04f 0800 	mov.w	r8, #0
 80267d2:	4631      	mov	r1, r6
 80267d4:	4620      	mov	r0, r4
 80267d6:	f000 fbd1 	bl	8026f7c <_Bfree>
 80267da:	2f00      	cmp	r7, #0
 80267dc:	f43f aea4 	beq.w	8026528 <_dtoa_r+0x6a0>
 80267e0:	f1b8 0f00 	cmp.w	r8, #0
 80267e4:	d005      	beq.n	80267f2 <_dtoa_r+0x96a>
 80267e6:	45b8      	cmp	r8, r7
 80267e8:	d003      	beq.n	80267f2 <_dtoa_r+0x96a>
 80267ea:	4641      	mov	r1, r8
 80267ec:	4620      	mov	r0, r4
 80267ee:	f000 fbc5 	bl	8026f7c <_Bfree>
 80267f2:	4639      	mov	r1, r7
 80267f4:	4620      	mov	r0, r4
 80267f6:	f000 fbc1 	bl	8026f7c <_Bfree>
 80267fa:	e695      	b.n	8026528 <_dtoa_r+0x6a0>
 80267fc:	2600      	movs	r6, #0
 80267fe:	4637      	mov	r7, r6
 8026800:	e7e1      	b.n	80267c6 <_dtoa_r+0x93e>
 8026802:	9700      	str	r7, [sp, #0]
 8026804:	4637      	mov	r7, r6
 8026806:	e599      	b.n	802633c <_dtoa_r+0x4b4>
 8026808:	40240000 	.word	0x40240000
 802680c:	9b08      	ldr	r3, [sp, #32]
 802680e:	2b00      	cmp	r3, #0
 8026810:	f000 80ca 	beq.w	80269a8 <_dtoa_r+0xb20>
 8026814:	9b03      	ldr	r3, [sp, #12]
 8026816:	9302      	str	r3, [sp, #8]
 8026818:	2d00      	cmp	r5, #0
 802681a:	dd05      	ble.n	8026828 <_dtoa_r+0x9a0>
 802681c:	4639      	mov	r1, r7
 802681e:	462a      	mov	r2, r5
 8026820:	4620      	mov	r0, r4
 8026822:	f000 fd7d 	bl	8027320 <__lshift>
 8026826:	4607      	mov	r7, r0
 8026828:	f1b8 0f00 	cmp.w	r8, #0
 802682c:	d05b      	beq.n	80268e6 <_dtoa_r+0xa5e>
 802682e:	6879      	ldr	r1, [r7, #4]
 8026830:	4620      	mov	r0, r4
 8026832:	f000 fb63 	bl	8026efc <_Balloc>
 8026836:	4605      	mov	r5, r0
 8026838:	b928      	cbnz	r0, 8026846 <_dtoa_r+0x9be>
 802683a:	4b87      	ldr	r3, [pc, #540]	; (8026a58 <_dtoa_r+0xbd0>)
 802683c:	4602      	mov	r2, r0
 802683e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8026842:	f7ff bb3b 	b.w	8025ebc <_dtoa_r+0x34>
 8026846:	693a      	ldr	r2, [r7, #16]
 8026848:	3202      	adds	r2, #2
 802684a:	0092      	lsls	r2, r2, #2
 802684c:	f107 010c 	add.w	r1, r7, #12
 8026850:	300c      	adds	r0, #12
 8026852:	f000 fb45 	bl	8026ee0 <memcpy>
 8026856:	2201      	movs	r2, #1
 8026858:	4629      	mov	r1, r5
 802685a:	4620      	mov	r0, r4
 802685c:	f000 fd60 	bl	8027320 <__lshift>
 8026860:	9b01      	ldr	r3, [sp, #4]
 8026862:	f103 0901 	add.w	r9, r3, #1
 8026866:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 802686a:	4413      	add	r3, r2
 802686c:	9305      	str	r3, [sp, #20]
 802686e:	f00a 0301 	and.w	r3, sl, #1
 8026872:	46b8      	mov	r8, r7
 8026874:	9304      	str	r3, [sp, #16]
 8026876:	4607      	mov	r7, r0
 8026878:	4631      	mov	r1, r6
 802687a:	ee18 0a10 	vmov	r0, s16
 802687e:	f7ff fa77 	bl	8025d70 <quorem>
 8026882:	4641      	mov	r1, r8
 8026884:	9002      	str	r0, [sp, #8]
 8026886:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 802688a:	ee18 0a10 	vmov	r0, s16
 802688e:	f000 fdb7 	bl	8027400 <__mcmp>
 8026892:	463a      	mov	r2, r7
 8026894:	9003      	str	r0, [sp, #12]
 8026896:	4631      	mov	r1, r6
 8026898:	4620      	mov	r0, r4
 802689a:	f000 fdcd 	bl	8027438 <__mdiff>
 802689e:	68c2      	ldr	r2, [r0, #12]
 80268a0:	f109 3bff 	add.w	fp, r9, #4294967295
 80268a4:	4605      	mov	r5, r0
 80268a6:	bb02      	cbnz	r2, 80268ea <_dtoa_r+0xa62>
 80268a8:	4601      	mov	r1, r0
 80268aa:	ee18 0a10 	vmov	r0, s16
 80268ae:	f000 fda7 	bl	8027400 <__mcmp>
 80268b2:	4602      	mov	r2, r0
 80268b4:	4629      	mov	r1, r5
 80268b6:	4620      	mov	r0, r4
 80268b8:	9207      	str	r2, [sp, #28]
 80268ba:	f000 fb5f 	bl	8026f7c <_Bfree>
 80268be:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80268c2:	ea43 0102 	orr.w	r1, r3, r2
 80268c6:	9b04      	ldr	r3, [sp, #16]
 80268c8:	430b      	orrs	r3, r1
 80268ca:	464d      	mov	r5, r9
 80268cc:	d10f      	bne.n	80268ee <_dtoa_r+0xa66>
 80268ce:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80268d2:	d02a      	beq.n	802692a <_dtoa_r+0xaa2>
 80268d4:	9b03      	ldr	r3, [sp, #12]
 80268d6:	2b00      	cmp	r3, #0
 80268d8:	dd02      	ble.n	80268e0 <_dtoa_r+0xa58>
 80268da:	9b02      	ldr	r3, [sp, #8]
 80268dc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80268e0:	f88b a000 	strb.w	sl, [fp]
 80268e4:	e775      	b.n	80267d2 <_dtoa_r+0x94a>
 80268e6:	4638      	mov	r0, r7
 80268e8:	e7ba      	b.n	8026860 <_dtoa_r+0x9d8>
 80268ea:	2201      	movs	r2, #1
 80268ec:	e7e2      	b.n	80268b4 <_dtoa_r+0xa2c>
 80268ee:	9b03      	ldr	r3, [sp, #12]
 80268f0:	2b00      	cmp	r3, #0
 80268f2:	db04      	blt.n	80268fe <_dtoa_r+0xa76>
 80268f4:	9906      	ldr	r1, [sp, #24]
 80268f6:	430b      	orrs	r3, r1
 80268f8:	9904      	ldr	r1, [sp, #16]
 80268fa:	430b      	orrs	r3, r1
 80268fc:	d122      	bne.n	8026944 <_dtoa_r+0xabc>
 80268fe:	2a00      	cmp	r2, #0
 8026900:	ddee      	ble.n	80268e0 <_dtoa_r+0xa58>
 8026902:	ee18 1a10 	vmov	r1, s16
 8026906:	2201      	movs	r2, #1
 8026908:	4620      	mov	r0, r4
 802690a:	f000 fd09 	bl	8027320 <__lshift>
 802690e:	4631      	mov	r1, r6
 8026910:	ee08 0a10 	vmov	s16, r0
 8026914:	f000 fd74 	bl	8027400 <__mcmp>
 8026918:	2800      	cmp	r0, #0
 802691a:	dc03      	bgt.n	8026924 <_dtoa_r+0xa9c>
 802691c:	d1e0      	bne.n	80268e0 <_dtoa_r+0xa58>
 802691e:	f01a 0f01 	tst.w	sl, #1
 8026922:	d0dd      	beq.n	80268e0 <_dtoa_r+0xa58>
 8026924:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8026928:	d1d7      	bne.n	80268da <_dtoa_r+0xa52>
 802692a:	2339      	movs	r3, #57	; 0x39
 802692c:	f88b 3000 	strb.w	r3, [fp]
 8026930:	462b      	mov	r3, r5
 8026932:	461d      	mov	r5, r3
 8026934:	3b01      	subs	r3, #1
 8026936:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 802693a:	2a39      	cmp	r2, #57	; 0x39
 802693c:	d071      	beq.n	8026a22 <_dtoa_r+0xb9a>
 802693e:	3201      	adds	r2, #1
 8026940:	701a      	strb	r2, [r3, #0]
 8026942:	e746      	b.n	80267d2 <_dtoa_r+0x94a>
 8026944:	2a00      	cmp	r2, #0
 8026946:	dd07      	ble.n	8026958 <_dtoa_r+0xad0>
 8026948:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 802694c:	d0ed      	beq.n	802692a <_dtoa_r+0xaa2>
 802694e:	f10a 0301 	add.w	r3, sl, #1
 8026952:	f88b 3000 	strb.w	r3, [fp]
 8026956:	e73c      	b.n	80267d2 <_dtoa_r+0x94a>
 8026958:	9b05      	ldr	r3, [sp, #20]
 802695a:	f809 ac01 	strb.w	sl, [r9, #-1]
 802695e:	4599      	cmp	r9, r3
 8026960:	d047      	beq.n	80269f2 <_dtoa_r+0xb6a>
 8026962:	ee18 1a10 	vmov	r1, s16
 8026966:	2300      	movs	r3, #0
 8026968:	220a      	movs	r2, #10
 802696a:	4620      	mov	r0, r4
 802696c:	f000 fb28 	bl	8026fc0 <__multadd>
 8026970:	45b8      	cmp	r8, r7
 8026972:	ee08 0a10 	vmov	s16, r0
 8026976:	f04f 0300 	mov.w	r3, #0
 802697a:	f04f 020a 	mov.w	r2, #10
 802697e:	4641      	mov	r1, r8
 8026980:	4620      	mov	r0, r4
 8026982:	d106      	bne.n	8026992 <_dtoa_r+0xb0a>
 8026984:	f000 fb1c 	bl	8026fc0 <__multadd>
 8026988:	4680      	mov	r8, r0
 802698a:	4607      	mov	r7, r0
 802698c:	f109 0901 	add.w	r9, r9, #1
 8026990:	e772      	b.n	8026878 <_dtoa_r+0x9f0>
 8026992:	f000 fb15 	bl	8026fc0 <__multadd>
 8026996:	4639      	mov	r1, r7
 8026998:	4680      	mov	r8, r0
 802699a:	2300      	movs	r3, #0
 802699c:	220a      	movs	r2, #10
 802699e:	4620      	mov	r0, r4
 80269a0:	f000 fb0e 	bl	8026fc0 <__multadd>
 80269a4:	4607      	mov	r7, r0
 80269a6:	e7f1      	b.n	802698c <_dtoa_r+0xb04>
 80269a8:	9b03      	ldr	r3, [sp, #12]
 80269aa:	9302      	str	r3, [sp, #8]
 80269ac:	9d01      	ldr	r5, [sp, #4]
 80269ae:	ee18 0a10 	vmov	r0, s16
 80269b2:	4631      	mov	r1, r6
 80269b4:	f7ff f9dc 	bl	8025d70 <quorem>
 80269b8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80269bc:	9b01      	ldr	r3, [sp, #4]
 80269be:	f805 ab01 	strb.w	sl, [r5], #1
 80269c2:	1aea      	subs	r2, r5, r3
 80269c4:	9b02      	ldr	r3, [sp, #8]
 80269c6:	4293      	cmp	r3, r2
 80269c8:	dd09      	ble.n	80269de <_dtoa_r+0xb56>
 80269ca:	ee18 1a10 	vmov	r1, s16
 80269ce:	2300      	movs	r3, #0
 80269d0:	220a      	movs	r2, #10
 80269d2:	4620      	mov	r0, r4
 80269d4:	f000 faf4 	bl	8026fc0 <__multadd>
 80269d8:	ee08 0a10 	vmov	s16, r0
 80269dc:	e7e7      	b.n	80269ae <_dtoa_r+0xb26>
 80269de:	9b02      	ldr	r3, [sp, #8]
 80269e0:	2b00      	cmp	r3, #0
 80269e2:	bfc8      	it	gt
 80269e4:	461d      	movgt	r5, r3
 80269e6:	9b01      	ldr	r3, [sp, #4]
 80269e8:	bfd8      	it	le
 80269ea:	2501      	movle	r5, #1
 80269ec:	441d      	add	r5, r3
 80269ee:	f04f 0800 	mov.w	r8, #0
 80269f2:	ee18 1a10 	vmov	r1, s16
 80269f6:	2201      	movs	r2, #1
 80269f8:	4620      	mov	r0, r4
 80269fa:	f000 fc91 	bl	8027320 <__lshift>
 80269fe:	4631      	mov	r1, r6
 8026a00:	ee08 0a10 	vmov	s16, r0
 8026a04:	f000 fcfc 	bl	8027400 <__mcmp>
 8026a08:	2800      	cmp	r0, #0
 8026a0a:	dc91      	bgt.n	8026930 <_dtoa_r+0xaa8>
 8026a0c:	d102      	bne.n	8026a14 <_dtoa_r+0xb8c>
 8026a0e:	f01a 0f01 	tst.w	sl, #1
 8026a12:	d18d      	bne.n	8026930 <_dtoa_r+0xaa8>
 8026a14:	462b      	mov	r3, r5
 8026a16:	461d      	mov	r5, r3
 8026a18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8026a1c:	2a30      	cmp	r2, #48	; 0x30
 8026a1e:	d0fa      	beq.n	8026a16 <_dtoa_r+0xb8e>
 8026a20:	e6d7      	b.n	80267d2 <_dtoa_r+0x94a>
 8026a22:	9a01      	ldr	r2, [sp, #4]
 8026a24:	429a      	cmp	r2, r3
 8026a26:	d184      	bne.n	8026932 <_dtoa_r+0xaaa>
 8026a28:	9b00      	ldr	r3, [sp, #0]
 8026a2a:	3301      	adds	r3, #1
 8026a2c:	9300      	str	r3, [sp, #0]
 8026a2e:	2331      	movs	r3, #49	; 0x31
 8026a30:	7013      	strb	r3, [r2, #0]
 8026a32:	e6ce      	b.n	80267d2 <_dtoa_r+0x94a>
 8026a34:	4b09      	ldr	r3, [pc, #36]	; (8026a5c <_dtoa_r+0xbd4>)
 8026a36:	f7ff ba95 	b.w	8025f64 <_dtoa_r+0xdc>
 8026a3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8026a3c:	2b00      	cmp	r3, #0
 8026a3e:	f47f aa6e 	bne.w	8025f1e <_dtoa_r+0x96>
 8026a42:	4b07      	ldr	r3, [pc, #28]	; (8026a60 <_dtoa_r+0xbd8>)
 8026a44:	f7ff ba8e 	b.w	8025f64 <_dtoa_r+0xdc>
 8026a48:	9b02      	ldr	r3, [sp, #8]
 8026a4a:	2b00      	cmp	r3, #0
 8026a4c:	dcae      	bgt.n	80269ac <_dtoa_r+0xb24>
 8026a4e:	9b06      	ldr	r3, [sp, #24]
 8026a50:	2b02      	cmp	r3, #2
 8026a52:	f73f aea8 	bgt.w	80267a6 <_dtoa_r+0x91e>
 8026a56:	e7a9      	b.n	80269ac <_dtoa_r+0xb24>
 8026a58:	080285dd 	.word	0x080285dd
 8026a5c:	080283a0 	.word	0x080283a0
 8026a60:	08028575 	.word	0x08028575

08026a64 <__sflush_r>:
 8026a64:	898a      	ldrh	r2, [r1, #12]
 8026a66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026a6a:	4605      	mov	r5, r0
 8026a6c:	0710      	lsls	r0, r2, #28
 8026a6e:	460c      	mov	r4, r1
 8026a70:	d458      	bmi.n	8026b24 <__sflush_r+0xc0>
 8026a72:	684b      	ldr	r3, [r1, #4]
 8026a74:	2b00      	cmp	r3, #0
 8026a76:	dc05      	bgt.n	8026a84 <__sflush_r+0x20>
 8026a78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8026a7a:	2b00      	cmp	r3, #0
 8026a7c:	dc02      	bgt.n	8026a84 <__sflush_r+0x20>
 8026a7e:	2000      	movs	r0, #0
 8026a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026a84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8026a86:	2e00      	cmp	r6, #0
 8026a88:	d0f9      	beq.n	8026a7e <__sflush_r+0x1a>
 8026a8a:	2300      	movs	r3, #0
 8026a8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8026a90:	682f      	ldr	r7, [r5, #0]
 8026a92:	602b      	str	r3, [r5, #0]
 8026a94:	d032      	beq.n	8026afc <__sflush_r+0x98>
 8026a96:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8026a98:	89a3      	ldrh	r3, [r4, #12]
 8026a9a:	075a      	lsls	r2, r3, #29
 8026a9c:	d505      	bpl.n	8026aaa <__sflush_r+0x46>
 8026a9e:	6863      	ldr	r3, [r4, #4]
 8026aa0:	1ac0      	subs	r0, r0, r3
 8026aa2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8026aa4:	b10b      	cbz	r3, 8026aaa <__sflush_r+0x46>
 8026aa6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8026aa8:	1ac0      	subs	r0, r0, r3
 8026aaa:	2300      	movs	r3, #0
 8026aac:	4602      	mov	r2, r0
 8026aae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8026ab0:	6a21      	ldr	r1, [r4, #32]
 8026ab2:	4628      	mov	r0, r5
 8026ab4:	47b0      	blx	r6
 8026ab6:	1c43      	adds	r3, r0, #1
 8026ab8:	89a3      	ldrh	r3, [r4, #12]
 8026aba:	d106      	bne.n	8026aca <__sflush_r+0x66>
 8026abc:	6829      	ldr	r1, [r5, #0]
 8026abe:	291d      	cmp	r1, #29
 8026ac0:	d82c      	bhi.n	8026b1c <__sflush_r+0xb8>
 8026ac2:	4a2a      	ldr	r2, [pc, #168]	; (8026b6c <__sflush_r+0x108>)
 8026ac4:	40ca      	lsrs	r2, r1
 8026ac6:	07d6      	lsls	r6, r2, #31
 8026ac8:	d528      	bpl.n	8026b1c <__sflush_r+0xb8>
 8026aca:	2200      	movs	r2, #0
 8026acc:	6062      	str	r2, [r4, #4]
 8026ace:	04d9      	lsls	r1, r3, #19
 8026ad0:	6922      	ldr	r2, [r4, #16]
 8026ad2:	6022      	str	r2, [r4, #0]
 8026ad4:	d504      	bpl.n	8026ae0 <__sflush_r+0x7c>
 8026ad6:	1c42      	adds	r2, r0, #1
 8026ad8:	d101      	bne.n	8026ade <__sflush_r+0x7a>
 8026ada:	682b      	ldr	r3, [r5, #0]
 8026adc:	b903      	cbnz	r3, 8026ae0 <__sflush_r+0x7c>
 8026ade:	6560      	str	r0, [r4, #84]	; 0x54
 8026ae0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8026ae2:	602f      	str	r7, [r5, #0]
 8026ae4:	2900      	cmp	r1, #0
 8026ae6:	d0ca      	beq.n	8026a7e <__sflush_r+0x1a>
 8026ae8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8026aec:	4299      	cmp	r1, r3
 8026aee:	d002      	beq.n	8026af6 <__sflush_r+0x92>
 8026af0:	4628      	mov	r0, r5
 8026af2:	f000 fd9d 	bl	8027630 <_free_r>
 8026af6:	2000      	movs	r0, #0
 8026af8:	6360      	str	r0, [r4, #52]	; 0x34
 8026afa:	e7c1      	b.n	8026a80 <__sflush_r+0x1c>
 8026afc:	6a21      	ldr	r1, [r4, #32]
 8026afe:	2301      	movs	r3, #1
 8026b00:	4628      	mov	r0, r5
 8026b02:	47b0      	blx	r6
 8026b04:	1c41      	adds	r1, r0, #1
 8026b06:	d1c7      	bne.n	8026a98 <__sflush_r+0x34>
 8026b08:	682b      	ldr	r3, [r5, #0]
 8026b0a:	2b00      	cmp	r3, #0
 8026b0c:	d0c4      	beq.n	8026a98 <__sflush_r+0x34>
 8026b0e:	2b1d      	cmp	r3, #29
 8026b10:	d001      	beq.n	8026b16 <__sflush_r+0xb2>
 8026b12:	2b16      	cmp	r3, #22
 8026b14:	d101      	bne.n	8026b1a <__sflush_r+0xb6>
 8026b16:	602f      	str	r7, [r5, #0]
 8026b18:	e7b1      	b.n	8026a7e <__sflush_r+0x1a>
 8026b1a:	89a3      	ldrh	r3, [r4, #12]
 8026b1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026b20:	81a3      	strh	r3, [r4, #12]
 8026b22:	e7ad      	b.n	8026a80 <__sflush_r+0x1c>
 8026b24:	690f      	ldr	r7, [r1, #16]
 8026b26:	2f00      	cmp	r7, #0
 8026b28:	d0a9      	beq.n	8026a7e <__sflush_r+0x1a>
 8026b2a:	0793      	lsls	r3, r2, #30
 8026b2c:	680e      	ldr	r6, [r1, #0]
 8026b2e:	bf08      	it	eq
 8026b30:	694b      	ldreq	r3, [r1, #20]
 8026b32:	600f      	str	r7, [r1, #0]
 8026b34:	bf18      	it	ne
 8026b36:	2300      	movne	r3, #0
 8026b38:	eba6 0807 	sub.w	r8, r6, r7
 8026b3c:	608b      	str	r3, [r1, #8]
 8026b3e:	f1b8 0f00 	cmp.w	r8, #0
 8026b42:	dd9c      	ble.n	8026a7e <__sflush_r+0x1a>
 8026b44:	6a21      	ldr	r1, [r4, #32]
 8026b46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8026b48:	4643      	mov	r3, r8
 8026b4a:	463a      	mov	r2, r7
 8026b4c:	4628      	mov	r0, r5
 8026b4e:	47b0      	blx	r6
 8026b50:	2800      	cmp	r0, #0
 8026b52:	dc06      	bgt.n	8026b62 <__sflush_r+0xfe>
 8026b54:	89a3      	ldrh	r3, [r4, #12]
 8026b56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026b5a:	81a3      	strh	r3, [r4, #12]
 8026b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8026b60:	e78e      	b.n	8026a80 <__sflush_r+0x1c>
 8026b62:	4407      	add	r7, r0
 8026b64:	eba8 0800 	sub.w	r8, r8, r0
 8026b68:	e7e9      	b.n	8026b3e <__sflush_r+0xda>
 8026b6a:	bf00      	nop
 8026b6c:	20400001 	.word	0x20400001

08026b70 <_fflush_r>:
 8026b70:	b538      	push	{r3, r4, r5, lr}
 8026b72:	690b      	ldr	r3, [r1, #16]
 8026b74:	4605      	mov	r5, r0
 8026b76:	460c      	mov	r4, r1
 8026b78:	b913      	cbnz	r3, 8026b80 <_fflush_r+0x10>
 8026b7a:	2500      	movs	r5, #0
 8026b7c:	4628      	mov	r0, r5
 8026b7e:	bd38      	pop	{r3, r4, r5, pc}
 8026b80:	b118      	cbz	r0, 8026b8a <_fflush_r+0x1a>
 8026b82:	6983      	ldr	r3, [r0, #24]
 8026b84:	b90b      	cbnz	r3, 8026b8a <_fflush_r+0x1a>
 8026b86:	f000 f887 	bl	8026c98 <__sinit>
 8026b8a:	4b14      	ldr	r3, [pc, #80]	; (8026bdc <_fflush_r+0x6c>)
 8026b8c:	429c      	cmp	r4, r3
 8026b8e:	d11b      	bne.n	8026bc8 <_fflush_r+0x58>
 8026b90:	686c      	ldr	r4, [r5, #4]
 8026b92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026b96:	2b00      	cmp	r3, #0
 8026b98:	d0ef      	beq.n	8026b7a <_fflush_r+0xa>
 8026b9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8026b9c:	07d0      	lsls	r0, r2, #31
 8026b9e:	d404      	bmi.n	8026baa <_fflush_r+0x3a>
 8026ba0:	0599      	lsls	r1, r3, #22
 8026ba2:	d402      	bmi.n	8026baa <_fflush_r+0x3a>
 8026ba4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8026ba6:	f000 f92c 	bl	8026e02 <__retarget_lock_acquire_recursive>
 8026baa:	4628      	mov	r0, r5
 8026bac:	4621      	mov	r1, r4
 8026bae:	f7ff ff59 	bl	8026a64 <__sflush_r>
 8026bb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8026bb4:	07da      	lsls	r2, r3, #31
 8026bb6:	4605      	mov	r5, r0
 8026bb8:	d4e0      	bmi.n	8026b7c <_fflush_r+0xc>
 8026bba:	89a3      	ldrh	r3, [r4, #12]
 8026bbc:	059b      	lsls	r3, r3, #22
 8026bbe:	d4dd      	bmi.n	8026b7c <_fflush_r+0xc>
 8026bc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8026bc2:	f000 f91f 	bl	8026e04 <__retarget_lock_release_recursive>
 8026bc6:	e7d9      	b.n	8026b7c <_fflush_r+0xc>
 8026bc8:	4b05      	ldr	r3, [pc, #20]	; (8026be0 <_fflush_r+0x70>)
 8026bca:	429c      	cmp	r4, r3
 8026bcc:	d101      	bne.n	8026bd2 <_fflush_r+0x62>
 8026bce:	68ac      	ldr	r4, [r5, #8]
 8026bd0:	e7df      	b.n	8026b92 <_fflush_r+0x22>
 8026bd2:	4b04      	ldr	r3, [pc, #16]	; (8026be4 <_fflush_r+0x74>)
 8026bd4:	429c      	cmp	r4, r3
 8026bd6:	bf08      	it	eq
 8026bd8:	68ec      	ldreq	r4, [r5, #12]
 8026bda:	e7da      	b.n	8026b92 <_fflush_r+0x22>
 8026bdc:	08028610 	.word	0x08028610
 8026be0:	08028630 	.word	0x08028630
 8026be4:	080285f0 	.word	0x080285f0

08026be8 <std>:
 8026be8:	2300      	movs	r3, #0
 8026bea:	b510      	push	{r4, lr}
 8026bec:	4604      	mov	r4, r0
 8026bee:	e9c0 3300 	strd	r3, r3, [r0]
 8026bf2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8026bf6:	6083      	str	r3, [r0, #8]
 8026bf8:	8181      	strh	r1, [r0, #12]
 8026bfa:	6643      	str	r3, [r0, #100]	; 0x64
 8026bfc:	81c2      	strh	r2, [r0, #14]
 8026bfe:	6183      	str	r3, [r0, #24]
 8026c00:	4619      	mov	r1, r3
 8026c02:	2208      	movs	r2, #8
 8026c04:	305c      	adds	r0, #92	; 0x5c
 8026c06:	f7fe f909 	bl	8024e1c <memset>
 8026c0a:	4b05      	ldr	r3, [pc, #20]	; (8026c20 <std+0x38>)
 8026c0c:	6263      	str	r3, [r4, #36]	; 0x24
 8026c0e:	4b05      	ldr	r3, [pc, #20]	; (8026c24 <std+0x3c>)
 8026c10:	62a3      	str	r3, [r4, #40]	; 0x28
 8026c12:	4b05      	ldr	r3, [pc, #20]	; (8026c28 <std+0x40>)
 8026c14:	62e3      	str	r3, [r4, #44]	; 0x2c
 8026c16:	4b05      	ldr	r3, [pc, #20]	; (8026c2c <std+0x44>)
 8026c18:	6224      	str	r4, [r4, #32]
 8026c1a:	6323      	str	r3, [r4, #48]	; 0x30
 8026c1c:	bd10      	pop	{r4, pc}
 8026c1e:	bf00      	nop
 8026c20:	08027b55 	.word	0x08027b55
 8026c24:	08027b77 	.word	0x08027b77
 8026c28:	08027baf 	.word	0x08027baf
 8026c2c:	08027bd3 	.word	0x08027bd3

08026c30 <_cleanup_r>:
 8026c30:	4901      	ldr	r1, [pc, #4]	; (8026c38 <_cleanup_r+0x8>)
 8026c32:	f000 b8c1 	b.w	8026db8 <_fwalk_reent>
 8026c36:	bf00      	nop
 8026c38:	08026b71 	.word	0x08026b71

08026c3c <__sfmoreglue>:
 8026c3c:	b570      	push	{r4, r5, r6, lr}
 8026c3e:	2268      	movs	r2, #104	; 0x68
 8026c40:	1e4d      	subs	r5, r1, #1
 8026c42:	4355      	muls	r5, r2
 8026c44:	460e      	mov	r6, r1
 8026c46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8026c4a:	f000 fd5d 	bl	8027708 <_malloc_r>
 8026c4e:	4604      	mov	r4, r0
 8026c50:	b140      	cbz	r0, 8026c64 <__sfmoreglue+0x28>
 8026c52:	2100      	movs	r1, #0
 8026c54:	e9c0 1600 	strd	r1, r6, [r0]
 8026c58:	300c      	adds	r0, #12
 8026c5a:	60a0      	str	r0, [r4, #8]
 8026c5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8026c60:	f7fe f8dc 	bl	8024e1c <memset>
 8026c64:	4620      	mov	r0, r4
 8026c66:	bd70      	pop	{r4, r5, r6, pc}

08026c68 <__sfp_lock_acquire>:
 8026c68:	4801      	ldr	r0, [pc, #4]	; (8026c70 <__sfp_lock_acquire+0x8>)
 8026c6a:	f000 b8ca 	b.w	8026e02 <__retarget_lock_acquire_recursive>
 8026c6e:	bf00      	nop
 8026c70:	20000345 	.word	0x20000345

08026c74 <__sfp_lock_release>:
 8026c74:	4801      	ldr	r0, [pc, #4]	; (8026c7c <__sfp_lock_release+0x8>)
 8026c76:	f000 b8c5 	b.w	8026e04 <__retarget_lock_release_recursive>
 8026c7a:	bf00      	nop
 8026c7c:	20000345 	.word	0x20000345

08026c80 <__sinit_lock_acquire>:
 8026c80:	4801      	ldr	r0, [pc, #4]	; (8026c88 <__sinit_lock_acquire+0x8>)
 8026c82:	f000 b8be 	b.w	8026e02 <__retarget_lock_acquire_recursive>
 8026c86:	bf00      	nop
 8026c88:	20000346 	.word	0x20000346

08026c8c <__sinit_lock_release>:
 8026c8c:	4801      	ldr	r0, [pc, #4]	; (8026c94 <__sinit_lock_release+0x8>)
 8026c8e:	f000 b8b9 	b.w	8026e04 <__retarget_lock_release_recursive>
 8026c92:	bf00      	nop
 8026c94:	20000346 	.word	0x20000346

08026c98 <__sinit>:
 8026c98:	b510      	push	{r4, lr}
 8026c9a:	4604      	mov	r4, r0
 8026c9c:	f7ff fff0 	bl	8026c80 <__sinit_lock_acquire>
 8026ca0:	69a3      	ldr	r3, [r4, #24]
 8026ca2:	b11b      	cbz	r3, 8026cac <__sinit+0x14>
 8026ca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026ca8:	f7ff bff0 	b.w	8026c8c <__sinit_lock_release>
 8026cac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8026cb0:	6523      	str	r3, [r4, #80]	; 0x50
 8026cb2:	4b13      	ldr	r3, [pc, #76]	; (8026d00 <__sinit+0x68>)
 8026cb4:	4a13      	ldr	r2, [pc, #76]	; (8026d04 <__sinit+0x6c>)
 8026cb6:	681b      	ldr	r3, [r3, #0]
 8026cb8:	62a2      	str	r2, [r4, #40]	; 0x28
 8026cba:	42a3      	cmp	r3, r4
 8026cbc:	bf04      	itt	eq
 8026cbe:	2301      	moveq	r3, #1
 8026cc0:	61a3      	streq	r3, [r4, #24]
 8026cc2:	4620      	mov	r0, r4
 8026cc4:	f000 f820 	bl	8026d08 <__sfp>
 8026cc8:	6060      	str	r0, [r4, #4]
 8026cca:	4620      	mov	r0, r4
 8026ccc:	f000 f81c 	bl	8026d08 <__sfp>
 8026cd0:	60a0      	str	r0, [r4, #8]
 8026cd2:	4620      	mov	r0, r4
 8026cd4:	f000 f818 	bl	8026d08 <__sfp>
 8026cd8:	2200      	movs	r2, #0
 8026cda:	60e0      	str	r0, [r4, #12]
 8026cdc:	2104      	movs	r1, #4
 8026cde:	6860      	ldr	r0, [r4, #4]
 8026ce0:	f7ff ff82 	bl	8026be8 <std>
 8026ce4:	68a0      	ldr	r0, [r4, #8]
 8026ce6:	2201      	movs	r2, #1
 8026ce8:	2109      	movs	r1, #9
 8026cea:	f7ff ff7d 	bl	8026be8 <std>
 8026cee:	68e0      	ldr	r0, [r4, #12]
 8026cf0:	2202      	movs	r2, #2
 8026cf2:	2112      	movs	r1, #18
 8026cf4:	f7ff ff78 	bl	8026be8 <std>
 8026cf8:	2301      	movs	r3, #1
 8026cfa:	61a3      	str	r3, [r4, #24]
 8026cfc:	e7d2      	b.n	8026ca4 <__sinit+0xc>
 8026cfe:	bf00      	nop
 8026d00:	0802838c 	.word	0x0802838c
 8026d04:	08026c31 	.word	0x08026c31

08026d08 <__sfp>:
 8026d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026d0a:	4607      	mov	r7, r0
 8026d0c:	f7ff ffac 	bl	8026c68 <__sfp_lock_acquire>
 8026d10:	4b1e      	ldr	r3, [pc, #120]	; (8026d8c <__sfp+0x84>)
 8026d12:	681e      	ldr	r6, [r3, #0]
 8026d14:	69b3      	ldr	r3, [r6, #24]
 8026d16:	b913      	cbnz	r3, 8026d1e <__sfp+0x16>
 8026d18:	4630      	mov	r0, r6
 8026d1a:	f7ff ffbd 	bl	8026c98 <__sinit>
 8026d1e:	3648      	adds	r6, #72	; 0x48
 8026d20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8026d24:	3b01      	subs	r3, #1
 8026d26:	d503      	bpl.n	8026d30 <__sfp+0x28>
 8026d28:	6833      	ldr	r3, [r6, #0]
 8026d2a:	b30b      	cbz	r3, 8026d70 <__sfp+0x68>
 8026d2c:	6836      	ldr	r6, [r6, #0]
 8026d2e:	e7f7      	b.n	8026d20 <__sfp+0x18>
 8026d30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8026d34:	b9d5      	cbnz	r5, 8026d6c <__sfp+0x64>
 8026d36:	4b16      	ldr	r3, [pc, #88]	; (8026d90 <__sfp+0x88>)
 8026d38:	60e3      	str	r3, [r4, #12]
 8026d3a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8026d3e:	6665      	str	r5, [r4, #100]	; 0x64
 8026d40:	f000 f85e 	bl	8026e00 <__retarget_lock_init_recursive>
 8026d44:	f7ff ff96 	bl	8026c74 <__sfp_lock_release>
 8026d48:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8026d4c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8026d50:	6025      	str	r5, [r4, #0]
 8026d52:	61a5      	str	r5, [r4, #24]
 8026d54:	2208      	movs	r2, #8
 8026d56:	4629      	mov	r1, r5
 8026d58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8026d5c:	f7fe f85e 	bl	8024e1c <memset>
 8026d60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8026d64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8026d68:	4620      	mov	r0, r4
 8026d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026d6c:	3468      	adds	r4, #104	; 0x68
 8026d6e:	e7d9      	b.n	8026d24 <__sfp+0x1c>
 8026d70:	2104      	movs	r1, #4
 8026d72:	4638      	mov	r0, r7
 8026d74:	f7ff ff62 	bl	8026c3c <__sfmoreglue>
 8026d78:	4604      	mov	r4, r0
 8026d7a:	6030      	str	r0, [r6, #0]
 8026d7c:	2800      	cmp	r0, #0
 8026d7e:	d1d5      	bne.n	8026d2c <__sfp+0x24>
 8026d80:	f7ff ff78 	bl	8026c74 <__sfp_lock_release>
 8026d84:	230c      	movs	r3, #12
 8026d86:	603b      	str	r3, [r7, #0]
 8026d88:	e7ee      	b.n	8026d68 <__sfp+0x60>
 8026d8a:	bf00      	nop
 8026d8c:	0802838c 	.word	0x0802838c
 8026d90:	ffff0001 	.word	0xffff0001

08026d94 <fiprintf>:
 8026d94:	b40e      	push	{r1, r2, r3}
 8026d96:	b503      	push	{r0, r1, lr}
 8026d98:	4601      	mov	r1, r0
 8026d9a:	ab03      	add	r3, sp, #12
 8026d9c:	4805      	ldr	r0, [pc, #20]	; (8026db4 <fiprintf+0x20>)
 8026d9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8026da2:	6800      	ldr	r0, [r0, #0]
 8026da4:	9301      	str	r3, [sp, #4]
 8026da6:	f000 fd4d 	bl	8027844 <_vfiprintf_r>
 8026daa:	b002      	add	sp, #8
 8026dac:	f85d eb04 	ldr.w	lr, [sp], #4
 8026db0:	b003      	add	sp, #12
 8026db2:	4770      	bx	lr
 8026db4:	20000010 	.word	0x20000010

08026db8 <_fwalk_reent>:
 8026db8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026dbc:	4606      	mov	r6, r0
 8026dbe:	4688      	mov	r8, r1
 8026dc0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8026dc4:	2700      	movs	r7, #0
 8026dc6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8026dca:	f1b9 0901 	subs.w	r9, r9, #1
 8026dce:	d505      	bpl.n	8026ddc <_fwalk_reent+0x24>
 8026dd0:	6824      	ldr	r4, [r4, #0]
 8026dd2:	2c00      	cmp	r4, #0
 8026dd4:	d1f7      	bne.n	8026dc6 <_fwalk_reent+0xe>
 8026dd6:	4638      	mov	r0, r7
 8026dd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026ddc:	89ab      	ldrh	r3, [r5, #12]
 8026dde:	2b01      	cmp	r3, #1
 8026de0:	d907      	bls.n	8026df2 <_fwalk_reent+0x3a>
 8026de2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8026de6:	3301      	adds	r3, #1
 8026de8:	d003      	beq.n	8026df2 <_fwalk_reent+0x3a>
 8026dea:	4629      	mov	r1, r5
 8026dec:	4630      	mov	r0, r6
 8026dee:	47c0      	blx	r8
 8026df0:	4307      	orrs	r7, r0
 8026df2:	3568      	adds	r5, #104	; 0x68
 8026df4:	e7e9      	b.n	8026dca <_fwalk_reent+0x12>
	...

08026df8 <_localeconv_r>:
 8026df8:	4800      	ldr	r0, [pc, #0]	; (8026dfc <_localeconv_r+0x4>)
 8026dfa:	4770      	bx	lr
 8026dfc:	20000164 	.word	0x20000164

08026e00 <__retarget_lock_init_recursive>:
 8026e00:	4770      	bx	lr

08026e02 <__retarget_lock_acquire_recursive>:
 8026e02:	4770      	bx	lr

08026e04 <__retarget_lock_release_recursive>:
 8026e04:	4770      	bx	lr

08026e06 <__swhatbuf_r>:
 8026e06:	b570      	push	{r4, r5, r6, lr}
 8026e08:	460e      	mov	r6, r1
 8026e0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026e0e:	2900      	cmp	r1, #0
 8026e10:	b096      	sub	sp, #88	; 0x58
 8026e12:	4614      	mov	r4, r2
 8026e14:	461d      	mov	r5, r3
 8026e16:	da08      	bge.n	8026e2a <__swhatbuf_r+0x24>
 8026e18:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8026e1c:	2200      	movs	r2, #0
 8026e1e:	602a      	str	r2, [r5, #0]
 8026e20:	061a      	lsls	r2, r3, #24
 8026e22:	d410      	bmi.n	8026e46 <__swhatbuf_r+0x40>
 8026e24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8026e28:	e00e      	b.n	8026e48 <__swhatbuf_r+0x42>
 8026e2a:	466a      	mov	r2, sp
 8026e2c:	f000 ff00 	bl	8027c30 <_fstat_r>
 8026e30:	2800      	cmp	r0, #0
 8026e32:	dbf1      	blt.n	8026e18 <__swhatbuf_r+0x12>
 8026e34:	9a01      	ldr	r2, [sp, #4]
 8026e36:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8026e3a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8026e3e:	425a      	negs	r2, r3
 8026e40:	415a      	adcs	r2, r3
 8026e42:	602a      	str	r2, [r5, #0]
 8026e44:	e7ee      	b.n	8026e24 <__swhatbuf_r+0x1e>
 8026e46:	2340      	movs	r3, #64	; 0x40
 8026e48:	2000      	movs	r0, #0
 8026e4a:	6023      	str	r3, [r4, #0]
 8026e4c:	b016      	add	sp, #88	; 0x58
 8026e4e:	bd70      	pop	{r4, r5, r6, pc}

08026e50 <__smakebuf_r>:
 8026e50:	898b      	ldrh	r3, [r1, #12]
 8026e52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8026e54:	079d      	lsls	r5, r3, #30
 8026e56:	4606      	mov	r6, r0
 8026e58:	460c      	mov	r4, r1
 8026e5a:	d507      	bpl.n	8026e6c <__smakebuf_r+0x1c>
 8026e5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8026e60:	6023      	str	r3, [r4, #0]
 8026e62:	6123      	str	r3, [r4, #16]
 8026e64:	2301      	movs	r3, #1
 8026e66:	6163      	str	r3, [r4, #20]
 8026e68:	b002      	add	sp, #8
 8026e6a:	bd70      	pop	{r4, r5, r6, pc}
 8026e6c:	ab01      	add	r3, sp, #4
 8026e6e:	466a      	mov	r2, sp
 8026e70:	f7ff ffc9 	bl	8026e06 <__swhatbuf_r>
 8026e74:	9900      	ldr	r1, [sp, #0]
 8026e76:	4605      	mov	r5, r0
 8026e78:	4630      	mov	r0, r6
 8026e7a:	f000 fc45 	bl	8027708 <_malloc_r>
 8026e7e:	b948      	cbnz	r0, 8026e94 <__smakebuf_r+0x44>
 8026e80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026e84:	059a      	lsls	r2, r3, #22
 8026e86:	d4ef      	bmi.n	8026e68 <__smakebuf_r+0x18>
 8026e88:	f023 0303 	bic.w	r3, r3, #3
 8026e8c:	f043 0302 	orr.w	r3, r3, #2
 8026e90:	81a3      	strh	r3, [r4, #12]
 8026e92:	e7e3      	b.n	8026e5c <__smakebuf_r+0xc>
 8026e94:	4b0d      	ldr	r3, [pc, #52]	; (8026ecc <__smakebuf_r+0x7c>)
 8026e96:	62b3      	str	r3, [r6, #40]	; 0x28
 8026e98:	89a3      	ldrh	r3, [r4, #12]
 8026e9a:	6020      	str	r0, [r4, #0]
 8026e9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8026ea0:	81a3      	strh	r3, [r4, #12]
 8026ea2:	9b00      	ldr	r3, [sp, #0]
 8026ea4:	6163      	str	r3, [r4, #20]
 8026ea6:	9b01      	ldr	r3, [sp, #4]
 8026ea8:	6120      	str	r0, [r4, #16]
 8026eaa:	b15b      	cbz	r3, 8026ec4 <__smakebuf_r+0x74>
 8026eac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8026eb0:	4630      	mov	r0, r6
 8026eb2:	f000 fecf 	bl	8027c54 <_isatty_r>
 8026eb6:	b128      	cbz	r0, 8026ec4 <__smakebuf_r+0x74>
 8026eb8:	89a3      	ldrh	r3, [r4, #12]
 8026eba:	f023 0303 	bic.w	r3, r3, #3
 8026ebe:	f043 0301 	orr.w	r3, r3, #1
 8026ec2:	81a3      	strh	r3, [r4, #12]
 8026ec4:	89a0      	ldrh	r0, [r4, #12]
 8026ec6:	4305      	orrs	r5, r0
 8026ec8:	81a5      	strh	r5, [r4, #12]
 8026eca:	e7cd      	b.n	8026e68 <__smakebuf_r+0x18>
 8026ecc:	08026c31 	.word	0x08026c31

08026ed0 <malloc>:
 8026ed0:	4b02      	ldr	r3, [pc, #8]	; (8026edc <malloc+0xc>)
 8026ed2:	4601      	mov	r1, r0
 8026ed4:	6818      	ldr	r0, [r3, #0]
 8026ed6:	f000 bc17 	b.w	8027708 <_malloc_r>
 8026eda:	bf00      	nop
 8026edc:	20000010 	.word	0x20000010

08026ee0 <memcpy>:
 8026ee0:	440a      	add	r2, r1
 8026ee2:	4291      	cmp	r1, r2
 8026ee4:	f100 33ff 	add.w	r3, r0, #4294967295
 8026ee8:	d100      	bne.n	8026eec <memcpy+0xc>
 8026eea:	4770      	bx	lr
 8026eec:	b510      	push	{r4, lr}
 8026eee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8026ef2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8026ef6:	4291      	cmp	r1, r2
 8026ef8:	d1f9      	bne.n	8026eee <memcpy+0xe>
 8026efa:	bd10      	pop	{r4, pc}

08026efc <_Balloc>:
 8026efc:	b570      	push	{r4, r5, r6, lr}
 8026efe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8026f00:	4604      	mov	r4, r0
 8026f02:	460d      	mov	r5, r1
 8026f04:	b976      	cbnz	r6, 8026f24 <_Balloc+0x28>
 8026f06:	2010      	movs	r0, #16
 8026f08:	f7ff ffe2 	bl	8026ed0 <malloc>
 8026f0c:	4602      	mov	r2, r0
 8026f0e:	6260      	str	r0, [r4, #36]	; 0x24
 8026f10:	b920      	cbnz	r0, 8026f1c <_Balloc+0x20>
 8026f12:	4b18      	ldr	r3, [pc, #96]	; (8026f74 <_Balloc+0x78>)
 8026f14:	4818      	ldr	r0, [pc, #96]	; (8026f78 <_Balloc+0x7c>)
 8026f16:	2166      	movs	r1, #102	; 0x66
 8026f18:	f7fe ff0c 	bl	8025d34 <__assert_func>
 8026f1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8026f20:	6006      	str	r6, [r0, #0]
 8026f22:	60c6      	str	r6, [r0, #12]
 8026f24:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8026f26:	68f3      	ldr	r3, [r6, #12]
 8026f28:	b183      	cbz	r3, 8026f4c <_Balloc+0x50>
 8026f2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8026f2c:	68db      	ldr	r3, [r3, #12]
 8026f2e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8026f32:	b9b8      	cbnz	r0, 8026f64 <_Balloc+0x68>
 8026f34:	2101      	movs	r1, #1
 8026f36:	fa01 f605 	lsl.w	r6, r1, r5
 8026f3a:	1d72      	adds	r2, r6, #5
 8026f3c:	0092      	lsls	r2, r2, #2
 8026f3e:	4620      	mov	r0, r4
 8026f40:	f000 fb60 	bl	8027604 <_calloc_r>
 8026f44:	b160      	cbz	r0, 8026f60 <_Balloc+0x64>
 8026f46:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8026f4a:	e00e      	b.n	8026f6a <_Balloc+0x6e>
 8026f4c:	2221      	movs	r2, #33	; 0x21
 8026f4e:	2104      	movs	r1, #4
 8026f50:	4620      	mov	r0, r4
 8026f52:	f000 fb57 	bl	8027604 <_calloc_r>
 8026f56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8026f58:	60f0      	str	r0, [r6, #12]
 8026f5a:	68db      	ldr	r3, [r3, #12]
 8026f5c:	2b00      	cmp	r3, #0
 8026f5e:	d1e4      	bne.n	8026f2a <_Balloc+0x2e>
 8026f60:	2000      	movs	r0, #0
 8026f62:	bd70      	pop	{r4, r5, r6, pc}
 8026f64:	6802      	ldr	r2, [r0, #0]
 8026f66:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8026f6a:	2300      	movs	r3, #0
 8026f6c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8026f70:	e7f7      	b.n	8026f62 <_Balloc+0x66>
 8026f72:	bf00      	nop
 8026f74:	080283c4 	.word	0x080283c4
 8026f78:	08028650 	.word	0x08028650

08026f7c <_Bfree>:
 8026f7c:	b570      	push	{r4, r5, r6, lr}
 8026f7e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8026f80:	4605      	mov	r5, r0
 8026f82:	460c      	mov	r4, r1
 8026f84:	b976      	cbnz	r6, 8026fa4 <_Bfree+0x28>
 8026f86:	2010      	movs	r0, #16
 8026f88:	f7ff ffa2 	bl	8026ed0 <malloc>
 8026f8c:	4602      	mov	r2, r0
 8026f8e:	6268      	str	r0, [r5, #36]	; 0x24
 8026f90:	b920      	cbnz	r0, 8026f9c <_Bfree+0x20>
 8026f92:	4b09      	ldr	r3, [pc, #36]	; (8026fb8 <_Bfree+0x3c>)
 8026f94:	4809      	ldr	r0, [pc, #36]	; (8026fbc <_Bfree+0x40>)
 8026f96:	218a      	movs	r1, #138	; 0x8a
 8026f98:	f7fe fecc 	bl	8025d34 <__assert_func>
 8026f9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8026fa0:	6006      	str	r6, [r0, #0]
 8026fa2:	60c6      	str	r6, [r0, #12]
 8026fa4:	b13c      	cbz	r4, 8026fb6 <_Bfree+0x3a>
 8026fa6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8026fa8:	6862      	ldr	r2, [r4, #4]
 8026faa:	68db      	ldr	r3, [r3, #12]
 8026fac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8026fb0:	6021      	str	r1, [r4, #0]
 8026fb2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8026fb6:	bd70      	pop	{r4, r5, r6, pc}
 8026fb8:	080283c4 	.word	0x080283c4
 8026fbc:	08028650 	.word	0x08028650

08026fc0 <__multadd>:
 8026fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026fc4:	690d      	ldr	r5, [r1, #16]
 8026fc6:	4607      	mov	r7, r0
 8026fc8:	460c      	mov	r4, r1
 8026fca:	461e      	mov	r6, r3
 8026fcc:	f101 0c14 	add.w	ip, r1, #20
 8026fd0:	2000      	movs	r0, #0
 8026fd2:	f8dc 3000 	ldr.w	r3, [ip]
 8026fd6:	b299      	uxth	r1, r3
 8026fd8:	fb02 6101 	mla	r1, r2, r1, r6
 8026fdc:	0c1e      	lsrs	r6, r3, #16
 8026fde:	0c0b      	lsrs	r3, r1, #16
 8026fe0:	fb02 3306 	mla	r3, r2, r6, r3
 8026fe4:	b289      	uxth	r1, r1
 8026fe6:	3001      	adds	r0, #1
 8026fe8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8026fec:	4285      	cmp	r5, r0
 8026fee:	f84c 1b04 	str.w	r1, [ip], #4
 8026ff2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8026ff6:	dcec      	bgt.n	8026fd2 <__multadd+0x12>
 8026ff8:	b30e      	cbz	r6, 802703e <__multadd+0x7e>
 8026ffa:	68a3      	ldr	r3, [r4, #8]
 8026ffc:	42ab      	cmp	r3, r5
 8026ffe:	dc19      	bgt.n	8027034 <__multadd+0x74>
 8027000:	6861      	ldr	r1, [r4, #4]
 8027002:	4638      	mov	r0, r7
 8027004:	3101      	adds	r1, #1
 8027006:	f7ff ff79 	bl	8026efc <_Balloc>
 802700a:	4680      	mov	r8, r0
 802700c:	b928      	cbnz	r0, 802701a <__multadd+0x5a>
 802700e:	4602      	mov	r2, r0
 8027010:	4b0c      	ldr	r3, [pc, #48]	; (8027044 <__multadd+0x84>)
 8027012:	480d      	ldr	r0, [pc, #52]	; (8027048 <__multadd+0x88>)
 8027014:	21b5      	movs	r1, #181	; 0xb5
 8027016:	f7fe fe8d 	bl	8025d34 <__assert_func>
 802701a:	6922      	ldr	r2, [r4, #16]
 802701c:	3202      	adds	r2, #2
 802701e:	f104 010c 	add.w	r1, r4, #12
 8027022:	0092      	lsls	r2, r2, #2
 8027024:	300c      	adds	r0, #12
 8027026:	f7ff ff5b 	bl	8026ee0 <memcpy>
 802702a:	4621      	mov	r1, r4
 802702c:	4638      	mov	r0, r7
 802702e:	f7ff ffa5 	bl	8026f7c <_Bfree>
 8027032:	4644      	mov	r4, r8
 8027034:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8027038:	3501      	adds	r5, #1
 802703a:	615e      	str	r6, [r3, #20]
 802703c:	6125      	str	r5, [r4, #16]
 802703e:	4620      	mov	r0, r4
 8027040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027044:	080285dd 	.word	0x080285dd
 8027048:	08028650 	.word	0x08028650

0802704c <__hi0bits>:
 802704c:	0c03      	lsrs	r3, r0, #16
 802704e:	041b      	lsls	r3, r3, #16
 8027050:	b9d3      	cbnz	r3, 8027088 <__hi0bits+0x3c>
 8027052:	0400      	lsls	r0, r0, #16
 8027054:	2310      	movs	r3, #16
 8027056:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 802705a:	bf04      	itt	eq
 802705c:	0200      	lsleq	r0, r0, #8
 802705e:	3308      	addeq	r3, #8
 8027060:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8027064:	bf04      	itt	eq
 8027066:	0100      	lsleq	r0, r0, #4
 8027068:	3304      	addeq	r3, #4
 802706a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 802706e:	bf04      	itt	eq
 8027070:	0080      	lsleq	r0, r0, #2
 8027072:	3302      	addeq	r3, #2
 8027074:	2800      	cmp	r0, #0
 8027076:	db05      	blt.n	8027084 <__hi0bits+0x38>
 8027078:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 802707c:	f103 0301 	add.w	r3, r3, #1
 8027080:	bf08      	it	eq
 8027082:	2320      	moveq	r3, #32
 8027084:	4618      	mov	r0, r3
 8027086:	4770      	bx	lr
 8027088:	2300      	movs	r3, #0
 802708a:	e7e4      	b.n	8027056 <__hi0bits+0xa>

0802708c <__lo0bits>:
 802708c:	6803      	ldr	r3, [r0, #0]
 802708e:	f013 0207 	ands.w	r2, r3, #7
 8027092:	4601      	mov	r1, r0
 8027094:	d00b      	beq.n	80270ae <__lo0bits+0x22>
 8027096:	07da      	lsls	r2, r3, #31
 8027098:	d423      	bmi.n	80270e2 <__lo0bits+0x56>
 802709a:	0798      	lsls	r0, r3, #30
 802709c:	bf49      	itett	mi
 802709e:	085b      	lsrmi	r3, r3, #1
 80270a0:	089b      	lsrpl	r3, r3, #2
 80270a2:	2001      	movmi	r0, #1
 80270a4:	600b      	strmi	r3, [r1, #0]
 80270a6:	bf5c      	itt	pl
 80270a8:	600b      	strpl	r3, [r1, #0]
 80270aa:	2002      	movpl	r0, #2
 80270ac:	4770      	bx	lr
 80270ae:	b298      	uxth	r0, r3
 80270b0:	b9a8      	cbnz	r0, 80270de <__lo0bits+0x52>
 80270b2:	0c1b      	lsrs	r3, r3, #16
 80270b4:	2010      	movs	r0, #16
 80270b6:	b2da      	uxtb	r2, r3
 80270b8:	b90a      	cbnz	r2, 80270be <__lo0bits+0x32>
 80270ba:	3008      	adds	r0, #8
 80270bc:	0a1b      	lsrs	r3, r3, #8
 80270be:	071a      	lsls	r2, r3, #28
 80270c0:	bf04      	itt	eq
 80270c2:	091b      	lsreq	r3, r3, #4
 80270c4:	3004      	addeq	r0, #4
 80270c6:	079a      	lsls	r2, r3, #30
 80270c8:	bf04      	itt	eq
 80270ca:	089b      	lsreq	r3, r3, #2
 80270cc:	3002      	addeq	r0, #2
 80270ce:	07da      	lsls	r2, r3, #31
 80270d0:	d403      	bmi.n	80270da <__lo0bits+0x4e>
 80270d2:	085b      	lsrs	r3, r3, #1
 80270d4:	f100 0001 	add.w	r0, r0, #1
 80270d8:	d005      	beq.n	80270e6 <__lo0bits+0x5a>
 80270da:	600b      	str	r3, [r1, #0]
 80270dc:	4770      	bx	lr
 80270de:	4610      	mov	r0, r2
 80270e0:	e7e9      	b.n	80270b6 <__lo0bits+0x2a>
 80270e2:	2000      	movs	r0, #0
 80270e4:	4770      	bx	lr
 80270e6:	2020      	movs	r0, #32
 80270e8:	4770      	bx	lr
	...

080270ec <__i2b>:
 80270ec:	b510      	push	{r4, lr}
 80270ee:	460c      	mov	r4, r1
 80270f0:	2101      	movs	r1, #1
 80270f2:	f7ff ff03 	bl	8026efc <_Balloc>
 80270f6:	4602      	mov	r2, r0
 80270f8:	b928      	cbnz	r0, 8027106 <__i2b+0x1a>
 80270fa:	4b05      	ldr	r3, [pc, #20]	; (8027110 <__i2b+0x24>)
 80270fc:	4805      	ldr	r0, [pc, #20]	; (8027114 <__i2b+0x28>)
 80270fe:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8027102:	f7fe fe17 	bl	8025d34 <__assert_func>
 8027106:	2301      	movs	r3, #1
 8027108:	6144      	str	r4, [r0, #20]
 802710a:	6103      	str	r3, [r0, #16]
 802710c:	bd10      	pop	{r4, pc}
 802710e:	bf00      	nop
 8027110:	080285dd 	.word	0x080285dd
 8027114:	08028650 	.word	0x08028650

08027118 <__multiply>:
 8027118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802711c:	4691      	mov	r9, r2
 802711e:	690a      	ldr	r2, [r1, #16]
 8027120:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8027124:	429a      	cmp	r2, r3
 8027126:	bfb8      	it	lt
 8027128:	460b      	movlt	r3, r1
 802712a:	460c      	mov	r4, r1
 802712c:	bfbc      	itt	lt
 802712e:	464c      	movlt	r4, r9
 8027130:	4699      	movlt	r9, r3
 8027132:	6927      	ldr	r7, [r4, #16]
 8027134:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8027138:	68a3      	ldr	r3, [r4, #8]
 802713a:	6861      	ldr	r1, [r4, #4]
 802713c:	eb07 060a 	add.w	r6, r7, sl
 8027140:	42b3      	cmp	r3, r6
 8027142:	b085      	sub	sp, #20
 8027144:	bfb8      	it	lt
 8027146:	3101      	addlt	r1, #1
 8027148:	f7ff fed8 	bl	8026efc <_Balloc>
 802714c:	b930      	cbnz	r0, 802715c <__multiply+0x44>
 802714e:	4602      	mov	r2, r0
 8027150:	4b44      	ldr	r3, [pc, #272]	; (8027264 <__multiply+0x14c>)
 8027152:	4845      	ldr	r0, [pc, #276]	; (8027268 <__multiply+0x150>)
 8027154:	f240 115d 	movw	r1, #349	; 0x15d
 8027158:	f7fe fdec 	bl	8025d34 <__assert_func>
 802715c:	f100 0514 	add.w	r5, r0, #20
 8027160:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8027164:	462b      	mov	r3, r5
 8027166:	2200      	movs	r2, #0
 8027168:	4543      	cmp	r3, r8
 802716a:	d321      	bcc.n	80271b0 <__multiply+0x98>
 802716c:	f104 0314 	add.w	r3, r4, #20
 8027170:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8027174:	f109 0314 	add.w	r3, r9, #20
 8027178:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 802717c:	9202      	str	r2, [sp, #8]
 802717e:	1b3a      	subs	r2, r7, r4
 8027180:	3a15      	subs	r2, #21
 8027182:	f022 0203 	bic.w	r2, r2, #3
 8027186:	3204      	adds	r2, #4
 8027188:	f104 0115 	add.w	r1, r4, #21
 802718c:	428f      	cmp	r7, r1
 802718e:	bf38      	it	cc
 8027190:	2204      	movcc	r2, #4
 8027192:	9201      	str	r2, [sp, #4]
 8027194:	9a02      	ldr	r2, [sp, #8]
 8027196:	9303      	str	r3, [sp, #12]
 8027198:	429a      	cmp	r2, r3
 802719a:	d80c      	bhi.n	80271b6 <__multiply+0x9e>
 802719c:	2e00      	cmp	r6, #0
 802719e:	dd03      	ble.n	80271a8 <__multiply+0x90>
 80271a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80271a4:	2b00      	cmp	r3, #0
 80271a6:	d05a      	beq.n	802725e <__multiply+0x146>
 80271a8:	6106      	str	r6, [r0, #16]
 80271aa:	b005      	add	sp, #20
 80271ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80271b0:	f843 2b04 	str.w	r2, [r3], #4
 80271b4:	e7d8      	b.n	8027168 <__multiply+0x50>
 80271b6:	f8b3 a000 	ldrh.w	sl, [r3]
 80271ba:	f1ba 0f00 	cmp.w	sl, #0
 80271be:	d024      	beq.n	802720a <__multiply+0xf2>
 80271c0:	f104 0e14 	add.w	lr, r4, #20
 80271c4:	46a9      	mov	r9, r5
 80271c6:	f04f 0c00 	mov.w	ip, #0
 80271ca:	f85e 2b04 	ldr.w	r2, [lr], #4
 80271ce:	f8d9 1000 	ldr.w	r1, [r9]
 80271d2:	fa1f fb82 	uxth.w	fp, r2
 80271d6:	b289      	uxth	r1, r1
 80271d8:	fb0a 110b 	mla	r1, sl, fp, r1
 80271dc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80271e0:	f8d9 2000 	ldr.w	r2, [r9]
 80271e4:	4461      	add	r1, ip
 80271e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80271ea:	fb0a c20b 	mla	r2, sl, fp, ip
 80271ee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80271f2:	b289      	uxth	r1, r1
 80271f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80271f8:	4577      	cmp	r7, lr
 80271fa:	f849 1b04 	str.w	r1, [r9], #4
 80271fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8027202:	d8e2      	bhi.n	80271ca <__multiply+0xb2>
 8027204:	9a01      	ldr	r2, [sp, #4]
 8027206:	f845 c002 	str.w	ip, [r5, r2]
 802720a:	9a03      	ldr	r2, [sp, #12]
 802720c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8027210:	3304      	adds	r3, #4
 8027212:	f1b9 0f00 	cmp.w	r9, #0
 8027216:	d020      	beq.n	802725a <__multiply+0x142>
 8027218:	6829      	ldr	r1, [r5, #0]
 802721a:	f104 0c14 	add.w	ip, r4, #20
 802721e:	46ae      	mov	lr, r5
 8027220:	f04f 0a00 	mov.w	sl, #0
 8027224:	f8bc b000 	ldrh.w	fp, [ip]
 8027228:	f8be 2002 	ldrh.w	r2, [lr, #2]
 802722c:	fb09 220b 	mla	r2, r9, fp, r2
 8027230:	4492      	add	sl, r2
 8027232:	b289      	uxth	r1, r1
 8027234:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8027238:	f84e 1b04 	str.w	r1, [lr], #4
 802723c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8027240:	f8be 1000 	ldrh.w	r1, [lr]
 8027244:	0c12      	lsrs	r2, r2, #16
 8027246:	fb09 1102 	mla	r1, r9, r2, r1
 802724a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 802724e:	4567      	cmp	r7, ip
 8027250:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8027254:	d8e6      	bhi.n	8027224 <__multiply+0x10c>
 8027256:	9a01      	ldr	r2, [sp, #4]
 8027258:	50a9      	str	r1, [r5, r2]
 802725a:	3504      	adds	r5, #4
 802725c:	e79a      	b.n	8027194 <__multiply+0x7c>
 802725e:	3e01      	subs	r6, #1
 8027260:	e79c      	b.n	802719c <__multiply+0x84>
 8027262:	bf00      	nop
 8027264:	080285dd 	.word	0x080285dd
 8027268:	08028650 	.word	0x08028650

0802726c <__pow5mult>:
 802726c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8027270:	4615      	mov	r5, r2
 8027272:	f012 0203 	ands.w	r2, r2, #3
 8027276:	4606      	mov	r6, r0
 8027278:	460f      	mov	r7, r1
 802727a:	d007      	beq.n	802728c <__pow5mult+0x20>
 802727c:	4c25      	ldr	r4, [pc, #148]	; (8027314 <__pow5mult+0xa8>)
 802727e:	3a01      	subs	r2, #1
 8027280:	2300      	movs	r3, #0
 8027282:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8027286:	f7ff fe9b 	bl	8026fc0 <__multadd>
 802728a:	4607      	mov	r7, r0
 802728c:	10ad      	asrs	r5, r5, #2
 802728e:	d03d      	beq.n	802730c <__pow5mult+0xa0>
 8027290:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8027292:	b97c      	cbnz	r4, 80272b4 <__pow5mult+0x48>
 8027294:	2010      	movs	r0, #16
 8027296:	f7ff fe1b 	bl	8026ed0 <malloc>
 802729a:	4602      	mov	r2, r0
 802729c:	6270      	str	r0, [r6, #36]	; 0x24
 802729e:	b928      	cbnz	r0, 80272ac <__pow5mult+0x40>
 80272a0:	4b1d      	ldr	r3, [pc, #116]	; (8027318 <__pow5mult+0xac>)
 80272a2:	481e      	ldr	r0, [pc, #120]	; (802731c <__pow5mult+0xb0>)
 80272a4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80272a8:	f7fe fd44 	bl	8025d34 <__assert_func>
 80272ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80272b0:	6004      	str	r4, [r0, #0]
 80272b2:	60c4      	str	r4, [r0, #12]
 80272b4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80272b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80272bc:	b94c      	cbnz	r4, 80272d2 <__pow5mult+0x66>
 80272be:	f240 2171 	movw	r1, #625	; 0x271
 80272c2:	4630      	mov	r0, r6
 80272c4:	f7ff ff12 	bl	80270ec <__i2b>
 80272c8:	2300      	movs	r3, #0
 80272ca:	f8c8 0008 	str.w	r0, [r8, #8]
 80272ce:	4604      	mov	r4, r0
 80272d0:	6003      	str	r3, [r0, #0]
 80272d2:	f04f 0900 	mov.w	r9, #0
 80272d6:	07eb      	lsls	r3, r5, #31
 80272d8:	d50a      	bpl.n	80272f0 <__pow5mult+0x84>
 80272da:	4639      	mov	r1, r7
 80272dc:	4622      	mov	r2, r4
 80272de:	4630      	mov	r0, r6
 80272e0:	f7ff ff1a 	bl	8027118 <__multiply>
 80272e4:	4639      	mov	r1, r7
 80272e6:	4680      	mov	r8, r0
 80272e8:	4630      	mov	r0, r6
 80272ea:	f7ff fe47 	bl	8026f7c <_Bfree>
 80272ee:	4647      	mov	r7, r8
 80272f0:	106d      	asrs	r5, r5, #1
 80272f2:	d00b      	beq.n	802730c <__pow5mult+0xa0>
 80272f4:	6820      	ldr	r0, [r4, #0]
 80272f6:	b938      	cbnz	r0, 8027308 <__pow5mult+0x9c>
 80272f8:	4622      	mov	r2, r4
 80272fa:	4621      	mov	r1, r4
 80272fc:	4630      	mov	r0, r6
 80272fe:	f7ff ff0b 	bl	8027118 <__multiply>
 8027302:	6020      	str	r0, [r4, #0]
 8027304:	f8c0 9000 	str.w	r9, [r0]
 8027308:	4604      	mov	r4, r0
 802730a:	e7e4      	b.n	80272d6 <__pow5mult+0x6a>
 802730c:	4638      	mov	r0, r7
 802730e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8027312:	bf00      	nop
 8027314:	080287a0 	.word	0x080287a0
 8027318:	080283c4 	.word	0x080283c4
 802731c:	08028650 	.word	0x08028650

08027320 <__lshift>:
 8027320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027324:	460c      	mov	r4, r1
 8027326:	6849      	ldr	r1, [r1, #4]
 8027328:	6923      	ldr	r3, [r4, #16]
 802732a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802732e:	68a3      	ldr	r3, [r4, #8]
 8027330:	4607      	mov	r7, r0
 8027332:	4691      	mov	r9, r2
 8027334:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8027338:	f108 0601 	add.w	r6, r8, #1
 802733c:	42b3      	cmp	r3, r6
 802733e:	db0b      	blt.n	8027358 <__lshift+0x38>
 8027340:	4638      	mov	r0, r7
 8027342:	f7ff fddb 	bl	8026efc <_Balloc>
 8027346:	4605      	mov	r5, r0
 8027348:	b948      	cbnz	r0, 802735e <__lshift+0x3e>
 802734a:	4602      	mov	r2, r0
 802734c:	4b2a      	ldr	r3, [pc, #168]	; (80273f8 <__lshift+0xd8>)
 802734e:	482b      	ldr	r0, [pc, #172]	; (80273fc <__lshift+0xdc>)
 8027350:	f240 11d9 	movw	r1, #473	; 0x1d9
 8027354:	f7fe fcee 	bl	8025d34 <__assert_func>
 8027358:	3101      	adds	r1, #1
 802735a:	005b      	lsls	r3, r3, #1
 802735c:	e7ee      	b.n	802733c <__lshift+0x1c>
 802735e:	2300      	movs	r3, #0
 8027360:	f100 0114 	add.w	r1, r0, #20
 8027364:	f100 0210 	add.w	r2, r0, #16
 8027368:	4618      	mov	r0, r3
 802736a:	4553      	cmp	r3, sl
 802736c:	db37      	blt.n	80273de <__lshift+0xbe>
 802736e:	6920      	ldr	r0, [r4, #16]
 8027370:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8027374:	f104 0314 	add.w	r3, r4, #20
 8027378:	f019 091f 	ands.w	r9, r9, #31
 802737c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8027380:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8027384:	d02f      	beq.n	80273e6 <__lshift+0xc6>
 8027386:	f1c9 0e20 	rsb	lr, r9, #32
 802738a:	468a      	mov	sl, r1
 802738c:	f04f 0c00 	mov.w	ip, #0
 8027390:	681a      	ldr	r2, [r3, #0]
 8027392:	fa02 f209 	lsl.w	r2, r2, r9
 8027396:	ea42 020c 	orr.w	r2, r2, ip
 802739a:	f84a 2b04 	str.w	r2, [sl], #4
 802739e:	f853 2b04 	ldr.w	r2, [r3], #4
 80273a2:	4298      	cmp	r0, r3
 80273a4:	fa22 fc0e 	lsr.w	ip, r2, lr
 80273a8:	d8f2      	bhi.n	8027390 <__lshift+0x70>
 80273aa:	1b03      	subs	r3, r0, r4
 80273ac:	3b15      	subs	r3, #21
 80273ae:	f023 0303 	bic.w	r3, r3, #3
 80273b2:	3304      	adds	r3, #4
 80273b4:	f104 0215 	add.w	r2, r4, #21
 80273b8:	4290      	cmp	r0, r2
 80273ba:	bf38      	it	cc
 80273bc:	2304      	movcc	r3, #4
 80273be:	f841 c003 	str.w	ip, [r1, r3]
 80273c2:	f1bc 0f00 	cmp.w	ip, #0
 80273c6:	d001      	beq.n	80273cc <__lshift+0xac>
 80273c8:	f108 0602 	add.w	r6, r8, #2
 80273cc:	3e01      	subs	r6, #1
 80273ce:	4638      	mov	r0, r7
 80273d0:	612e      	str	r6, [r5, #16]
 80273d2:	4621      	mov	r1, r4
 80273d4:	f7ff fdd2 	bl	8026f7c <_Bfree>
 80273d8:	4628      	mov	r0, r5
 80273da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80273de:	f842 0f04 	str.w	r0, [r2, #4]!
 80273e2:	3301      	adds	r3, #1
 80273e4:	e7c1      	b.n	802736a <__lshift+0x4a>
 80273e6:	3904      	subs	r1, #4
 80273e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80273ec:	f841 2f04 	str.w	r2, [r1, #4]!
 80273f0:	4298      	cmp	r0, r3
 80273f2:	d8f9      	bhi.n	80273e8 <__lshift+0xc8>
 80273f4:	e7ea      	b.n	80273cc <__lshift+0xac>
 80273f6:	bf00      	nop
 80273f8:	080285dd 	.word	0x080285dd
 80273fc:	08028650 	.word	0x08028650

08027400 <__mcmp>:
 8027400:	b530      	push	{r4, r5, lr}
 8027402:	6902      	ldr	r2, [r0, #16]
 8027404:	690c      	ldr	r4, [r1, #16]
 8027406:	1b12      	subs	r2, r2, r4
 8027408:	d10e      	bne.n	8027428 <__mcmp+0x28>
 802740a:	f100 0314 	add.w	r3, r0, #20
 802740e:	3114      	adds	r1, #20
 8027410:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8027414:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8027418:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 802741c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8027420:	42a5      	cmp	r5, r4
 8027422:	d003      	beq.n	802742c <__mcmp+0x2c>
 8027424:	d305      	bcc.n	8027432 <__mcmp+0x32>
 8027426:	2201      	movs	r2, #1
 8027428:	4610      	mov	r0, r2
 802742a:	bd30      	pop	{r4, r5, pc}
 802742c:	4283      	cmp	r3, r0
 802742e:	d3f3      	bcc.n	8027418 <__mcmp+0x18>
 8027430:	e7fa      	b.n	8027428 <__mcmp+0x28>
 8027432:	f04f 32ff 	mov.w	r2, #4294967295
 8027436:	e7f7      	b.n	8027428 <__mcmp+0x28>

08027438 <__mdiff>:
 8027438:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802743c:	460c      	mov	r4, r1
 802743e:	4606      	mov	r6, r0
 8027440:	4611      	mov	r1, r2
 8027442:	4620      	mov	r0, r4
 8027444:	4690      	mov	r8, r2
 8027446:	f7ff ffdb 	bl	8027400 <__mcmp>
 802744a:	1e05      	subs	r5, r0, #0
 802744c:	d110      	bne.n	8027470 <__mdiff+0x38>
 802744e:	4629      	mov	r1, r5
 8027450:	4630      	mov	r0, r6
 8027452:	f7ff fd53 	bl	8026efc <_Balloc>
 8027456:	b930      	cbnz	r0, 8027466 <__mdiff+0x2e>
 8027458:	4b3a      	ldr	r3, [pc, #232]	; (8027544 <__mdiff+0x10c>)
 802745a:	4602      	mov	r2, r0
 802745c:	f240 2132 	movw	r1, #562	; 0x232
 8027460:	4839      	ldr	r0, [pc, #228]	; (8027548 <__mdiff+0x110>)
 8027462:	f7fe fc67 	bl	8025d34 <__assert_func>
 8027466:	2301      	movs	r3, #1
 8027468:	e9c0 3504 	strd	r3, r5, [r0, #16]
 802746c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027470:	bfa4      	itt	ge
 8027472:	4643      	movge	r3, r8
 8027474:	46a0      	movge	r8, r4
 8027476:	4630      	mov	r0, r6
 8027478:	f8d8 1004 	ldr.w	r1, [r8, #4]
 802747c:	bfa6      	itte	ge
 802747e:	461c      	movge	r4, r3
 8027480:	2500      	movge	r5, #0
 8027482:	2501      	movlt	r5, #1
 8027484:	f7ff fd3a 	bl	8026efc <_Balloc>
 8027488:	b920      	cbnz	r0, 8027494 <__mdiff+0x5c>
 802748a:	4b2e      	ldr	r3, [pc, #184]	; (8027544 <__mdiff+0x10c>)
 802748c:	4602      	mov	r2, r0
 802748e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8027492:	e7e5      	b.n	8027460 <__mdiff+0x28>
 8027494:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8027498:	6926      	ldr	r6, [r4, #16]
 802749a:	60c5      	str	r5, [r0, #12]
 802749c:	f104 0914 	add.w	r9, r4, #20
 80274a0:	f108 0514 	add.w	r5, r8, #20
 80274a4:	f100 0e14 	add.w	lr, r0, #20
 80274a8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80274ac:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80274b0:	f108 0210 	add.w	r2, r8, #16
 80274b4:	46f2      	mov	sl, lr
 80274b6:	2100      	movs	r1, #0
 80274b8:	f859 3b04 	ldr.w	r3, [r9], #4
 80274bc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80274c0:	fa1f f883 	uxth.w	r8, r3
 80274c4:	fa11 f18b 	uxtah	r1, r1, fp
 80274c8:	0c1b      	lsrs	r3, r3, #16
 80274ca:	eba1 0808 	sub.w	r8, r1, r8
 80274ce:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80274d2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80274d6:	fa1f f888 	uxth.w	r8, r8
 80274da:	1419      	asrs	r1, r3, #16
 80274dc:	454e      	cmp	r6, r9
 80274de:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80274e2:	f84a 3b04 	str.w	r3, [sl], #4
 80274e6:	d8e7      	bhi.n	80274b8 <__mdiff+0x80>
 80274e8:	1b33      	subs	r3, r6, r4
 80274ea:	3b15      	subs	r3, #21
 80274ec:	f023 0303 	bic.w	r3, r3, #3
 80274f0:	3304      	adds	r3, #4
 80274f2:	3415      	adds	r4, #21
 80274f4:	42a6      	cmp	r6, r4
 80274f6:	bf38      	it	cc
 80274f8:	2304      	movcc	r3, #4
 80274fa:	441d      	add	r5, r3
 80274fc:	4473      	add	r3, lr
 80274fe:	469e      	mov	lr, r3
 8027500:	462e      	mov	r6, r5
 8027502:	4566      	cmp	r6, ip
 8027504:	d30e      	bcc.n	8027524 <__mdiff+0xec>
 8027506:	f10c 0203 	add.w	r2, ip, #3
 802750a:	1b52      	subs	r2, r2, r5
 802750c:	f022 0203 	bic.w	r2, r2, #3
 8027510:	3d03      	subs	r5, #3
 8027512:	45ac      	cmp	ip, r5
 8027514:	bf38      	it	cc
 8027516:	2200      	movcc	r2, #0
 8027518:	441a      	add	r2, r3
 802751a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 802751e:	b17b      	cbz	r3, 8027540 <__mdiff+0x108>
 8027520:	6107      	str	r7, [r0, #16]
 8027522:	e7a3      	b.n	802746c <__mdiff+0x34>
 8027524:	f856 8b04 	ldr.w	r8, [r6], #4
 8027528:	fa11 f288 	uxtah	r2, r1, r8
 802752c:	1414      	asrs	r4, r2, #16
 802752e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8027532:	b292      	uxth	r2, r2
 8027534:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8027538:	f84e 2b04 	str.w	r2, [lr], #4
 802753c:	1421      	asrs	r1, r4, #16
 802753e:	e7e0      	b.n	8027502 <__mdiff+0xca>
 8027540:	3f01      	subs	r7, #1
 8027542:	e7ea      	b.n	802751a <__mdiff+0xe2>
 8027544:	080285dd 	.word	0x080285dd
 8027548:	08028650 	.word	0x08028650

0802754c <__d2b>:
 802754c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8027550:	4689      	mov	r9, r1
 8027552:	2101      	movs	r1, #1
 8027554:	ec57 6b10 	vmov	r6, r7, d0
 8027558:	4690      	mov	r8, r2
 802755a:	f7ff fccf 	bl	8026efc <_Balloc>
 802755e:	4604      	mov	r4, r0
 8027560:	b930      	cbnz	r0, 8027570 <__d2b+0x24>
 8027562:	4602      	mov	r2, r0
 8027564:	4b25      	ldr	r3, [pc, #148]	; (80275fc <__d2b+0xb0>)
 8027566:	4826      	ldr	r0, [pc, #152]	; (8027600 <__d2b+0xb4>)
 8027568:	f240 310a 	movw	r1, #778	; 0x30a
 802756c:	f7fe fbe2 	bl	8025d34 <__assert_func>
 8027570:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8027574:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8027578:	bb35      	cbnz	r5, 80275c8 <__d2b+0x7c>
 802757a:	2e00      	cmp	r6, #0
 802757c:	9301      	str	r3, [sp, #4]
 802757e:	d028      	beq.n	80275d2 <__d2b+0x86>
 8027580:	4668      	mov	r0, sp
 8027582:	9600      	str	r6, [sp, #0]
 8027584:	f7ff fd82 	bl	802708c <__lo0bits>
 8027588:	9900      	ldr	r1, [sp, #0]
 802758a:	b300      	cbz	r0, 80275ce <__d2b+0x82>
 802758c:	9a01      	ldr	r2, [sp, #4]
 802758e:	f1c0 0320 	rsb	r3, r0, #32
 8027592:	fa02 f303 	lsl.w	r3, r2, r3
 8027596:	430b      	orrs	r3, r1
 8027598:	40c2      	lsrs	r2, r0
 802759a:	6163      	str	r3, [r4, #20]
 802759c:	9201      	str	r2, [sp, #4]
 802759e:	9b01      	ldr	r3, [sp, #4]
 80275a0:	61a3      	str	r3, [r4, #24]
 80275a2:	2b00      	cmp	r3, #0
 80275a4:	bf14      	ite	ne
 80275a6:	2202      	movne	r2, #2
 80275a8:	2201      	moveq	r2, #1
 80275aa:	6122      	str	r2, [r4, #16]
 80275ac:	b1d5      	cbz	r5, 80275e4 <__d2b+0x98>
 80275ae:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80275b2:	4405      	add	r5, r0
 80275b4:	f8c9 5000 	str.w	r5, [r9]
 80275b8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80275bc:	f8c8 0000 	str.w	r0, [r8]
 80275c0:	4620      	mov	r0, r4
 80275c2:	b003      	add	sp, #12
 80275c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80275c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80275cc:	e7d5      	b.n	802757a <__d2b+0x2e>
 80275ce:	6161      	str	r1, [r4, #20]
 80275d0:	e7e5      	b.n	802759e <__d2b+0x52>
 80275d2:	a801      	add	r0, sp, #4
 80275d4:	f7ff fd5a 	bl	802708c <__lo0bits>
 80275d8:	9b01      	ldr	r3, [sp, #4]
 80275da:	6163      	str	r3, [r4, #20]
 80275dc:	2201      	movs	r2, #1
 80275de:	6122      	str	r2, [r4, #16]
 80275e0:	3020      	adds	r0, #32
 80275e2:	e7e3      	b.n	80275ac <__d2b+0x60>
 80275e4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80275e8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80275ec:	f8c9 0000 	str.w	r0, [r9]
 80275f0:	6918      	ldr	r0, [r3, #16]
 80275f2:	f7ff fd2b 	bl	802704c <__hi0bits>
 80275f6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80275fa:	e7df      	b.n	80275bc <__d2b+0x70>
 80275fc:	080285dd 	.word	0x080285dd
 8027600:	08028650 	.word	0x08028650

08027604 <_calloc_r>:
 8027604:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8027606:	fba1 2402 	umull	r2, r4, r1, r2
 802760a:	b94c      	cbnz	r4, 8027620 <_calloc_r+0x1c>
 802760c:	4611      	mov	r1, r2
 802760e:	9201      	str	r2, [sp, #4]
 8027610:	f000 f87a 	bl	8027708 <_malloc_r>
 8027614:	9a01      	ldr	r2, [sp, #4]
 8027616:	4605      	mov	r5, r0
 8027618:	b930      	cbnz	r0, 8027628 <_calloc_r+0x24>
 802761a:	4628      	mov	r0, r5
 802761c:	b003      	add	sp, #12
 802761e:	bd30      	pop	{r4, r5, pc}
 8027620:	220c      	movs	r2, #12
 8027622:	6002      	str	r2, [r0, #0]
 8027624:	2500      	movs	r5, #0
 8027626:	e7f8      	b.n	802761a <_calloc_r+0x16>
 8027628:	4621      	mov	r1, r4
 802762a:	f7fd fbf7 	bl	8024e1c <memset>
 802762e:	e7f4      	b.n	802761a <_calloc_r+0x16>

08027630 <_free_r>:
 8027630:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8027632:	2900      	cmp	r1, #0
 8027634:	d044      	beq.n	80276c0 <_free_r+0x90>
 8027636:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802763a:	9001      	str	r0, [sp, #4]
 802763c:	2b00      	cmp	r3, #0
 802763e:	f1a1 0404 	sub.w	r4, r1, #4
 8027642:	bfb8      	it	lt
 8027644:	18e4      	addlt	r4, r4, r3
 8027646:	f000 fb39 	bl	8027cbc <__malloc_lock>
 802764a:	4a1e      	ldr	r2, [pc, #120]	; (80276c4 <_free_r+0x94>)
 802764c:	9801      	ldr	r0, [sp, #4]
 802764e:	6813      	ldr	r3, [r2, #0]
 8027650:	b933      	cbnz	r3, 8027660 <_free_r+0x30>
 8027652:	6063      	str	r3, [r4, #4]
 8027654:	6014      	str	r4, [r2, #0]
 8027656:	b003      	add	sp, #12
 8027658:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802765c:	f000 bb34 	b.w	8027cc8 <__malloc_unlock>
 8027660:	42a3      	cmp	r3, r4
 8027662:	d908      	bls.n	8027676 <_free_r+0x46>
 8027664:	6825      	ldr	r5, [r4, #0]
 8027666:	1961      	adds	r1, r4, r5
 8027668:	428b      	cmp	r3, r1
 802766a:	bf01      	itttt	eq
 802766c:	6819      	ldreq	r1, [r3, #0]
 802766e:	685b      	ldreq	r3, [r3, #4]
 8027670:	1949      	addeq	r1, r1, r5
 8027672:	6021      	streq	r1, [r4, #0]
 8027674:	e7ed      	b.n	8027652 <_free_r+0x22>
 8027676:	461a      	mov	r2, r3
 8027678:	685b      	ldr	r3, [r3, #4]
 802767a:	b10b      	cbz	r3, 8027680 <_free_r+0x50>
 802767c:	42a3      	cmp	r3, r4
 802767e:	d9fa      	bls.n	8027676 <_free_r+0x46>
 8027680:	6811      	ldr	r1, [r2, #0]
 8027682:	1855      	adds	r5, r2, r1
 8027684:	42a5      	cmp	r5, r4
 8027686:	d10b      	bne.n	80276a0 <_free_r+0x70>
 8027688:	6824      	ldr	r4, [r4, #0]
 802768a:	4421      	add	r1, r4
 802768c:	1854      	adds	r4, r2, r1
 802768e:	42a3      	cmp	r3, r4
 8027690:	6011      	str	r1, [r2, #0]
 8027692:	d1e0      	bne.n	8027656 <_free_r+0x26>
 8027694:	681c      	ldr	r4, [r3, #0]
 8027696:	685b      	ldr	r3, [r3, #4]
 8027698:	6053      	str	r3, [r2, #4]
 802769a:	4421      	add	r1, r4
 802769c:	6011      	str	r1, [r2, #0]
 802769e:	e7da      	b.n	8027656 <_free_r+0x26>
 80276a0:	d902      	bls.n	80276a8 <_free_r+0x78>
 80276a2:	230c      	movs	r3, #12
 80276a4:	6003      	str	r3, [r0, #0]
 80276a6:	e7d6      	b.n	8027656 <_free_r+0x26>
 80276a8:	6825      	ldr	r5, [r4, #0]
 80276aa:	1961      	adds	r1, r4, r5
 80276ac:	428b      	cmp	r3, r1
 80276ae:	bf04      	itt	eq
 80276b0:	6819      	ldreq	r1, [r3, #0]
 80276b2:	685b      	ldreq	r3, [r3, #4]
 80276b4:	6063      	str	r3, [r4, #4]
 80276b6:	bf04      	itt	eq
 80276b8:	1949      	addeq	r1, r1, r5
 80276ba:	6021      	streq	r1, [r4, #0]
 80276bc:	6054      	str	r4, [r2, #4]
 80276be:	e7ca      	b.n	8027656 <_free_r+0x26>
 80276c0:	b003      	add	sp, #12
 80276c2:	bd30      	pop	{r4, r5, pc}
 80276c4:	20000348 	.word	0x20000348

080276c8 <sbrk_aligned>:
 80276c8:	b570      	push	{r4, r5, r6, lr}
 80276ca:	4e0e      	ldr	r6, [pc, #56]	; (8027704 <sbrk_aligned+0x3c>)
 80276cc:	460c      	mov	r4, r1
 80276ce:	6831      	ldr	r1, [r6, #0]
 80276d0:	4605      	mov	r5, r0
 80276d2:	b911      	cbnz	r1, 80276da <sbrk_aligned+0x12>
 80276d4:	f000 fa2e 	bl	8027b34 <_sbrk_r>
 80276d8:	6030      	str	r0, [r6, #0]
 80276da:	4621      	mov	r1, r4
 80276dc:	4628      	mov	r0, r5
 80276de:	f000 fa29 	bl	8027b34 <_sbrk_r>
 80276e2:	1c43      	adds	r3, r0, #1
 80276e4:	d00a      	beq.n	80276fc <sbrk_aligned+0x34>
 80276e6:	1cc4      	adds	r4, r0, #3
 80276e8:	f024 0403 	bic.w	r4, r4, #3
 80276ec:	42a0      	cmp	r0, r4
 80276ee:	d007      	beq.n	8027700 <sbrk_aligned+0x38>
 80276f0:	1a21      	subs	r1, r4, r0
 80276f2:	4628      	mov	r0, r5
 80276f4:	f000 fa1e 	bl	8027b34 <_sbrk_r>
 80276f8:	3001      	adds	r0, #1
 80276fa:	d101      	bne.n	8027700 <sbrk_aligned+0x38>
 80276fc:	f04f 34ff 	mov.w	r4, #4294967295
 8027700:	4620      	mov	r0, r4
 8027702:	bd70      	pop	{r4, r5, r6, pc}
 8027704:	2000034c 	.word	0x2000034c

08027708 <_malloc_r>:
 8027708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802770c:	1ccd      	adds	r5, r1, #3
 802770e:	f025 0503 	bic.w	r5, r5, #3
 8027712:	3508      	adds	r5, #8
 8027714:	2d0c      	cmp	r5, #12
 8027716:	bf38      	it	cc
 8027718:	250c      	movcc	r5, #12
 802771a:	2d00      	cmp	r5, #0
 802771c:	4607      	mov	r7, r0
 802771e:	db01      	blt.n	8027724 <_malloc_r+0x1c>
 8027720:	42a9      	cmp	r1, r5
 8027722:	d905      	bls.n	8027730 <_malloc_r+0x28>
 8027724:	230c      	movs	r3, #12
 8027726:	603b      	str	r3, [r7, #0]
 8027728:	2600      	movs	r6, #0
 802772a:	4630      	mov	r0, r6
 802772c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027730:	4e2e      	ldr	r6, [pc, #184]	; (80277ec <_malloc_r+0xe4>)
 8027732:	f000 fac3 	bl	8027cbc <__malloc_lock>
 8027736:	6833      	ldr	r3, [r6, #0]
 8027738:	461c      	mov	r4, r3
 802773a:	bb34      	cbnz	r4, 802778a <_malloc_r+0x82>
 802773c:	4629      	mov	r1, r5
 802773e:	4638      	mov	r0, r7
 8027740:	f7ff ffc2 	bl	80276c8 <sbrk_aligned>
 8027744:	1c43      	adds	r3, r0, #1
 8027746:	4604      	mov	r4, r0
 8027748:	d14d      	bne.n	80277e6 <_malloc_r+0xde>
 802774a:	6834      	ldr	r4, [r6, #0]
 802774c:	4626      	mov	r6, r4
 802774e:	2e00      	cmp	r6, #0
 8027750:	d140      	bne.n	80277d4 <_malloc_r+0xcc>
 8027752:	6823      	ldr	r3, [r4, #0]
 8027754:	4631      	mov	r1, r6
 8027756:	4638      	mov	r0, r7
 8027758:	eb04 0803 	add.w	r8, r4, r3
 802775c:	f000 f9ea 	bl	8027b34 <_sbrk_r>
 8027760:	4580      	cmp	r8, r0
 8027762:	d13a      	bne.n	80277da <_malloc_r+0xd2>
 8027764:	6821      	ldr	r1, [r4, #0]
 8027766:	3503      	adds	r5, #3
 8027768:	1a6d      	subs	r5, r5, r1
 802776a:	f025 0503 	bic.w	r5, r5, #3
 802776e:	3508      	adds	r5, #8
 8027770:	2d0c      	cmp	r5, #12
 8027772:	bf38      	it	cc
 8027774:	250c      	movcc	r5, #12
 8027776:	4629      	mov	r1, r5
 8027778:	4638      	mov	r0, r7
 802777a:	f7ff ffa5 	bl	80276c8 <sbrk_aligned>
 802777e:	3001      	adds	r0, #1
 8027780:	d02b      	beq.n	80277da <_malloc_r+0xd2>
 8027782:	6823      	ldr	r3, [r4, #0]
 8027784:	442b      	add	r3, r5
 8027786:	6023      	str	r3, [r4, #0]
 8027788:	e00e      	b.n	80277a8 <_malloc_r+0xa0>
 802778a:	6822      	ldr	r2, [r4, #0]
 802778c:	1b52      	subs	r2, r2, r5
 802778e:	d41e      	bmi.n	80277ce <_malloc_r+0xc6>
 8027790:	2a0b      	cmp	r2, #11
 8027792:	d916      	bls.n	80277c2 <_malloc_r+0xba>
 8027794:	1961      	adds	r1, r4, r5
 8027796:	42a3      	cmp	r3, r4
 8027798:	6025      	str	r5, [r4, #0]
 802779a:	bf18      	it	ne
 802779c:	6059      	strne	r1, [r3, #4]
 802779e:	6863      	ldr	r3, [r4, #4]
 80277a0:	bf08      	it	eq
 80277a2:	6031      	streq	r1, [r6, #0]
 80277a4:	5162      	str	r2, [r4, r5]
 80277a6:	604b      	str	r3, [r1, #4]
 80277a8:	4638      	mov	r0, r7
 80277aa:	f104 060b 	add.w	r6, r4, #11
 80277ae:	f000 fa8b 	bl	8027cc8 <__malloc_unlock>
 80277b2:	f026 0607 	bic.w	r6, r6, #7
 80277b6:	1d23      	adds	r3, r4, #4
 80277b8:	1af2      	subs	r2, r6, r3
 80277ba:	d0b6      	beq.n	802772a <_malloc_r+0x22>
 80277bc:	1b9b      	subs	r3, r3, r6
 80277be:	50a3      	str	r3, [r4, r2]
 80277c0:	e7b3      	b.n	802772a <_malloc_r+0x22>
 80277c2:	6862      	ldr	r2, [r4, #4]
 80277c4:	42a3      	cmp	r3, r4
 80277c6:	bf0c      	ite	eq
 80277c8:	6032      	streq	r2, [r6, #0]
 80277ca:	605a      	strne	r2, [r3, #4]
 80277cc:	e7ec      	b.n	80277a8 <_malloc_r+0xa0>
 80277ce:	4623      	mov	r3, r4
 80277d0:	6864      	ldr	r4, [r4, #4]
 80277d2:	e7b2      	b.n	802773a <_malloc_r+0x32>
 80277d4:	4634      	mov	r4, r6
 80277d6:	6876      	ldr	r6, [r6, #4]
 80277d8:	e7b9      	b.n	802774e <_malloc_r+0x46>
 80277da:	230c      	movs	r3, #12
 80277dc:	603b      	str	r3, [r7, #0]
 80277de:	4638      	mov	r0, r7
 80277e0:	f000 fa72 	bl	8027cc8 <__malloc_unlock>
 80277e4:	e7a1      	b.n	802772a <_malloc_r+0x22>
 80277e6:	6025      	str	r5, [r4, #0]
 80277e8:	e7de      	b.n	80277a8 <_malloc_r+0xa0>
 80277ea:	bf00      	nop
 80277ec:	20000348 	.word	0x20000348

080277f0 <__sfputc_r>:
 80277f0:	6893      	ldr	r3, [r2, #8]
 80277f2:	3b01      	subs	r3, #1
 80277f4:	2b00      	cmp	r3, #0
 80277f6:	b410      	push	{r4}
 80277f8:	6093      	str	r3, [r2, #8]
 80277fa:	da08      	bge.n	802780e <__sfputc_r+0x1e>
 80277fc:	6994      	ldr	r4, [r2, #24]
 80277fe:	42a3      	cmp	r3, r4
 8027800:	db01      	blt.n	8027806 <__sfputc_r+0x16>
 8027802:	290a      	cmp	r1, #10
 8027804:	d103      	bne.n	802780e <__sfputc_r+0x1e>
 8027806:	f85d 4b04 	ldr.w	r4, [sp], #4
 802780a:	f7fe b9d3 	b.w	8025bb4 <__swbuf_r>
 802780e:	6813      	ldr	r3, [r2, #0]
 8027810:	1c58      	adds	r0, r3, #1
 8027812:	6010      	str	r0, [r2, #0]
 8027814:	7019      	strb	r1, [r3, #0]
 8027816:	4608      	mov	r0, r1
 8027818:	f85d 4b04 	ldr.w	r4, [sp], #4
 802781c:	4770      	bx	lr

0802781e <__sfputs_r>:
 802781e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027820:	4606      	mov	r6, r0
 8027822:	460f      	mov	r7, r1
 8027824:	4614      	mov	r4, r2
 8027826:	18d5      	adds	r5, r2, r3
 8027828:	42ac      	cmp	r4, r5
 802782a:	d101      	bne.n	8027830 <__sfputs_r+0x12>
 802782c:	2000      	movs	r0, #0
 802782e:	e007      	b.n	8027840 <__sfputs_r+0x22>
 8027830:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027834:	463a      	mov	r2, r7
 8027836:	4630      	mov	r0, r6
 8027838:	f7ff ffda 	bl	80277f0 <__sfputc_r>
 802783c:	1c43      	adds	r3, r0, #1
 802783e:	d1f3      	bne.n	8027828 <__sfputs_r+0xa>
 8027840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08027844 <_vfiprintf_r>:
 8027844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027848:	460d      	mov	r5, r1
 802784a:	b09d      	sub	sp, #116	; 0x74
 802784c:	4614      	mov	r4, r2
 802784e:	4698      	mov	r8, r3
 8027850:	4606      	mov	r6, r0
 8027852:	b118      	cbz	r0, 802785c <_vfiprintf_r+0x18>
 8027854:	6983      	ldr	r3, [r0, #24]
 8027856:	b90b      	cbnz	r3, 802785c <_vfiprintf_r+0x18>
 8027858:	f7ff fa1e 	bl	8026c98 <__sinit>
 802785c:	4b89      	ldr	r3, [pc, #548]	; (8027a84 <_vfiprintf_r+0x240>)
 802785e:	429d      	cmp	r5, r3
 8027860:	d11b      	bne.n	802789a <_vfiprintf_r+0x56>
 8027862:	6875      	ldr	r5, [r6, #4]
 8027864:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8027866:	07d9      	lsls	r1, r3, #31
 8027868:	d405      	bmi.n	8027876 <_vfiprintf_r+0x32>
 802786a:	89ab      	ldrh	r3, [r5, #12]
 802786c:	059a      	lsls	r2, r3, #22
 802786e:	d402      	bmi.n	8027876 <_vfiprintf_r+0x32>
 8027870:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8027872:	f7ff fac6 	bl	8026e02 <__retarget_lock_acquire_recursive>
 8027876:	89ab      	ldrh	r3, [r5, #12]
 8027878:	071b      	lsls	r3, r3, #28
 802787a:	d501      	bpl.n	8027880 <_vfiprintf_r+0x3c>
 802787c:	692b      	ldr	r3, [r5, #16]
 802787e:	b9eb      	cbnz	r3, 80278bc <_vfiprintf_r+0x78>
 8027880:	4629      	mov	r1, r5
 8027882:	4630      	mov	r0, r6
 8027884:	f7fe f9e8 	bl	8025c58 <__swsetup_r>
 8027888:	b1c0      	cbz	r0, 80278bc <_vfiprintf_r+0x78>
 802788a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802788c:	07dc      	lsls	r4, r3, #31
 802788e:	d50e      	bpl.n	80278ae <_vfiprintf_r+0x6a>
 8027890:	f04f 30ff 	mov.w	r0, #4294967295
 8027894:	b01d      	add	sp, #116	; 0x74
 8027896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802789a:	4b7b      	ldr	r3, [pc, #492]	; (8027a88 <_vfiprintf_r+0x244>)
 802789c:	429d      	cmp	r5, r3
 802789e:	d101      	bne.n	80278a4 <_vfiprintf_r+0x60>
 80278a0:	68b5      	ldr	r5, [r6, #8]
 80278a2:	e7df      	b.n	8027864 <_vfiprintf_r+0x20>
 80278a4:	4b79      	ldr	r3, [pc, #484]	; (8027a8c <_vfiprintf_r+0x248>)
 80278a6:	429d      	cmp	r5, r3
 80278a8:	bf08      	it	eq
 80278aa:	68f5      	ldreq	r5, [r6, #12]
 80278ac:	e7da      	b.n	8027864 <_vfiprintf_r+0x20>
 80278ae:	89ab      	ldrh	r3, [r5, #12]
 80278b0:	0598      	lsls	r0, r3, #22
 80278b2:	d4ed      	bmi.n	8027890 <_vfiprintf_r+0x4c>
 80278b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80278b6:	f7ff faa5 	bl	8026e04 <__retarget_lock_release_recursive>
 80278ba:	e7e9      	b.n	8027890 <_vfiprintf_r+0x4c>
 80278bc:	2300      	movs	r3, #0
 80278be:	9309      	str	r3, [sp, #36]	; 0x24
 80278c0:	2320      	movs	r3, #32
 80278c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80278c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80278ca:	2330      	movs	r3, #48	; 0x30
 80278cc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8027a90 <_vfiprintf_r+0x24c>
 80278d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80278d4:	f04f 0901 	mov.w	r9, #1
 80278d8:	4623      	mov	r3, r4
 80278da:	469a      	mov	sl, r3
 80278dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80278e0:	b10a      	cbz	r2, 80278e6 <_vfiprintf_r+0xa2>
 80278e2:	2a25      	cmp	r2, #37	; 0x25
 80278e4:	d1f9      	bne.n	80278da <_vfiprintf_r+0x96>
 80278e6:	ebba 0b04 	subs.w	fp, sl, r4
 80278ea:	d00b      	beq.n	8027904 <_vfiprintf_r+0xc0>
 80278ec:	465b      	mov	r3, fp
 80278ee:	4622      	mov	r2, r4
 80278f0:	4629      	mov	r1, r5
 80278f2:	4630      	mov	r0, r6
 80278f4:	f7ff ff93 	bl	802781e <__sfputs_r>
 80278f8:	3001      	adds	r0, #1
 80278fa:	f000 80aa 	beq.w	8027a52 <_vfiprintf_r+0x20e>
 80278fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027900:	445a      	add	r2, fp
 8027902:	9209      	str	r2, [sp, #36]	; 0x24
 8027904:	f89a 3000 	ldrb.w	r3, [sl]
 8027908:	2b00      	cmp	r3, #0
 802790a:	f000 80a2 	beq.w	8027a52 <_vfiprintf_r+0x20e>
 802790e:	2300      	movs	r3, #0
 8027910:	f04f 32ff 	mov.w	r2, #4294967295
 8027914:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8027918:	f10a 0a01 	add.w	sl, sl, #1
 802791c:	9304      	str	r3, [sp, #16]
 802791e:	9307      	str	r3, [sp, #28]
 8027920:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8027924:	931a      	str	r3, [sp, #104]	; 0x68
 8027926:	4654      	mov	r4, sl
 8027928:	2205      	movs	r2, #5
 802792a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802792e:	4858      	ldr	r0, [pc, #352]	; (8027a90 <_vfiprintf_r+0x24c>)
 8027930:	f7f8 fc6e 	bl	8020210 <memchr>
 8027934:	9a04      	ldr	r2, [sp, #16]
 8027936:	b9d8      	cbnz	r0, 8027970 <_vfiprintf_r+0x12c>
 8027938:	06d1      	lsls	r1, r2, #27
 802793a:	bf44      	itt	mi
 802793c:	2320      	movmi	r3, #32
 802793e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8027942:	0713      	lsls	r3, r2, #28
 8027944:	bf44      	itt	mi
 8027946:	232b      	movmi	r3, #43	; 0x2b
 8027948:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802794c:	f89a 3000 	ldrb.w	r3, [sl]
 8027950:	2b2a      	cmp	r3, #42	; 0x2a
 8027952:	d015      	beq.n	8027980 <_vfiprintf_r+0x13c>
 8027954:	9a07      	ldr	r2, [sp, #28]
 8027956:	4654      	mov	r4, sl
 8027958:	2000      	movs	r0, #0
 802795a:	f04f 0c0a 	mov.w	ip, #10
 802795e:	4621      	mov	r1, r4
 8027960:	f811 3b01 	ldrb.w	r3, [r1], #1
 8027964:	3b30      	subs	r3, #48	; 0x30
 8027966:	2b09      	cmp	r3, #9
 8027968:	d94e      	bls.n	8027a08 <_vfiprintf_r+0x1c4>
 802796a:	b1b0      	cbz	r0, 802799a <_vfiprintf_r+0x156>
 802796c:	9207      	str	r2, [sp, #28]
 802796e:	e014      	b.n	802799a <_vfiprintf_r+0x156>
 8027970:	eba0 0308 	sub.w	r3, r0, r8
 8027974:	fa09 f303 	lsl.w	r3, r9, r3
 8027978:	4313      	orrs	r3, r2
 802797a:	9304      	str	r3, [sp, #16]
 802797c:	46a2      	mov	sl, r4
 802797e:	e7d2      	b.n	8027926 <_vfiprintf_r+0xe2>
 8027980:	9b03      	ldr	r3, [sp, #12]
 8027982:	1d19      	adds	r1, r3, #4
 8027984:	681b      	ldr	r3, [r3, #0]
 8027986:	9103      	str	r1, [sp, #12]
 8027988:	2b00      	cmp	r3, #0
 802798a:	bfbb      	ittet	lt
 802798c:	425b      	neglt	r3, r3
 802798e:	f042 0202 	orrlt.w	r2, r2, #2
 8027992:	9307      	strge	r3, [sp, #28]
 8027994:	9307      	strlt	r3, [sp, #28]
 8027996:	bfb8      	it	lt
 8027998:	9204      	strlt	r2, [sp, #16]
 802799a:	7823      	ldrb	r3, [r4, #0]
 802799c:	2b2e      	cmp	r3, #46	; 0x2e
 802799e:	d10c      	bne.n	80279ba <_vfiprintf_r+0x176>
 80279a0:	7863      	ldrb	r3, [r4, #1]
 80279a2:	2b2a      	cmp	r3, #42	; 0x2a
 80279a4:	d135      	bne.n	8027a12 <_vfiprintf_r+0x1ce>
 80279a6:	9b03      	ldr	r3, [sp, #12]
 80279a8:	1d1a      	adds	r2, r3, #4
 80279aa:	681b      	ldr	r3, [r3, #0]
 80279ac:	9203      	str	r2, [sp, #12]
 80279ae:	2b00      	cmp	r3, #0
 80279b0:	bfb8      	it	lt
 80279b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80279b6:	3402      	adds	r4, #2
 80279b8:	9305      	str	r3, [sp, #20]
 80279ba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8027aa0 <_vfiprintf_r+0x25c>
 80279be:	7821      	ldrb	r1, [r4, #0]
 80279c0:	2203      	movs	r2, #3
 80279c2:	4650      	mov	r0, sl
 80279c4:	f7f8 fc24 	bl	8020210 <memchr>
 80279c8:	b140      	cbz	r0, 80279dc <_vfiprintf_r+0x198>
 80279ca:	2340      	movs	r3, #64	; 0x40
 80279cc:	eba0 000a 	sub.w	r0, r0, sl
 80279d0:	fa03 f000 	lsl.w	r0, r3, r0
 80279d4:	9b04      	ldr	r3, [sp, #16]
 80279d6:	4303      	orrs	r3, r0
 80279d8:	3401      	adds	r4, #1
 80279da:	9304      	str	r3, [sp, #16]
 80279dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80279e0:	482c      	ldr	r0, [pc, #176]	; (8027a94 <_vfiprintf_r+0x250>)
 80279e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80279e6:	2206      	movs	r2, #6
 80279e8:	f7f8 fc12 	bl	8020210 <memchr>
 80279ec:	2800      	cmp	r0, #0
 80279ee:	d03f      	beq.n	8027a70 <_vfiprintf_r+0x22c>
 80279f0:	4b29      	ldr	r3, [pc, #164]	; (8027a98 <_vfiprintf_r+0x254>)
 80279f2:	bb1b      	cbnz	r3, 8027a3c <_vfiprintf_r+0x1f8>
 80279f4:	9b03      	ldr	r3, [sp, #12]
 80279f6:	3307      	adds	r3, #7
 80279f8:	f023 0307 	bic.w	r3, r3, #7
 80279fc:	3308      	adds	r3, #8
 80279fe:	9303      	str	r3, [sp, #12]
 8027a00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027a02:	443b      	add	r3, r7
 8027a04:	9309      	str	r3, [sp, #36]	; 0x24
 8027a06:	e767      	b.n	80278d8 <_vfiprintf_r+0x94>
 8027a08:	fb0c 3202 	mla	r2, ip, r2, r3
 8027a0c:	460c      	mov	r4, r1
 8027a0e:	2001      	movs	r0, #1
 8027a10:	e7a5      	b.n	802795e <_vfiprintf_r+0x11a>
 8027a12:	2300      	movs	r3, #0
 8027a14:	3401      	adds	r4, #1
 8027a16:	9305      	str	r3, [sp, #20]
 8027a18:	4619      	mov	r1, r3
 8027a1a:	f04f 0c0a 	mov.w	ip, #10
 8027a1e:	4620      	mov	r0, r4
 8027a20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8027a24:	3a30      	subs	r2, #48	; 0x30
 8027a26:	2a09      	cmp	r2, #9
 8027a28:	d903      	bls.n	8027a32 <_vfiprintf_r+0x1ee>
 8027a2a:	2b00      	cmp	r3, #0
 8027a2c:	d0c5      	beq.n	80279ba <_vfiprintf_r+0x176>
 8027a2e:	9105      	str	r1, [sp, #20]
 8027a30:	e7c3      	b.n	80279ba <_vfiprintf_r+0x176>
 8027a32:	fb0c 2101 	mla	r1, ip, r1, r2
 8027a36:	4604      	mov	r4, r0
 8027a38:	2301      	movs	r3, #1
 8027a3a:	e7f0      	b.n	8027a1e <_vfiprintf_r+0x1da>
 8027a3c:	ab03      	add	r3, sp, #12
 8027a3e:	9300      	str	r3, [sp, #0]
 8027a40:	462a      	mov	r2, r5
 8027a42:	4b16      	ldr	r3, [pc, #88]	; (8027a9c <_vfiprintf_r+0x258>)
 8027a44:	a904      	add	r1, sp, #16
 8027a46:	4630      	mov	r0, r6
 8027a48:	f7fd fa90 	bl	8024f6c <_printf_float>
 8027a4c:	4607      	mov	r7, r0
 8027a4e:	1c78      	adds	r0, r7, #1
 8027a50:	d1d6      	bne.n	8027a00 <_vfiprintf_r+0x1bc>
 8027a52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8027a54:	07d9      	lsls	r1, r3, #31
 8027a56:	d405      	bmi.n	8027a64 <_vfiprintf_r+0x220>
 8027a58:	89ab      	ldrh	r3, [r5, #12]
 8027a5a:	059a      	lsls	r2, r3, #22
 8027a5c:	d402      	bmi.n	8027a64 <_vfiprintf_r+0x220>
 8027a5e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8027a60:	f7ff f9d0 	bl	8026e04 <__retarget_lock_release_recursive>
 8027a64:	89ab      	ldrh	r3, [r5, #12]
 8027a66:	065b      	lsls	r3, r3, #25
 8027a68:	f53f af12 	bmi.w	8027890 <_vfiprintf_r+0x4c>
 8027a6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8027a6e:	e711      	b.n	8027894 <_vfiprintf_r+0x50>
 8027a70:	ab03      	add	r3, sp, #12
 8027a72:	9300      	str	r3, [sp, #0]
 8027a74:	462a      	mov	r2, r5
 8027a76:	4b09      	ldr	r3, [pc, #36]	; (8027a9c <_vfiprintf_r+0x258>)
 8027a78:	a904      	add	r1, sp, #16
 8027a7a:	4630      	mov	r0, r6
 8027a7c:	f7fd fd1a 	bl	80254b4 <_printf_i>
 8027a80:	e7e4      	b.n	8027a4c <_vfiprintf_r+0x208>
 8027a82:	bf00      	nop
 8027a84:	08028610 	.word	0x08028610
 8027a88:	08028630 	.word	0x08028630
 8027a8c:	080285f0 	.word	0x080285f0
 8027a90:	080287ac 	.word	0x080287ac
 8027a94:	080287b6 	.word	0x080287b6
 8027a98:	08024f6d 	.word	0x08024f6d
 8027a9c:	0802781f 	.word	0x0802781f
 8027aa0:	080287b2 	.word	0x080287b2

08027aa4 <_putc_r>:
 8027aa4:	b570      	push	{r4, r5, r6, lr}
 8027aa6:	460d      	mov	r5, r1
 8027aa8:	4614      	mov	r4, r2
 8027aaa:	4606      	mov	r6, r0
 8027aac:	b118      	cbz	r0, 8027ab6 <_putc_r+0x12>
 8027aae:	6983      	ldr	r3, [r0, #24]
 8027ab0:	b90b      	cbnz	r3, 8027ab6 <_putc_r+0x12>
 8027ab2:	f7ff f8f1 	bl	8026c98 <__sinit>
 8027ab6:	4b1c      	ldr	r3, [pc, #112]	; (8027b28 <_putc_r+0x84>)
 8027ab8:	429c      	cmp	r4, r3
 8027aba:	d124      	bne.n	8027b06 <_putc_r+0x62>
 8027abc:	6874      	ldr	r4, [r6, #4]
 8027abe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8027ac0:	07d8      	lsls	r0, r3, #31
 8027ac2:	d405      	bmi.n	8027ad0 <_putc_r+0x2c>
 8027ac4:	89a3      	ldrh	r3, [r4, #12]
 8027ac6:	0599      	lsls	r1, r3, #22
 8027ac8:	d402      	bmi.n	8027ad0 <_putc_r+0x2c>
 8027aca:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8027acc:	f7ff f999 	bl	8026e02 <__retarget_lock_acquire_recursive>
 8027ad0:	68a3      	ldr	r3, [r4, #8]
 8027ad2:	3b01      	subs	r3, #1
 8027ad4:	2b00      	cmp	r3, #0
 8027ad6:	60a3      	str	r3, [r4, #8]
 8027ad8:	da05      	bge.n	8027ae6 <_putc_r+0x42>
 8027ada:	69a2      	ldr	r2, [r4, #24]
 8027adc:	4293      	cmp	r3, r2
 8027ade:	db1c      	blt.n	8027b1a <_putc_r+0x76>
 8027ae0:	b2eb      	uxtb	r3, r5
 8027ae2:	2b0a      	cmp	r3, #10
 8027ae4:	d019      	beq.n	8027b1a <_putc_r+0x76>
 8027ae6:	6823      	ldr	r3, [r4, #0]
 8027ae8:	1c5a      	adds	r2, r3, #1
 8027aea:	6022      	str	r2, [r4, #0]
 8027aec:	701d      	strb	r5, [r3, #0]
 8027aee:	b2ed      	uxtb	r5, r5
 8027af0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8027af2:	07da      	lsls	r2, r3, #31
 8027af4:	d405      	bmi.n	8027b02 <_putc_r+0x5e>
 8027af6:	89a3      	ldrh	r3, [r4, #12]
 8027af8:	059b      	lsls	r3, r3, #22
 8027afa:	d402      	bmi.n	8027b02 <_putc_r+0x5e>
 8027afc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8027afe:	f7ff f981 	bl	8026e04 <__retarget_lock_release_recursive>
 8027b02:	4628      	mov	r0, r5
 8027b04:	bd70      	pop	{r4, r5, r6, pc}
 8027b06:	4b09      	ldr	r3, [pc, #36]	; (8027b2c <_putc_r+0x88>)
 8027b08:	429c      	cmp	r4, r3
 8027b0a:	d101      	bne.n	8027b10 <_putc_r+0x6c>
 8027b0c:	68b4      	ldr	r4, [r6, #8]
 8027b0e:	e7d6      	b.n	8027abe <_putc_r+0x1a>
 8027b10:	4b07      	ldr	r3, [pc, #28]	; (8027b30 <_putc_r+0x8c>)
 8027b12:	429c      	cmp	r4, r3
 8027b14:	bf08      	it	eq
 8027b16:	68f4      	ldreq	r4, [r6, #12]
 8027b18:	e7d1      	b.n	8027abe <_putc_r+0x1a>
 8027b1a:	4629      	mov	r1, r5
 8027b1c:	4622      	mov	r2, r4
 8027b1e:	4630      	mov	r0, r6
 8027b20:	f7fe f848 	bl	8025bb4 <__swbuf_r>
 8027b24:	4605      	mov	r5, r0
 8027b26:	e7e3      	b.n	8027af0 <_putc_r+0x4c>
 8027b28:	08028610 	.word	0x08028610
 8027b2c:	08028630 	.word	0x08028630
 8027b30:	080285f0 	.word	0x080285f0

08027b34 <_sbrk_r>:
 8027b34:	b538      	push	{r3, r4, r5, lr}
 8027b36:	4d06      	ldr	r5, [pc, #24]	; (8027b50 <_sbrk_r+0x1c>)
 8027b38:	2300      	movs	r3, #0
 8027b3a:	4604      	mov	r4, r0
 8027b3c:	4608      	mov	r0, r1
 8027b3e:	602b      	str	r3, [r5, #0]
 8027b40:	f7f9 fef4 	bl	802192c <_sbrk>
 8027b44:	1c43      	adds	r3, r0, #1
 8027b46:	d102      	bne.n	8027b4e <_sbrk_r+0x1a>
 8027b48:	682b      	ldr	r3, [r5, #0]
 8027b4a:	b103      	cbz	r3, 8027b4e <_sbrk_r+0x1a>
 8027b4c:	6023      	str	r3, [r4, #0]
 8027b4e:	bd38      	pop	{r3, r4, r5, pc}
 8027b50:	20000350 	.word	0x20000350

08027b54 <__sread>:
 8027b54:	b510      	push	{r4, lr}
 8027b56:	460c      	mov	r4, r1
 8027b58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027b5c:	f000 f8ba 	bl	8027cd4 <_read_r>
 8027b60:	2800      	cmp	r0, #0
 8027b62:	bfab      	itete	ge
 8027b64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8027b66:	89a3      	ldrhlt	r3, [r4, #12]
 8027b68:	181b      	addge	r3, r3, r0
 8027b6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8027b6e:	bfac      	ite	ge
 8027b70:	6563      	strge	r3, [r4, #84]	; 0x54
 8027b72:	81a3      	strhlt	r3, [r4, #12]
 8027b74:	bd10      	pop	{r4, pc}

08027b76 <__swrite>:
 8027b76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027b7a:	461f      	mov	r7, r3
 8027b7c:	898b      	ldrh	r3, [r1, #12]
 8027b7e:	05db      	lsls	r3, r3, #23
 8027b80:	4605      	mov	r5, r0
 8027b82:	460c      	mov	r4, r1
 8027b84:	4616      	mov	r6, r2
 8027b86:	d505      	bpl.n	8027b94 <__swrite+0x1e>
 8027b88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027b8c:	2302      	movs	r3, #2
 8027b8e:	2200      	movs	r2, #0
 8027b90:	f000 f870 	bl	8027c74 <_lseek_r>
 8027b94:	89a3      	ldrh	r3, [r4, #12]
 8027b96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8027b9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8027b9e:	81a3      	strh	r3, [r4, #12]
 8027ba0:	4632      	mov	r2, r6
 8027ba2:	463b      	mov	r3, r7
 8027ba4:	4628      	mov	r0, r5
 8027ba6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8027baa:	f000 b817 	b.w	8027bdc <_write_r>

08027bae <__sseek>:
 8027bae:	b510      	push	{r4, lr}
 8027bb0:	460c      	mov	r4, r1
 8027bb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027bb6:	f000 f85d 	bl	8027c74 <_lseek_r>
 8027bba:	1c43      	adds	r3, r0, #1
 8027bbc:	89a3      	ldrh	r3, [r4, #12]
 8027bbe:	bf15      	itete	ne
 8027bc0:	6560      	strne	r0, [r4, #84]	; 0x54
 8027bc2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8027bc6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8027bca:	81a3      	strheq	r3, [r4, #12]
 8027bcc:	bf18      	it	ne
 8027bce:	81a3      	strhne	r3, [r4, #12]
 8027bd0:	bd10      	pop	{r4, pc}

08027bd2 <__sclose>:
 8027bd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027bd6:	f000 b81b 	b.w	8027c10 <_close_r>
	...

08027bdc <_write_r>:
 8027bdc:	b538      	push	{r3, r4, r5, lr}
 8027bde:	4d07      	ldr	r5, [pc, #28]	; (8027bfc <_write_r+0x20>)
 8027be0:	4604      	mov	r4, r0
 8027be2:	4608      	mov	r0, r1
 8027be4:	4611      	mov	r1, r2
 8027be6:	2200      	movs	r2, #0
 8027be8:	602a      	str	r2, [r5, #0]
 8027bea:	461a      	mov	r2, r3
 8027bec:	f7f9 fe4d 	bl	802188a <_write>
 8027bf0:	1c43      	adds	r3, r0, #1
 8027bf2:	d102      	bne.n	8027bfa <_write_r+0x1e>
 8027bf4:	682b      	ldr	r3, [r5, #0]
 8027bf6:	b103      	cbz	r3, 8027bfa <_write_r+0x1e>
 8027bf8:	6023      	str	r3, [r4, #0]
 8027bfa:	bd38      	pop	{r3, r4, r5, pc}
 8027bfc:	20000350 	.word	0x20000350

08027c00 <abort>:
 8027c00:	b508      	push	{r3, lr}
 8027c02:	2006      	movs	r0, #6
 8027c04:	f000 f8a0 	bl	8027d48 <raise>
 8027c08:	2001      	movs	r0, #1
 8027c0a:	f7f9 fe17 	bl	802183c <_exit>
	...

08027c10 <_close_r>:
 8027c10:	b538      	push	{r3, r4, r5, lr}
 8027c12:	4d06      	ldr	r5, [pc, #24]	; (8027c2c <_close_r+0x1c>)
 8027c14:	2300      	movs	r3, #0
 8027c16:	4604      	mov	r4, r0
 8027c18:	4608      	mov	r0, r1
 8027c1a:	602b      	str	r3, [r5, #0]
 8027c1c:	f7f9 fe51 	bl	80218c2 <_close>
 8027c20:	1c43      	adds	r3, r0, #1
 8027c22:	d102      	bne.n	8027c2a <_close_r+0x1a>
 8027c24:	682b      	ldr	r3, [r5, #0]
 8027c26:	b103      	cbz	r3, 8027c2a <_close_r+0x1a>
 8027c28:	6023      	str	r3, [r4, #0]
 8027c2a:	bd38      	pop	{r3, r4, r5, pc}
 8027c2c:	20000350 	.word	0x20000350

08027c30 <_fstat_r>:
 8027c30:	b538      	push	{r3, r4, r5, lr}
 8027c32:	4d07      	ldr	r5, [pc, #28]	; (8027c50 <_fstat_r+0x20>)
 8027c34:	2300      	movs	r3, #0
 8027c36:	4604      	mov	r4, r0
 8027c38:	4608      	mov	r0, r1
 8027c3a:	4611      	mov	r1, r2
 8027c3c:	602b      	str	r3, [r5, #0]
 8027c3e:	f7f9 fe4c 	bl	80218da <_fstat>
 8027c42:	1c43      	adds	r3, r0, #1
 8027c44:	d102      	bne.n	8027c4c <_fstat_r+0x1c>
 8027c46:	682b      	ldr	r3, [r5, #0]
 8027c48:	b103      	cbz	r3, 8027c4c <_fstat_r+0x1c>
 8027c4a:	6023      	str	r3, [r4, #0]
 8027c4c:	bd38      	pop	{r3, r4, r5, pc}
 8027c4e:	bf00      	nop
 8027c50:	20000350 	.word	0x20000350

08027c54 <_isatty_r>:
 8027c54:	b538      	push	{r3, r4, r5, lr}
 8027c56:	4d06      	ldr	r5, [pc, #24]	; (8027c70 <_isatty_r+0x1c>)
 8027c58:	2300      	movs	r3, #0
 8027c5a:	4604      	mov	r4, r0
 8027c5c:	4608      	mov	r0, r1
 8027c5e:	602b      	str	r3, [r5, #0]
 8027c60:	f7f9 fe4b 	bl	80218fa <_isatty>
 8027c64:	1c43      	adds	r3, r0, #1
 8027c66:	d102      	bne.n	8027c6e <_isatty_r+0x1a>
 8027c68:	682b      	ldr	r3, [r5, #0]
 8027c6a:	b103      	cbz	r3, 8027c6e <_isatty_r+0x1a>
 8027c6c:	6023      	str	r3, [r4, #0]
 8027c6e:	bd38      	pop	{r3, r4, r5, pc}
 8027c70:	20000350 	.word	0x20000350

08027c74 <_lseek_r>:
 8027c74:	b538      	push	{r3, r4, r5, lr}
 8027c76:	4d07      	ldr	r5, [pc, #28]	; (8027c94 <_lseek_r+0x20>)
 8027c78:	4604      	mov	r4, r0
 8027c7a:	4608      	mov	r0, r1
 8027c7c:	4611      	mov	r1, r2
 8027c7e:	2200      	movs	r2, #0
 8027c80:	602a      	str	r2, [r5, #0]
 8027c82:	461a      	mov	r2, r3
 8027c84:	f7f9 fe44 	bl	8021910 <_lseek>
 8027c88:	1c43      	adds	r3, r0, #1
 8027c8a:	d102      	bne.n	8027c92 <_lseek_r+0x1e>
 8027c8c:	682b      	ldr	r3, [r5, #0]
 8027c8e:	b103      	cbz	r3, 8027c92 <_lseek_r+0x1e>
 8027c90:	6023      	str	r3, [r4, #0]
 8027c92:	bd38      	pop	{r3, r4, r5, pc}
 8027c94:	20000350 	.word	0x20000350

08027c98 <__ascii_mbtowc>:
 8027c98:	b082      	sub	sp, #8
 8027c9a:	b901      	cbnz	r1, 8027c9e <__ascii_mbtowc+0x6>
 8027c9c:	a901      	add	r1, sp, #4
 8027c9e:	b142      	cbz	r2, 8027cb2 <__ascii_mbtowc+0x1a>
 8027ca0:	b14b      	cbz	r3, 8027cb6 <__ascii_mbtowc+0x1e>
 8027ca2:	7813      	ldrb	r3, [r2, #0]
 8027ca4:	600b      	str	r3, [r1, #0]
 8027ca6:	7812      	ldrb	r2, [r2, #0]
 8027ca8:	1e10      	subs	r0, r2, #0
 8027caa:	bf18      	it	ne
 8027cac:	2001      	movne	r0, #1
 8027cae:	b002      	add	sp, #8
 8027cb0:	4770      	bx	lr
 8027cb2:	4610      	mov	r0, r2
 8027cb4:	e7fb      	b.n	8027cae <__ascii_mbtowc+0x16>
 8027cb6:	f06f 0001 	mvn.w	r0, #1
 8027cba:	e7f8      	b.n	8027cae <__ascii_mbtowc+0x16>

08027cbc <__malloc_lock>:
 8027cbc:	4801      	ldr	r0, [pc, #4]	; (8027cc4 <__malloc_lock+0x8>)
 8027cbe:	f7ff b8a0 	b.w	8026e02 <__retarget_lock_acquire_recursive>
 8027cc2:	bf00      	nop
 8027cc4:	20000344 	.word	0x20000344

08027cc8 <__malloc_unlock>:
 8027cc8:	4801      	ldr	r0, [pc, #4]	; (8027cd0 <__malloc_unlock+0x8>)
 8027cca:	f7ff b89b 	b.w	8026e04 <__retarget_lock_release_recursive>
 8027cce:	bf00      	nop
 8027cd0:	20000344 	.word	0x20000344

08027cd4 <_read_r>:
 8027cd4:	b538      	push	{r3, r4, r5, lr}
 8027cd6:	4d07      	ldr	r5, [pc, #28]	; (8027cf4 <_read_r+0x20>)
 8027cd8:	4604      	mov	r4, r0
 8027cda:	4608      	mov	r0, r1
 8027cdc:	4611      	mov	r1, r2
 8027cde:	2200      	movs	r2, #0
 8027ce0:	602a      	str	r2, [r5, #0]
 8027ce2:	461a      	mov	r2, r3
 8027ce4:	f7f9 fdb4 	bl	8021850 <_read>
 8027ce8:	1c43      	adds	r3, r0, #1
 8027cea:	d102      	bne.n	8027cf2 <_read_r+0x1e>
 8027cec:	682b      	ldr	r3, [r5, #0]
 8027cee:	b103      	cbz	r3, 8027cf2 <_read_r+0x1e>
 8027cf0:	6023      	str	r3, [r4, #0]
 8027cf2:	bd38      	pop	{r3, r4, r5, pc}
 8027cf4:	20000350 	.word	0x20000350

08027cf8 <_raise_r>:
 8027cf8:	291f      	cmp	r1, #31
 8027cfa:	b538      	push	{r3, r4, r5, lr}
 8027cfc:	4604      	mov	r4, r0
 8027cfe:	460d      	mov	r5, r1
 8027d00:	d904      	bls.n	8027d0c <_raise_r+0x14>
 8027d02:	2316      	movs	r3, #22
 8027d04:	6003      	str	r3, [r0, #0]
 8027d06:	f04f 30ff 	mov.w	r0, #4294967295
 8027d0a:	bd38      	pop	{r3, r4, r5, pc}
 8027d0c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8027d0e:	b112      	cbz	r2, 8027d16 <_raise_r+0x1e>
 8027d10:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8027d14:	b94b      	cbnz	r3, 8027d2a <_raise_r+0x32>
 8027d16:	4620      	mov	r0, r4
 8027d18:	f000 f830 	bl	8027d7c <_getpid_r>
 8027d1c:	462a      	mov	r2, r5
 8027d1e:	4601      	mov	r1, r0
 8027d20:	4620      	mov	r0, r4
 8027d22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8027d26:	f000 b817 	b.w	8027d58 <_kill_r>
 8027d2a:	2b01      	cmp	r3, #1
 8027d2c:	d00a      	beq.n	8027d44 <_raise_r+0x4c>
 8027d2e:	1c59      	adds	r1, r3, #1
 8027d30:	d103      	bne.n	8027d3a <_raise_r+0x42>
 8027d32:	2316      	movs	r3, #22
 8027d34:	6003      	str	r3, [r0, #0]
 8027d36:	2001      	movs	r0, #1
 8027d38:	e7e7      	b.n	8027d0a <_raise_r+0x12>
 8027d3a:	2400      	movs	r4, #0
 8027d3c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8027d40:	4628      	mov	r0, r5
 8027d42:	4798      	blx	r3
 8027d44:	2000      	movs	r0, #0
 8027d46:	e7e0      	b.n	8027d0a <_raise_r+0x12>

08027d48 <raise>:
 8027d48:	4b02      	ldr	r3, [pc, #8]	; (8027d54 <raise+0xc>)
 8027d4a:	4601      	mov	r1, r0
 8027d4c:	6818      	ldr	r0, [r3, #0]
 8027d4e:	f7ff bfd3 	b.w	8027cf8 <_raise_r>
 8027d52:	bf00      	nop
 8027d54:	20000010 	.word	0x20000010

08027d58 <_kill_r>:
 8027d58:	b538      	push	{r3, r4, r5, lr}
 8027d5a:	4d07      	ldr	r5, [pc, #28]	; (8027d78 <_kill_r+0x20>)
 8027d5c:	2300      	movs	r3, #0
 8027d5e:	4604      	mov	r4, r0
 8027d60:	4608      	mov	r0, r1
 8027d62:	4611      	mov	r1, r2
 8027d64:	602b      	str	r3, [r5, #0]
 8027d66:	f7f9 fd59 	bl	802181c <_kill>
 8027d6a:	1c43      	adds	r3, r0, #1
 8027d6c:	d102      	bne.n	8027d74 <_kill_r+0x1c>
 8027d6e:	682b      	ldr	r3, [r5, #0]
 8027d70:	b103      	cbz	r3, 8027d74 <_kill_r+0x1c>
 8027d72:	6023      	str	r3, [r4, #0]
 8027d74:	bd38      	pop	{r3, r4, r5, pc}
 8027d76:	bf00      	nop
 8027d78:	20000350 	.word	0x20000350

08027d7c <_getpid_r>:
 8027d7c:	f7f9 bd46 	b.w	802180c <_getpid>

08027d80 <__ascii_wctomb>:
 8027d80:	b149      	cbz	r1, 8027d96 <__ascii_wctomb+0x16>
 8027d82:	2aff      	cmp	r2, #255	; 0xff
 8027d84:	bf85      	ittet	hi
 8027d86:	238a      	movhi	r3, #138	; 0x8a
 8027d88:	6003      	strhi	r3, [r0, #0]
 8027d8a:	700a      	strbls	r2, [r1, #0]
 8027d8c:	f04f 30ff 	movhi.w	r0, #4294967295
 8027d90:	bf98      	it	ls
 8027d92:	2001      	movls	r0, #1
 8027d94:	4770      	bx	lr
 8027d96:	4608      	mov	r0, r1
 8027d98:	4770      	bx	lr
	...

08027d9c <_init>:
 8027d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027d9e:	bf00      	nop
 8027da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8027da2:	bc08      	pop	{r3}
 8027da4:	469e      	mov	lr, r3
 8027da6:	4770      	bx	lr

08027da8 <_fini>:
 8027da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027daa:	bf00      	nop
 8027dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8027dae:	bc08      	pop	{r3}
 8027db0:	469e      	mov	lr, r3
 8027db2:	4770      	bx	lr
